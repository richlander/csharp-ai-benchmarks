{"text":"Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].","code":"using System;\nusing System.Diagnostics;\n\nint MinCost(int[,] cost, int m, int n)\n{\n    int R = cost.GetLength(0);\n    int C = cost.GetLength(1);\n    int[,] tc = new int[R, C];\n    tc[0, 0] = cost[0, 0];\n    for (int i = 1; i \u003C= m; i\u002B\u002B)\n    {\n        tc[i, 0] = tc[i - 1, 0] \u002B cost[i, 0];\n    }\n    for (int j = 1; j \u003C= n; j\u002B\u002B)\n    {\n        tc[0, j] = tc[0, j - 1] \u002B cost[0, j];\n    }\n    for (int i = 1; i \u003C= m; i\u002B\u002B)\n    {\n        for (int j = 1; j \u003C= n; j\u002B\u002B)\n        {\n            tc[i, j] = Math.Min(tc[i - 1, j - 1], Math.Min(tc[i - 1, j], tc[i, j - 1])) \u002B cost[i, j];\n        }\n    }\n    return tc[m, n];\n}","task_id":1,"test_setup_code":"","test_list":["int[,] cost1 = new int[,] { { 1, 2, 3 }, { 4, 8, 2 }, { 1, 5, 3 } };\nDebug.Assert(MinCost(cost1, 2, 2) == 8);","int[,] cost2 = new int[,] { { 2, 3, 4 }, { 5, 9, 3 }, { 2, 6, 4 } };\nDebug.Assert(MinCost(cost2, 2, 2) == 12);","int[,] cost3 = new int[,] { { 3, 4, 5 }, { 6, 10, 4 }, { 3, 7, 5 } };\nDebug.Assert(MinCost(cost3, 2, 2) == 16);"],"challenge_test_list":[]}
{"text":"Write a function to find the similar elements from the given two tuple lists.","code":"using System;\nusing System.Linq;\nusing System.Diagnostics;\n\nint[] SimilarElements(int[] test_tup1, int[] test_tup2)\n{\n    var res = test_tup1.Intersect(test_tup2).ToArray();\n    Array.Sort(res);\n    return res;\n}","task_id":2,"test_setup_code":"","test_list":["Debug.Assert(SimilarElements(new int[]{3,4,5,6}, new int[]{5,7,4,10}).SequenceEqual(new int[]{4,5}));","Debug.Assert(SimilarElements(new int[]{1,2,3,4}, new int[]{5,4,3,7}).SequenceEqual(new int[]{3,4}));","Debug.Assert(SimilarElements(new int[]{11,12,14,13}, new int[]{17,15,14,13}).SequenceEqual(new int[]{13,14}));"],"challenge_test_list":[]}
{"text":"Write a C# function to identify non-prime numbers.","code":"using System;\nusing System.Diagnostics;\n\nbool IsNotPrime(int n)\n{\n    bool result = false;\n    for (int i = 2; i \u003C= (int)Math.Sqrt(n); i\u002B\u002B)\n    {\n        if (n % i == 0)\n        {\n            result = true;\n        }\n    }\n    return result;\n}","task_id":3,"test_setup_code":"","test_list":["bool test1 = IsNotPrime(2);\nDebug.Assert(test1 == false);","bool test2 = IsNotPrime(10);\nDebug.Assert(test2 == true);","bool test3 = IsNotPrime(35);\nDebug.Assert(test3 == true);"],"challenge_test_list":[]}
{"text":"Write a function to find the largest integers from a given list of numbers using heap queue algorithm.","code":"using System;\nusing System.Linq;\nusing System.Diagnostics;\n\nint[] HeapQueueLargest(int[] nums, int n)\n{\n    return nums.OrderByDescending(x =\u003E x).Take(n).ToArray();\n}","task_id":4,"test_setup_code":"","test_list":["Debug.Assert(HeapQueueLargest(new int[]{25,35,22,85,14,65,75,22,58}, 3).SequenceEqual(new int[]{85,75,65}));","Debug.Assert(HeapQueueLargest(new int[]{25,35,22,85,14,65,75,22,58}, 2).SequenceEqual(new int[]{85,75}));","Debug.Assert(HeapQueueLargest(new int[]{25,35,22,85,14,65,75,22,58}, 5).SequenceEqual(new int[]{85,75,65,58,35}));"],"challenge_test_list":[]}
{"text":"Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.","code":"using System;\nusing System.Diagnostics;\n\nint CountWays(int n)\n{\n    int[] A = new int[n \u002B 1];\n    int[] B = new int[n \u002B 1];\n    A[0] = 1;\n    if(n \u003E= 1)\n    {\n        A[1] = 0;\n    }\n    B[0] = 0;\n    if(n \u003E= 1)\n    {\n        B[1] = 1;\n    }\n    for (int i = 2; i \u003C= n; i\u002B\u002B)\n    {\n        A[i] = A[i - 2] \u002B 2 * B[i - 1];\n        B[i] = A[i - 1] \u002B B[i - 2];\n    }\n    return A[n];\n}","task_id":5,"test_setup_code":"","test_list":["Debug.Assert(CountWays(2) == 3);","Debug.Assert(CountWays(8) == 153);","Debug.Assert(CountWays(12) == 2131);"],"challenge_test_list":[]}
{"text":"Write a C# function to check whether the two numbers differ at one bit position only or not.","code":"using System;\nusing System.Diagnostics;\n\nbool IsPowerOfTwo(int x)\n{\n    return x != 0 \u0026\u0026 ((x \u0026 (x - 1)) == 0);\n}\n\nbool DifferAtOneBitPos(int a, int b)\n{\n    return IsPowerOfTwo(a ^ b);\n}","task_id":6,"test_setup_code":"","test_list":["Debug.Assert(DifferAtOneBitPos(13, 9) == true);","Debug.Assert(DifferAtOneBitPos(15, 8) == false);","Debug.Assert(DifferAtOneBitPos(2, 4) == false);"],"challenge_test_list":[]}
