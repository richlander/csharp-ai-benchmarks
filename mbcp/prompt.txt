The following JSON content includes Python code.

```json
{"text": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].", "code": "R = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]", "task_id": 1, "test_setup_code": "", "test_list": ["assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8", "assert min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) == 12", "assert min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) == 16"], "challenge_test_list": []}
```

The JSON document has the following properties (sometimes called "columns"):

- `text`: A string prompt for an AI, to generate code in a particular coding language.
- `code`: A string for the code that is considered a good or correct answer for the prompt in the given language. In this case, the language is Python.
- `task_id`: An integer for the ID for the document.
- `test_setup_code`: A string for code that must be run before `code` can be run. This is most often an empty string.
- `test_list`: An array of test code fragments.
- `challenge_test_list`: An array. It is most often an empty array. I'm not sure what this is for.

Variables:

- TASK_ID: Matches `task_id`.
- PROMPT: Matches `text`. Any reference to "Python" should be changed to "C#".
- NAME: A summary of `text`. Limit to 16 characters. Snake case is the preferred format.
- DESCRIPTION: A summary of `text`. Limit to 48 characters. Should use the same format as a git commit message, starting with a capital letter and not end with a period. 

Variables will be referenced with a leading "$", like "$PROMPT".

In the mbcp directory, create a new directory using $NAME as the directory name.

Three files should be generated from the JSON document:

- C# Program.cs file
- C# project file targeting .NET 9
- Markdown README.md file

C# requirements:

- C#: The Python code in `code` and `test_list` should be converted to C#.
- C# filename: "Program.cs".
- Project file: A project file targeting .NET 9.
- Project file filename: "$NAME.csproj".

The `test_list` code should be written in the following format:

```csharp
// Test case 1
int[,] cost1 = new int[,] { { 1, 2, 3 }, { 4, 8, 2 }, { 1, 5, 3 } };
int result1 = MinCost(cost1, 2, 2);
Console.WriteLine($"Result: {result1}, Expected: 8, Test Passed: {result1 == 8}");
Debug.Assert(result1 == 8, "Test case 1 failed")
```

- The method should be called with test data and assigned to a variable.
- The "Result", "Expected" value(s), and whether the test passed should be printed.
- An assert should validate that the expected value was calculated.
- Every program should include `using System.Diagnostics` at the top so that the tests can use `Debug.Assert` without fully qualifying the type name.

C# style requirements:

- Use top-level statements.
- Use interpolated strings for Console.WriteLine calls that include data from the program.
- Interpolated string expressions should include variables not method calls.
- No comments.

Markdown requirements:

- Markdown filename: `README.md`.
- Solution section: the generated C# method and any preamble code in a `csharp` code fence. It shouldn't include the tests.
- Tests section: each test should be in a `csharp` code fence, followed by a single line.
- Each test should be a `Debug.Assert` that includes a call to the generated method with the test data compared to the expected result. No assert message should be included.

Markdown style requirements:

- The generated markdown should be in a single `markdown` code fence using quadruple backticks.

The following text is a markdown template. The generated content should include start and end markdown backticks.

````markdown
# $TASK_ID -- $DESCRIPTION

$NAME

## Prompt

$PROMPT

## Solution

```csharp
// Solution here
```

## Tests

Note: Each test should be in its own code fence section.

```csharp
// test here
```
````

The "Note:" lines in the template should not be included in the final output.
