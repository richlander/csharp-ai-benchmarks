{"task_id":"0","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Check if in given list of numbers, are any two numbers closer to each other than\n        /// given threshold.\n        /// \u003E\u003E\u003E HasCloseElements([1.0, 2.0, 3.0], 0.5)\n        /// False\n        /// \u003E\u003E\u003E HasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n        /// True\n        /// \n        /// \u003C/summary\u003E\n        public static bool HasCloseElements (List\u003Cdouble\u003E numbers, double threshold) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = HasCloseElements(new List\u003Cdouble\u003E {1.0,2.0,3.9,4.0,5.0,2.2},0.3);\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = HasCloseElements(new List\u003Cdouble\u003E {1.0,2.0,3.9,4.0,5.0,2.2},0.05);\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = HasCloseElements(new List\u003Cdouble\u003E {1.0,2.0,5.9,4.0,5.0},0.95);\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = HasCloseElements(new List\u003Cdouble\u003E {1.0,2.0,5.9,4.0,5.0},0.8);\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = HasCloseElements(new List\u003Cdouble\u003E {1.0,2.0,3.0,4.0,5.0,2.0},0.1);\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = HasCloseElements(new List\u003Cdouble\u003E {1.1,2.2,3.1,4.1,5.1},1.0);\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = HasCloseElements(new List\u003Cdouble\u003E {1.1,2.2,3.1,4.1,5.1},0.5);\n            var expected7 = false;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Check if in given list of numbers, are any two numbers closer to each other than\ngiven threshold.\n\u003E\u003E\u003E has_close_elements([1.0, 2.0, 3.0], 0.5)\nFalse\n\u003E\u003E\u003E has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\nTrue\n","entry_point":"HasCloseElements","canonical_solution":null,"short-description":"Check if list has numbers closer than threshold","name":"check_close_nums"}
{"task_id":"1","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n        /// separate those group into separate strings and return the list of those.\n        /// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n        /// Ignore any spaces in the input string.\n        /// \u003E\u003E\u003E SeparateParenGroups(\u0027( ) (( )) (( )( ))\u0027)\n        /// [\u0027()\u0027, \u0027(())\u0027, \u0027(()())\u0027]\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cstring\u003E SeparateParenGroups (string paren_string) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SeparateParenGroups(\u0022(()()) ((())) () ((())()())\u0022);\n            var expected1 = new List\u003Cstring\u003E {\u0022(()())\u0022,\u0022((()))\u0022,\u0022()\u0022,\u0022((())()())\u0022};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = SeparateParenGroups(\u0022() (()) ((())) (((())))\u0022);\n            var expected2 = new List\u003Cstring\u003E {\u0022()\u0022,\u0022(())\u0022,\u0022((()))\u0022,\u0022(((())))\u0022};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = SeparateParenGroups(\u0022(()(())((())))\u0022);\n            var expected3 = new List\u003Cstring\u003E {\u0022(()(())((())))\u0022};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = SeparateParenGroups(\u0022( ) (( )) (( )( ))\u0022);\n            var expected4 = new List\u003Cstring\u003E {\u0022()\u0022,\u0022(())\u0022,\u0022(()())\u0022};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n\u003E\u003E\u003E separate_paren_groups(\u0027( ) (( )) (( )( ))\u0027)\n[\u0027()\u0027, \u0027(())\u0027, \u0027(()())\u0027]\n","entry_point":"SeparateParenGroups","canonical_solution":null,"short-description":"Separate balanced parentheses groups","name":"parse_parentheses"}
{"task_id":"2","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Given a positive floating point number, it can be decomposed into\n        /// and integer part (largest integer smaller than given number) and decimals\n        /// (leftover part always smaller than 1).\n        /// \n        /// Return the decimal part of the number.\n        /// \u003E\u003E\u003E TruncateNumber(3.5)\n        /// 0.5\n        /// \n        /// \u003C/summary\u003E\n        public static double TruncateNumber (double number) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = TruncateNumber(3.5);\n            var expected1 = 0.5;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = TruncateNumber(1.33);\n            var expected2 = 0.33000000000000007;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = TruncateNumber(123.456);\n            var expected3 = 0.45600000000000307;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the decimal part of the number.\n\u003E\u003E\u003E truncate_number(3.5)\n0.5\n","entry_point":"TruncateNumber","canonical_solution":null,"short-description":"Find the decimal part of a number","name":"return_decimal"}
{"task_id":"3","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// You\u0027re given a list of deposit and withdrawal operations on a bank account that starts with\n        /// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n        /// at that point function should return True. Otherwise it should return False.\n        /// \u003E\u003E\u003E BelowZero([1, 2, 3])\n        /// False\n        /// \u003E\u003E\u003E BelowZero([1, 2, -4, 5])\n        /// True\n        /// \n        /// \u003C/summary\u003E\n        public static bool BelowZero (List\u003Cint\u003E operations) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = BelowZero(new List\u003Cint\u003E {});\n            var expected1 = false;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = BelowZero(new List\u003Cint\u003E {1,2,-3,1,2,-3});\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = BelowZero(new List\u003Cint\u003E {1,2,-4,5,6});\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = BelowZero(new List\u003Cint\u003E {1,-1,2,-2,5,-5,4,-4});\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = BelowZero(new List\u003Cint\u003E {1,-1,2,-2,5,-5,4,-5});\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = BelowZero(new List\u003Cint\u003E {1,-2,2,-2,5,-5,4,-4});\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"You\u0027re given a list of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\nat that point function should return True. Otherwise it should return False.\n\u003E\u003E\u003E below_zero([1, 2, 3])\nFalse\n\u003E\u003E\u003E below_zero([1, 2, -4, 5])\nTrue\n","entry_point":"BelowZero","canonical_solution":null,"short-description":"Detect if account balance falls below zero","name":"detect_overdraft"}
{"task_id":"4","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// For a given list of input numbers, calculate Mean Absolute Deviation\n        /// around the mean of this dataset.\n        /// Mean Absolute Deviation is the average absolute difference between each\n        /// element and a centerpoint (mean in this case):\n        /// MAD = average | x - x_mean |\n        /// \u003E\u003E\u003E MeanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n        /// 1.0\n        /// \n        /// \u003C/summary\u003E\n        public static double MeanAbsoluteDeviation (List\u003Cdouble\u003E numbers) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = MeanAbsoluteDeviation(new List\u003Cdouble\u003E {1.0,2.0,3.0});\n            var expected1 = 0.6666666666666666;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = MeanAbsoluteDeviation(new List\u003Cdouble\u003E {1.0,2.0,3.0,4.0});\n            var expected2 = 1.0;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = MeanAbsoluteDeviation(new List\u003Cdouble\u003E {1.0,2.0,3.0,4.0,5.0});\n            var expected3 = 1.2;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"For a given list of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n\u003E\u003E\u003E mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0\n","entry_point":"MeanAbsoluteDeviation","canonical_solution":null,"short-description":"Calculate Mean Absolute Deviation","name":"calculate_mad"}
{"task_id":"5","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Insert a number \u0027delimeter\u0027 between every two consecutive elements of input list \u0060numbers\u0027\n        /// \u003E\u003E\u003E Intersperse([], 4)\n        /// []\n        /// \u003E\u003E\u003E Intersperse([1, 2, 3], 4)\n        /// [1, 4, 2, 4, 3]\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cint\u003E Intersperse (List\u003Cint\u003E numbers, int delimeter) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Intersperse(new List\u003Cint\u003E {},7);\n            var expected1 = new List\u003Cint\u003E {};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = Intersperse(new List\u003Cint\u003E {5,6,3,2},8);\n            var expected2 = new List\u003Cint\u003E {5,8,6,8,3,8,2};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = Intersperse(new List\u003Cint\u003E {2,2,2},2);\n            var expected3 = new List\u003Cint\u003E {2,2,2,2,2};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Insert a number \u0027delimeter\u0027 between every two consecutive elements of input list \u0060numbers\u0027\n\u003E\u003E\u003E intersperse([], 4)\n[]\n\u003E\u003E\u003E intersperse([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n","entry_point":"Intersperse","canonical_solution":null,"short-description":"Add delimiter between list elements","name":"add_delimiters"}
{"task_id":"6","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n        /// For each of the group, output the deepest level of nesting of parentheses.\n        /// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n        /// \n        /// \u003E\u003E\u003E ParseNestedParens(\u0027(()()) ((())) () ((())()())\u0027)\n        /// [2, 3, 1, 3]\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cint\u003E ParseNestedParens (string paren_string) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = ParseNestedParens(\u0022(()()) ((())) () ((())()())\u0022);\n            var expected1 = new List\u003Cint\u003E {2,3,1,3};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = ParseNestedParens(\u0022() (()) ((())) (((())))\u0022);\n            var expected2 = new List\u003Cint\u003E {1,2,3,4};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = ParseNestedParens(\u0022(()(())((())))\u0022);\n            var expected3 = new List\u003Cint\u003E {4};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\u003E\u003E\u003E parse_nested_parens(\u0027(()()) ((())) () ((())()())\u0027)\n[2, 3, 1, 3]\n","entry_point":"ParseNestedParens","canonical_solution":null,"short-description":"Find max nesting for each parentheses group","name":"find_nesting_levels"}
{"task_id":"7","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Filter an input list of strings only for ones that contain given substring\n        /// \u003E\u003E\u003E FilterBySubstring([], \u0027a\u0027)\n        /// []\n        /// \u003E\u003E\u003E FilterBySubstring([\u0027abc\u0027, \u0027bacd\u0027, \u0027cde\u0027, \u0027array\u0027], \u0027a\u0027)\n        /// [\u0027abc\u0027, \u0027bacd\u0027, \u0027array\u0027]\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cstring\u003E FilterBySubstring (List\u003Cstring\u003E strings, string substring) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = FilterBySubstring(new List\u003Cstring\u003E {},\u0022john\u0022);\n            var expected1 = new List\u003Cstring\u003E {};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = FilterBySubstring(new List\u003Cstring\u003E {\u0022xxx\u0022,\u0022asd\u0022,\u0022xxy\u0022,\u0022john doe\u0022,\u0022xxxAAA\u0022,\u0022xxx\u0022},\u0022xxx\u0022);\n            var expected2 = new List\u003Cstring\u003E {\u0022xxx\u0022,\u0022xxxAAA\u0022,\u0022xxx\u0022};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = FilterBySubstring(new List\u003Cstring\u003E {\u0022xxx\u0022,\u0022asd\u0022,\u0022aaaxxy\u0022,\u0022john doe\u0022,\u0022xxxAAA\u0022,\u0022xxx\u0022},\u0022xx\u0022);\n            var expected3 = new List\u003Cstring\u003E {\u0022xxx\u0022,\u0022aaaxxy\u0022,\u0022xxxAAA\u0022,\u0022xxx\u0022};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = FilterBySubstring(new List\u003Cstring\u003E {\u0022grunt\u0022,\u0022trumpet\u0022,\u0022prune\u0022,\u0022gruesome\u0022},\u0022run\u0022);\n            var expected4 = new List\u003Cstring\u003E {\u0022grunt\u0022,\u0022prune\u0022};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Filter an input list of strings only for ones that contain given substring\n\u003E\u003E\u003E filter_by_substring([], \u0027a\u0027)\n[]\n\u003E\u003E\u003E filter_by_substring([\u0027abc\u0027, \u0027bacd\u0027, \u0027cde\u0027, \u0027array\u0027], \u0027a\u0027)\n[\u0027abc\u0027, \u0027bacd\u0027, \u0027array\u0027]\n","entry_point":"FilterBySubstring","canonical_solution":null,"short-description":"Filter list by strings containing substring","name":"find_strings_by_substring"}
{"task_id":"8","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n        /// Empty sum should be equal to 0 and empty product should be equal to 1.\n        /// \u003E\u003E\u003E SumProduct([])\n        /// (0, 1)\n        /// \u003E\u003E\u003E SumProduct([1, 2, 3, 4])\n        /// (10, 24)\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cint\u003E SumProduct (List\u003Cint\u003E numbers) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SumProduct(new List\u003Cint\u003E {});\n            var expected1 = new List\u003Cint\u003E {0,1};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = SumProduct(new List\u003Cint\u003E {1,1,1});\n            var expected2 = new List\u003Cint\u003E {3,1};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = SumProduct(new List\u003Cint\u003E {100,0});\n            var expected3 = new List\u003Cint\u003E {100,0};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = SumProduct(new List\u003Cint\u003E {3,5,7});\n            var expected4 = new List\u003Cint\u003E {15,105};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = SumProduct(new List\u003Cint\u003E {10});\n            var expected5 = new List\u003Cint\u003E {10,10};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n\u003E\u003E\u003E sum_product([])\n(0, 1)\n\u003E\u003E\u003E sum_product([1, 2, 3, 4])\n(10, 24)\n","entry_point":"SumProduct","canonical_solution":null,"short-description":"Sum and product of list integers","name":"return_sum,_prod"}
{"task_id":"9","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// From a given list of integers, generate a list of rolling maximum element found until given moment\n        /// in the sequence.\n        /// \u003E\u003E\u003E RollingMax([1, 2, 3, 2, 3, 4, 2])\n        /// [1, 2, 3, 3, 3, 4, 4]\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cint\u003E RollingMax (List\u003Cint\u003E numbers) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = RollingMax(new List\u003Cint\u003E {});\n            var expected1 = new List\u003Cint\u003E {};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = RollingMax(new List\u003Cint\u003E {1,2,3,4});\n            var expected2 = new List\u003Cint\u003E {1,2,3,4};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = RollingMax(new List\u003Cint\u003E {4,3,2,1});\n            var expected3 = new List\u003Cint\u003E {4,4,4,4};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = RollingMax(new List\u003Cint\u003E {3,2,3,100,3});\n            var expected4 = new List\u003Cint\u003E {3,3,3,100,100};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"From a given list of integers, generate a list of rolling maximum element found until given moment\nin the sequence.\n\u003E\u003E\u003E rolling_max([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n","entry_point":"RollingMax","canonical_solution":null,"short-description":"List rolling max from integer sequence","name":"rolling_max_list"}
{"task_id":"10","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Find the shortest palindrome that begins with a supplied string.\n        /// Algorithm idea is simple:\n        /// - Find the longest postfix of supplied string that is a palindrome.\n        /// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n        /// \u003E\u003E\u003E MakePalindrome(\u0027\u0027)\n        /// \u0027\u0027\n        /// \u003E\u003E\u003E MakePalindrome(\u0027cat\u0027)\n        /// \u0027catac\u0027\n        /// \u003E\u003E\u003E MakePalindrome(\u0027cata\u0027)\n        /// \u0027catac\u0027\n        /// \n        /// \u003C/summary\u003E\n        public static string MakePalindrome (string string0) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = MakePalindrome(\u0022\u0022);\n            var expected1 = \u0022\u0022;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = MakePalindrome(\u0022x\u0022);\n            var expected2 = \u0022x\u0022;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = MakePalindrome(\u0022xyz\u0022);\n            var expected3 = \u0022xyzyx\u0022;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = MakePalindrome(\u0022xyx\u0022);\n            var expected4 = \u0022xyx\u0022;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = MakePalindrome(\u0022jerry\u0022);\n            var expected5 = \u0022jerryrrej\u0022;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Find the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n\u003E\u003E\u003E make_palindrome(\u0027\u0027)\n\u0027\u0027\n\u003E\u003E\u003E make_palindrome(\u0027cat\u0027)\n\u0027catac\u0027\n\u003E\u003E\u003E make_palindrome(\u0027cata\u0027)\n\u0027catac\u0027\n","entry_point":"MakePalindrome","canonical_solution":null,"short-description":"Find shortest palindrome starting with input","name":"shortest_palindrome"}
{"task_id":"11","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Input are two strings a and b consisting only of 1s and 0s.\n        /// Perform binary XOR on these inputs and return result also as a string.\n        /// \u003E\u003E\u003E StringXor(\u0027010\u0027, \u0027110\u0027)\n        /// \u0027100\u0027\n        /// \n        /// \u003C/summary\u003E\n        public static string StringXor (string a, string b) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = StringXor(\u0022111000\u0022,\u0022101010\u0022);\n            var expected1 = \u0022010010\u0022;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = StringXor(\u00221\u0022,\u00221\u0022);\n            var expected2 = \u00220\u0022;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = StringXor(\u00220101\u0022,\u00220000\u0022);\n            var expected3 = \u00220101\u0022;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Input are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n\u003E\u003E\u003E string_xor(\u0027010\u0027, \u0027110\u0027)\n\u0027100\u0027\n","entry_point":"StringXor","canonical_solution":null,"short-description":"Binary XOR two strings of 1s and 0s","name":"binary_xor"}
{"task_id":"12","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Out of list of strings, return the Longest one. Return the first one in case of multiple\n        /// strings of the same length. Return None in case the input list is empty.\n        /// \u003E\u003E\u003E Longest([])\n        /// \n        /// \u003E\u003E\u003E Longest([\u0027a\u0027, \u0027b\u0027, \u0027c\u0027])\n        /// \u0027a\u0027\n        /// \u003E\u003E\u003E Longest([\u0027a\u0027, \u0027bb\u0027, \u0027ccc\u0027])\n        /// \u0027ccc\u0027\n        /// \n        /// \u003C/summary\u003E\n        public static object Longest (List\u003Cstring\u003E strings) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Longest(new List\u003Cstring\u003E {});\n            var expected1 = null;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = Longest(new List\u003Cstring\u003E {\u0022x\u0022,\u0022y\u0022,\u0022z\u0022});\n            var expected2 = \u0022x\u0022;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = Longest(new List\u003Cstring\u003E {\u0022x\u0022,\u0022yyy\u0022,\u0022zzzz\u0022,\u0022www\u0022,\u0022kkkk\u0022,\u0022abc\u0022});\n            var expected3 = \u0022zzzz\u0022;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Out of list of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input list is empty.\n\u003E\u003E\u003E longest([])\n\n\u003E\u003E\u003E longest([\u0027a\u0027, \u0027b\u0027, \u0027c\u0027])\n\u0027a\u0027\n\u003E\u003E\u003E longest([\u0027a\u0027, \u0027bb\u0027, \u0027ccc\u0027])\n\u0027ccc\u0027\n","entry_point":"Longest","canonical_solution":null,"short-description":"Return longest string from a list","name":"find_longest_string"}
{"task_id":"13","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Return a greatest common divisor of two integers a and b\n        /// \u003E\u003E\u003E GreatestCommonDivisor(3, 5)\n        /// 1\n        /// \u003E\u003E\u003E GreatestCommonDivisor(25, 15)\n        /// 5\n        /// \n        /// \u003C/summary\u003E\n        public static int GreatestCommonDivisor (int a, int b) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = GreatestCommonDivisor(3,7);\n            var expected1 = 1;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = GreatestCommonDivisor(10,15);\n            var expected2 = 5;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = GreatestCommonDivisor(49,14);\n            var expected3 = 7;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = GreatestCommonDivisor(144,60);\n            var expected4 = 12;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Return a greatest common divisor of two integers a and b\n\u003E\u003E\u003E greatest_common_divisor(3, 5)\n1\n\u003E\u003E\u003E greatest_common_divisor(25, 15)\n5\n","entry_point":"GreatestCommonDivisor","canonical_solution":null,"short-description":"Function to find GCD of two integers","name":"gcd_calculation"}
{"task_id":"14","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Return list of all prefixes from shortest to longest of the input string\n        /// \u003E\u003E\u003E AllPrefixes(\u0027abc\u0027)\n        /// [\u0027a\u0027, \u0027ab\u0027, \u0027abc\u0027]\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cstring\u003E AllPrefixes (string string0) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = AllPrefixes(\u0022\u0022);\n            var expected1 = new List\u003Cstring\u003E {};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = AllPrefixes(\u0022asdfgh\u0022);\n            var expected2 = new List\u003Cstring\u003E {\u0022a\u0022,\u0022as\u0022,\u0022asd\u0022,\u0022asdf\u0022,\u0022asdfg\u0022,\u0022asdfgh\u0022};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = AllPrefixes(\u0022WWW\u0022);\n            var expected3 = new List\u003Cstring\u003E {\u0022W\u0022,\u0022WW\u0022,\u0022WWW\u0022};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Return list of all prefixes from shortest to longest of the input string\n\u003E\u003E\u003E all_prefixes(\u0027abc\u0027)\n[\u0027a\u0027, \u0027ab\u0027, \u0027abc\u0027]\n","entry_point":"AllPrefixes","canonical_solution":null,"short-description":"Generate list of string prefixes","name":"all_string_prefixes"}
{"task_id":"15","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n        /// \u003E\u003E\u003E StringSequence(0)\n        /// \u00270\u0027\n        /// \u003E\u003E\u003E StringSequence(5)\n        /// \u00270 1 2 3 4 5\u0027\n        /// \n        /// \u003C/summary\u003E\n        public static string StringSequence (int n) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = StringSequence(0);\n            var expected1 = \u00220\u0022;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = StringSequence(3);\n            var expected2 = \u00220 1 2 3\u0022;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = StringSequence(10);\n            var expected3 = \u00220 1 2 3 4 5 6 7 8 9 10\u0022;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\u003E\u003E\u003E string_sequence(0)\n\u00270\u0027\n\u003E\u003E\u003E string_sequence(5)\n\u00270 1 2 3 4 5\u0027\n","entry_point":"StringSequence","canonical_solution":null,"short-description":"Space-delimited numbers from 0 to n","name":"numbers_0_to_n"}
{"task_id":"16","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Given a string, find out how many distinct characters (regardless of case) does it consist of\n        /// \u003E\u003E\u003E CountDistinctCharacters(\u0027xyzXYZ\u0027)\n        /// 3\n        /// \u003E\u003E\u003E CountDistinctCharacters(\u0027Jerry\u0027)\n        /// 4\n        /// \n        /// \u003C/summary\u003E\n        public static int CountDistinctCharacters (string string0) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = CountDistinctCharacters(\u0022\u0022);\n            var expected1 = 0;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = CountDistinctCharacters(\u0022abcde\u0022);\n            var expected2 = 5;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = CountDistinctCharacters(\u0022abcdecadeCADE\u0022);\n            var expected3 = 5;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = CountDistinctCharacters(\u0022aaaaAAAAaaaa\u0022);\n            var expected4 = 1;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = CountDistinctCharacters(\u0022Jerry jERRY JeRRRY\u0022);\n            var expected5 = 5;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Given a string, find out how many distinct characters (regardless of case) does it consist of\n\u003E\u003E\u003E count_distinct_characters(\u0027xyzXYZ\u0027)\n3\n\u003E\u003E\u003E count_distinct_characters(\u0027Jerry\u0027)\n4\n","entry_point":"CountDistinctCharacters","canonical_solution":null,"short-description":"Count distinct case-insensitive characters","name":"distinct_chars"}
{"task_id":"17","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Input to this function is a string representing musical notes in a special ASCII format.\n        /// Your task is to parse this string and return list of integers corresponding to how many beats does each\n        /// not last.\n        /// \n        /// Here is a legend:\n        /// \u0027o\u0027 - whole note, lasts four beats\n        /// \u0027o|\u0027 - half note, lasts two beats\n        /// \u0027.|\u0027 - quater note, lasts one beat\n        /// \n        /// \u003E\u003E\u003E ParseMusic(\u0027o o| .| o| o| .| .| .| .| o o\u0027)\n        /// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cint\u003E ParseMusic (string music_string) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = ParseMusic(\u0022\u0022);\n            var expected1 = new List\u003Cint\u003E {};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = ParseMusic(\u0022o o o o\u0022);\n            var expected2 = new List\u003Cint\u003E {4,4,4,4};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = ParseMusic(\u0022.| .| .| .|\u0022);\n            var expected3 = new List\u003Cint\u003E {1,1,1,1};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = ParseMusic(\u0022o| o| .| .| o o o o\u0022);\n            var expected4 = new List\u003Cint\u003E {2,2,1,1,4,4,4,4};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = ParseMusic(\u0022o| .| o| .| o o| o o|\u0022);\n            var expected5 = new List\u003Cint\u003E {2,1,2,1,4,2,4,2};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Input to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return list of integers corresponding to how many beats does each\nnot last.\n\nHere is a legend:\n\u0027o\u0027 - whole note, lasts four beats\n\u0027o|\u0027 - half note, lasts two beats\n\u0027.|\u0027 - quater note, lasts one beat\n\n\u003E\u003E\u003E parse_music(\u0027o o| .| o| o| .| .| .| .| o o\u0027)\n[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n","entry_point":"ParseMusic","canonical_solution":null,"short-description":"Convert musical notes string to beat counts","name":"parse_music"}
{"task_id":"18","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Find how many times a given substring can be found in the original string. Count overlaping cases.\n        /// \u003E\u003E\u003E HowManyTimes(\u0027\u0027, \u0027a\u0027)\n        /// 0\n        /// \u003E\u003E\u003E HowManyTimes(\u0027aaa\u0027, \u0027a\u0027)\n        /// 3\n        /// \u003E\u003E\u003E HowManyTimes(\u0027aaaa\u0027, \u0027aa\u0027)\n        /// 3\n        /// \n        /// \u003C/summary\u003E\n        public static int HowManyTimes (string string0, string substring) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = HowManyTimes(\u0022\u0022,\u0022x\u0022);\n            var expected1 = 0;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = HowManyTimes(\u0022xyxyxyx\u0022,\u0022x\u0022);\n            var expected2 = 4;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = HowManyTimes(\u0022cacacacac\u0022,\u0022cac\u0022);\n            var expected3 = 4;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = HowManyTimes(\u0022john doe\u0022,\u0022john\u0022);\n            var expected4 = 1;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Find how many times a given substring can be found in the original string. Count overlaping cases.\n\u003E\u003E\u003E how_many_times(\u0027\u0027, \u0027a\u0027)\n0\n\u003E\u003E\u003E how_many_times(\u0027aaa\u0027, \u0027a\u0027)\n3\n\u003E\u003E\u003E how_many_times(\u0027aaaa\u0027, \u0027aa\u0027)\n3\n","entry_point":"HowManyTimes","canonical_solution":null,"short-description":"Count overlapping substrings in a string","name":"count_substrings"}
{"task_id":"19","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Input is a space-delimited string of numberals from \u0027zero\u0027 to \u0027nine\u0027.\n        /// Valid choices are \u0027zero\u0027, \u0027one\u0027, \u0027two\u0027, \u0027three\u0027, \u0027four\u0027, \u0027five\u0027, \u0027six\u0027, \u0027seven\u0027, \u0027eight\u0027 and \u0027nine\u0027.\n        /// Return the string with numbers sorted from smallest to largest\n        /// \u003E\u003E\u003E SortNumbers(\u0027three one five\u0027)\n        /// \u0027one three five\u0027\n        /// \n        /// \u003C/summary\u003E\n        public static string SortNumbers (string numbers) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SortNumbers(\u0022\u0022);\n            var expected1 = \u0022\u0022;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = SortNumbers(\u0022three\u0022);\n            var expected2 = \u0022three\u0022;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = SortNumbers(\u0022three five nine\u0022);\n            var expected3 = \u0022three five nine\u0022;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = SortNumbers(\u0022five zero four seven nine eight\u0022);\n            var expected4 = \u0022zero four five seven eight nine\u0022;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = SortNumbers(\u0022six five four three two one zero\u0022);\n            var expected5 = \u0022zero one two three four five six\u0022;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Input is a space-delimited string of numberals from \u0027zero\u0027 to \u0027nine\u0027.\nValid choices are \u0027zero\u0027, \u0027one\u0027, \u0027two\u0027, \u0027three\u0027, \u0027four\u0027, \u0027five\u0027, \u0027six\u0027, \u0027seven\u0027, \u0027eight\u0027 and \u0027nine\u0027.\nReturn the string with numbers sorted from smallest to largest\n\u003E\u003E\u003E sort_numbers(\u0027three one five\u0027)\n\u0027one three five\u0027\n","entry_point":"SortNumbers","canonical_solution":null,"short-description":"Sort space-delimited numerals alphabetically","name":"sort_numerals"}
{"task_id":"20","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n        /// other and return them in order (smaller number, larger number).\n        /// \u003E\u003E\u003E FindClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n        /// (2.0, 2.2)\n        /// \u003E\u003E\u003E FindClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n        /// (2.0, 2.0)\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cdouble\u003E FindClosestElements (List\u003Cdouble\u003E numbers) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = FindClosestElements(new List\u003Cdouble\u003E {1.0,2.0,3.9,4.0,5.0,2.2});\n            var expected1 = new List\u003Cdouble\u003E {3.9,4.0};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = FindClosestElements(new List\u003Cdouble\u003E {1.0,2.0,5.9,4.0,5.0});\n            var expected2 = new List\u003Cdouble\u003E {5.0,5.9};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = FindClosestElements(new List\u003Cdouble\u003E {1.0,2.0,3.0,4.0,5.0,2.2});\n            var expected3 = new List\u003Cdouble\u003E {2.0,2.2};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = FindClosestElements(new List\u003Cdouble\u003E {1.0,2.0,3.0,4.0,5.0,2.0});\n            var expected4 = new List\u003Cdouble\u003E {2.0,2.0};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = FindClosestElements(new List\u003Cdouble\u003E {1.1,2.2,3.1,4.1,5.1});\n            var expected5 = new List\u003Cdouble\u003E {2.2,3.1};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"From a supplied list of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n\u003E\u003E\u003E find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n(2.0, 2.2)\n\u003E\u003E\u003E find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n(2.0, 2.0)\n","entry_point":"FindClosestElements","canonical_solution":null,"short-description":"Find and return two closest numbers","name":"find_closest"}
{"task_id":"21","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Given list of numbers (of at least two elements), apply a linear transform to that list,\n        /// such that the smallest number will become 0 and the largest will become 1\n        /// \u003E\u003E\u003E RescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n        /// [0.0, 0.25, 0.5, 0.75, 1.0]\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cdouble\u003E RescaleToUnit (List\u003Cdouble\u003E numbers) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = RescaleToUnit(new List\u003Cdouble\u003E {2.0,49.9});\n            var expected1 = new List\u003Cdouble\u003E {0.0,1.0};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = RescaleToUnit(new List\u003Cdouble\u003E {100.0,49.9});\n            var expected2 = new List\u003Cdouble\u003E {1.0,0.0};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = RescaleToUnit(new List\u003Cdouble\u003E {1.0,2.0,3.0,4.0,5.0});\n            var expected3 = new List\u003Cdouble\u003E {0.0,0.25,0.5,0.75,1.0};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = RescaleToUnit(new List\u003Cdouble\u003E {2.0,1.0,5.0,3.0,4.0});\n            var expected4 = new List\u003Cdouble\u003E {0.25,0.0,1.0,0.5,0.75};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = RescaleToUnit(new List\u003Cdouble\u003E {12.0,11.0,15.0,13.0,14.0});\n            var expected5 = new List\u003Cdouble\u003E {0.25,0.0,1.0,0.5,0.75};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Given list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n\u003E\u003E\u003E rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n","entry_point":"RescaleToUnit","canonical_solution":null,"short-description":"Rescale numbers to range 0 to 1","name":"rescale_to_unit"}
{"task_id":"22","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Filter given list of any python values only for integers\n        /// \u003E\u003E\u003E FilterIntegers([\u0027a\u0027, 3.14, 5])\n        /// [5]\n        /// \u003E\u003E\u003E FilterIntegers([1, 2, 3, \u0027abc\u0027, {}, []])\n        /// [1, 2, 3]\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cint\u003E FilterIntegers (List\u003Cobject\u003E values) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = FilterIntegers(new List\u003Cobject\u003E {});\n            var expected1 = new List\u003Cint\u003E {};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = FilterIntegers(new List\u003Cobject\u003E {4,new object {},new List\u003Cobject\u003E {},23.2,9,\u0022adasd\u0022});\n            var expected2 = new List\u003Cint\u003E {4,9};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = FilterIntegers(new List\u003Cobject\u003E {3,\u0022c\u0022,3,3,\u0022a\u0022,\u0022b\u0022});\n            var expected3 = new List\u003Cint\u003E {3,3,3};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Filter given list of any python values only for integers\n\u003E\u003E\u003E filter_integers([\u0027a\u0027, 3.14, 5])\n[5]\n\u003E\u003E\u003E filter_integers([1, 2, 3, \u0027abc\u0027, {}, []])\n[1, 2, 3]\n","entry_point":"FilterIntegers","canonical_solution":null,"short-description":"Extract integers from a list","name":"filter_integers"}
{"task_id":"23","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Return length of given string\n        /// \u003E\u003E\u003E Strlen(\u0027\u0027)\n        /// 0\n        /// \u003E\u003E\u003E Strlen(\u0027abc\u0027)\n        /// 3\n        /// \n        /// \u003C/summary\u003E\n        public static int Strlen (string string0) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Strlen(\u0022\u0022);\n            var expected1 = 0;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = Strlen(\u0022x\u0022);\n            var expected2 = 1;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = Strlen(\u0022asdasnakj\u0022);\n            var expected3 = 9;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Return length of given string\n\u003E\u003E\u003E strlen(\u0027\u0027)\n0\n\u003E\u003E\u003E strlen(\u0027abc\u0027)\n3\n","entry_point":"Strlen","canonical_solution":null,"short-description":"Get string length via \u0060strlen\u0060 function","name":"string_length"}
{"task_id":"24","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// For a given number n, find the largest number that divides n evenly, smaller than n\n        /// \u003E\u003E\u003E LargestDivisor(15)\n        /// 5\n        /// \n        /// \u003C/summary\u003E\n        public static int LargestDivisor (int n) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = LargestDivisor(3);\n            var expected1 = 1;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = LargestDivisor(7);\n            var expected2 = 1;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = LargestDivisor(10);\n            var expected3 = 5;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = LargestDivisor(100);\n            var expected4 = 50;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = LargestDivisor(49);\n            var expected5 = 7;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"For a given number n, find the largest number that divides n evenly, smaller than n\n\u003E\u003E\u003E largest_divisor(15)\n5\n","entry_point":"LargestDivisor","canonical_solution":null,"short-description":"Find the largest divisor of n \u003C n","name":"largest_divisor"}
{"task_id":"25","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Return list of prime factors of given integer in the order from smallest to largest.\n        /// Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n        /// Input number should be equal to the product of all factors\n        /// \u003E\u003E\u003E Factorize(8)\n        /// [2, 2, 2]\n        /// \u003E\u003E\u003E Factorize(25)\n        /// [5, 5]\n        /// \u003E\u003E\u003E Factorize(70)\n        /// [2, 5, 7]\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cint\u003E Factorize (int n) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Factorize(2);\n            var expected1 = new List\u003Cint\u003E {2};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = Factorize(4);\n            var expected2 = new List\u003Cint\u003E {2,2};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = Factorize(8);\n            var expected3 = new List\u003Cint\u003E {2,2,2};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = Factorize(57);\n            var expected4 = new List\u003Cint\u003E {3,19};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = Factorize(3249);\n            var expected5 = new List\u003Cint\u003E {3,3,19,19};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = Factorize(185193);\n            var expected6 = new List\u003Cint\u003E {3,3,3,19,19,19};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = Factorize(20577);\n            var expected7 = new List\u003Cint\u003E {3,19,19,19};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = Factorize(18);\n            var expected8 = new List\u003Cint\u003E {2,3,3};\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Return list of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n\u003E\u003E\u003E factorize(8)\n[2, 2, 2]\n\u003E\u003E\u003E factorize(25)\n[5, 5]\n\u003E\u003E\u003E factorize(70)\n[2, 5, 7]\n","entry_point":"Factorize","canonical_solution":null,"short-description":"List prime factors by frequency","name":"prime_factor_list"}
{"task_id":"26","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// From a list of integers, remove all elements that occur more than once.\n        /// Keep order of elements left the same as in the input.\n        /// \u003E\u003E\u003E RemoveDuplicates([1, 2, 3, 2, 4])\n        /// [1, 3, 4]\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cint\u003E RemoveDuplicates (List\u003Cint\u003E numbers) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = RemoveDuplicates(new List\u003Cint\u003E {});\n            var expected1 = new List\u003Cint\u003E {};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = RemoveDuplicates(new List\u003Cint\u003E {1,2,3,4});\n            var expected2 = new List\u003Cint\u003E {1,2,3,4};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = RemoveDuplicates(new List\u003Cint\u003E {1,2,3,2,4,3,5});\n            var expected3 = new List\u003Cint\u003E {1,4,5};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"From a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n\u003E\u003E\u003E remove_duplicates([1, 2, 3, 2, 4])\n[1, 3, 4]\n","entry_point":"RemoveDuplicates","canonical_solution":null,"short-description":"Remove duplicates, keep order intact","name":"uniq_elements"}
{"task_id":"27","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n        /// \u003E\u003E\u003E FlipCase(\u0027Hello\u0027)\n        /// \u0027hELLO\u0027\n        /// \n        /// \u003C/summary\u003E\n        public static string FlipCase (string string0) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = FlipCase(\u0022\u0022);\n            var expected1 = \u0022\u0022;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = FlipCase(\u0022Hello!\u0022);\n            var expected2 = \u0022hELLO!\u0022;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = FlipCase(\u0022These violent delights have violent ends\u0022);\n            var expected3 = \u0022tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\u0022;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n\u003E\u003E\u003E flip_case(\u0027Hello\u0027)\n\u0027hELLO\u0027\n","entry_point":"FlipCase","canonical_solution":null,"short-description":"Reverse case of each character","name":"case_flip_string"}
{"task_id":"28","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Concatenate list of strings into a single string\n        /// \u003E\u003E\u003E Concatenate([])\n        /// \u0027\u0027\n        /// \u003E\u003E\u003E Concatenate([\u0027a\u0027, \u0027b\u0027, \u0027c\u0027])\n        /// \u0027abc\u0027\n        /// \n        /// \u003C/summary\u003E\n        public static string Concatenate (List\u003Cstring\u003E strings) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Concatenate(new List\u003Cstring\u003E {});\n            var expected1 = \u0022\u0022;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = Concatenate(new List\u003Cstring\u003E {\u0022x\u0022,\u0022y\u0022,\u0022z\u0022});\n            var expected2 = \u0022xyz\u0022;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = Concatenate(new List\u003Cstring\u003E {\u0022x\u0022,\u0022y\u0022,\u0022z\u0022,\u0022w\u0022,\u0022k\u0022});\n            var expected3 = \u0022xyzwk\u0022;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Concatenate list of strings into a single string\n\u003E\u003E\u003E concatenate([])\n\u0027\u0027\n\u003E\u003E\u003E concatenate([\u0027a\u0027, \u0027b\u0027, \u0027c\u0027])\n\u0027abc\u0027\n","entry_point":"Concatenate","canonical_solution":null,"short-description":"Combine list of strings into one string","name":"join_strings"}
{"task_id":"29","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Filter an input list of strings only for ones that start with a given prefix.\n        /// \u003E\u003E\u003E FilterByPrefix([], \u0027a\u0027)\n        /// []\n        /// \u003E\u003E\u003E FilterByPrefix([\u0027abc\u0027, \u0027bcd\u0027, \u0027cde\u0027, \u0027array\u0027], \u0027a\u0027)\n        /// [\u0027abc\u0027, \u0027array\u0027]\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cstring\u003E FilterByPrefix (List\u003Cstring\u003E strings, string prefix) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = FilterByPrefix(new List\u003Cstring\u003E {},\u0022john\u0022);\n            var expected1 = new List\u003Cstring\u003E {};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = FilterByPrefix(new List\u003Cstring\u003E {\u0022xxx\u0022,\u0022asd\u0022,\u0022xxy\u0022,\u0022john doe\u0022,\u0022xxxAAA\u0022,\u0022xxx\u0022},\u0022xxx\u0022);\n            var expected2 = new List\u003Cstring\u003E {\u0022xxx\u0022,\u0022xxxAAA\u0022,\u0022xxx\u0022};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Filter an input list of strings only for ones that start with a given prefix.\n\u003E\u003E\u003E filter_by_prefix([], \u0027a\u0027)\n[]\n\u003E\u003E\u003E filter_by_prefix([\u0027abc\u0027, \u0027bcd\u0027, \u0027cde\u0027, \u0027array\u0027], \u0027a\u0027)\n[\u0027abc\u0027, \u0027array\u0027]\n","entry_point":"FilterByPrefix","canonical_solution":null,"short-description":"Filter strings by a given prefix","name":"prefix_filter"}
{"task_id":"30","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Return only positive numbers in the list.\n        /// \u003E\u003E\u003E GetPositive([-1, 2, -4, 5, 6])\n        /// [2, 5, 6]\n        /// \u003E\u003E\u003E GetPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n        /// [5, 3, 2, 3, 9, 123, 1]\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cint\u003E GetPositive (List\u003Cint\u003E l) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = GetPositive(new List\u003Cint\u003E {-1,-2,4,5,6});\n            var expected1 = new List\u003Cint\u003E {4,5,6};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = GetPositive(new List\u003Cint\u003E {5,3,-5,2,3,3,9,0,123,1,-10});\n            var expected2 = new List\u003Cint\u003E {5,3,2,3,3,9,123,1};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = GetPositive(new List\u003Cint\u003E {-1,-2});\n            var expected3 = new List\u003Cint\u003E {};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = GetPositive(new List\u003Cint\u003E {});\n            var expected4 = new List\u003Cint\u003E {};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Return only positive numbers in the list.\n\u003E\u003E\u003E get_positive([-1, 2, -4, 5, 6])\n[2, 5, 6]\n\u003E\u003E\u003E get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n[5, 3, 2, 3, 9, 123, 1]\n","entry_point":"GetPositive","canonical_solution":null,"short-description":"Extract positive numbers from a list","name":"only_positives"}
{"task_id":"31","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Return true if a given number is prime, and false otherwise.\n        /// \u003E\u003E\u003E IsPrime(6)\n        /// False\n        /// \u003E\u003E\u003E IsPrime(101)\n        /// True\n        /// \u003E\u003E\u003E IsPrime(11)\n        /// True\n        /// \u003E\u003E\u003E IsPrime(13441)\n        /// True\n        /// \u003E\u003E\u003E IsPrime(61)\n        /// True\n        /// \u003E\u003E\u003E IsPrime(4)\n        /// False\n        /// \u003E\u003E\u003E IsPrime(1)\n        /// False\n        /// \n        /// \u003C/summary\u003E\n        public static bool IsPrime (int n) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = IsPrime(6);\n            var expected1 = false;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = IsPrime(101);\n            var expected2 = true;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = IsPrime(11);\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = IsPrime(13441);\n            var expected4 = true;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = IsPrime(61);\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = IsPrime(4);\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = IsPrime(1);\n            var expected7 = false;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = IsPrime(5);\n            var expected8 = true;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = IsPrime(11);\n            var expected9 = true;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n            var actual10 = IsPrime(17);\n            var expected10 = true;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\u0022Exception --- test case 9 failed to pass\u0022);}\n\n            var actual11 = IsPrime(85);\n            var expected11 = false;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\u0022Exception --- test case 10 failed to pass\u0022);}\n\n            var actual12 = IsPrime(77);\n            var expected12 = false;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\u0022Exception --- test case 11 failed to pass\u0022);}\n\n            var actual13 = IsPrime(255379);\n            var expected13 = false;\n            var result13 = compareLogic.Compare(actual13, expected13);\n            if (!result13.AreEqual) {throw new Exception(\u0022Exception --- test case 12 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Return true if a given number is prime, and false otherwise.\n\u003E\u003E\u003E is_prime(6)\nFalse\n\u003E\u003E\u003E is_prime(101)\nTrue\n\u003E\u003E\u003E is_prime(11)\nTrue\n\u003E\u003E\u003E is_prime(13441)\nTrue\n\u003E\u003E\u003E is_prime(61)\nTrue\n\u003E\u003E\u003E is_prime(4)\nFalse\n\u003E\u003E\u003E is_prime(1)\nFalse\n","entry_point":"IsPrime","canonical_solution":null,"short-description":"Check if a number is prime","name":"prime_checker"}
{"task_id":"33","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// This function takes a list l and returns a list l\u0027 such that\n        /// l\u0027 is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n        /// to the values of the corresponding indicies of l, but sorted.\n        /// \u003E\u003E\u003E SortThird([1, 2, 3])\n        /// [1, 2, 3]\n        /// \u003E\u003E\u003E SortThird([5, 6, 3, 4, 8, 9, 2])\n        /// [2, 6, 3, 4, 8, 9, 5]\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cint\u003E SortThird (List\u003Cint\u003E l) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SortThird(new List\u003Cint\u003E {1,2,3});\n            var expected1 = new List\u003Cint\u003E {1,2,3};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = SortThird(new List\u003Cint\u003E {5,3,-5,2,-3,3,9,0,123,1,-10});\n            var expected2 = new List\u003Cint\u003E {1,3,-5,2,-3,3,5,0,123,9,-10};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = SortThird(new List\u003Cint\u003E {5,8,-12,4,23,2,3,11,12,-10});\n            var expected3 = new List\u003Cint\u003E {-10,8,-12,3,23,2,4,11,12,5};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = SortThird(new List\u003Cint\u003E {5,6,3,4,8,9,2});\n            var expected4 = new List\u003Cint\u003E {2,6,3,4,8,9,5};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = SortThird(new List\u003Cint\u003E {5,8,3,4,6,9,2});\n            var expected5 = new List\u003Cint\u003E {2,8,3,4,6,9,5};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = SortThird(new List\u003Cint\u003E {5,6,9,4,8,3,2});\n            var expected6 = new List\u003Cint\u003E {2,6,9,4,8,3,5};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = SortThird(new List\u003Cint\u003E {5,6,3,4,8,9,2,1});\n            var expected7 = new List\u003Cint\u003E {2,6,3,4,8,9,5,1};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"This function takes a list l and returns a list l\u0027 such that\nl\u0027 is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted.\n\u003E\u003E\u003E sort_third([1, 2, 3])\n[1, 2, 3]\n\u003E\u003E\u003E sort_third([5, 6, 3, 4, 8, 9, 2])\n[2, 6, 3, 4, 8, 9, 5]\n","entry_point":"SortThird","canonical_solution":null,"short-description":"Sort every third item in the list","name":"sort_every_third"}
{"task_id":"34","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Return sorted Unique elements in a list\n        /// \u003E\u003E\u003E Unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n        /// [0, 2, 3, 5, 9, 123]\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cint\u003E Unique (List\u003Cint\u003E l) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Unique(new List\u003Cint\u003E {5,3,5,2,3,3,9,0,123});\n            var expected1 = new List\u003Cint\u003E {0,2,3,5,9,123};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Return sorted unique elements in a list\n\u003E\u003E\u003E unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[0, 2, 3, 5, 9, 123]\n","entry_point":"Unique","canonical_solution":null,"short-description":"Sorted unique elements from a list","name":"unique_sorted_list"}
{"task_id":"35","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Return maximum element in the list.\n        /// \u003E\u003E\u003E MaxElement([1, 2, 3])\n        /// 3\n        /// \u003E\u003E\u003E MaxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n        /// 123\n        /// \n        /// \u003C/summary\u003E\n        public static int MaxElement (List\u003Cint\u003E l) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = MaxElement(new List\u003Cint\u003E {1,2,3});\n            var expected1 = 3;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = MaxElement(new List\u003Cint\u003E {5,3,-5,2,-3,3,9,0,124,1,-10});\n            var expected2 = 124;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Return maximum element in the list.\n\u003E\u003E\u003E max_element([1, 2, 3])\n3\n\u003E\u003E\u003E max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n","entry_point":"MaxElement","canonical_solution":null,"short-description":"Return max element in a list","name":"return_max_element"}
{"task_id":"36","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n        /// \u003E\u003E\u003E FizzBuzz(50)\n        /// 0\n        /// \u003E\u003E\u003E FizzBuzz(78)\n        /// 2\n        /// \u003E\u003E\u003E FizzBuzz(79)\n        /// 3\n        /// \n        /// \u003C/summary\u003E\n        public static int FizzBuzz (int n) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = FizzBuzz(50);\n            var expected1 = 0;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = FizzBuzz(78);\n            var expected2 = 2;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = FizzBuzz(79);\n            var expected3 = 3;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = FizzBuzz(100);\n            var expected4 = 3;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = FizzBuzz(200);\n            var expected5 = 6;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = FizzBuzz(4000);\n            var expected6 = 192;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = FizzBuzz(10000);\n            var expected7 = 639;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = FizzBuzz(100000);\n            var expected8 = 8026;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\u003E\u003E\u003E fizz_buzz(50)\n0\n\u003E\u003E\u003E fizz_buzz(78)\n2\n\u003E\u003E\u003E fizz_buzz(79)\n3\n","entry_point":"FizzBuzz","canonical_solution":null,"short-description":"Count 7s in numbers \u003C n divisible by 11 or 13","name":"count_7s_in_numbers"}
{"task_id":"37","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// This function takes a list l and returns a list l\u0027 such that\n        /// l\u0027 is identical to l in the odd indicies, while its values at the even indicies are equal\n        /// to the values of the even indicies of l, but sorted.\n        /// \u003E\u003E\u003E SortEven([1, 2, 3])\n        /// [1, 2, 3]\n        /// \u003E\u003E\u003E SortEven([5, 6, 3, 4])\n        /// [3, 6, 5, 4]\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cint\u003E SortEven (List\u003Cint\u003E l) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SortEven(new List\u003Cint\u003E {1,2,3});\n            var expected1 = new List\u003Cint\u003E {1,2,3};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = SortEven(new List\u003Cint\u003E {5,3,-5,2,-3,3,9,0,123,1,-10});\n            var expected2 = new List\u003Cint\u003E {-10,3,-5,2,-3,3,5,0,9,1,123};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = SortEven(new List\u003Cint\u003E {5,8,-12,4,23,2,3,11,12,-10});\n            var expected3 = new List\u003Cint\u003E {-12,8,3,4,5,2,12,11,23,-10};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"This function takes a list l and returns a list l\u0027 such that\nl\u0027 is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n\u003E\u003E\u003E sort_even([1, 2, 3])\n[1, 2, 3]\n\u003E\u003E\u003E sort_even([5, 6, 3, 4])\n[3, 6, 5, 4]\n","entry_point":"SortEven","canonical_solution":null,"short-description":"Sort list at even indices, keep odd indices same","name":"sort_evens_only"}
{"task_id":"39","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// PrimeFib returns n-th number that is a Fibonacci number and it\u0027s also prime.\n        /// \u003E\u003E\u003E PrimeFib(1)\n        /// 2\n        /// \u003E\u003E\u003E PrimeFib(2)\n        /// 3\n        /// \u003E\u003E\u003E PrimeFib(3)\n        /// 5\n        /// \u003E\u003E\u003E PrimeFib(4)\n        /// 13\n        /// \u003E\u003E\u003E PrimeFib(5)\n        /// 89\n        /// \n        /// \u003C/summary\u003E\n        public static int PrimeFib (int n) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = PrimeFib(1);\n            var expected1 = 2;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = PrimeFib(2);\n            var expected2 = 3;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = PrimeFib(3);\n            var expected3 = 5;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = PrimeFib(4);\n            var expected4 = 13;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = PrimeFib(5);\n            var expected5 = 89;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = PrimeFib(6);\n            var expected6 = 233;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = PrimeFib(7);\n            var expected7 = 1597;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = PrimeFib(8);\n            var expected8 = 28657;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = PrimeFib(9);\n            var expected9 = 514229;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n            var actual10 = PrimeFib(10);\n            var expected10 = 433494437;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\u0022Exception --- test case 9 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nprime_fib returns n-th number that is a Fibonacci number and it\u0027s also prime.\n\u003E\u003E\u003E prime_fib(1)\n2\n\u003E\u003E\u003E prime_fib(2)\n3\n\u003E\u003E\u003E prime_fib(3)\n5\n\u003E\u003E\u003E prime_fib(4)\n13\n\u003E\u003E\u003E prime_fib(5)\n89\n","entry_point":"PrimeFib","canonical_solution":null,"short-description":"prime_fib finds prime Fibonacci numbers","name":"prime_\u002B_fibonacci"}
{"task_id":"40","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// TriplesSumToZero takes a list of integers as an input.\n        /// it returns True if there are three distinct elements in the list that\n        /// sum to zero, and False otherwise.\n        /// \n        /// \u003E\u003E\u003E TriplesSumToZero([1, 3, 5, 0])\n        /// False\n        /// \u003E\u003E\u003E TriplesSumToZero([1, 3, -2, 1])\n        /// True\n        /// \u003E\u003E\u003E TriplesSumToZero([1, 2, 3, 7])\n        /// False\n        /// \u003E\u003E\u003E TriplesSumToZero([2, 4, -5, 3, 9, 7])\n        /// True\n        /// \u003E\u003E\u003E TriplesSumToZero([1])\n        /// False\n        /// \n        /// \u003C/summary\u003E\n        public static bool TriplesSumToZero (List\u003Cint\u003E l) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = TriplesSumToZero(new List\u003Cint\u003E {1,3,5,0});\n            var expected1 = false;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = TriplesSumToZero(new List\u003Cint\u003E {1,3,5,-1});\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = TriplesSumToZero(new List\u003Cint\u003E {1,3,-2,1});\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = TriplesSumToZero(new List\u003Cint\u003E {1,2,3,7});\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = TriplesSumToZero(new List\u003Cint\u003E {1,2,5,7});\n            var expected5 = false;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = TriplesSumToZero(new List\u003Cint\u003E {2,4,-5,3,9,7});\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = TriplesSumToZero(new List\u003Cint\u003E {1});\n            var expected7 = false;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = TriplesSumToZero(new List\u003Cint\u003E {1,3,5,-100});\n            var expected8 = false;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = TriplesSumToZero(new List\u003Cint\u003E {100,3,5,-100});\n            var expected9 = false;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\ntriples_sum_to_zero takes a list of integers as an input.\nit returns True if there are three distinct elements in the list that\nsum to zero, and False otherwise.\n\n\u003E\u003E\u003E triples_sum_to_zero([1, 3, 5, 0])\nFalse\n\u003E\u003E\u003E triples_sum_to_zero([1, 3, -2, 1])\nTrue\n\u003E\u003E\u003E triples_sum_to_zero([1, 2, 3, 7])\nFalse\n\u003E\u003E\u003E triples_sum_to_zero([2, 4, -5, 3, 9, 7])\nTrue\n\u003E\u003E\u003E triples_sum_to_zero([1])\nFalse\n","entry_point":"TriplesSumToZero","canonical_solution":null,"short-description":"Check if list has three numbers summing to zero","name":"find_zero_sum"}
{"task_id":"41","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Imagine a road that\u0027s a perfectly straight infinitely long line.\n        /// n cars are driving left to right;  simultaneously, a different set of n cars\n        /// are driving right to left.   The two sets of cars start out being very far from\n        /// each other.  All cars move in the same speed.  Two cars are said to collide\n        /// when a car that\u0027s moving left to right hits a car that\u0027s moving right to left.\n        /// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n        /// in their trajectory as if they did not collide.\n        /// \n        /// This function outputs the number of such collisions.\n        /// \n        /// \u003C/summary\u003E\n        public static int CarRaceCollision (int n) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = CarRaceCollision(2);\n            var expected1 = 4;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = CarRaceCollision(3);\n            var expected2 = 9;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = CarRaceCollision(4);\n            var expected3 = 16;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = CarRaceCollision(8);\n            var expected4 = 64;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = CarRaceCollision(10);\n            var expected5 = 100;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nImagine a road that\u0027s a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that\u0027s moving left to right hits a car that\u0027s moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n","entry_point":"CarRaceCollision","canonical_solution":null,"short-description":"Cars collide but continue unaffected","name":"cars_continue_moving"}
{"task_id":"42","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Return list with elements incremented by 1.\n        /// \u003E\u003E\u003E IncrList([1, 2, 3])\n        /// [2, 3, 4]\n        /// \u003E\u003E\u003E IncrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n        /// [6, 4, 6, 3, 4, 4, 10, 1, 124]\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cint\u003E IncrList (List\u003Cint\u003E l) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = IncrList(new List\u003Cint\u003E {});\n            var expected1 = new List\u003Cint\u003E {};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = IncrList(new List\u003Cint\u003E {3,2,1});\n            var expected2 = new List\u003Cint\u003E {4,3,2};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = IncrList(new List\u003Cint\u003E {5,2,5,2,3,3,9,0,123});\n            var expected3 = new List\u003Cint\u003E {6,3,6,3,4,4,10,1,124};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Return list with elements incremented by 1.\n\u003E\u003E\u003E incr_list([1, 2, 3])\n[2, 3, 4]\n\u003E\u003E\u003E incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[6, 4, 6, 3, 4, 4, 10, 1, 124]\n","entry_point":"IncrList","canonical_solution":null,"short-description":"Increment each list element by 1","name":"increment_list"}
{"task_id":"43","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// PairsSumToZero takes a list of integers as an input.\n        /// it returns True if there are two distinct elements in the list that\n        /// sum to zero, and False otherwise.\n        /// \u003E\u003E\u003E PairsSumToZero([1, 3, 5, 0])\n        /// False\n        /// \u003E\u003E\u003E PairsSumToZero([1, 3, -2, 1])\n        /// False\n        /// \u003E\u003E\u003E PairsSumToZero([1, 2, 3, 7])\n        /// False\n        /// \u003E\u003E\u003E PairsSumToZero([2, 4, -5, 3, 5, 7])\n        /// True\n        /// \u003E\u003E\u003E PairsSumToZero([1])\n        /// False\n        /// \n        /// \u003C/summary\u003E\n        public static bool PairsSumToZero (List\u003Cint\u003E l) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = PairsSumToZero(new List\u003Cint\u003E {1,3,5,0});\n            var expected1 = false;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = PairsSumToZero(new List\u003Cint\u003E {1,3,-2,1});\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = PairsSumToZero(new List\u003Cint\u003E {1,2,3,7});\n            var expected3 = false;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = PairsSumToZero(new List\u003Cint\u003E {2,4,-5,3,5,7});\n            var expected4 = true;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = PairsSumToZero(new List\u003Cint\u003E {1});\n            var expected5 = false;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = PairsSumToZero(new List\u003Cint\u003E {-3,9,-1,3,2,30});\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = PairsSumToZero(new List\u003Cint\u003E {-3,9,-1,3,2,31});\n            var expected7 = true;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = PairsSumToZero(new List\u003Cint\u003E {-3,9,-1,4,2,30});\n            var expected8 = false;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = PairsSumToZero(new List\u003Cint\u003E {-3,9,-1,4,2,31});\n            var expected9 = false;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\npairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n\u003E\u003E\u003E pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n\u003E\u003E\u003E pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n\u003E\u003E\u003E pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n\u003E\u003E\u003E pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n\u003E\u003E\u003E pairs_sum_to_zero([1])\nFalse\n","entry_point":"PairsSumToZero","canonical_solution":null,"short-description":"Check if list has two numbers summing to zero","name":"check_sum_zero"}
{"task_id":"44","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Change numerical base of input number x to base.\n        /// return string representation after the conversion.\n        /// base numbers are less than 10.\n        /// \u003E\u003E\u003E ChangeBase(8, 3)\n        /// \u002722\u0027\n        /// \u003E\u003E\u003E ChangeBase(8, 2)\n        /// \u00271000\u0027\n        /// \u003E\u003E\u003E ChangeBase(7, 2)\n        /// \u0027111\u0027\n        /// \n        /// \u003C/summary\u003E\n        public static string ChangeBase (int x, int base) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = ChangeBase(8,3);\n            var expected1 = \u002222\u0022;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = ChangeBase(9,3);\n            var expected2 = \u0022100\u0022;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = ChangeBase(234,2);\n            var expected3 = \u002211101010\u0022;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = ChangeBase(16,2);\n            var expected4 = \u002210000\u0022;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = ChangeBase(8,2);\n            var expected5 = \u00221000\u0022;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = ChangeBase(7,2);\n            var expected6 = \u0022111\u0022;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = ChangeBase(2,3);\n            var expected7 = \u00222\u0022;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = ChangeBase(3,4);\n            var expected8 = \u00223\u0022;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = ChangeBase(4,5);\n            var expected9 = \u00224\u0022;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n            var actual10 = ChangeBase(5,6);\n            var expected10 = \u00225\u0022;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\u0022Exception --- test case 9 failed to pass\u0022);}\n\n            var actual11 = ChangeBase(6,7);\n            var expected11 = \u00226\u0022;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\u0022Exception --- test case 10 failed to pass\u0022);}\n\n            var actual12 = ChangeBase(7,8);\n            var expected12 = \u00227\u0022;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\u0022Exception --- test case 11 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Change numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n\u003E\u003E\u003E change_base(8, 3)\n\u002722\u0027\n\u003E\u003E\u003E change_base(8, 2)\n\u00271000\u0027\n\u003E\u003E\u003E change_base(7, 2)\n\u0027111\u0027\n","entry_point":"ChangeBase","canonical_solution":null,"short-description":"Convert number to base \u003C10, return as string","name":"convert_base_x"}
{"task_id":"45","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Given length of a side and high return area for a triangle.\n        /// \u003E\u003E\u003E TriangleArea(5, 3)\n        /// 7.5\n        /// \n        /// \u003C/summary\u003E\n        public static double TriangleArea (int a, int h) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = TriangleArea(5,3);\n            var expected1 = 7.5;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = TriangleArea(2,2);\n            var expected2 = 2.0;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = TriangleArea(10,8);\n            var expected3 = 40.0;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Given length of a side and high return area for a triangle.\n\u003E\u003E\u003E triangle_area(5, 3)\n7.5\n","entry_point":"TriangleArea","canonical_solution":null,"short-description":"Calculate triangle area using base, height","name":"calc_triangle_area"}
{"task_id":"46","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that\u0027s defined as follows:\n        /// Fib4(0) -\u003E 0\n        /// Fib4(1) -\u003E 0\n        /// Fib4(2) -\u003E 2\n        /// Fib4(3) -\u003E 0\n        /// Fib4(n) -\u003E Fib4(n-1) \u002B Fib4(n-2) \u002B Fib4(n-3) \u002B Fib4(n-4).\n        /// Please write a function to efficiently compute the n-th element of the Fib4 number sequence.  Do not use recursion.\n        /// \u003E\u003E\u003E Fib4(5)\n        /// 4\n        /// \u003E\u003E\u003E Fib4(6)\n        /// 8\n        /// \u003E\u003E\u003E Fib4(7)\n        /// 14\n        /// \n        /// \u003C/summary\u003E\n        public static int Fib4 (int n) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Fib4(5);\n            var expected1 = 4;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = Fib4(8);\n            var expected2 = 28;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = Fib4(10);\n            var expected3 = 104;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = Fib4(12);\n            var expected4 = 386;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that\u0027s defined as follows:\nfib4(0) -\u003E 0\nfib4(1) -\u003E 0\nfib4(2) -\u003E 2\nfib4(3) -\u003E 0\nfib4(n) -\u003E fib4(n-1) \u002B fib4(n-2) \u002B fib4(n-3) \u002B fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\u003E\u003E\u003E fib4(5)\n4\n\u003E\u003E\u003E fib4(6)\n8\n\u003E\u003E\u003E fib4(7)\n14\n","entry_point":"Fib4","canonical_solution":null,"short-description":"Define a non-recursive fib4 sequence function","name":"fib4_non-recursive"}
{"task_id":"47","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Return Median of elements in the list l.\n        /// \u003E\u003E\u003E Median([3, 1, 2, 4, 5])\n        /// 3\n        /// \u003E\u003E\u003E Median([-10, 4, 6, 1000, 10, 20])\n        /// 15.0\n        /// \n        /// \u003C/summary\u003E\n        public static object Median (List\u003Cint\u003E l) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Median(new List\u003Cint\u003E {3,1,2,4,5});\n            var expected1 = 3;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = Median(new List\u003Cint\u003E {-10,4,6,1000,10,20});\n            var expected2 = 8.0;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = Median(new List\u003Cint\u003E {5});\n            var expected3 = 5;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = Median(new List\u003Cint\u003E {6,5});\n            var expected4 = 5.5;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = Median(new List\u003Cint\u003E {8,1,3,9,9,2,7});\n            var expected5 = 7;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Return median of elements in the list l.\n\u003E\u003E\u003E median([3, 1, 2, 4, 5])\n3\n\u003E\u003E\u003E median([-10, 4, 6, 1000, 10, 20])\n15.0\n","entry_point":"Median","canonical_solution":null,"short-description":"Return median of list elements","name":"median_of_list"}
{"task_id":"48","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Checks if given string is a palindrome\n        /// \u003E\u003E\u003E IsPalindrome(\u0027\u0027)\n        /// True\n        /// \u003E\u003E\u003E IsPalindrome(\u0027aba\u0027)\n        /// True\n        /// \u003E\u003E\u003E IsPalindrome(\u0027aaaaa\u0027)\n        /// True\n        /// \u003E\u003E\u003E IsPalindrome(\u0027zbcd\u0027)\n        /// False\n        /// \n        /// \u003C/summary\u003E\n        public static bool IsPalindrome (string text) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = IsPalindrome(\u0022\u0022);\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = IsPalindrome(\u0022aba\u0022);\n            var expected2 = true;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = IsPalindrome(\u0022aaaaa\u0022);\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = IsPalindrome(\u0022zbcd\u0022);\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = IsPalindrome(\u0022xywyx\u0022);\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = IsPalindrome(\u0022xywyz\u0022);\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = IsPalindrome(\u0022xywzx\u0022);\n            var expected7 = false;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nChecks if given string is a palindrome\n\u003E\u003E\u003E is_palindrome(\u0027\u0027)\nTrue\n\u003E\u003E\u003E is_palindrome(\u0027aba\u0027)\nTrue\n\u003E\u003E\u003E is_palindrome(\u0027aaaaa\u0027)\nTrue\n\u003E\u003E\u003E is_palindrome(\u0027zbcd\u0027)\nFalse\n","entry_point":"IsPalindrome","canonical_solution":null,"short-description":"Checks if a string is a palindrome","name":"string_palindrome_check"}
{"task_id":"49","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Return 2^n modulo p (be aware of numerics).\n        /// \u003E\u003E\u003E Modp(3, 5)\n        /// 3\n        /// \u003E\u003E\u003E Modp(1101, 101)\n        /// 2\n        /// \u003E\u003E\u003E Modp(0, 101)\n        /// 1\n        /// \u003E\u003E\u003E Modp(3, 11)\n        /// 8\n        /// \u003E\u003E\u003E Modp(100, 101)\n        /// 1\n        /// \n        /// \u003C/summary\u003E\n        public static int Modp (int n, int p) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Modp(3,5);\n            var expected1 = 3;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = Modp(1101,101);\n            var expected2 = 2;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = Modp(0,101);\n            var expected3 = 1;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = Modp(3,11);\n            var expected4 = 8;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = Modp(100,101);\n            var expected5 = 1;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = Modp(30,5);\n            var expected6 = 4;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = Modp(31,5);\n            var expected7 = 3;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Return 2^n modulo p (be aware of numerics).\n\u003E\u003E\u003E modp(3, 5)\n3\n\u003E\u003E\u003E modp(1101, 101)\n2\n\u003E\u003E\u003E modp(0, 101)\n1\n\u003E\u003E\u003E modp(3, 11)\n8\n\u003E\u003E\u003E modp(100, 101)\n1\n","entry_point":"Modp","canonical_solution":null,"short-description":"Compute 2^n % p for various n, p values","name":"exponentiation"}
{"task_id":"51","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// RemoveVowels is a function that takes string and returns string without vowels.\n        /// \u003E\u003E\u003E RemoveVowels(\u0027\u0027)\n        /// \u0027\u0027\n        /// \u003E\u003E\u003E RemoveVowels(\u0022abcdef\\nghijklm\u0022)\n        /// \u0027bcdf\\nghjklm\u0027\n        /// \u003E\u003E\u003E RemoveVowels(\u0027abcdef\u0027)\n        /// \u0027bcdf\u0027\n        /// \u003E\u003E\u003E RemoveVowels(\u0027aaaaa\u0027)\n        /// \u0027\u0027\n        /// \u003E\u003E\u003E RemoveVowels(\u0027aaBAA\u0027)\n        /// \u0027B\u0027\n        /// \u003E\u003E\u003E RemoveVowels(\u0027zbcd\u0027)\n        /// \u0027zbcd\u0027\n        /// \n        /// \u003C/summary\u003E\n        public static string RemoveVowels (string text) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = RemoveVowels(\u0022\u0022);\n            var expected1 = \u0022\u0022;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = RemoveVowels(\u0022abcdef\\nghijklm\u0022);\n            var expected2 = \u0022bcdf\\nghjklm\u0022;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = RemoveVowels(\u0022fedcba\u0022);\n            var expected3 = \u0022fdcb\u0022;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = RemoveVowels(\u0022eeeee\u0022);\n            var expected4 = \u0022\u0022;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = RemoveVowels(\u0022acBAA\u0022);\n            var expected5 = \u0022cB\u0022;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = RemoveVowels(\u0022EcBOO\u0022);\n            var expected6 = \u0022cB\u0022;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = RemoveVowels(\u0022ybcd\u0022);\n            var expected7 = \u0022ybcd\u0022;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nremove_vowels is a function that takes string and returns string without vowels.\n\u003E\u003E\u003E remove_vowels(\u0027\u0027)\n\u0027\u0027\n\u003E\u003E\u003E remove_vowels(\u0022abcdef\\nghijklm\u0022)\n\u0027bcdf\\nghjklm\u0027\n\u003E\u003E\u003E remove_vowels(\u0027abcdef\u0027)\n\u0027bcdf\u0027\n\u003E\u003E\u003E remove_vowels(\u0027aaaaa\u0027)\n\u0027\u0027\n\u003E\u003E\u003E remove_vowels(\u0027aaBAA\u0027)\n\u0027B\u0027\n\u003E\u003E\u003E remove_vowels(\u0027zbcd\u0027)\n\u0027zbcd\u0027\n","entry_point":"RemoveVowels","canonical_solution":null,"short-description":"Function removes vowels from a string","name":"rmvs_vwls_f_str"}
{"task_id":"52","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Return True if all numbers in the list l are below threshold t.\n        /// \u003E\u003E\u003E BelowThreshold([1, 2, 4, 10], 100)\n        /// True\n        /// \u003E\u003E\u003E BelowThreshold([1, 20, 4, 10], 5)\n        /// False\n        /// \n        /// \u003C/summary\u003E\n        public static bool BelowThreshold (List\u003Cint\u003E l, int t) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = BelowThreshold(new List\u003Cint\u003E {1,2,4,10},100);\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = BelowThreshold(new List\u003Cint\u003E {1,20,4,10},5);\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = BelowThreshold(new List\u003Cint\u003E {1,20,4,10},21);\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = BelowThreshold(new List\u003Cint\u003E {1,20,4,10},22);\n            var expected4 = true;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = BelowThreshold(new List\u003Cint\u003E {1,8,4,10},11);\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = BelowThreshold(new List\u003Cint\u003E {1,8,4,10},10);\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Return True if all numbers in the list l are below threshold t.\n\u003E\u003E\u003E below_threshold([1, 2, 4, 10], 100)\nTrue\n\u003E\u003E\u003E below_threshold([1, 20, 4, 10], 5)\nFalse\n","entry_point":"BelowThreshold","canonical_solution":null,"short-description":"Check if all list items are below t","name":"all_items_\u003C_t"}
{"task_id":"53","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Add two numbers x and y\n        /// \u003E\u003E\u003E Add(2, 3)\n        /// 5\n        /// \u003E\u003E\u003E Add(5, 7)\n        /// 12\n        /// \n        /// \u003C/summary\u003E\n        public static int Add (int x, int y) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Add(0,1);\n            var expected1 = 1;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = Add(1,0);\n            var expected2 = 1;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = Add(2,3);\n            var expected3 = 5;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = Add(5,7);\n            var expected4 = 12;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = Add(7,5);\n            var expected5 = 12;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = Add(572,725);\n            var expected6 = 1297;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = Add(51,804);\n            var expected7 = 855;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = Add(645,96);\n            var expected8 = 741;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = Add(712,853);\n            var expected9 = 1565;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n            var actual10 = Add(223,101);\n            var expected10 = 324;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\u0022Exception --- test case 9 failed to pass\u0022);}\n\n            var actual11 = Add(76,29);\n            var expected11 = 105;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\u0022Exception --- test case 10 failed to pass\u0022);}\n\n            var actual12 = Add(416,149);\n            var expected12 = 565;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\u0022Exception --- test case 11 failed to pass\u0022);}\n\n            var actual13 = Add(145,409);\n            var expected13 = 554;\n            var result13 = compareLogic.Compare(actual13, expected13);\n            if (!result13.AreEqual) {throw new Exception(\u0022Exception --- test case 12 failed to pass\u0022);}\n\n            var actual14 = Add(535,430);\n            var expected14 = 965;\n            var result14 = compareLogic.Compare(actual14, expected14);\n            if (!result14.AreEqual) {throw new Exception(\u0022Exception --- test case 13 failed to pass\u0022);}\n\n            var actual15 = Add(118,303);\n            var expected15 = 421;\n            var result15 = compareLogic.Compare(actual15, expected15);\n            if (!result15.AreEqual) {throw new Exception(\u0022Exception --- test case 14 failed to pass\u0022);}\n\n            var actual16 = Add(287,94);\n            var expected16 = 381;\n            var result16 = compareLogic.Compare(actual16, expected16);\n            if (!result16.AreEqual) {throw new Exception(\u0022Exception --- test case 15 failed to pass\u0022);}\n\n            var actual17 = Add(768,257);\n            var expected17 = 1025;\n            var result17 = compareLogic.Compare(actual17, expected17);\n            if (!result17.AreEqual) {throw new Exception(\u0022Exception --- test case 16 failed to pass\u0022);}\n\n            var actual18 = Add(421,677);\n            var expected18 = 1098;\n            var result18 = compareLogic.Compare(actual18, expected18);\n            if (!result18.AreEqual) {throw new Exception(\u0022Exception --- test case 17 failed to pass\u0022);}\n\n            var actual19 = Add(802,814);\n            var expected19 = 1616;\n            var result19 = compareLogic.Compare(actual19, expected19);\n            if (!result19.AreEqual) {throw new Exception(\u0022Exception --- test case 18 failed to pass\u0022);}\n\n            var actual20 = Add(510,922);\n            var expected20 = 1432;\n            var result20 = compareLogic.Compare(actual20, expected20);\n            if (!result20.AreEqual) {throw new Exception(\u0022Exception --- test case 19 failed to pass\u0022);}\n\n            var actual21 = Add(345,819);\n            var expected21 = 1164;\n            var result21 = compareLogic.Compare(actual21, expected21);\n            if (!result21.AreEqual) {throw new Exception(\u0022Exception --- test case 20 failed to pass\u0022);}\n\n            var actual22 = Add(895,436);\n            var expected22 = 1331;\n            var result22 = compareLogic.Compare(actual22, expected22);\n            if (!result22.AreEqual) {throw new Exception(\u0022Exception --- test case 21 failed to pass\u0022);}\n\n            var actual23 = Add(123,424);\n            var expected23 = 547;\n            var result23 = compareLogic.Compare(actual23, expected23);\n            if (!result23.AreEqual) {throw new Exception(\u0022Exception --- test case 22 failed to pass\u0022);}\n\n            var actual24 = Add(923,245);\n            var expected24 = 1168;\n            var result24 = compareLogic.Compare(actual24, expected24);\n            if (!result24.AreEqual) {throw new Exception(\u0022Exception --- test case 23 failed to pass\u0022);}\n\n            var actual25 = Add(23,438);\n            var expected25 = 461;\n            var result25 = compareLogic.Compare(actual25, expected25);\n            if (!result25.AreEqual) {throw new Exception(\u0022Exception --- test case 24 failed to pass\u0022);}\n\n            var actual26 = Add(565,133);\n            var expected26 = 698;\n            var result26 = compareLogic.Compare(actual26, expected26);\n            if (!result26.AreEqual) {throw new Exception(\u0022Exception --- test case 25 failed to pass\u0022);}\n\n            var actual27 = Add(945,925);\n            var expected27 = 1870;\n            var result27 = compareLogic.Compare(actual27, expected27);\n            if (!result27.AreEqual) {throw new Exception(\u0022Exception --- test case 26 failed to pass\u0022);}\n\n            var actual28 = Add(261,983);\n            var expected28 = 1244;\n            var result28 = compareLogic.Compare(actual28, expected28);\n            if (!result28.AreEqual) {throw new Exception(\u0022Exception --- test case 27 failed to pass\u0022);}\n\n            var actual29 = Add(139,577);\n            var expected29 = 716;\n            var result29 = compareLogic.Compare(actual29, expected29);\n            if (!result29.AreEqual) {throw new Exception(\u0022Exception --- test case 28 failed to pass\u0022);}\n\n            var actual30 = Add(763,178);\n            var expected30 = 941;\n            var result30 = compareLogic.Compare(actual30, expected30);\n            if (!result30.AreEqual) {throw new Exception(\u0022Exception --- test case 29 failed to pass\u0022);}\n\n            var actual31 = Add(147,892);\n            var expected31 = 1039;\n            var result31 = compareLogic.Compare(actual31, expected31);\n            if (!result31.AreEqual) {throw new Exception(\u0022Exception --- test case 30 failed to pass\u0022);}\n\n            var actual32 = Add(436,402);\n            var expected32 = 838;\n            var result32 = compareLogic.Compare(actual32, expected32);\n            if (!result32.AreEqual) {throw new Exception(\u0022Exception --- test case 31 failed to pass\u0022);}\n\n            var actual33 = Add(610,581);\n            var expected33 = 1191;\n            var result33 = compareLogic.Compare(actual33, expected33);\n            if (!result33.AreEqual) {throw new Exception(\u0022Exception --- test case 32 failed to pass\u0022);}\n\n            var actual34 = Add(103,416);\n            var expected34 = 519;\n            var result34 = compareLogic.Compare(actual34, expected34);\n            if (!result34.AreEqual) {throw new Exception(\u0022Exception --- test case 33 failed to pass\u0022);}\n\n            var actual35 = Add(339,990);\n            var expected35 = 1329;\n            var result35 = compareLogic.Compare(actual35, expected35);\n            if (!result35.AreEqual) {throw new Exception(\u0022Exception --- test case 34 failed to pass\u0022);}\n\n            var actual36 = Add(130,504);\n            var expected36 = 634;\n            var result36 = compareLogic.Compare(actual36, expected36);\n            if (!result36.AreEqual) {throw new Exception(\u0022Exception --- test case 35 failed to pass\u0022);}\n\n            var actual37 = Add(242,717);\n            var expected37 = 959;\n            var result37 = compareLogic.Compare(actual37, expected37);\n            if (!result37.AreEqual) {throw new Exception(\u0022Exception --- test case 36 failed to pass\u0022);}\n\n            var actual38 = Add(562,110);\n            var expected38 = 672;\n            var result38 = compareLogic.Compare(actual38, expected38);\n            if (!result38.AreEqual) {throw new Exception(\u0022Exception --- test case 37 failed to pass\u0022);}\n\n            var actual39 = Add(396,909);\n            var expected39 = 1305;\n            var result39 = compareLogic.Compare(actual39, expected39);\n            if (!result39.AreEqual) {throw new Exception(\u0022Exception --- test case 38 failed to pass\u0022);}\n\n            var actual40 = Add(887,703);\n            var expected40 = 1590;\n            var result40 = compareLogic.Compare(actual40, expected40);\n            if (!result40.AreEqual) {throw new Exception(\u0022Exception --- test case 39 failed to pass\u0022);}\n\n            var actual41 = Add(870,551);\n            var expected41 = 1421;\n            var result41 = compareLogic.Compare(actual41, expected41);\n            if (!result41.AreEqual) {throw new Exception(\u0022Exception --- test case 40 failed to pass\u0022);}\n\n            var actual42 = Add(422,391);\n            var expected42 = 813;\n            var result42 = compareLogic.Compare(actual42, expected42);\n            if (!result42.AreEqual) {throw new Exception(\u0022Exception --- test case 41 failed to pass\u0022);}\n\n            var actual43 = Add(299,505);\n            var expected43 = 804;\n            var result43 = compareLogic.Compare(actual43, expected43);\n            if (!result43.AreEqual) {throw new Exception(\u0022Exception --- test case 42 failed to pass\u0022);}\n\n            var actual44 = Add(346,56);\n            var expected44 = 402;\n            var result44 = compareLogic.Compare(actual44, expected44);\n            if (!result44.AreEqual) {throw new Exception(\u0022Exception --- test case 43 failed to pass\u0022);}\n\n            var actual45 = Add(36,706);\n            var expected45 = 742;\n            var result45 = compareLogic.Compare(actual45, expected45);\n            if (!result45.AreEqual) {throw new Exception(\u0022Exception --- test case 44 failed to pass\u0022);}\n\n            var actual46 = Add(738,411);\n            var expected46 = 1149;\n            var result46 = compareLogic.Compare(actual46, expected46);\n            if (!result46.AreEqual) {throw new Exception(\u0022Exception --- test case 45 failed to pass\u0022);}\n\n            var actual47 = Add(679,87);\n            var expected47 = 766;\n            var result47 = compareLogic.Compare(actual47, expected47);\n            if (!result47.AreEqual) {throw new Exception(\u0022Exception --- test case 46 failed to pass\u0022);}\n\n            var actual48 = Add(25,303);\n            var expected48 = 328;\n            var result48 = compareLogic.Compare(actual48, expected48);\n            if (!result48.AreEqual) {throw new Exception(\u0022Exception --- test case 47 failed to pass\u0022);}\n\n            var actual49 = Add(161,612);\n            var expected49 = 773;\n            var result49 = compareLogic.Compare(actual49, expected49);\n            if (!result49.AreEqual) {throw new Exception(\u0022Exception --- test case 48 failed to pass\u0022);}\n\n            var actual50 = Add(306,841);\n            var expected50 = 1147;\n            var result50 = compareLogic.Compare(actual50, expected50);\n            if (!result50.AreEqual) {throw new Exception(\u0022Exception --- test case 49 failed to pass\u0022);}\n\n            var actual51 = Add(973,411);\n            var expected51 = 1384;\n            var result51 = compareLogic.Compare(actual51, expected51);\n            if (!result51.AreEqual) {throw new Exception(\u0022Exception --- test case 50 failed to pass\u0022);}\n\n            var actual52 = Add(711,157);\n            var expected52 = 868;\n            var result52 = compareLogic.Compare(actual52, expected52);\n            if (!result52.AreEqual) {throw new Exception(\u0022Exception --- test case 51 failed to pass\u0022);}\n\n            var actual53 = Add(471,27);\n            var expected53 = 498;\n            var result53 = compareLogic.Compare(actual53, expected53);\n            if (!result53.AreEqual) {throw new Exception(\u0022Exception --- test case 52 failed to pass\u0022);}\n\n            var actual54 = Add(714,792);\n            var expected54 = 1506;\n            var result54 = compareLogic.Compare(actual54, expected54);\n            if (!result54.AreEqual) {throw new Exception(\u0022Exception --- test case 53 failed to pass\u0022);}\n\n            var actual55 = Add(38,206);\n            var expected55 = 244;\n            var result55 = compareLogic.Compare(actual55, expected55);\n            if (!result55.AreEqual) {throw new Exception(\u0022Exception --- test case 54 failed to pass\u0022);}\n\n            var actual56 = Add(907,343);\n            var expected56 = 1250;\n            var result56 = compareLogic.Compare(actual56, expected56);\n            if (!result56.AreEqual) {throw new Exception(\u0022Exception --- test case 55 failed to pass\u0022);}\n\n            var actual57 = Add(23,760);\n            var expected57 = 783;\n            var result57 = compareLogic.Compare(actual57, expected57);\n            if (!result57.AreEqual) {throw new Exception(\u0022Exception --- test case 56 failed to pass\u0022);}\n\n            var actual58 = Add(524,859);\n            var expected58 = 1383;\n            var result58 = compareLogic.Compare(actual58, expected58);\n            if (!result58.AreEqual) {throw new Exception(\u0022Exception --- test case 57 failed to pass\u0022);}\n\n            var actual59 = Add(30,529);\n            var expected59 = 559;\n            var result59 = compareLogic.Compare(actual59, expected59);\n            if (!result59.AreEqual) {throw new Exception(\u0022Exception --- test case 58 failed to pass\u0022);}\n\n            var actual60 = Add(341,691);\n            var expected60 = 1032;\n            var result60 = compareLogic.Compare(actual60, expected60);\n            if (!result60.AreEqual) {throw new Exception(\u0022Exception --- test case 59 failed to pass\u0022);}\n\n            var actual61 = Add(167,729);\n            var expected61 = 896;\n            var result61 = compareLogic.Compare(actual61, expected61);\n            if (!result61.AreEqual) {throw new Exception(\u0022Exception --- test case 60 failed to pass\u0022);}\n\n            var actual62 = Add(636,289);\n            var expected62 = 925;\n            var result62 = compareLogic.Compare(actual62, expected62);\n            if (!result62.AreEqual) {throw new Exception(\u0022Exception --- test case 61 failed to pass\u0022);}\n\n            var actual63 = Add(503,144);\n            var expected63 = 647;\n            var result63 = compareLogic.Compare(actual63, expected63);\n            if (!result63.AreEqual) {throw new Exception(\u0022Exception --- test case 62 failed to pass\u0022);}\n\n            var actual64 = Add(51,985);\n            var expected64 = 1036;\n            var result64 = compareLogic.Compare(actual64, expected64);\n            if (!result64.AreEqual) {throw new Exception(\u0022Exception --- test case 63 failed to pass\u0022);}\n\n            var actual65 = Add(287,149);\n            var expected65 = 436;\n            var result65 = compareLogic.Compare(actual65, expected65);\n            if (!result65.AreEqual) {throw new Exception(\u0022Exception --- test case 64 failed to pass\u0022);}\n\n            var actual66 = Add(659,75);\n            var expected66 = 734;\n            var result66 = compareLogic.Compare(actual66, expected66);\n            if (!result66.AreEqual) {throw new Exception(\u0022Exception --- test case 65 failed to pass\u0022);}\n\n            var actual67 = Add(462,797);\n            var expected67 = 1259;\n            var result67 = compareLogic.Compare(actual67, expected67);\n            if (!result67.AreEqual) {throw new Exception(\u0022Exception --- test case 66 failed to pass\u0022);}\n\n            var actual68 = Add(406,141);\n            var expected68 = 547;\n            var result68 = compareLogic.Compare(actual68, expected68);\n            if (!result68.AreEqual) {throw new Exception(\u0022Exception --- test case 67 failed to pass\u0022);}\n\n            var actual69 = Add(106,44);\n            var expected69 = 150;\n            var result69 = compareLogic.Compare(actual69, expected69);\n            if (!result69.AreEqual) {throw new Exception(\u0022Exception --- test case 68 failed to pass\u0022);}\n\n            var actual70 = Add(300,934);\n            var expected70 = 1234;\n            var result70 = compareLogic.Compare(actual70, expected70);\n            if (!result70.AreEqual) {throw new Exception(\u0022Exception --- test case 69 failed to pass\u0022);}\n\n            var actual71 = Add(471,524);\n            var expected71 = 995;\n            var result71 = compareLogic.Compare(actual71, expected71);\n            if (!result71.AreEqual) {throw new Exception(\u0022Exception --- test case 70 failed to pass\u0022);}\n\n            var actual72 = Add(122,429);\n            var expected72 = 551;\n            var result72 = compareLogic.Compare(actual72, expected72);\n            if (!result72.AreEqual) {throw new Exception(\u0022Exception --- test case 71 failed to pass\u0022);}\n\n            var actual73 = Add(735,195);\n            var expected73 = 930;\n            var result73 = compareLogic.Compare(actual73, expected73);\n            if (!result73.AreEqual) {throw new Exception(\u0022Exception --- test case 72 failed to pass\u0022);}\n\n            var actual74 = Add(335,484);\n            var expected74 = 819;\n            var result74 = compareLogic.Compare(actual74, expected74);\n            if (!result74.AreEqual) {throw new Exception(\u0022Exception --- test case 73 failed to pass\u0022);}\n\n            var actual75 = Add(28,809);\n            var expected75 = 837;\n            var result75 = compareLogic.Compare(actual75, expected75);\n            if (!result75.AreEqual) {throw new Exception(\u0022Exception --- test case 74 failed to pass\u0022);}\n\n            var actual76 = Add(430,20);\n            var expected76 = 450;\n            var result76 = compareLogic.Compare(actual76, expected76);\n            if (!result76.AreEqual) {throw new Exception(\u0022Exception --- test case 75 failed to pass\u0022);}\n\n            var actual77 = Add(916,635);\n            var expected77 = 1551;\n            var result77 = compareLogic.Compare(actual77, expected77);\n            if (!result77.AreEqual) {throw new Exception(\u0022Exception --- test case 76 failed to pass\u0022);}\n\n            var actual78 = Add(301,999);\n            var expected78 = 1300;\n            var result78 = compareLogic.Compare(actual78, expected78);\n            if (!result78.AreEqual) {throw new Exception(\u0022Exception --- test case 77 failed to pass\u0022);}\n\n            var actual79 = Add(454,466);\n            var expected79 = 920;\n            var result79 = compareLogic.Compare(actual79, expected79);\n            if (!result79.AreEqual) {throw new Exception(\u0022Exception --- test case 78 failed to pass\u0022);}\n\n            var actual80 = Add(905,259);\n            var expected80 = 1164;\n            var result80 = compareLogic.Compare(actual80, expected80);\n            if (!result80.AreEqual) {throw new Exception(\u0022Exception --- test case 79 failed to pass\u0022);}\n\n            var actual81 = Add(168,205);\n            var expected81 = 373;\n            var result81 = compareLogic.Compare(actual81, expected81);\n            if (!result81.AreEqual) {throw new Exception(\u0022Exception --- test case 80 failed to pass\u0022);}\n\n            var actual82 = Add(570,434);\n            var expected82 = 1004;\n            var result82 = compareLogic.Compare(actual82, expected82);\n            if (!result82.AreEqual) {throw new Exception(\u0022Exception --- test case 81 failed to pass\u0022);}\n\n            var actual83 = Add(64,959);\n            var expected83 = 1023;\n            var result83 = compareLogic.Compare(actual83, expected83);\n            if (!result83.AreEqual) {throw new Exception(\u0022Exception --- test case 82 failed to pass\u0022);}\n\n            var actual84 = Add(957,510);\n            var expected84 = 1467;\n            var result84 = compareLogic.Compare(actual84, expected84);\n            if (!result84.AreEqual) {throw new Exception(\u0022Exception --- test case 83 failed to pass\u0022);}\n\n            var actual85 = Add(722,598);\n            var expected85 = 1320;\n            var result85 = compareLogic.Compare(actual85, expected85);\n            if (!result85.AreEqual) {throw new Exception(\u0022Exception --- test case 84 failed to pass\u0022);}\n\n            var actual86 = Add(770,226);\n            var expected86 = 996;\n            var result86 = compareLogic.Compare(actual86, expected86);\n            if (!result86.AreEqual) {throw new Exception(\u0022Exception --- test case 85 failed to pass\u0022);}\n\n            var actual87 = Add(579,66);\n            var expected87 = 645;\n            var result87 = compareLogic.Compare(actual87, expected87);\n            if (!result87.AreEqual) {throw new Exception(\u0022Exception --- test case 86 failed to pass\u0022);}\n\n            var actual88 = Add(117,674);\n            var expected88 = 791;\n            var result88 = compareLogic.Compare(actual88, expected88);\n            if (!result88.AreEqual) {throw new Exception(\u0022Exception --- test case 87 failed to pass\u0022);}\n\n            var actual89 = Add(530,30);\n            var expected89 = 560;\n            var result89 = compareLogic.Compare(actual89, expected89);\n            if (!result89.AreEqual) {throw new Exception(\u0022Exception --- test case 88 failed to pass\u0022);}\n\n            var actual90 = Add(776,345);\n            var expected90 = 1121;\n            var result90 = compareLogic.Compare(actual90, expected90);\n            if (!result90.AreEqual) {throw new Exception(\u0022Exception --- test case 89 failed to pass\u0022);}\n\n            var actual91 = Add(327,389);\n            var expected91 = 716;\n            var result91 = compareLogic.Compare(actual91, expected91);\n            if (!result91.AreEqual) {throw new Exception(\u0022Exception --- test case 90 failed to pass\u0022);}\n\n            var actual92 = Add(596,12);\n            var expected92 = 608;\n            var result92 = compareLogic.Compare(actual92, expected92);\n            if (!result92.AreEqual) {throw new Exception(\u0022Exception --- test case 91 failed to pass\u0022);}\n\n            var actual93 = Add(599,511);\n            var expected93 = 1110;\n            var result93 = compareLogic.Compare(actual93, expected93);\n            if (!result93.AreEqual) {throw new Exception(\u0022Exception --- test case 92 failed to pass\u0022);}\n\n            var actual94 = Add(936,476);\n            var expected94 = 1412;\n            var result94 = compareLogic.Compare(actual94, expected94);\n            if (!result94.AreEqual) {throw new Exception(\u0022Exception --- test case 93 failed to pass\u0022);}\n\n            var actual95 = Add(461,14);\n            var expected95 = 475;\n            var result95 = compareLogic.Compare(actual95, expected95);\n            if (!result95.AreEqual) {throw new Exception(\u0022Exception --- test case 94 failed to pass\u0022);}\n\n            var actual96 = Add(966,157);\n            var expected96 = 1123;\n            var result96 = compareLogic.Compare(actual96, expected96);\n            if (!result96.AreEqual) {throw new Exception(\u0022Exception --- test case 95 failed to pass\u0022);}\n\n            var actual97 = Add(326,91);\n            var expected97 = 417;\n            var result97 = compareLogic.Compare(actual97, expected97);\n            if (!result97.AreEqual) {throw new Exception(\u0022Exception --- test case 96 failed to pass\u0022);}\n\n            var actual98 = Add(392,455);\n            var expected98 = 847;\n            var result98 = compareLogic.Compare(actual98, expected98);\n            if (!result98.AreEqual) {throw new Exception(\u0022Exception --- test case 97 failed to pass\u0022);}\n\n            var actual99 = Add(446,477);\n            var expected99 = 923;\n            var result99 = compareLogic.Compare(actual99, expected99);\n            if (!result99.AreEqual) {throw new Exception(\u0022Exception --- test case 98 failed to pass\u0022);}\n\n            var actual100 = Add(324,860);\n            var expected100 = 1184;\n            var result100 = compareLogic.Compare(actual100, expected100);\n            if (!result100.AreEqual) {throw new Exception(\u0022Exception --- test case 99 failed to pass\u0022);}\n\n            var actual101 = Add(945,85);\n            var expected101 = 1030;\n            var result101 = compareLogic.Compare(actual101, expected101);\n            if (!result101.AreEqual) {throw new Exception(\u0022Exception --- test case 100 failed to pass\u0022);}\n\n            var actual102 = Add(886,582);\n            var expected102 = 1468;\n            var result102 = compareLogic.Compare(actual102, expected102);\n            if (!result102.AreEqual) {throw new Exception(\u0022Exception --- test case 101 failed to pass\u0022);}\n\n            var actual103 = Add(886,712);\n            var expected103 = 1598;\n            var result103 = compareLogic.Compare(actual103, expected103);\n            if (!result103.AreEqual) {throw new Exception(\u0022Exception --- test case 102 failed to pass\u0022);}\n\n            var actual104 = Add(842,953);\n            var expected104 = 1795;\n            var result104 = compareLogic.Compare(actual104, expected104);\n            if (!result104.AreEqual) {throw new Exception(\u0022Exception --- test case 103 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Add two numbers x and y\n\u003E\u003E\u003E add(2, 3)\n5\n\u003E\u003E\u003E add(5, 7)\n12\n","entry_point":"Add","canonical_solution":null,"short-description":"Function adds two numbers","name":"add_numbers"}
{"task_id":"54","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Check if two words have the same characters.\n        /// \u003E\u003E\u003E SameChars(\u0027eabcdzzzz\u0027, \u0027dddzzzzzzzddeddabc\u0027)\n        /// True\n        /// \u003E\u003E\u003E SameChars(\u0027abcd\u0027, \u0027dddddddabc\u0027)\n        /// True\n        /// \u003E\u003E\u003E SameChars(\u0027dddddddabc\u0027, \u0027abcd\u0027)\n        /// True\n        /// \u003E\u003E\u003E SameChars(\u0027eabcd\u0027, \u0027dddddddabc\u0027)\n        /// False\n        /// \u003E\u003E\u003E SameChars(\u0027abcd\u0027, \u0027dddddddabce\u0027)\n        /// False\n        /// \u003E\u003E\u003E SameChars(\u0027eabcdzzzz\u0027, \u0027dddzzzzzzzddddabc\u0027)\n        /// False\n        /// \n        /// \u003C/summary\u003E\n        public static bool SameChars (string s0, string s1) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SameChars(\u0022eabcdzzzz\u0022,\u0022dddzzzzzzzddeddabc\u0022);\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = SameChars(\u0022abcd\u0022,\u0022dddddddabc\u0022);\n            var expected2 = true;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = SameChars(\u0022dddddddabc\u0022,\u0022abcd\u0022);\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = SameChars(\u0022eabcd\u0022,\u0022dddddddabc\u0022);\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = SameChars(\u0022abcd\u0022,\u0022dddddddabcf\u0022);\n            var expected5 = false;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = SameChars(\u0022eabcdzzzz\u0022,\u0022dddzzzzzzzddddabc\u0022);\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = SameChars(\u0022aabb\u0022,\u0022aaccc\u0022);\n            var expected7 = false;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nCheck if two words have the same characters.\n\u003E\u003E\u003E same_chars(\u0027eabcdzzzz\u0027, \u0027dddzzzzzzzddeddabc\u0027)\nTrue\n\u003E\u003E\u003E same_chars(\u0027abcd\u0027, \u0027dddddddabc\u0027)\nTrue\n\u003E\u003E\u003E same_chars(\u0027dddddddabc\u0027, \u0027abcd\u0027)\nTrue\n\u003E\u003E\u003E same_chars(\u0027eabcd\u0027, \u0027dddddddabc\u0027)\nFalse\n\u003E\u003E\u003E same_chars(\u0027abcd\u0027, \u0027dddddddabce\u0027)\nFalse\n\u003E\u003E\u003E same_chars(\u0027eabcdzzzz\u0027, \u0027dddzzzzzzzddddabc\u0027)\nFalse\n","entry_point":"SameChars","canonical_solution":null,"short-description":"Check if two words share the same characters","name":"compare_char_sets"}
{"task_id":"55","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Return n-th Fibonacci number.\n        /// \u003E\u003E\u003E Fib(10)\n        /// 55\n        /// \u003E\u003E\u003E Fib(1)\n        /// 1\n        /// \u003E\u003E\u003E Fib(8)\n        /// 21\n        /// \n        /// \u003C/summary\u003E\n        public static int Fib (int n) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Fib(10);\n            var expected1 = 55;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = Fib(1);\n            var expected2 = 1;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = Fib(8);\n            var expected3 = 21;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = Fib(11);\n            var expected4 = 89;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = Fib(12);\n            var expected5 = 144;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Return n-th Fibonacci number.\n\u003E\u003E\u003E fib(10)\n55\n\u003E\u003E\u003E fib(1)\n1\n\u003E\u003E\u003E fib(8)\n21\n","entry_point":"Fib","canonical_solution":null,"short-description":"Function returns n-th Fibonacci number","name":"fibonacci_sequence"}
{"task_id":"56","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// brackets is a string of \u0022\u003C\u0022 and \u0022\u003E\u0022.\n        /// return True if every opening bracket has a corresponding closing bracket.\n        /// \n        /// \u003E\u003E\u003E CorrectBracketing(\u0022\u003C\u0022)\n        /// False\n        /// \u003E\u003E\u003E CorrectBracketing(\u0022\u003C\u003E\u0022)\n        /// True\n        /// \u003E\u003E\u003E CorrectBracketing(\u0022\u003C\u003C\u003E\u003C\u003E\u003E\u0022)\n        /// True\n        /// \u003E\u003E\u003E CorrectBracketing(\u0022\u003E\u003C\u003C\u003E\u0022)\n        /// False\n        /// \n        /// \u003C/summary\u003E\n        public static bool CorrectBracketing (string brackets) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = CorrectBracketing(\u0022\u003C\u003E\u0022);\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = CorrectBracketing(\u0022\u003C\u003C\u003E\u003C\u003E\u003E\u0022);\n            var expected2 = true;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = CorrectBracketing(\u0022\u003C\u003E\u003C\u003E\u003C\u003C\u003E\u003C\u003E\u003E\u003C\u003E\u0022);\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = CorrectBracketing(\u0022\u003C\u003E\u003C\u003E\u003C\u003C\u003C\u003E\u003C\u003E\u003C\u003E\u003E\u003C\u003E\u003E\u003C\u003C\u003E\u003C\u003E\u003C\u003C\u003E\u003E\u003E\u0022);\n            var expected4 = true;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = CorrectBracketing(\u0022\u003C\u003C\u003C\u003E\u003C\u003E\u003E\u003E\u003E\u0022);\n            var expected5 = false;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = CorrectBracketing(\u0022\u003E\u003C\u003C\u003E\u0022);\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = CorrectBracketing(\u0022\u003C\u0022);\n            var expected7 = false;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = CorrectBracketing(\u0022\u003C\u003C\u003C\u003C\u0022);\n            var expected8 = false;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = CorrectBracketing(\u0022\u003E\u0022);\n            var expected9 = false;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n            var actual10 = CorrectBracketing(\u0022\u003C\u003C\u003E\u0022);\n            var expected10 = false;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\u0022Exception --- test case 9 failed to pass\u0022);}\n\n            var actual11 = CorrectBracketing(\u0022\u003C\u003E\u003C\u003E\u003C\u003C\u003E\u003C\u003E\u003E\u003C\u003E\u003E\u003C\u003C\u003E\u0022);\n            var expected11 = false;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\u0022Exception --- test case 10 failed to pass\u0022);}\n\n            var actual12 = CorrectBracketing(\u0022\u003C\u003E\u003C\u003E\u003C\u003C\u003E\u003C\u003E\u003E\u003C\u003E\u003E\u003E\u003C\u003E\u0022);\n            var expected12 = false;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\u0022Exception --- test case 11 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"brackets is a string of \u0022\u003C\u0022 and \u0022\u003E\u0022.\nreturn True if every opening bracket has a corresponding closing bracket.\n\n\u003E\u003E\u003E correct_bracketing(\u0022\u003C\u0022)\nFalse\n\u003E\u003E\u003E correct_bracketing(\u0022\u003C\u003E\u0022)\nTrue\n\u003E\u003E\u003E correct_bracketing(\u0022\u003C\u003C\u003E\u003C\u003E\u003E\u0022)\nTrue\n\u003E\u003E\u003E correct_bracketing(\u0022\u003E\u003C\u003C\u003E\u0022)\nFalse\n","entry_point":"CorrectBracketing","canonical_solution":null,"short-description":"Check if brackets are correctly matched","name":"valid_brackets"}
{"task_id":"57","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Return True is list elements are Monotonically increasing or decreasing.\n        /// \u003E\u003E\u003E Monotonic([1, 2, 4, 20])\n        /// True\n        /// \u003E\u003E\u003E Monotonic([1, 20, 4, 10])\n        /// False\n        /// \u003E\u003E\u003E Monotonic([4, 1, 0, -10])\n        /// True\n        /// \n        /// \u003C/summary\u003E\n        public static bool Monotonic (List\u003Cint\u003E l) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Monotonic(new List\u003Cint\u003E {1,2,4,10});\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = Monotonic(new List\u003Cint\u003E {1,2,4,20});\n            var expected2 = true;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = Monotonic(new List\u003Cint\u003E {1,20,4,10});\n            var expected3 = false;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = Monotonic(new List\u003Cint\u003E {4,1,0,-10});\n            var expected4 = true;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = Monotonic(new List\u003Cint\u003E {4,1,1,0});\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = Monotonic(new List\u003Cint\u003E {1,2,3,2,5,60});\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = Monotonic(new List\u003Cint\u003E {1,2,3,4,5,60});\n            var expected7 = true;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = Monotonic(new List\u003Cint\u003E {9,9,9,9});\n            var expected8 = true;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Return True is list elements are monotonically increasing or decreasing.\n\u003E\u003E\u003E monotonic([1, 2, 4, 20])\nTrue\n\u003E\u003E\u003E monotonic([1, 20, 4, 10])\nFalse\n\u003E\u003E\u003E monotonic([4, 1, 0, -10])\nTrue\n","entry_point":"Monotonic","canonical_solution":null,"short-description":"Check if list is monotonic: True/False","name":"check_list_trend"}
{"task_id":"58","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Return sorted unique Common elements for two lists.\n        /// \u003E\u003E\u003E Common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        /// [1, 5, 653]\n        /// \u003E\u003E\u003E Common([5, 3, 2, 8], [3, 2])\n        /// [2, 3]\n        /// \n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cint\u003E Common (List\u003Cint\u003E l1, List\u003Cint\u003E l2) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Common(new List\u003Cint\u003E {1,4,3,34,653,2,5},new List\u003Cint\u003E {5,7,1,5,9,653,121});\n            var expected1 = new List\u003Cint\u003E {1,5,653};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = Common(new List\u003Cint\u003E {5,3,2,8},new List\u003Cint\u003E {3,2});\n            var expected2 = new List\u003Cint\u003E {2,3};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = Common(new List\u003Cint\u003E {4,3,2,8},new List\u003Cint\u003E {3,2,4});\n            var expected3 = new List\u003Cint\u003E {2,3,4};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = Common(new List\u003Cint\u003E {4,3,2,8},new List\u003Cint\u003E {});\n            var expected4 = new List\u003Cint\u003E {};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Return sorted unique common elements for two lists.\n\u003E\u003E\u003E common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n[1, 5, 653]\n\u003E\u003E\u003E common([5, 3, 2, 8], [3, 2])\n[2, 3]\n\n","entry_point":"Common","canonical_solution":null,"short-description":"Find sorted common elements in lists","name":"get_sorted_common"}
{"task_id":"59","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Return the largest prime factor of n. Assume n \u003E 1 and is not a prime.\n        /// \u003E\u003E\u003E LargestPrimeFactor(13195)\n        /// 29\n        /// \u003E\u003E\u003E LargestPrimeFactor(2048)\n        /// 2\n        /// \n        /// \u003C/summary\u003E\n        public static int LargestPrimeFactor (int n) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = LargestPrimeFactor(15);\n            var expected1 = 5;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = LargestPrimeFactor(27);\n            var expected2 = 3;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = LargestPrimeFactor(63);\n            var expected3 = 7;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = LargestPrimeFactor(330);\n            var expected4 = 11;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = LargestPrimeFactor(13195);\n            var expected5 = 29;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Return the largest prime factor of n. Assume n \u003E 1 and is not a prime.\n\u003E\u003E\u003E largest_prime_factor(13195)\n29\n\u003E\u003E\u003E largest_prime_factor(2048)\n2\n","entry_point":"LargestPrimeFactor","canonical_solution":null,"short-description":"Largest prime factor of n","name":"largest_prime_factor"}
{"task_id":"60","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// SumToN is a function that sums numbers from 1 to n.\n        /// \u003E\u003E\u003E SumToN(30)\n        /// 465\n        /// \u003E\u003E\u003E SumToN(100)\n        /// 5050\n        /// \u003E\u003E\u003E SumToN(5)\n        /// 15\n        /// \u003E\u003E\u003E SumToN(10)\n        /// 55\n        /// \u003E\u003E\u003E SumToN(1)\n        /// 1\n        /// \n        /// \u003C/summary\u003E\n        public static int SumToN (int n) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SumToN(1);\n            var expected1 = 1;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = SumToN(6);\n            var expected2 = 21;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = SumToN(11);\n            var expected3 = 66;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = SumToN(30);\n            var expected4 = 465;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = SumToN(100);\n            var expected5 = 5050;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"sum_to_n is a function that sums numbers from 1 to n.\n\u003E\u003E\u003E sum_to_n(30)\n465\n\u003E\u003E\u003E sum_to_n(100)\n5050\n\u003E\u003E\u003E sum_to_n(5)\n15\n\u003E\u003E\u003E sum_to_n(10)\n55\n\u003E\u003E\u003E sum_to_n(1)\n1\n","entry_point":"SumToN","canonical_solution":null,"short-description":"Function sums numbers from 1 to n","name":"sum_numbers"}
{"task_id":"61","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// brackets is a string of \u0022(\u0022 and \u0022)\u0022.\n        /// return True if every opening bracket has a corresponding closing bracket.\n        /// \n        /// \u003E\u003E\u003E CorrectBracketing(\u0022(\u0022)\n        /// False\n        /// \u003E\u003E\u003E CorrectBracketing(\u0022()\u0022)\n        /// True\n        /// \u003E\u003E\u003E CorrectBracketing(\u0022(()())\u0022)\n        /// True\n        /// \u003E\u003E\u003E CorrectBracketing(\u0022)(()\u0022)\n        /// False\n        /// \n        /// \u003C/summary\u003E\n        public static bool CorrectBracketing (string brackets) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = CorrectBracketing(\u0022()\u0022);\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = CorrectBracketing(\u0022(()())\u0022);\n            var expected2 = true;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = CorrectBracketing(\u0022()()(()())()\u0022);\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = CorrectBracketing(\u0022()()((()()())())(()()(()))\u0022);\n            var expected4 = true;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = CorrectBracketing(\u0022((()())))\u0022);\n            var expected5 = false;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = CorrectBracketing(\u0022)(()\u0022);\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = CorrectBracketing(\u0022(\u0022);\n            var expected7 = false;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = CorrectBracketing(\u0022((((\u0022);\n            var expected8 = false;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = CorrectBracketing(\u0022)\u0022);\n            var expected9 = false;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n            var actual10 = CorrectBracketing(\u0022(()\u0022);\n            var expected10 = false;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\u0022Exception --- test case 9 failed to pass\u0022);}\n\n            var actual11 = CorrectBracketing(\u0022()()(()())())(()\u0022);\n            var expected11 = false;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\u0022Exception --- test case 10 failed to pass\u0022);}\n\n            var actual12 = CorrectBracketing(\u0022()()(()())()))()\u0022);\n            var expected12 = false;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\u0022Exception --- test case 11 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"brackets is a string of \u0022(\u0022 and \u0022)\u0022.\nreturn True if every opening bracket has a corresponding closing bracket.\n\n\u003E\u003E\u003E correct_bracketing(\u0022(\u0022)\nFalse\n\u003E\u003E\u003E correct_bracketing(\u0022()\u0022)\nTrue\n\u003E\u003E\u003E correct_bracketing(\u0022(()())\u0022)\nTrue\n\u003E\u003E\u003E correct_bracketing(\u0022)(()\u0022)\nFalse\n","entry_point":"CorrectBracketing","canonical_solution":null,"short-description":"Check balanced parentheses in a string","name":"balance_check"}
{"task_id":"62","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// xs represent coefficients of a polynomial.\n        /// xs[0] \u002B xs[1] * x \u002B xs[2] * x^2 \u002B ....\n        /// Return Derivative of this polynomial in the same form.\n        /// \u003E\u003E\u003E Derivative([3, 1, 2, 4, 5])\n        /// [1, 4, 12, 20]\n        /// \u003E\u003E\u003E Derivative([1, 2, 3])\n        /// [2, 6]\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cint\u003E Derivative (List\u003Cint\u003E xs) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Derivative(new List\u003Cint\u003E {3,1,2,4,5});\n            var expected1 = new List\u003Cint\u003E {1,4,12,20};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = Derivative(new List\u003Cint\u003E {1,2,3});\n            var expected2 = new List\u003Cint\u003E {2,6};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = Derivative(new List\u003Cint\u003E {3,2,1});\n            var expected3 = new List\u003Cint\u003E {2,2};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = Derivative(new List\u003Cint\u003E {3,2,1,0,4});\n            var expected4 = new List\u003Cint\u003E {2,2,0,16};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = Derivative(new List\u003Cint\u003E {1});\n            var expected5 = new List\u003Cint\u003E {};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"xs represent coefficients of a polynomial.\nxs[0] \u002B xs[1] * x \u002B xs[2] * x^2 \u002B ....\nReturn derivative of this polynomial in the same form.\n\u003E\u003E\u003E derivative([3, 1, 2, 4, 5])\n[1, 4, 12, 20]\n\u003E\u003E\u003E derivative([1, 2, 3])\n[2, 6]\n","entry_point":"Derivative","canonical_solution":null,"short-description":"Calculate polynomial derivative coefficients","name":"polynomial_deriv"}
{"task_id":"63","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that\u0027s defined as follows:\n        /// Fibfib(0) == 0\n        /// Fibfib(1) == 0\n        /// Fibfib(2) == 1\n        /// Fibfib(n) == Fibfib(n-1) \u002B Fibfib(n-2) \u002B Fibfib(n-3).\n        /// Please write a function to efficiently compute the n-th element of the Fibfib number sequence.\n        /// \u003E\u003E\u003E Fibfib(1)\n        /// 0\n        /// \u003E\u003E\u003E Fibfib(5)\n        /// 4\n        /// \u003E\u003E\u003E Fibfib(8)\n        /// 24\n        /// \n        /// \u003C/summary\u003E\n        public static int Fibfib (int n) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Fibfib(2);\n            var expected1 = 1;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = Fibfib(1);\n            var expected2 = 0;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = Fibfib(5);\n            var expected3 = 4;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = Fibfib(8);\n            var expected4 = 24;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = Fibfib(10);\n            var expected5 = 81;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = Fibfib(12);\n            var expected6 = 274;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = Fibfib(14);\n            var expected7 = 927;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that\u0027s defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) \u002B fibfib(n-2) \u002B fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n\u003E\u003E\u003E fibfib(1)\n0\n\u003E\u003E\u003E fibfib(5)\n4\n\u003E\u003E\u003E fibfib(8)\n24\n","entry_point":"Fibfib","canonical_solution":null,"short-description":"FibFib sequence: fib(n) = fib(n-1)\u002Bfib(n-2)\u002Bfib(n-3)","name":"fibfib_sequence"}
{"task_id":"64","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Write a function VowelsCount which takes a string representing\n        /// a word as input and returns the number of vowels in the string.\n        /// Vowels in this case are \u0027a\u0027, \u0027e\u0027, \u0027i\u0027, \u0027o\u0027, \u0027u\u0027. Here, \u0027y\u0027 is also a\n        /// vowel, but only when it is at the end of the given word.\n        /// \n        /// Example:\n        /// \u003E\u003E\u003E VowelsCount(\u0022abcde\u0022)\n        /// 2\n        /// \u003E\u003E\u003E VowelsCount(\u0022ACEDY\u0022)\n        /// 3\n        /// \n        /// \u003C/summary\u003E\n        public static int VowelsCount (string s) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = VowelsCount(\u0022abcde\u0022);\n            var expected1 = 2;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = VowelsCount(\u0022Alone\u0022);\n            var expected2 = 3;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = VowelsCount(\u0022key\u0022);\n            var expected3 = 2;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = VowelsCount(\u0022bye\u0022);\n            var expected4 = 1;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = VowelsCount(\u0022keY\u0022);\n            var expected5 = 2;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = VowelsCount(\u0022bYe\u0022);\n            var expected6 = 1;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = VowelsCount(\u0022ACEDY\u0022);\n            var expected7 = 3;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Write a function vowels_count which takes a string representing\na word as input and returns the number of vowels in the string.\nVowels in this case are \u0027a\u0027, \u0027e\u0027, \u0027i\u0027, \u0027o\u0027, \u0027u\u0027. Here, \u0027y\u0027 is also a\nvowel, but only when it is at the end of the given word.\n\nExample:\n\u003E\u003E\u003E vowels_count(\u0022abcde\u0022)\n2\n\u003E\u003E\u003E vowels_count(\u0022ACEDY\u0022)\n3\n","entry_point":"VowelsCount","canonical_solution":null,"short-description":"Count vowels (\u0027a\u0027, \u0027e\u0027, \u0027i\u0027, \u0027o\u0027, \u0027u\u0027, \u0027y\u0027*) in a word","name":"count_word_vowels"}
{"task_id":"65","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Circular shift the digits of the integer x, shift the digits right by shift\n        /// and return the result as a string.\n        /// If shift \u003E number of digits, return digits reversed.\n        /// \u003E\u003E\u003E CircularShift(12, 1)\n        /// \u002221\u0022\n        /// \u003E\u003E\u003E CircularShift(12, 2)\n        /// \u002212\u0022\n        /// \n        /// \u003C/summary\u003E\n        public static string CircularShift (int x, int shift) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = CircularShift(100,2);\n            var expected1 = \u0022001\u0022;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = CircularShift(12,2);\n            var expected2 = \u002212\u0022;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = CircularShift(97,8);\n            var expected3 = \u002279\u0022;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = CircularShift(12,1);\n            var expected4 = \u002221\u0022;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = CircularShift(11,101);\n            var expected5 = \u002211\u0022;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Circular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift \u003E number of digits, return digits reversed.\n\u003E\u003E\u003E circular_shift(12, 1)\n\u002221\u0022\n\u003E\u003E\u003E circular_shift(12, 2)\n\u002212\u0022\n","entry_point":"CircularShift","canonical_solution":null,"short-description":"Circularly shift digits or reverse if needed","name":"circular_digit_shift"}
{"task_id":"66","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Task\n        /// Write a function that takes a string as input and returns the sum of the upper characters only\u0027\n        /// ASCII codes.\n        /// \n        /// Examples:\n        /// DigitSum(\u0022\u0022) =\u003E 0\n        /// DigitSum(\u0022abAB\u0022) =\u003E 131\n        /// DigitSum(\u0022abcCd\u0022) =\u003E 67\n        /// DigitSum(\u0022helloE\u0022) =\u003E 69\n        /// DigitSum(\u0022woArBld\u0022) =\u003E 131\n        /// DigitSum(\u0022aAaaaXa\u0022) =\u003E 153\n        /// \n        /// \u003C/summary\u003E\n        public static int DigitSum (string s) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = DigitSum(\u0022\u0022);\n            var expected1 = 0;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = DigitSum(\u0022abAB\u0022);\n            var expected2 = 131;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = DigitSum(\u0022abcCd\u0022);\n            var expected3 = 67;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = DigitSum(\u0022helloE\u0022);\n            var expected4 = 69;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = DigitSum(\u0022woArBld\u0022);\n            var expected5 = 131;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = DigitSum(\u0022aAaaaXa\u0022);\n            var expected6 = 153;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = DigitSum(\u0022 How are yOu?\u0022);\n            var expected7 = 151;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = DigitSum(\u0022You arE Very Smart\u0022);\n            var expected8 = 327;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Task\nWrite a function that takes a string as input and returns the sum of the upper characters only\u0027\nASCII codes.\n\nExamples:\ndigitSum(\u0022\u0022) =\u003E 0\ndigitSum(\u0022abAB\u0022) =\u003E 131\ndigitSum(\u0022abcCd\u0022) =\u003E 67\ndigitSum(\u0022helloE\u0022) =\u003E 69\ndigitSum(\u0022woArBld\u0022) =\u003E 131\ndigitSum(\u0022aAaaaXa\u0022) =\u003E 153\n","entry_point":"DigitSum","canonical_solution":null,"short-description":"Sum ASCII of uppercase in string function","name":"sum_upper_ascii"}
{"task_id":"67","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// In this task, you will be given a string that represents a number of apples and oranges \n        /// that are distributed in a basket of fruit this basket contains \n        /// apples, oranges, and mango fruits. Given the string that represents the total number of \n        /// the oranges and apples and an integer that represent the total number of the fruits \n        /// in the basket return the number of the mango fruits in the basket.\n        /// for examble:\n        /// FruitDistribution(\u00225 apples and 6 oranges\u0022, 19) -\u003E19 - 5 - 6 = 8\n        /// FruitDistribution(\u00220 apples and 1 oranges\u0022,3) -\u003E 3 - 0 - 1 = 2\n        /// FruitDistribution(\u00222 apples and 3 oranges\u0022, 100) -\u003E 100 - 2 - 3 = 95\n        /// FruitDistribution(\u0022100 apples and 1 oranges\u0022,120) -\u003E 120 - 100 - 1 = 19\n        /// \n        /// \u003C/summary\u003E\n        public static int FruitDistribution (string s, int n) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = FruitDistribution(\u00225 apples and 6 oranges\u0022,19);\n            var expected1 = 8;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = FruitDistribution(\u00225 apples and 6 oranges\u0022,21);\n            var expected2 = 10;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = FruitDistribution(\u00220 apples and 1 oranges\u0022,3);\n            var expected3 = 2;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = FruitDistribution(\u00221 apples and 0 oranges\u0022,3);\n            var expected4 = 2;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = FruitDistribution(\u00222 apples and 3 oranges\u0022,100);\n            var expected5 = 95;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = FruitDistribution(\u00222 apples and 3 oranges\u0022,5);\n            var expected6 = 0;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = FruitDistribution(\u00221 apples and 100 oranges\u0022,120);\n            var expected7 = 19;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nIn this task, you will be given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this basket contains \napples, oranges, and mango fruits. Given the string that represents the total number of \nthe oranges and apples and an integer that represent the total number of the fruits \nin the basket return the number of the mango fruits in the basket.\nfor examble:\nfruit_distribution(\u00225 apples and 6 oranges\u0022, 19) -\u003E19 - 5 - 6 = 8\nfruit_distribution(\u00220 apples and 1 oranges\u0022,3) -\u003E 3 - 0 - 1 = 2\nfruit_distribution(\u00222 apples and 3 oranges\u0022, 100) -\u003E 100 - 2 - 3 = 95\nfruit_distribution(\u0022100 apples and 1 oranges\u0022,120) -\u003E 120 - 100 - 1 = 19\n","entry_point":"FruitDistribution","canonical_solution":null,"short-description":"Calculate mango fruits in basket","name":"calculate_mangos"}
{"task_id":"68","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// \u0022Given an array representing a branch of a tree that has non-negative integer nodes\n        /// your task is to Pluck one of the nodes and return it.\n        /// The Plucked node should be the node with the smallest even value.\n        /// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n        /// \n        /// The Plucked node should be returned in a list, [ smalest_value, its index ],\n        /// If there are no even values or the given array is empty, return [].\n        /// \n        /// Example 1:\n        /// Input: [4,2,3]\n        /// Output: [2, 1]\n        /// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n        /// \n        /// Example 2:\n        /// Input: [1,2,3]\n        /// Output: [2, 1]\n        /// Explanation: 2 has the smallest even value, and 2 has the smallest index. \n        /// \n        /// Example 3:\n        /// Input: []\n        /// Output: []\n        /// \n        /// Example 4:\n        /// Input: [5, 0, 3, 0, 4, 2]\n        /// Output: [0, 1]\n        /// Explanation: 0 is the smallest value, but  there are two zeros,\n        /// so we will choose the first zero, which has the smallest index.\n        /// \n        /// Constraints:\n        /// * 1 \u003C= nodes.length \u003C= 10000\n        /// * 0 \u003C= node.value\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cint\u003E Pluck (List\u003Cint\u003E arr) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Pluck(new List\u003Cint\u003E {4,2,3});\n            var expected1 = new List\u003Cint\u003E {2,1};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = Pluck(new List\u003Cint\u003E {1,2,3});\n            var expected2 = new List\u003Cint\u003E {2,1};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = Pluck(new List\u003Cint\u003E {});\n            var expected3 = new List\u003Cint\u003E {};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = Pluck(new List\u003Cint\u003E {5,0,3,0,4,2});\n            var expected4 = new List\u003Cint\u003E {0,1};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = Pluck(new List\u003Cint\u003E {1,2,3,0,5,3});\n            var expected5 = new List\u003Cint\u003E {0,3};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = Pluck(new List\u003Cint\u003E {5,4,8,4,8});\n            var expected6 = new List\u003Cint\u003E {4,1};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = Pluck(new List\u003Cint\u003E {7,6,7,1});\n            var expected7 = new List\u003Cint\u003E {6,1};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = Pluck(new List\u003Cint\u003E {7,9,7,1});\n            var expected8 = new List\u003Cint\u003E {};\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\n\u0022Given an array representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a list, [ smalest_value, its index ],\nIf there are no even values or the given array is empty, return [].\n\nExample 1:\nInput: [4,2,3]\nOutput: [2, 1]\nExplanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\nInput: [1,2,3]\nOutput: [2, 1]\nExplanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\nInput: []\nOutput: []\n\nExample 4:\nInput: [5, 0, 3, 0, 4, 2]\nOutput: [0, 1]\nExplanation: 0 is the smallest value, but  there are two zeros,\nso we will choose the first zero, which has the smallest index.\n\nConstraints:\n* 1 \u003C= nodes.length \u003C= 10000\n* 0 \u003C= node.value\n","entry_point":"Pluck","canonical_solution":null,"short-description":"Find smallest even node and index or []","name":"smallest_even_node"}
{"task_id":"69","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n        /// zero, and has a frequency greater than or equal to the value of the integer itself. \n        /// The frequency of an integer is the number of times it appears in the list.\n        /// If no such a value exist, return -1.\n        /// Examples:\n        /// Search([4, 1, 2, 2, 3, 1]) == 2\n        /// Search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        /// Search([5, 5, 4, 4, 4]) == -1\n        /// \n        /// \u003C/summary\u003E\n        public static int Search (List\u003Cint\u003E lst) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Search(new List\u003Cint\u003E {5,5,5,5,1});\n            var expected1 = 1;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = Search(new List\u003Cint\u003E {4,1,4,1,4,4});\n            var expected2 = 4;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = Search(new List\u003Cint\u003E {3,3});\n            var expected3 = -1;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = Search(new List\u003Cint\u003E {8,8,8,8,8,8,8,8});\n            var expected4 = 8;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = Search(new List\u003Cint\u003E {2,3,3,2,2});\n            var expected5 = 2;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = Search(new List\u003Cint\u003E {2,7,8,8,4,8,7,3,9,6,5,10,4,3,6,7,1,7,4,10,8,1});\n            var expected6 = 1;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = Search(new List\u003Cint\u003E {3,2,8,2});\n            var expected7 = 2;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = Search(new List\u003Cint\u003E {6,7,1,8,8,10,5,8,5,3,10});\n            var expected8 = 1;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = Search(new List\u003Cint\u003E {8,8,3,6,5,6,4});\n            var expected9 = -1;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n            var actual10 = Search(new List\u003Cint\u003E {6,9,6,7,1,4,7,1,8,8,9,8,10,10,8,4,10,4,10,1,2,9,5,7,9});\n            var expected10 = 1;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\u0022Exception --- test case 9 failed to pass\u0022);}\n\n            var actual11 = Search(new List\u003Cint\u003E {1,9,10,1,3});\n            var expected11 = 1;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\u0022Exception --- test case 10 failed to pass\u0022);}\n\n            var actual12 = Search(new List\u003Cint\u003E {6,9,7,5,8,7,5,3,7,5,10,10,3,6,10,2,8,6,5,4,9,5,3,10});\n            var expected12 = 5;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\u0022Exception --- test case 11 failed to pass\u0022);}\n\n            var actual13 = Search(new List\u003Cint\u003E {1});\n            var expected13 = 1;\n            var result13 = compareLogic.Compare(actual13, expected13);\n            if (!result13.AreEqual) {throw new Exception(\u0022Exception --- test case 12 failed to pass\u0022);}\n\n            var actual14 = Search(new List\u003Cint\u003E {8,8,10,6,4,3,5,8,2,4,2,8,4,6,10,4,2,1,10,2,1,1,5});\n            var expected14 = 4;\n            var result14 = compareLogic.Compare(actual14, expected14);\n            if (!result14.AreEqual) {throw new Exception(\u0022Exception --- test case 13 failed to pass\u0022);}\n\n            var actual15 = Search(new List\u003Cint\u003E {2,10,4,8,2,10,5,1,2,9,5,5,6,3,8,6,4,10});\n            var expected15 = 2;\n            var result15 = compareLogic.Compare(actual15, expected15);\n            if (!result15.AreEqual) {throw new Exception(\u0022Exception --- test case 14 failed to pass\u0022);}\n\n            var actual16 = Search(new List\u003Cint\u003E {1,6,10,1,6,9,10,8,6,8,7,3});\n            var expected16 = 1;\n            var result16 = compareLogic.Compare(actual16, expected16);\n            if (!result16.AreEqual) {throw new Exception(\u0022Exception --- test case 15 failed to pass\u0022);}\n\n            var actual17 = Search(new List\u003Cint\u003E {9,2,4,1,5,1,5,2,5,7,7,7,3,10,1,5,4,2,8,4,1,9,10,7,10,2,8,10,9,4});\n            var expected17 = 4;\n            var result17 = compareLogic.Compare(actual17, expected17);\n            if (!result17.AreEqual) {throw new Exception(\u0022Exception --- test case 16 failed to pass\u0022);}\n\n            var actual18 = Search(new List\u003Cint\u003E {2,6,4,2,8,7,5,6,4,10,4,6,3,7,8,8,3,1,4,2,2,10,7});\n            var expected18 = 4;\n            var result18 = compareLogic.Compare(actual18, expected18);\n            if (!result18.AreEqual) {throw new Exception(\u0022Exception --- test case 17 failed to pass\u0022);}\n\n            var actual19 = Search(new List\u003Cint\u003E {9,8,6,10,2,6,10,2,7,8,10,3,8,2,6,2,3,1});\n            var expected19 = 2;\n            var result19 = compareLogic.Compare(actual19, expected19);\n            if (!result19.AreEqual) {throw new Exception(\u0022Exception --- test case 18 failed to pass\u0022);}\n\n            var actual20 = Search(new List\u003Cint\u003E {5,5,3,9,5,6,3,2,8,5,6,10,10,6,8,4,10,7,7,10,8});\n            var expected20 = -1;\n            var result20 = compareLogic.Compare(actual20, expected20);\n            if (!result20.AreEqual) {throw new Exception(\u0022Exception --- test case 19 failed to pass\u0022);}\n\n            var actual21 = Search(new List\u003Cint\u003E {10});\n            var expected21 = -1;\n            var result21 = compareLogic.Compare(actual21, expected21);\n            if (!result21.AreEqual) {throw new Exception(\u0022Exception --- test case 20 failed to pass\u0022);}\n\n            var actual22 = Search(new List\u003Cint\u003E {9,7,7,2,4,7,2,10,9,7,5,7,2});\n            var expected22 = 2;\n            var result22 = compareLogic.Compare(actual22, expected22);\n            if (!result22.AreEqual) {throw new Exception(\u0022Exception --- test case 21 failed to pass\u0022);}\n\n            var actual23 = Search(new List\u003Cint\u003E {5,4,10,2,1,1,10,3,6,1,8});\n            var expected23 = 1;\n            var result23 = compareLogic.Compare(actual23, expected23);\n            if (!result23.AreEqual) {throw new Exception(\u0022Exception --- test case 22 failed to pass\u0022);}\n\n            var actual24 = Search(new List\u003Cint\u003E {7,9,9,9,3,4,1,5,9,1,2,1,1,10,7,5,6,7,6,7,7,6});\n            var expected24 = 1;\n            var result24 = compareLogic.Compare(actual24, expected24);\n            if (!result24.AreEqual) {throw new Exception(\u0022Exception --- test case 23 failed to pass\u0022);}\n\n            var actual25 = Search(new List\u003Cint\u003E {3,10,10,9,2});\n            var expected25 = -1;\n            var result25 = compareLogic.Compare(actual25, expected25);\n            if (!result25.AreEqual) {throw new Exception(\u0022Exception --- test case 24 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nYou are given a non-empty list of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than or equal to the value of the integer itself. \nThe frequency of an integer is the number of times it appears in the list.\nIf no such a value exist, return -1.\nExamples:\nsearch([4, 1, 2, 2, 3, 1]) == 2\nsearch([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\nsearch([5, 5, 4, 4, 4]) == -1\n","entry_point":"Search","canonical_solution":null,"short-description":"Find highest integer with frequency \u2265 value","name":"find_freq_int"}
{"task_id":"70","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Given list of integers, return list in strange order.\n        /// Strange sorting, is when you start with the minimum value,\n        /// then maximum of the remaining integers, then minimum and so on.\n        /// \n        /// Examples:\n        /// StrangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n        /// StrangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n        /// StrangeSortList([]) == []\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cint\u003E StrangeSortList (List\u003Cint\u003E lst) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = StrangeSortList(new List\u003Cint\u003E {1,2,3,4});\n            var expected1 = new List\u003Cint\u003E {1,4,2,3};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = StrangeSortList(new List\u003Cint\u003E {5,6,7,8,9});\n            var expected2 = new List\u003Cint\u003E {5,9,6,8,7};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = StrangeSortList(new List\u003Cint\u003E {1,2,3,4,5});\n            var expected3 = new List\u003Cint\u003E {1,5,2,4,3};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = StrangeSortList(new List\u003Cint\u003E {5,6,7,8,9,1});\n            var expected4 = new List\u003Cint\u003E {1,9,5,8,6,7};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = StrangeSortList(new List\u003Cint\u003E {5,5,5,5});\n            var expected5 = new List\u003Cint\u003E {5,5,5,5};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = StrangeSortList(new List\u003Cint\u003E {});\n            var expected6 = new List\u003Cint\u003E {};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = StrangeSortList(new List\u003Cint\u003E {1,2,3,4,5,6,7,8});\n            var expected7 = new List\u003Cint\u003E {1,8,2,7,3,6,4,5};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = StrangeSortList(new List\u003Cint\u003E {0,2,2,2,5,5,-5,-5});\n            var expected8 = new List\u003Cint\u003E {-5,5,-5,5,0,2,2,2};\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = StrangeSortList(new List\u003Cint\u003E {111111});\n            var expected9 = new List\u003Cint\u003E {111111};\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nGiven list of integers, return list in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\n\nExamples:\nstrange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\nstrange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\nstrange_sort_list([]) == []\n","entry_point":"StrangeSortList","canonical_solution":null,"short-description":"Sort list by alternating min and max values","name":"min,_max_order"}
{"task_id":"71","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Given the lengths of the three sides of a triangle. Return the area of\n        /// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n        /// Otherwise return -1\n        /// Three sides make a valid triangle when the sum of any two sides is greater \n        /// than the third side.\n        /// Example:\n        /// TriangleArea(3, 4, 5) == 6.00\n        /// TriangleArea(1, 2, 10) == -1\n        /// \n        /// \u003C/summary\u003E\n        public static object TriangleArea (int a, int b, int c) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = TriangleArea(3,4,5);\n            var expected1 = 6.0;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = TriangleArea(1,2,10);\n            var expected2 = -1;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = TriangleArea(4,8,5);\n            var expected3 = 8.18;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = TriangleArea(2,2,2);\n            var expected4 = 1.73;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = TriangleArea(1,2,3);\n            var expected5 = -1;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = TriangleArea(10,5,7);\n            var expected6 = 16.25;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = TriangleArea(2,6,3);\n            var expected7 = -1;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = TriangleArea(1,1,1);\n            var expected8 = 0.43;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = TriangleArea(2,2,10);\n            var expected9 = -1;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n","entry_point":"TriangleArea","canonical_solution":null,"short-description":"Calculate triangle area or return -1","name":"compute_triangle_area"}
{"task_id":"72","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Write a function that returns True if the object q will fly, and False otherwise.\n        /// The object q will fly if it\u0027s balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n        /// \n        /// Example:\n        /// WillItFly([1, 2], 5) \u279E False \n        /// # 1\u002B2 is less than the maximum possible weight, but it\u0027s unbalanced.\n        /// \n        /// WillItFly([3, 2, 3], 1) \u279E False\n        /// # it\u0027s balanced, but 3\u002B2\u002B3 is more than the maximum possible weight.\n        /// \n        /// WillItFly([3, 2, 3], 9) \u279E True\n        /// # 3\u002B2\u002B3 is less than the maximum possible weight, and it\u0027s balanced.\n        /// \n        /// WillItFly([3], 5) \u279E True\n        /// # 3 is less than the maximum possible weight, and it\u0027s balanced.\n        /// \n        /// \u003C/summary\u003E\n        public static bool WillItFly (List\u003Cint\u003E q, int w) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = WillItFly(new List\u003Cint\u003E {3,2,3},9);\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = WillItFly(new List\u003Cint\u003E {1,2},5);\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = WillItFly(new List\u003Cint\u003E {3},5);\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = WillItFly(new List\u003Cint\u003E {3,2,3},1);\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = WillItFly(new List\u003Cint\u003E {1,2,3},6);\n            var expected5 = false;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = WillItFly(new List\u003Cint\u003E {5},5);\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nWrite a function that returns True if the object q will fly, and False otherwise.\nThe object q will fly if it\u0027s balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\nExample:\nwill_it_fly([1, 2], 5) \u279E False \n# 1\u002B2 is less than the maximum possible weight, but it\u0027s unbalanced.\n\nwill_it_fly([3, 2, 3], 1) \u279E False\n# it\u0027s balanced, but 3\u002B2\u002B3 is more than the maximum possible weight.\n\nwill_it_fly([3, 2, 3], 9) \u279E True\n# 3\u002B2\u002B3 is less than the maximum possible weight, and it\u0027s balanced.\n\nwill_it_fly([3], 5) \u279E True\n# 3 is less than the maximum possible weight, and it\u0027s balanced.\n","entry_point":"WillItFly","canonical_solution":null,"short-description":"Function checks if list is balanced and light","name":"object_flight_check"}
{"task_id":"73","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Given an array arr of integers, find the minimum number of elements that\n        /// need to be changed to make the array palindromic. A palindromic array is an array that\n        /// is read the same backwards and forwards. In one change, you can change one element to any other element.\n        /// \n        /// For example:\n        /// SmallestChange([1,2,3,5,4,7,9,6]) == 4\n        /// SmallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n        /// SmallestChange([1, 2, 3, 2, 1]) == 0\n        /// \n        /// \u003C/summary\u003E\n        public static int SmallestChange (List\u003Cint\u003E arr) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SmallestChange(new List\u003Cint\u003E {1,2,3,5,4,7,9,6});\n            var expected1 = 4;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = SmallestChange(new List\u003Cint\u003E {1,2,3,4,3,2,2});\n            var expected2 = 1;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = SmallestChange(new List\u003Cint\u003E {1,4,2});\n            var expected3 = 1;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = SmallestChange(new List\u003Cint\u003E {1,4,4,2});\n            var expected4 = 1;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = SmallestChange(new List\u003Cint\u003E {1,2,3,2,1});\n            var expected5 = 0;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = SmallestChange(new List\u003Cint\u003E {3,1,1,3});\n            var expected6 = 0;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = SmallestChange(new List\u003Cint\u003E {1});\n            var expected7 = 0;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = SmallestChange(new List\u003Cint\u003E {0,1});\n            var expected8 = 1;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nGiven an array arr of integers, find the minimum number of elements that\nneed to be changed to make the array palindromic. A palindromic array is an array that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n\nFor example:\nsmallest_change([1,2,3,5,4,7,9,6]) == 4\nsmallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\nsmallest_change([1, 2, 3, 2, 1]) == 0\n","entry_point":"SmallestChange","canonical_solution":null,"short-description":"Minimum changes to make array palindromic","name":"min_changes_palindrome"}
{"task_id":"74","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Write a function that accepts two lists of strings and returns the list that has \n        /// total number of chars in the all strings of the list less than the other list.\n        /// \n        /// if the two lists have the same number of chars, return the first list.\n        /// \n        /// Examples\n        /// TotalMatch([], []) \u279E []\n        /// TotalMatch([\u0027hi\u0027, \u0027admin\u0027], [\u0027hI\u0027, \u0027Hi\u0027]) \u279E [\u0027hI\u0027, \u0027Hi\u0027]\n        /// TotalMatch([\u0027hi\u0027, \u0027admin\u0027], [\u0027hi\u0027, \u0027hi\u0027, \u0027admin\u0027, \u0027project\u0027]) \u279E [\u0027hi\u0027, \u0027admin\u0027]\n        /// TotalMatch([\u0027hi\u0027, \u0027admin\u0027], [\u0027hI\u0027, \u0027hi\u0027, \u0027hi\u0027]) \u279E [\u0027hI\u0027, \u0027hi\u0027, \u0027hi\u0027]\n        /// TotalMatch([\u00274\u0027], [\u00271\u0027, \u00272\u0027, \u00273\u0027, \u00274\u0027, \u00275\u0027]) \u279E [\u00274\u0027]\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cstring\u003E TotalMatch (List\u003Cstring\u003E lst1, List\u003Cstring\u003E lst2) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = TotalMatch(new List\u003Cstring\u003E {},new List\u003Cstring\u003E {});\n            var expected1 = new List\u003Cstring\u003E {};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = TotalMatch(new List\u003Cstring\u003E {\u0022hi\u0022,\u0022admin\u0022},new List\u003Cstring\u003E {\u0022hi\u0022,\u0022hi\u0022});\n            var expected2 = new List\u003Cstring\u003E {\u0022hi\u0022,\u0022hi\u0022};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = TotalMatch(new List\u003Cstring\u003E {\u0022hi\u0022,\u0022admin\u0022},new List\u003Cstring\u003E {\u0022hi\u0022,\u0022hi\u0022,\u0022admin\u0022,\u0022project\u0022});\n            var expected3 = new List\u003Cstring\u003E {\u0022hi\u0022,\u0022admin\u0022};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = TotalMatch(new List\u003Cstring\u003E {\u00224\u0022},new List\u003Cstring\u003E {\u00221\u0022,\u00222\u0022,\u00223\u0022,\u00224\u0022,\u00225\u0022});\n            var expected4 = new List\u003Cstring\u003E {\u00224\u0022};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = TotalMatch(new List\u003Cstring\u003E {\u0022hi\u0022,\u0022admin\u0022},new List\u003Cstring\u003E {\u0022hI\u0022,\u0022Hi\u0022});\n            var expected5 = new List\u003Cstring\u003E {\u0022hI\u0022,\u0022Hi\u0022};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = TotalMatch(new List\u003Cstring\u003E {\u0022hi\u0022,\u0022admin\u0022},new List\u003Cstring\u003E {\u0022hI\u0022,\u0022hi\u0022,\u0022hi\u0022});\n            var expected6 = new List\u003Cstring\u003E {\u0022hI\u0022,\u0022hi\u0022,\u0022hi\u0022};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = TotalMatch(new List\u003Cstring\u003E {\u0022hi\u0022,\u0022admin\u0022},new List\u003Cstring\u003E {\u0022hI\u0022,\u0022hi\u0022,\u0022hii\u0022});\n            var expected7 = new List\u003Cstring\u003E {\u0022hi\u0022,\u0022admin\u0022};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = TotalMatch(new List\u003Cstring\u003E {},new List\u003Cstring\u003E {\u0022this\u0022});\n            var expected8 = new List\u003Cstring\u003E {};\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = TotalMatch(new List\u003Cstring\u003E {\u0022this\u0022},new List\u003Cstring\u003E {});\n            var expected9 = new List\u003Cstring\u003E {};\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nWrite a function that accepts two lists of strings and returns the list that has \ntotal number of chars in the all strings of the list less than the other list.\n\nif the two lists have the same number of chars, return the first list.\n\nExamples\ntotal_match([], []) \u279E []\ntotal_match([\u0027hi\u0027, \u0027admin\u0027], [\u0027hI\u0027, \u0027Hi\u0027]) \u279E [\u0027hI\u0027, \u0027Hi\u0027]\ntotal_match([\u0027hi\u0027, \u0027admin\u0027], [\u0027hi\u0027, \u0027hi\u0027, \u0027admin\u0027, \u0027project\u0027]) \u279E [\u0027hi\u0027, \u0027admin\u0027]\ntotal_match([\u0027hi\u0027, \u0027admin\u0027], [\u0027hI\u0027, \u0027hi\u0027, \u0027hi\u0027]) \u279E [\u0027hI\u0027, \u0027hi\u0027, \u0027hi\u0027]\ntotal_match([\u00274\u0027], [\u00271\u0027, \u00272\u0027, \u00273\u0027, \u00274\u0027, \u00275\u0027]) \u279E [\u00274\u0027]\n","entry_point":"TotalMatch","canonical_solution":null,"short-description":"Return list with fewer total chars","name":"compare_lists"}
{"task_id":"75","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n        /// and false otherwise.\n        /// Knowing that (a) is less then 100. \n        /// Example:\n        /// IsMultiplyPrime(30) == True\n        /// 30 = 2 * 3 * 5\n        /// \n        /// \u003C/summary\u003E\n        public static bool IsMultiplyPrime (int a) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = IsMultiplyPrime(5);\n            var expected1 = false;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = IsMultiplyPrime(30);\n            var expected2 = true;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = IsMultiplyPrime(8);\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = IsMultiplyPrime(10);\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = IsMultiplyPrime(125);\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = IsMultiplyPrime(105);\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = IsMultiplyPrime(126);\n            var expected7 = false;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = IsMultiplyPrime(729);\n            var expected8 = false;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = IsMultiplyPrime(891);\n            var expected9 = false;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n            var actual10 = IsMultiplyPrime(1001);\n            var expected10 = true;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\u0022Exception --- test case 9 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Write a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100. \nExample:\nis_multiply_prime(30) == True\n30 = 2 * 3 * 5\n","entry_point":"IsMultiplyPrime","canonical_solution":null,"short-description":"Check if a number is a product of 3 primes","name":"check_3_primes"}
{"task_id":"76","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Your task is to write a function that returns true if a number x is a simple\n        /// power of n and false in other cases.\n        /// x is a simple power of n if n**int=x\n        /// For example:\n        /// IsSimplePower(1, 4) =\u003E true\n        /// IsSimplePower(2, 2) =\u003E true\n        /// IsSimplePower(8, 2) =\u003E true\n        /// IsSimplePower(3, 2) =\u003E false\n        /// IsSimplePower(3, 1) =\u003E false\n        /// IsSimplePower(5, 3) =\u003E false\n        /// \n        /// \u003C/summary\u003E\n        public static bool IsSimplePower (int x, int n) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = IsSimplePower(16,2);\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = IsSimplePower(143214,16);\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = IsSimplePower(4,2);\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = IsSimplePower(9,3);\n            var expected4 = true;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = IsSimplePower(16,4);\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = IsSimplePower(24,2);\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = IsSimplePower(128,4);\n            var expected7 = false;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = IsSimplePower(12,6);\n            var expected8 = false;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = IsSimplePower(1,1);\n            var expected9 = true;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n            var actual10 = IsSimplePower(1,12);\n            var expected10 = true;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\u0022Exception --- test case 9 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Your task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\nis_simple_power(1, 4) =\u003E true\nis_simple_power(2, 2) =\u003E true\nis_simple_power(8, 2) =\u003E true\nis_simple_power(3, 2) =\u003E false\nis_simple_power(3, 1) =\u003E false\nis_simple_power(5, 3) =\u003E false\n","entry_point":"IsSimplePower","canonical_solution":null,"short-description":"Check if x is a power of n (n**int=x)","name":"check_power"}
{"task_id":"77","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Write a function that takes an integer a and returns True \n        /// if this ingeger is a cube of some integer number.\n        /// Note: you may assume the input is always valid.\n        /// Examples:\n        /// Iscube(1) ==\u003E True\n        /// Iscube(2) ==\u003E False\n        /// Iscube(-1) ==\u003E True\n        /// Iscube(64) ==\u003E True\n        /// Iscube(0) ==\u003E True\n        /// Iscube(180) ==\u003E False\n        /// \n        /// \u003C/summary\u003E\n        public static bool Iscube (int a) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Iscube(1);\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = Iscube(2);\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = Iscube(-1);\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = Iscube(64);\n            var expected4 = true;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = Iscube(180);\n            var expected5 = false;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = Iscube(1000);\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = Iscube(0);\n            var expected7 = true;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = Iscube(1729);\n            var expected8 = false;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nWrite a function that takes an integer a and returns True \nif this ingeger is a cube of some integer number.\nNote: you may assume the input is always valid.\nExamples:\niscube(1) ==\u003E True\niscube(2) ==\u003E False\niscube(-1) ==\u003E True\niscube(64) ==\u003E True\niscube(0) ==\u003E True\niscube(180) ==\u003E False\n","entry_point":"Iscube","canonical_solution":null,"short-description":"Check if an integer is a perfect cube","name":"check_cube"}
{"task_id":"78","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// You have been tasked to write a function that receives \n        /// a hexadecimal number as a string and counts the number of hexadecimal \n        /// digits that are primes (prime number, or a prime, is a natural number \n        /// greater than 1 that is not a product of two smaller natural numbers).\n        /// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n        /// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n        /// So you have to determine a number of the following digits: 2, 3, 5, 7, \n        /// B (=decimal 11), D (=decimal 13).\n        /// Note: you may assume the input is always correct or empty string, \n        /// and symbols A,B,C,D,E,F are always uppercase.\n        /// Examples:\n        /// For num = \u0022AB\u0022 the output should be 1.\n        /// For num = \u00221077E\u0022 the output should be 2.\n        /// For num = \u0022ABED1A33\u0022 the output should be 4.\n        /// For num = \u0022123456789ABCDEF0\u0022 the output should be 6.\n        /// For num = \u00222020\u0022 the output should be 2.\n        /// \n        /// \u003C/summary\u003E\n        public static int HexKey (object num) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = HexKey(\u0022AB\u0022);\n            var expected1 = 1;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = HexKey(\u00221077E\u0022);\n            var expected2 = 2;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = HexKey(\u0022ABED1A33\u0022);\n            var expected3 = 4;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = HexKey(\u00222020\u0022);\n            var expected4 = 2;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = HexKey(\u0022123456789ABCDEF0\u0022);\n            var expected5 = 6;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = HexKey(\u0022112233445566778899AABBCCDDEEFF00\u0022);\n            var expected6 = 12;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = HexKey(new List\u003Cobject\u003E {});\n            var expected7 = 0;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"You have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \u0022AB\u0022 the output should be 1.\nFor num = \u00221077E\u0022 the output should be 2.\nFor num = \u0022ABED1A33\u0022 the output should be 4.\nFor num = \u0022123456789ABCDEF0\u0022 the output should be 6.\nFor num = \u00222020\u0022 the output should be 2.\n","entry_point":"HexKey","canonical_solution":null,"short-description":"Count prime digits in a hexadecimal string","name":"count_prime_hex"}
{"task_id":"79","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// You will be given a number in decimal form and your task is to convert it to\n        /// binary format. The function should return a string, with each character representing a binary\n        /// number. Each character in the string will be \u00270\u0027 or \u00271\u0027.\n        /// \n        /// There will be an extra couple of characters \u0027db\u0027 at the beginning and at the end of the string.\n        /// The extra characters are there to help with the format.\n        /// \n        /// Examples:\n        /// DecimalToBinary(15)   # returns \u0022db1111db\u0022\n        /// DecimalToBinary(32)   # returns \u0022db100000db\u0022\n        /// \n        /// \u003C/summary\u003E\n        public static string DecimalToBinary (int decimal) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = DecimalToBinary(0);\n            var expected1 = \u0022db0db\u0022;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = DecimalToBinary(32);\n            var expected2 = \u0022db100000db\u0022;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = DecimalToBinary(103);\n            var expected3 = \u0022db1100111db\u0022;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = DecimalToBinary(15);\n            var expected4 = \u0022db1111db\u0022;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"You will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be \u00270\u0027 or \u00271\u0027.\n\nThere will be an extra couple of characters \u0027db\u0027 at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   # returns \u0022db1111db\u0022\ndecimal_to_binary(32)   # returns \u0022db100000db\u0022\n","entry_point":"DecimalToBinary","canonical_solution":null,"short-description":"Convert decimal to binary with \u0027db\u0027 padding","name":"convert_to_db"}
{"task_id":"80","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// You are given a string s.\n        /// Your task is to check if the string is happy or not.\n        /// A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n        /// For example:\n        /// IsHappy(a) =\u003E False\n        /// IsHappy(aa) =\u003E False\n        /// IsHappy(abcd) =\u003E True\n        /// IsHappy(aabb) =\u003E False\n        /// IsHappy(adb) =\u003E True\n        /// IsHappy(xyy) =\u003E False\n        /// \n        /// \u003C/summary\u003E\n        public static bool IsHappy (string s) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = IsHappy(\u0022a\u0022);\n            var expected1 = false;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = IsHappy(\u0022aa\u0022);\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = IsHappy(\u0022abcd\u0022);\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = IsHappy(\u0022aabb\u0022);\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = IsHappy(\u0022adb\u0022);\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = IsHappy(\u0022xyy\u0022);\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = IsHappy(\u0022iopaxpoi\u0022);\n            var expected7 = true;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = IsHappy(\u0022iopaxioi\u0022);\n            var expected8 = false;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"You are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(a) =\u003E False\nis_happy(aa) =\u003E False\nis_happy(abcd) =\u003E True\nis_happy(aabb) =\u003E False\nis_happy(adb) =\u003E True\nis_happy(xyy) =\u003E False\n","entry_point":"IsHappy","canonical_solution":null,"short-description":"Check if every 3 consecutive letters differ","name":"happy_string_check"}
{"task_id":"81","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// It is the last week of the semester and the teacher has to give the grades\n        /// to students. The teacher has been making her own algorithm for grading.\n        /// The only problem is, she has lost the code she used for grading.\n        /// She has given you a list of GPAs for some students and you have to write \n        /// a function that can output a list of letter grades using the following table:\n        /// GPA       |    Letter grade\n        /// 4.0                A\u002B\n        /// \u003E 3.7                A \n        /// \u003E 3.3                A- \n        /// \u003E 3.0                B\u002B\n        /// \u003E 2.7                B \n        /// \u003E 2.3                B-\n        /// \u003E 2.0                C\u002B\n        /// \u003E 1.7                C\n        /// \u003E 1.3                C-\n        /// \u003E 1.0                D\u002B \n        /// \u003E 0.7                D \n        /// \u003E 0.0                D-\n        /// 0.0                E\n        /// \n        /// \n        /// Example:\n        /// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==\u003E [\u0027A\u002B\u0027, \u0027B\u0027, \u0027C-\u0027, \u0027C\u0027, \u0027A-\u0027]\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cstring\u003E NumericalLetterGrade (List\u003Cobject\u003E grades) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = NumericalLetterGrade(new List\u003Cobject\u003E {4.0,3,1.7,2,3.5});\n            var expected1 = new List\u003Cstring\u003E {\u0022A\u002B\u0022,\u0022B\u0022,\u0022C-\u0022,\u0022C\u0022,\u0022A-\u0022};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = NumericalLetterGrade(new List\u003Cobject\u003E {1.2});\n            var expected2 = new List\u003Cstring\u003E {\u0022D\u002B\u0022};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = NumericalLetterGrade(new List\u003Cobject\u003E {0.5});\n            var expected3 = new List\u003Cstring\u003E {\u0022D-\u0022};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = NumericalLetterGrade(new List\u003Cobject\u003E {0.0});\n            var expected4 = new List\u003Cstring\u003E {\u0022E\u0022};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = NumericalLetterGrade(new List\u003Cobject\u003E {1,0.3,1.5,2.8,3.3});\n            var expected5 = new List\u003Cstring\u003E {\u0022D\u0022,\u0022D-\u0022,\u0022C-\u0022,\u0022B\u0022,\u0022B\u002B\u0022};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = NumericalLetterGrade(new List\u003Cobject\u003E {0,0.7});\n            var expected6 = new List\u003Cstring\u003E {\u0022E\u0022,\u0022D-\u0022};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"It is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a list of GPAs for some students and you have to write \na function that can output a list of letter grades using the following table:\nGPA       |    Letter grade\n4.0                A\u002B\n\u003E 3.7                A \n\u003E 3.3                A- \n\u003E 3.0                B\u002B\n\u003E 2.7                B \n\u003E 2.3                B-\n\u003E 2.0                C\u002B\n\u003E 1.7                C\n\u003E 1.3                C-\n\u003E 1.0                D\u002B \n\u003E 0.7                D \n\u003E 0.0                D-\n0.0                E\n\n\nExample:\ngrade_equation([4.0, 3, 1.7, 2, 3.5]) ==\u003E [\u0027A\u002B\u0027, \u0027B\u0027, \u0027C-\u0027, \u0027C\u0027, \u0027A-\u0027]\n","entry_point":"NumericalLetterGrade","canonical_solution":null,"short-description":"Teacher lost grading code, needs GPA to letter conversion","name":"write_grade_func"}
{"task_id":"82","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Write a function that takes a string and returns True if the string\n        /// length is a prime number or False otherwise\n        /// Examples\n        /// PrimeLength(\u0027Hello\u0027) == True\n        /// PrimeLength(\u0027abcdcba\u0027) == True\n        /// PrimeLength(\u0027kittens\u0027) == True\n        /// PrimeLength(\u0027orange\u0027) == False\n        /// \n        /// \u003C/summary\u003E\n        public static bool PrimeLength (string string0) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = PrimeLength(\u0022Hello\u0022);\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = PrimeLength(\u0022abcdcba\u0022);\n            var expected2 = true;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = PrimeLength(\u0022kittens\u0022);\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = PrimeLength(\u0022orange\u0022);\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = PrimeLength(\u0022wow\u0022);\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = PrimeLength(\u0022world\u0022);\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = PrimeLength(\u0022MadaM\u0022);\n            var expected7 = true;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = PrimeLength(\u0022Wow\u0022);\n            var expected8 = true;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = PrimeLength(\u0022\u0022);\n            var expected9 = false;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n            var actual10 = PrimeLength(\u0022HI\u0022);\n            var expected10 = true;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\u0022Exception --- test case 9 failed to pass\u0022);}\n\n            var actual11 = PrimeLength(\u0022go\u0022);\n            var expected11 = true;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\u0022Exception --- test case 10 failed to pass\u0022);}\n\n            var actual12 = PrimeLength(\u0022gogo\u0022);\n            var expected12 = false;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\u0022Exception --- test case 11 failed to pass\u0022);}\n\n            var actual13 = PrimeLength(\u0022aaaaaaaaaaaaaaa\u0022);\n            var expected13 = false;\n            var result13 = compareLogic.Compare(actual13, expected13);\n            if (!result13.AreEqual) {throw new Exception(\u0022Exception --- test case 12 failed to pass\u0022);}\n\n            var actual14 = PrimeLength(\u0022Madam\u0022);\n            var expected14 = true;\n            var result14 = compareLogic.Compare(actual14, expected14);\n            if (!result14.AreEqual) {throw new Exception(\u0022Exception --- test case 13 failed to pass\u0022);}\n\n            var actual15 = PrimeLength(\u0022M\u0022);\n            var expected15 = false;\n            var result15 = compareLogic.Compare(actual15, expected15);\n            if (!result15.AreEqual) {throw new Exception(\u0022Exception --- test case 14 failed to pass\u0022);}\n\n            var actual16 = PrimeLength(\u00220\u0022);\n            var expected16 = false;\n            var result16 = compareLogic.Compare(actual16, expected16);\n            if (!result16.AreEqual) {throw new Exception(\u0022Exception --- test case 15 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Write a function that takes a string and returns True if the string\nlength is a prime number or False otherwise\nExamples\nprime_length(\u0027Hello\u0027) == True\nprime_length(\u0027abcdcba\u0027) == True\nprime_length(\u0027kittens\u0027) == True\nprime_length(\u0027orange\u0027) == False\n","entry_point":"PrimeLength","canonical_solution":null,"short-description":"Check if string length is a prime number","name":"prime_length_check"}
{"task_id":"83","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Given a positive integer n, return the count of the numbers of n-digit\n        /// positive integers that start or end with 1.\n        /// \n        /// \u003C/summary\u003E\n        public static int StartsOneEnds (int n) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = StartsOneEnds(1);\n            var expected1 = 1;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = StartsOneEnds(2);\n            var expected2 = 18;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = StartsOneEnds(3);\n            var expected3 = 180;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = StartsOneEnds(4);\n            var expected4 = 1800;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = StartsOneEnds(5);\n            var expected5 = 18000;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\n","entry_point":"StartsOneEnds","canonical_solution":null,"short-description":"Count n-digit integers starting or ending with 1","name":"n-digit_nums_1"}
{"task_id":"84","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Given a positive integer N, return the total sum of its digits in binary.\n        /// \n        /// Example\n        /// For N = 1000, the sum of digits will be 1 the output should be \u00221\u0022.\n        /// For N = 150, the sum of digits will be 6 the output should be \u0022110\u0022.\n        /// For N = 147, the sum of digits will be 12 the output should be \u00221100\u0022.\n        /// \n        /// Variables:\n        /// @N integer\n        /// Constraints: 0 \u2264 N \u2264 10000.\n        /// Output:\n        /// a string of binary number\n        /// \n        /// \u003C/summary\u003E\n        public static string Solve (int N) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Solve(1000);\n            var expected1 = \u00221\u0022;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = Solve(150);\n            var expected2 = \u0022110\u0022;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = Solve(147);\n            var expected3 = \u00221100\u0022;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = Solve(333);\n            var expected4 = \u00221001\u0022;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = Solve(963);\n            var expected5 = \u002210010\u0022;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Given a positive integer N, return the total sum of its digits in binary.\n\nExample\nFor N = 1000, the sum of digits will be 1 the output should be \u00221\u0022.\nFor N = 150, the sum of digits will be 6 the output should be \u0022110\u0022.\nFor N = 147, the sum of digits will be 12 the output should be \u00221100\u0022.\n\nVariables:\n@N integer\nConstraints: 0 \u2264 N \u2264 10000.\nOutput:\na string of binary number\n","entry_point":"Solve","canonical_solution":null,"short-description":"Sum of digits of N in binary","name":"binary_digit_sum"}
{"task_id":"85","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Given a non-empty list of integers lst. Add the even elements that are at odd indices..\n        /// \n        /// \n        /// Examples:\n        /// Add([4, 2, 6, 7]) ==\u003E 2 \n        /// \n        /// \u003C/summary\u003E\n        public static int Add (List\u003Cint\u003E lst) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Add(new List\u003Cint\u003E {4,88});\n            var expected1 = 88;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = Add(new List\u003Cint\u003E {4,5,6,7,2,122});\n            var expected2 = 122;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = Add(new List\u003Cint\u003E {4,0,6,7});\n            var expected3 = 0;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = Add(new List\u003Cint\u003E {4,4,6,8});\n            var expected4 = 12;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\nExamples:\nadd([4, 2, 6, 7]) ==\u003E 2 \n","entry_point":"Add","canonical_solution":null,"short-description":"Sum even numbers at odd indices","name":"sum_even_odds"}
{"task_id":"86","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Write a function that takes a string and returns an ordered version of it.\n        /// Ordered version of string, is a string where all words (separated by space)\n        /// are replaced by a new word where all the characters arranged in\n        /// ascending order based on ascii value.\n        /// Note: You should keep the order of words and blank spaces in the sentence.\n        /// \n        /// For example:\n        /// AntiShuffle(\u0027Hi\u0027) returns \u0027Hi\u0027\n        /// AntiShuffle(\u0027hello\u0027) returns \u0027ehllo\u0027\n        /// AntiShuffle(\u0027Hello World!!!\u0027) returns \u0027Hello !!!Wdlor\u0027\n        /// \n        /// \u003C/summary\u003E\n        public static string AntiShuffle (string s) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = AntiShuffle(\u0022Hi\u0022);\n            var expected1 = \u0022Hi\u0022;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = AntiShuffle(\u0022hello\u0022);\n            var expected2 = \u0022ehllo\u0022;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = AntiShuffle(\u0022number\u0022);\n            var expected3 = \u0022bemnru\u0022;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = AntiShuffle(\u0022abcd\u0022);\n            var expected4 = \u0022abcd\u0022;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = AntiShuffle(\u0022Hello World!!!\u0022);\n            var expected5 = \u0022Hello !!!Wdlor\u0022;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = AntiShuffle(\u0022\u0022);\n            var expected6 = \u0022\u0022;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = AntiShuffle(\u0022Hi. My name is Mister Robot. How are you?\u0022);\n            var expected7 = \u0022.Hi My aemn is Meirst .Rboot How aer ?ouy\u0022;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle(\u0027Hi\u0027) returns \u0027Hi\u0027\nanti_shuffle(\u0027hello\u0027) returns \u0027ehllo\u0027\nanti_shuffle(\u0027Hello World!!!\u0027) returns \u0027Hello !!!Wdlor\u0027\n","entry_point":"AntiShuffle","canonical_solution":null,"short-description":"Sort characters in each word in the string","name":"ascii_sort_words"}
{"task_id":"87","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// You are given a 2 dimensional data, as a nested lists,\n        /// which is similar to matrix, however, unlike matrices,\n        /// each row may contain a different number of columns.\n        /// Given lst, and integer x, find integers x in the list,\n        /// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n        /// each tuple is a coordinate - (row, columns), starting with 0.\n        /// Sort coordinates initially by rows in ascending order.\n        /// Also, sort coordinates of the row by columns in descending order.\n        /// \n        /// Examples:\n        /// GetRow([\n        /// [1,2,3,4,5,6],\n        /// [1,2,3,4,1,6],\n        /// [1,2,3,4,5,1]\n        /// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n        /// GetRow([], 1) == []\n        /// GetRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003CList\u003Cint\u003E\u003E GetRow (List\u003CList\u003Cint\u003E\u003E lst, int x) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = GetRow(new List\u003CList\u003Cint\u003E\u003E {new List\u003Cint\u003E {1,2,3,4,5,6},new List\u003Cint\u003E {1,2,3,4,1,6},new List\u003Cint\u003E {1,2,3,4,5,1}},1);\n            var expected1 = new List\u003CList\u003Cint\u003E\u003E {new List\u003Cint\u003E {0,0},new List\u003Cint\u003E {1,4},new List\u003Cint\u003E {1,0},new List\u003Cint\u003E {2,5},new List\u003Cint\u003E {2,0}};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = GetRow(new List\u003CList\u003Cint\u003E\u003E {new List\u003Cint\u003E {1,2,3,4,5,6},new List\u003Cint\u003E {1,2,3,4,5,6},new List\u003Cint\u003E {1,2,3,4,5,6},new List\u003Cint\u003E {1,2,3,4,5,6},new List\u003Cint\u003E {1,2,3,4,5,6},new List\u003Cint\u003E {1,2,3,4,5,6}},2);\n            var expected2 = new List\u003CList\u003Cint\u003E\u003E {new List\u003Cint\u003E {0,1},new List\u003Cint\u003E {1,1},new List\u003Cint\u003E {2,1},new List\u003Cint\u003E {3,1},new List\u003Cint\u003E {4,1},new List\u003Cint\u003E {5,1}};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = GetRow(new List\u003CList\u003Cint\u003E\u003E {new List\u003Cint\u003E {1,2,3,4,5,6},new List\u003Cint\u003E {1,2,3,4,5,6},new List\u003Cint\u003E {1,1,3,4,5,6},new List\u003Cint\u003E {1,2,1,4,5,6},new List\u003Cint\u003E {1,2,3,1,5,6},new List\u003Cint\u003E {1,2,3,4,1,6},new List\u003Cint\u003E {1,2,3,4,5,1}},1);\n            var expected3 = new List\u003CList\u003Cint\u003E\u003E {new List\u003Cint\u003E {0,0},new List\u003Cint\u003E {1,0},new List\u003Cint\u003E {2,1},new List\u003Cint\u003E {2,0},new List\u003Cint\u003E {3,2},new List\u003Cint\u003E {3,0},new List\u003Cint\u003E {4,3},new List\u003Cint\u003E {4,0},new List\u003Cint\u003E {5,4},new List\u003Cint\u003E {5,0},new List\u003Cint\u003E {6,5},new List\u003Cint\u003E {6,0}};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = GetRow(new List\u003CList\u003Cint\u003E\u003E {},1);\n            var expected4 = new List\u003CList\u003Cint\u003E\u003E {};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = GetRow(new List\u003CList\u003Cint\u003E\u003E {new List\u003Cint\u003E {1}},2);\n            var expected5 = new List\u003CList\u003Cint\u003E\u003E {};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = GetRow(new List\u003CList\u003Cint\u003E\u003E {new List\u003Cint\u003E {},new List\u003Cint\u003E {1},new List\u003Cint\u003E {1,2,3}},3);\n            var expected6 = new List\u003CList\u003Cint\u003E\u003E {new List\u003Cint\u003E {2,2}};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nYou are given a 2 dimensional data, as a nested lists,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the list,\nand return list of tuples, [(x1, y1), (x2, y2) ...] such that\neach tuple is a coordinate - (row, columns), starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\n\nExamples:\nget_row([\n[1,2,3,4,5,6],\n[1,2,3,4,1,6],\n[1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nget_row([], 1) == []\nget_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n","entry_point":"GetRow","canonical_solution":null,"short-description":"Find x in nested lists, return sorted coordinates","name":"find_x_in_2d_list"}
{"task_id":"88","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Given an array of non-negative integers, return a copy of the given array after sorting,\n        /// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n        /// or sort it in descending order if the sum( first index value, last index value) is even.\n        /// \n        /// Note:\n        /// * don\u0027t change the given array.\n        /// \n        /// Examples:\n        /// * SortArray([]) =\u003E []\n        /// * SortArray([5]) =\u003E [5]\n        /// * SortArray([2, 4, 3, 0, 1, 5]) =\u003E [0, 1, 2, 3, 4, 5]\n        /// * SortArray([2, 4, 3, 0, 1, 5, 6]) =\u003E [6, 5, 4, 3, 2, 1, 0]\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cint\u003E SortArray (List\u003Cint\u003E array) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SortArray(new List\u003Cint\u003E {});\n            var expected1 = new List\u003Cint\u003E {};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = SortArray(new List\u003Cint\u003E {5});\n            var expected2 = new List\u003Cint\u003E {5};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = SortArray(new List\u003Cint\u003E {2,4,3,0,1,5});\n            var expected3 = new List\u003Cint\u003E {0,1,2,3,4,5};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = SortArray(new List\u003Cint\u003E {2,4,3,0,1,5,6});\n            var expected4 = new List\u003Cint\u003E {6,5,4,3,2,1,0};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = SortArray(new List\u003Cint\u003E {2,1});\n            var expected5 = new List\u003Cint\u003E {1,2};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = SortArray(new List\u003Cint\u003E {15,42,87,32,11,0});\n            var expected6 = new List\u003Cint\u003E {0,11,15,32,42,87};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = SortArray(new List\u003Cint\u003E {21,14,23,11});\n            var expected7 = new List\u003Cint\u003E {23,21,14,11};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nGiven an array of non-negative integers, return a copy of the given array after sorting,\nyou will sort the given array in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\n\nNote:\n* don\u0027t change the given array.\n\nExamples:\n* sort_array([]) =\u003E []\n* sort_array([5]) =\u003E [5]\n* sort_array([2, 4, 3, 0, 1, 5]) =\u003E [0, 1, 2, 3, 4, 5]\n* sort_array([2, 4, 3, 0, 1, 5, 6]) =\u003E [6, 5, 4, 3, 2, 1, 0]\n","entry_point":"SortArray","canonical_solution":null,"short-description":"Sort array by odd/even sum of edge values","name":"sort_by_sum"}
{"task_id":"89","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Create a function Encrypt that takes a string as an argument and\n        /// returns a string Encrypted with the alphabet being rotated. \n        /// The alphabet should be rotated in a manner such that the letters \n        /// shift down by two multiplied to two places.\n        /// For example:\n        /// Encrypt(\u0027hi\u0027) returns \u0027lm\u0027\n        /// Encrypt(\u0027asdfghjkl\u0027) returns \u0027ewhjklnop\u0027\n        /// Encrypt(\u0027gf\u0027) returns \u0027kj\u0027\n        /// Encrypt(\u0027et\u0027) returns \u0027ix\u0027\n        /// \n        /// \u003C/summary\u003E\n        public static string Encrypt (string s) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Encrypt(\u0022hi\u0022);\n            var expected1 = \u0022lm\u0022;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = Encrypt(\u0022asdfghjkl\u0022);\n            var expected2 = \u0022ewhjklnop\u0022;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = Encrypt(\u0022gf\u0022);\n            var expected3 = \u0022kj\u0022;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = Encrypt(\u0022et\u0022);\n            var expected4 = \u0022ix\u0022;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = Encrypt(\u0022faewfawefaewg\u0022);\n            var expected5 = \u0022jeiajeaijeiak\u0022;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = Encrypt(\u0022hellomyfriend\u0022);\n            var expected6 = \u0022lippsqcjvmirh\u0022;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = Encrypt(\u0022dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\u0022);\n            var expected7 = \u0022hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\u0022;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = Encrypt(\u0022a\u0022);\n            var expected8 = \u0022e\u0022;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Create a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places.\nFor example:\nencrypt(\u0027hi\u0027) returns \u0027lm\u0027\nencrypt(\u0027asdfghjkl\u0027) returns \u0027ewhjklnop\u0027\nencrypt(\u0027gf\u0027) returns \u0027kj\u0027\nencrypt(\u0027et\u0027) returns \u0027ix\u0027\n","entry_point":"Encrypt","canonical_solution":null,"short-description":"Encrypt function rotates letters by 4 places","name":"rotate_by_4"}
{"task_id":"90","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// You are given a list of integers.\n        /// Write a function NextSmallest() that returns the 2nd smallest element of the list.\n        /// Return None if there is no such element.\n        /// \n        /// NextSmallest([1, 2, 3, 4, 5]) == 2\n        /// NextSmallest([5, 1, 4, 3, 2]) == 2\n        /// NextSmallest([]) == None\n        /// NextSmallest([1, 1]) == None\n        /// \n        /// \u003C/summary\u003E\n        public static object NextSmallest (List\u003Cint\u003E lst) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = NextSmallest(new List\u003Cint\u003E {1,2,3,4,5});\n            var expected1 = 2;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = NextSmallest(new List\u003Cint\u003E {5,1,4,3,2});\n            var expected2 = 2;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = NextSmallest(new List\u003Cint\u003E {});\n            var expected3 = null;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = NextSmallest(new List\u003Cint\u003E {1,1});\n            var expected4 = null;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = NextSmallest(new List\u003Cint\u003E {1,1,1,1,0});\n            var expected5 = 1;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = NextSmallest(new List\u003Cint\u003E {1,1});\n            var expected6 = null;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = NextSmallest(new List\u003Cint\u003E {-35,34,12,-45});\n            var expected7 = -35;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nYou are given a list of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the list.\nReturn None if there is no such element.\n\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None\n","entry_point":"NextSmallest","canonical_solution":null,"short-description":"Return 2nd smallest integer or None","name":"2nd_smallest"}
{"task_id":"91","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// You\u0027ll be given a string of words, and your task is to count the number\n        /// of boredoms. A boredom is a sentence that starts with the word \u0022I\u0022.\n        /// Sentences are delimited by \u0027.\u0027, \u0027?\u0027 or \u0027!\u0027.\n        /// \n        /// For example:\n        /// \u003E\u003E\u003E IsBored(\u0022Hello world\u0022)\n        /// 0\n        /// \u003E\u003E\u003E IsBored(\u0022The sky is blue. The sun is shining. I love this weather\u0022)\n        /// 1\n        /// \n        /// \u003C/summary\u003E\n        public static int IsBored (string S) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = IsBored(\u0022Hello world\u0022);\n            var expected1 = 0;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = IsBored(\u0022Is the sky blue?\u0022);\n            var expected2 = 0;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = IsBored(\u0022I love It !\u0022);\n            var expected3 = 1;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = IsBored(\u0022bIt\u0022);\n            var expected4 = 0;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = IsBored(\u0022I feel good today. I will be productive. will kill It\u0022);\n            var expected5 = 2;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = IsBored(\u0022You and I are going for a walk\u0022);\n            var expected6 = 0;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nYou\u0027ll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \u0022I\u0022.\nSentences are delimited by \u0027.\u0027, \u0027?\u0027 or \u0027!\u0027.\n\nFor example:\n\u003E\u003E\u003E is_bored(\u0022Hello world\u0022)\n0\n\u003E\u003E\u003E is_bored(\u0022The sky is blue. The sun is shining. I love this weather\u0022)\n1\n","entry_point":"IsBored","canonical_solution":null,"short-description":"Count sequences starting with \u0022I\u0022","name":"count_sentences"}
{"task_id":"92","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Create a function that takes 3 numbers.\n        /// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n        /// Returns false in any other cases.\n        /// \n        /// Examples\n        /// AnyInt(5, 2, 7) \u279E True\n        /// \n        /// AnyInt(3, 2, 2) \u279E False\n        /// \n        /// AnyInt(3, -2, 1) \u279E True\n        /// \n        /// AnyInt(3.6, -2.2, 2) \u279E False\n        /// \n        /// \n        /// \n        /// \n        /// \u003C/summary\u003E\n        public static bool AnyInt (object x, object y, object z) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = AnyInt(2,3,1);\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = AnyInt(2.5,2,3);\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = AnyInt(1.5,5,3.5);\n            var expected3 = false;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = AnyInt(2,6,2);\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = AnyInt(4,2,2);\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = AnyInt(2.2,2.2,2.2);\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = AnyInt(-4,6,2);\n            var expected7 = true;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = AnyInt(2,1,1);\n            var expected8 = true;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = AnyInt(3,4,7);\n            var expected9 = true;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n            var actual10 = AnyInt(3.0,4,7);\n            var expected10 = false;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\u0022Exception --- test case 9 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nCreate a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\n\nExamples\nany_int(5, 2, 7) \u279E True\n\nany_int(3, 2, 2) \u279E False\n\nany_int(3, -2, 1) \u279E True\n\nany_int(3.6, -2.2, 2) \u279E False\n\n\n\n","entry_point":"AnyInt","canonical_solution":null,"short-description":"Check if a number equals sum of others","name":"sum_check_ints"}
{"task_id":"93","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Write a function that takes a message, and Encodes in such a \n        /// way that it swaps case of all letters, replaces all vowels in \n        /// the message with the letter that appears 2 places ahead of that \n        /// vowel in the english alphabet. \n        /// Assume only letters. \n        /// \n        /// Examples:\n        /// \u003E\u003E\u003E Encode(\u0027test\u0027)\n        /// \u0027TGST\u0027\n        /// \u003E\u003E\u003E Encode(\u0027This is a message\u0027)\n        /// \u0027tHKS KS C MGSSCGG\u0027\n        /// \n        /// \u003C/summary\u003E\n        public static string Encode (string message) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Encode(\u0022TEST\u0022);\n            var expected1 = \u0022tgst\u0022;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = Encode(\u0022Mudasir\u0022);\n            var expected2 = \u0022mWDCSKR\u0022;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = Encode(\u0022YES\u0022);\n            var expected3 = \u0022ygs\u0022;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = Encode(\u0022This is a message\u0022);\n            var expected4 = \u0022tHKS KS C MGSSCGG\u0022;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = Encode(\u0022I DoNt KnOw WhAt tO WrItE\u0022);\n            var expected5 = \u0022k dQnT kNqW wHcT Tq wRkTg\u0022;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nWrite a function that takes a message, and encodes in such a \nway that it swaps case of all letters, replaces all vowels in \nthe message with the letter that appears 2 places ahead of that \nvowel in the english alphabet. \nAssume only letters. \n\nExamples:\n\u003E\u003E\u003E encode(\u0027test\u0027)\n\u0027TGST\u0027\n\u003E\u003E\u003E encode(\u0027This is a message\u0027)\n\u0027tHKS KS C MGSSCGG\u0027\n","entry_point":"Encode","canonical_solution":null,"short-description":"Swap case \u0026 replace vowels with next 2 letters","name":"encode_letters"}
{"task_id":"94","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// You are given a list of integers.\n        /// You need to find the largest prime value and return the sum of its digits.\n        /// \n        /// Examples:\n        /// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n        /// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n        /// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n        /// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n        /// For lst = [0,81,12,3,1,21] the output should be 3\n        /// For lst = [0,8,1,2,1,7] the output should be 7\n        /// \n        /// \u003C/summary\u003E\n        public static int Skjkasdkd (List\u003Cint\u003E lst) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Skjkasdkd(new List\u003Cint\u003E {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3});\n            var expected1 = 10;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = Skjkasdkd(new List\u003Cint\u003E {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1});\n            var expected2 = 25;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = Skjkasdkd(new List\u003Cint\u003E {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3});\n            var expected3 = 13;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = Skjkasdkd(new List\u003Cint\u003E {0,724,32,71,99,32,6,0,5,91,83,0,5,6});\n            var expected4 = 11;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = Skjkasdkd(new List\u003Cint\u003E {0,81,12,3,1,21});\n            var expected5 = 3;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = Skjkasdkd(new List\u003Cint\u003E {0,8,1,2,1,7});\n            var expected6 = 7;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = Skjkasdkd(new List\u003Cint\u003E {8191});\n            var expected7 = 19;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = Skjkasdkd(new List\u003Cint\u003E {8191,123456,127,7});\n            var expected8 = 19;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = Skjkasdkd(new List\u003Cint\u003E {127,97,8192});\n            var expected9 = 10;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"You are given a list of integers.\nYou need to find the largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\nFor lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\nFor lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\nFor lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\nFor lst = [0,81,12,3,1,21] the output should be 3\nFor lst = [0,8,1,2,1,7] the output should be 7\n","entry_point":"Skjkasdkd","canonical_solution":null,"short-description":"Find the largest prime and sum its digits","name":"sum_of_largest_prime"}
{"task_id":"95","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Given a dictionary, return True if all keys are strings in lower \n        /// case or all keys are strings in upper case, else return False.\n        /// The function should return False is the given dictionary is empty.\n        /// Examples:\n        /// CheckDictCase({\u0022a\u0022:\u0022apple\u0022, \u0022b\u0022:\u0022banana\u0022}) should return True.\n        /// CheckDictCase({\u0022a\u0022:\u0022apple\u0022, \u0022A\u0022:\u0022banana\u0022, \u0022B\u0022:\u0022banana\u0022}) should return False.\n        /// CheckDictCase({\u0022a\u0022:\u0022apple\u0022, 8:\u0022banana\u0022, \u0022a\u0022:\u0022apple\u0022}) should return False.\n        /// CheckDictCase({\u0022Name\u0022:\u0022John\u0022, \u0022Age\u0022:\u002236\u0022, \u0022City\u0022:\u0022Houston\u0022}) should return False.\n        /// CheckDictCase({\u0022STATE\u0022:\u0022NC\u0022, \u0022ZIP\u0022:\u002212345\u0022 }) should return True.\n        /// \n        /// \u003C/summary\u003E\n        public static bool CheckDictCase (Dictionary\u003Cobject, string\u003E dict) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = CheckDictCase(new Dictionary\u003Cobject, string\u003E {{\u0022p\u0022, \u0022pineapple\u0022},{\u0022b\u0022, \u0022banana\u0022}});\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = CheckDictCase(new Dictionary\u003Cobject, string\u003E {{\u0022p\u0022, \u0022pineapple\u0022},{\u0022A\u0022, \u0022banana\u0022},{\u0022B\u0022, \u0022banana\u0022}});\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = CheckDictCase(new Dictionary\u003Cobject, string\u003E {{\u0022p\u0022, \u0022pineapple\u0022},{5, \u0022banana\u0022},{\u0022a\u0022, \u0022apple\u0022}});\n            var expected3 = false;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = CheckDictCase(new Dictionary\u003Cobject, string\u003E {{\u0022Name\u0022, \u0022John\u0022},{\u0022Age\u0022, \u002236\u0022},{\u0022City\u0022, \u0022Houston\u0022}});\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = CheckDictCase(new Dictionary\u003Cobject, string\u003E {{\u0022STATE\u0022, \u0022NC\u0022},{\u0022ZIP\u0022, \u002212345\u0022}});\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = CheckDictCase(new Dictionary\u003Cobject, string\u003E {{\u0022fruit\u0022, \u0022Orange\u0022},{\u0022taste\u0022, \u0022Sweet\u0022}});\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = CheckDictCase(new Dictionary\u003Cobject, string\u003E {});\n            var expected7 = false;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nGiven a dictionary, return True if all keys are strings in lower \ncase or all keys are strings in upper case, else return False.\nThe function should return False is the given dictionary is empty.\nExamples:\ncheck_dict_case({\u0022a\u0022:\u0022apple\u0022, \u0022b\u0022:\u0022banana\u0022}) should return True.\ncheck_dict_case({\u0022a\u0022:\u0022apple\u0022, \u0022A\u0022:\u0022banana\u0022, \u0022B\u0022:\u0022banana\u0022}) should return False.\ncheck_dict_case({\u0022a\u0022:\u0022apple\u0022, 8:\u0022banana\u0022, \u0022a\u0022:\u0022apple\u0022}) should return False.\ncheck_dict_case({\u0022Name\u0022:\u0022John\u0022, \u0022Age\u0022:\u002236\u0022, \u0022City\u0022:\u0022Houston\u0022}) should return False.\ncheck_dict_case({\u0022STATE\u0022:\u0022NC\u0022, \u0022ZIP\u0022:\u002212345\u0022 }) should return True.\n","entry_point":"CheckDictCase","canonical_solution":null,"short-description":"Check if all dict keys are all lower or upper","name":"keys_same_case"}
{"task_id":"96","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Implement a function that takes an non-negative integer and returns an array of the first n\n        /// integers that are prime numbers and less than n.\n        /// for example:\n        /// CountUpTo(5) =\u003E [2,3]\n        /// CountUpTo(11) =\u003E [2,3,5,7]\n        /// CountUpTo(0) =\u003E []\n        /// CountUpTo(20) =\u003E [2,3,5,7,11,13,17,19]\n        /// CountUpTo(1) =\u003E []\n        /// CountUpTo(18) =\u003E [2,3,5,7,11,13,17]\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cint\u003E CountUpTo (int n) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = CountUpTo(5);\n            var expected1 = new List\u003Cint\u003E {2,3};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = CountUpTo(6);\n            var expected2 = new List\u003Cint\u003E {2,3,5};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = CountUpTo(7);\n            var expected3 = new List\u003Cint\u003E {2,3,5};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = CountUpTo(10);\n            var expected4 = new List\u003Cint\u003E {2,3,5,7};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = CountUpTo(0);\n            var expected5 = new List\u003Cint\u003E {};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = CountUpTo(22);\n            var expected6 = new List\u003Cint\u003E {2,3,5,7,11,13,17,19};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = CountUpTo(1);\n            var expected7 = new List\u003Cint\u003E {};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = CountUpTo(18);\n            var expected8 = new List\u003Cint\u003E {2,3,5,7,11,13,17};\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = CountUpTo(47);\n            var expected9 = new List\u003Cint\u003E {2,3,5,7,11,13,17,19,23,29,31,37,41,43};\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n            var actual10 = CountUpTo(101);\n            var expected10 = new List\u003Cint\u003E {2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97};\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\u0022Exception --- test case 9 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Implement a function that takes an non-negative integer and returns an array of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) =\u003E [2,3]\ncount_up_to(11) =\u003E [2,3,5,7]\ncount_up_to(0) =\u003E []\ncount_up_to(20) =\u003E [2,3,5,7,11,13,17,19]\ncount_up_to(1) =\u003E []\ncount_up_to(18) =\u003E [2,3,5,7,11,13,17]\n","entry_point":"CountUpTo","canonical_solution":null,"short-description":"Return array of primes less than input number","name":"get_primes_\u003C_n"}
{"task_id":"97","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Complete the function that takes two integers and returns \n        /// the product of their unit digits.\n        /// Assume the input is always valid.\n        /// Examples:\n        /// Multiply(148, 412) should return 16.\n        /// Multiply(19, 28) should return 72.\n        /// Multiply(2020, 1851) should return 0.\n        /// Multiply(14,-15) should return 20.\n        /// \n        /// \u003C/summary\u003E\n        public static int Multiply (int a, int b) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Multiply(148,412);\n            var expected1 = 16;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = Multiply(19,28);\n            var expected2 = 72;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = Multiply(2020,1851);\n            var expected3 = 0;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = Multiply(14,-15);\n            var expected4 = 20;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = Multiply(76,67);\n            var expected5 = 42;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = Multiply(17,27);\n            var expected6 = 49;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = Multiply(0,1);\n            var expected7 = 0;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = Multiply(0,0);\n            var expected8 = 0;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Complete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n","entry_point":"Multiply","canonical_solution":null,"short-description":"Multiply unit digits of two numbers","name":"return_unit_digit_product"}
{"task_id":"98","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Given a string s, count the number of uppercase vowels in even indices.\n        /// \n        /// For example:\n        /// CountUpper(\u0027aBCdEf\u0027) returns 1\n        /// CountUpper(\u0027abcdefg\u0027) returns 0\n        /// CountUpper(\u0027dBBE\u0027) returns 0\n        /// \n        /// \u003C/summary\u003E\n        public static int CountUpper (string s) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = CountUpper(\u0022aBCdEf\u0022);\n            var expected1 = 1;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = CountUpper(\u0022abcdefg\u0022);\n            var expected2 = 0;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = CountUpper(\u0022dBBE\u0022);\n            var expected3 = 0;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = CountUpper(\u0022B\u0022);\n            var expected4 = 0;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = CountUpper(\u0022U\u0022);\n            var expected5 = 1;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = CountUpper(\u0022\u0022);\n            var expected6 = 0;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = CountUpper(\u0022EEEE\u0022);\n            var expected7 = 2;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nGiven a string s, count the number of uppercase vowels in even indices.\n\nFor example:\ncount_upper(\u0027aBCdEf\u0027) returns 1\ncount_upper(\u0027abcdefg\u0027) returns 0\ncount_upper(\u0027dBBE\u0027) returns 0\n","entry_point":"CountUpper","canonical_solution":null,"short-description":"Count uppercase vowels at even indices","name":"count_uppercase"}
{"task_id":"99","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Create a function that takes a value (string) representing a number\n        /// and returns the closest integer to it. If the number is equidistant\n        /// from two integers, round it away from zero.\n        /// \n        /// Examples\n        /// \u003E\u003E\u003E ClosestInteger(\u002210\u0022)\n        /// 10\n        /// \u003E\u003E\u003E ClosestInteger(\u002215.3\u0022)\n        /// 15\n        /// \n        /// Note:\n        /// Rounding away from zero means that if the given number is equidistant\n        /// from two integers, the one you should return is the one that is the\n        /// farthest from zero. For example ClosestInteger(\u002214.5\u0022) should\n        /// return 15 and ClosestInteger(\u0022-14.5\u0022) should return -15.\n        /// \n        /// \u003C/summary\u003E\n        public static int ClosestInteger (string value) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = ClosestInteger(\u002210\u0022);\n            var expected1 = 10;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = ClosestInteger(\u002214.5\u0022);\n            var expected2 = 15;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = ClosestInteger(\u0022-15.5\u0022);\n            var expected3 = -16;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = ClosestInteger(\u002215.3\u0022);\n            var expected4 = 15;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = ClosestInteger(\u00220\u0022);\n            var expected5 = 0;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nCreate a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\n\nExamples\n\u003E\u003E\u003E closest_integer(\u002210\u0022)\n10\n\u003E\u003E\u003E closest_integer(\u002215.3\u0022)\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\u002214.5\u0022) should\nreturn 15 and closest_integer(\u0022-14.5\u0022) should return -15.\n","entry_point":"ClosestInteger","canonical_solution":null,"short-description":"Function rounds string to closest integer","name":"closest_integer"}
{"task_id":"100","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Given a positive integer n, you have to make a pile of n levels of stones.\n        /// The first level has n stones.\n        /// The number of stones in the next level is:\n        /// - the next odd number if n is odd.\n        /// - the next even number if n is even.\n        /// Return the number of stones in each level in a list, where element at index\n        /// i represents the number of stones in the level (i\u002B1).\n        /// \n        /// Examples:\n        /// \u003E\u003E\u003E MakeAPile(3)\n        /// [3, 5, 7]\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cint\u003E MakeAPile (int n) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = MakeAPile(3);\n            var expected1 = new List\u003Cint\u003E {3,5,7};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = MakeAPile(4);\n            var expected2 = new List\u003Cint\u003E {4,6,8,10};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = MakeAPile(5);\n            var expected3 = new List\u003Cint\u003E {5,7,9,11,13};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = MakeAPile(6);\n            var expected4 = new List\u003Cint\u003E {6,8,10,12,14,16};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = MakeAPile(8);\n            var expected5 = new List\u003Cint\u003E {8,10,12,14,16,18,20,22};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nGiven a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n- the next odd number if n is odd.\n- the next even number if n is even.\nReturn the number of stones in each level in a list, where element at index\ni represents the number of stones in the level (i\u002B1).\n\nExamples:\n\u003E\u003E\u003E make_a_pile(3)\n[3, 5, 7]\n","entry_point":"MakeAPile","canonical_solution":null,"short-description":"Return a list of stones for each pile level","name":"stone_pile_list"}
{"task_id":"101","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// You will be given a string of words separated by commas or spaces. Your task is\n        /// to split the string into words and return an array of the words.\n        /// \n        /// For example:\n        /// WordsString(\u0022Hi, my name is John\u0022) == [\u0022Hi\u0022, \u0022my\u0022, \u0022name\u0022, \u0022is\u0022, \u0022John\u0022]\n        /// WordsString(\u0022One, two, three, four, five, six\u0022) == [\u0022One\u0022, \u0022two\u0022, \u0022three\u0022, \u0022four\u0022, \u0022five\u0022, \u0022six\u0022]\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cstring\u003E WordsString (string s) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = WordsString(\u0022Hi, my name is John\u0022);\n            var expected1 = new List\u003Cstring\u003E {\u0022Hi\u0022,\u0022my\u0022,\u0022name\u0022,\u0022is\u0022,\u0022John\u0022};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = WordsString(\u0022One, two, three, four, five, six\u0022);\n            var expected2 = new List\u003Cstring\u003E {\u0022One\u0022,\u0022two\u0022,\u0022three\u0022,\u0022four\u0022,\u0022five\u0022,\u0022six\u0022};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = WordsString(\u0022Hi, my name\u0022);\n            var expected3 = new List\u003Cstring\u003E {\u0022Hi\u0022,\u0022my\u0022,\u0022name\u0022};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = WordsString(\u0022One,, two, three, four, five, six,\u0022);\n            var expected4 = new List\u003Cstring\u003E {\u0022One\u0022,\u0022two\u0022,\u0022three\u0022,\u0022four\u0022,\u0022five\u0022,\u0022six\u0022};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = WordsString(\u0022\u0022);\n            var expected5 = new List\u003Cstring\u003E {};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = WordsString(\u0022ahmed     , gamal\u0022);\n            var expected6 = new List\u003Cstring\u003E {\u0022ahmed\u0022,\u0022gamal\u0022};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\n\nFor example:\nwords_string(\u0022Hi, my name is John\u0022) == [\u0022Hi\u0022, \u0022my\u0022, \u0022name\u0022, \u0022is\u0022, \u0022John\u0022]\nwords_string(\u0022One, two, three, four, five, six\u0022) == [\u0022One\u0022, \u0022two\u0022, \u0022three\u0022, \u0022four\u0022, \u0022five\u0022, \u0022six\u0022]\n","entry_point":"WordsString","canonical_solution":null,"short-description":"Split strings into words, return as array","name":"split_string"}
{"task_id":"102","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// This function takes two positive numbers x and y and returns the\n        /// biggest even integer number that is in the range [x, y] inclusive. If \n        /// there\u0027s no such number, then the function should return -1.\n        /// \n        /// For example:\n        /// ChooseNum(12, 15) = 14\n        /// ChooseNum(13, 12) = -1\n        /// \n        /// \u003C/summary\u003E\n        public static int ChooseNum (int x, int y) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = ChooseNum(12,15);\n            var expected1 = 14;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = ChooseNum(13,12);\n            var expected2 = -1;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = ChooseNum(33,12354);\n            var expected3 = 12354;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = ChooseNum(5234,5233);\n            var expected4 = -1;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = ChooseNum(6,29);\n            var expected5 = 28;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = ChooseNum(27,10);\n            var expected6 = -1;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = ChooseNum(7,7);\n            var expected7 = -1;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = ChooseNum(546,546);\n            var expected8 = 546;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"This function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere\u0027s no such number, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n","entry_point":"ChooseNum","canonical_solution":null,"short-description":"Find largest even integer in [x, y], or -1","name":"max_even_in_range"}
{"task_id":"103","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// You are given two positive integers n and m, and your task is to compute the\n        /// average of the integers from n through m (including n and m). \n        /// Round the answer to the nearest integer and convert that to binary.\n        /// If n is greater than m, return -1.\n        /// Example:\n        /// RoundedAvg(1, 5) =\u003E \u00220b11\u0022\n        /// RoundedAvg(7, 5) =\u003E -1\n        /// RoundedAvg(10, 20) =\u003E \u00220b1111\u0022\n        /// RoundedAvg(20, 33) =\u003E \u00220b11010\u0022\n        /// \n        /// \u003C/summary\u003E\n        public static object RoundedAvg (int n, int m) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = RoundedAvg(1,5);\n            var expected1 = \u00220b11\u0022;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = RoundedAvg(7,13);\n            var expected2 = \u00220b1010\u0022;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = RoundedAvg(964,977);\n            var expected3 = \u00220b1111001010\u0022;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = RoundedAvg(996,997);\n            var expected4 = \u00220b1111100100\u0022;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = RoundedAvg(560,851);\n            var expected5 = \u00220b1011000010\u0022;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = RoundedAvg(185,546);\n            var expected6 = \u00220b101101110\u0022;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = RoundedAvg(362,496);\n            var expected7 = \u00220b110101101\u0022;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = RoundedAvg(350,902);\n            var expected8 = \u00220b1001110010\u0022;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = RoundedAvg(197,233);\n            var expected9 = \u00220b11010111\u0022;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n            var actual10 = RoundedAvg(7,5);\n            var expected10 = -1;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\u0022Exception --- test case 9 failed to pass\u0022);}\n\n            var actual11 = RoundedAvg(5,1);\n            var expected11 = -1;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\u0022Exception --- test case 10 failed to pass\u0022);}\n\n            var actual12 = RoundedAvg(5,5);\n            var expected12 = \u00220b101\u0022;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\u0022Exception --- test case 11 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"You are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m). \nRound the answer to the nearest integer and convert that to binary.\nIf n is greater than m, return -1.\nExample:\nrounded_avg(1, 5) =\u003E \u00220b11\u0022\nrounded_avg(7, 5) =\u003E -1\nrounded_avg(10, 20) =\u003E \u00220b1111\u0022\nrounded_avg(20, 33) =\u003E \u00220b11010\u0022\n","entry_point":"RoundedAvg","canonical_solution":null,"short-description":"Compute and convert average to binary","name":"calculate_avg"}
{"task_id":"104","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Given a list of positive integers x. return a sorted list of all \n        /// elements that hasn\u0027t any even digit.\n        /// \n        /// Note: Returned list should be sorted in increasing order.\n        /// \n        /// For example:\n        /// \u003E\u003E\u003E UniqueDigits([15, 33, 1422, 1])\n        /// [1, 15, 33]\n        /// \u003E\u003E\u003E UniqueDigits([152, 323, 1422, 10])\n        /// []\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cint\u003E UniqueDigits (List\u003Cint\u003E x) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = UniqueDigits(new List\u003Cint\u003E {15,33,1422,1});\n            var expected1 = new List\u003Cint\u003E {1,15,33};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = UniqueDigits(new List\u003Cint\u003E {152,323,1422,10});\n            var expected2 = new List\u003Cint\u003E {};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = UniqueDigits(new List\u003Cint\u003E {12345,2033,111,151});\n            var expected3 = new List\u003Cint\u003E {111,151};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = UniqueDigits(new List\u003Cint\u003E {135,103,31});\n            var expected4 = new List\u003Cint\u003E {31,135};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Given a list of positive integers x. return a sorted list of all \nelements that hasn\u0027t any even digit.\n\nNote: Returned list should be sorted in increasing order.\n\nFor example:\n\u003E\u003E\u003E unique_digits([15, 33, 1422, 1])\n[1, 15, 33]\n\u003E\u003E\u003E unique_digits([152, 323, 1422, 10])\n[]\n","entry_point":"UniqueDigits","canonical_solution":null,"short-description":"Return sorted list without even digits","name":"filter_odd_digits"}
{"task_id":"105","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n        /// reverse the resulting array, and then replace each digit by its corresponding name from\n        /// \u0022One\u0022, \u0022Two\u0022, \u0022Three\u0022, \u0022Four\u0022, \u0022Five\u0022, \u0022Six\u0022, \u0022Seven\u0022, \u0022Eight\u0022, \u0022Nine\u0022.\n        /// \n        /// For example:\n        /// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n        /// -\u003E sort arr -\u003E [1, 1, 2, 2, 3, 4, 5, 8] \n        /// -\u003E reverse arr -\u003E [8, 5, 4, 3, 2, 2, 1, 1]\n        /// return [\u0022Eight\u0022, \u0022Five\u0022, \u0022Four\u0022, \u0022Three\u0022, \u0022Two\u0022, \u0022Two\u0022, \u0022One\u0022, \u0022One\u0022]\n        /// \n        /// If the array is empty, return an empty array:\n        /// arr = []\n        /// return []\n        /// \n        /// If the array has any strange number ignore it:\n        /// arr = [1, -1 , 55] \n        /// -\u003E sort arr -\u003E [-1, 1, 55]\n        /// -\u003E reverse arr -\u003E [55, 1, -1]\n        /// return = [\u0027One\u0027]\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cstring\u003E ByLength (List\u003Cint\u003E arr) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = ByLength(new List\u003Cint\u003E {2,1,1,4,5,8,2,3});\n            var expected1 = new List\u003Cstring\u003E {\u0022Eight\u0022,\u0022Five\u0022,\u0022Four\u0022,\u0022Three\u0022,\u0022Two\u0022,\u0022Two\u0022,\u0022One\u0022,\u0022One\u0022};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = ByLength(new List\u003Cint\u003E {});\n            var expected2 = new List\u003Cstring\u003E {};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = ByLength(new List\u003Cint\u003E {1,-1,55});\n            var expected3 = new List\u003Cstring\u003E {\u0022One\u0022};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = ByLength(new List\u003Cint\u003E {1,-1,3,2});\n            var expected4 = new List\u003Cstring\u003E {\u0022Three\u0022,\u0022Two\u0022,\u0022One\u0022};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = ByLength(new List\u003Cint\u003E {9,4,8});\n            var expected5 = new List\u003Cstring\u003E {\u0022Nine\u0022,\u0022Eight\u0022,\u0022Four\u0022};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nGiven an array of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit by its corresponding name from\n\u0022One\u0022, \u0022Two\u0022, \u0022Three\u0022, \u0022Four\u0022, \u0022Five\u0022, \u0022Six\u0022, \u0022Seven\u0022, \u0022Eight\u0022, \u0022Nine\u0022.\n\nFor example:\narr = [2, 1, 1, 4, 5, 8, 2, 3]   \n-\u003E sort arr -\u003E [1, 1, 2, 2, 3, 4, 5, 8] \n-\u003E reverse arr -\u003E [8, 5, 4, 3, 2, 2, 1, 1]\nreturn [\u0022Eight\u0022, \u0022Five\u0022, \u0022Four\u0022, \u0022Three\u0022, \u0022Two\u0022, \u0022Two\u0022, \u0022One\u0022, \u0022One\u0022]\n\nIf the array is empty, return an empty array:\narr = []\nreturn []\n\nIf the array has any strange number ignore it:\narr = [1, -1 , 55] \n-\u003E sort arr -\u003E [-1, 1, 55]\n-\u003E reverse arr -\u003E [55, 1, -1]\nreturn = [\u0027One\u0027]\n","entry_point":"ByLength","canonical_solution":null,"short-description":"Sort, reverse, name digits 1-9 in words","name":"sort,_reverse,_names"}
{"task_id":"106","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Implement the Function F that takes n as a parameter,\n        /// and returns a list oF size n, such that the value oF the element at index i is the Factorial oF i iF i is even\n        /// or the sum oF numbers From 1 to i otherwise.\n        /// i starts From 1.\n        /// the Factorial oF i is the multiplication oF the numbers From 1 to i (1 * 2 * ... * i).\n        /// Example:\n        /// F(5) == [1, 2, 6, 24, 15]\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cint\u003E F (int n) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = F(5);\n            var expected1 = new List\u003Cint\u003E {1,2,6,24,15};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = F(7);\n            var expected2 = new List\u003Cint\u003E {1,2,6,24,15,720,28};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = F(1);\n            var expected3 = new List\u003Cint\u003E {1};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = F(3);\n            var expected4 = new List\u003Cint\u003E {1,2,6};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Implement the function f that takes n as a parameter,\nand returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\nf(5) == [1, 2, 6, 24, 15]\n","entry_point":"F","canonical_solution":null,"short-description":"Function f returns list with factorials/sums","name":"list_factorial_sum"}
{"task_id":"107","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Given a positive integer n, return a tuple that has the number of even and odd\n        /// integer palindromes that fall within the range(1, n), inclusive.\n        /// \n        /// Example 1:\n        /// \n        /// Input: 3\n        /// Output: (1, 2)\n        /// Explanation:\n        /// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n        /// \n        /// Example 2:\n        /// \n        /// Input: 12\n        /// Output: (4, 6)\n        /// Explanation:\n        /// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n        /// \n        /// Note:\n        /// 1. 1 \u003C= n \u003C= 10^3\n        /// 2. returned tuple has the number of even and odd integer palindromes respectively.\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cint\u003E EvenOddPalindrome (int n) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = EvenOddPalindrome(123);\n            var expected1 = new List\u003Cint\u003E {8,13};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = EvenOddPalindrome(12);\n            var expected2 = new List\u003Cint\u003E {4,6};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = EvenOddPalindrome(3);\n            var expected3 = new List\u003Cint\u003E {1,2};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = EvenOddPalindrome(63);\n            var expected4 = new List\u003Cint\u003E {6,8};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = EvenOddPalindrome(25);\n            var expected5 = new List\u003Cint\u003E {5,6};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = EvenOddPalindrome(19);\n            var expected6 = new List\u003Cint\u003E {4,6};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = EvenOddPalindrome(9);\n            var expected7 = new List\u003Cint\u003E {4,5};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = EvenOddPalindrome(1);\n            var expected8 = new List\u003Cint\u003E {0,1};\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nGiven a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\n\nExample 1:\n\nInput: 3\nOutput: (1, 2)\nExplanation:\nInteger palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\nInput: 12\nOutput: (4, 6)\nExplanation:\nInteger palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n1. 1 \u003C= n \u003C= 10^3\n2. returned tuple has the number of even and odd integer palindromes respectively.\n","entry_point":"EvenOddPalindrome","canonical_solution":null,"short-description":"Count even/odd integer palindromes up to n","name":"count_palindromes"}
{"task_id":"108","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Write a function CountNums which takes an array of integers and returns\n        /// the number of elements which has a sum of digits \u003E 0.\n        /// If a number is negative, then its first signed digit will be negative:\n        /// e.g. -123 has signed digits -1, 2, and 3.\n        /// \u003E\u003E\u003E CountNums([]) == 0\n        /// \u003E\u003E\u003E CountNums([-1, 11, -11]) == 1\n        /// \u003E\u003E\u003E CountNums([1, 1, 2]) == 3\n        /// \n        /// \u003C/summary\u003E\n        public static int CountNums (List\u003Cint\u003E arr) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = CountNums(new List\u003Cint\u003E {});\n            var expected1 = 0;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = CountNums(new List\u003Cint\u003E {-1,-2,0});\n            var expected2 = 0;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = CountNums(new List\u003Cint\u003E {1,1,2,-2,3,4,5});\n            var expected3 = 6;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = CountNums(new List\u003Cint\u003E {1,6,9,-6,0,1,5});\n            var expected4 = 5;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = CountNums(new List\u003Cint\u003E {1,100,98,-7,1,-1});\n            var expected5 = 4;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = CountNums(new List\u003Cint\u003E {12,23,34,-45,-56,0});\n            var expected6 = 5;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = CountNums(new List\u003Cint\u003E {0,1});\n            var expected7 = 1;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = CountNums(new List\u003Cint\u003E {1});\n            var expected8 = 1;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nWrite a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits \u003E 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n\u003E\u003E\u003E count_nums([]) == 0\n\u003E\u003E\u003E count_nums([-1, 11, -11]) == 1\n\u003E\u003E\u003E count_nums([1, 1, 2]) == 3\n","entry_point":"CountNums","canonical_solution":null,"short-description":"Function counts numbers with digit sum \u003E 0","name":"count_positive"}
{"task_id":"109","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// We have an array \u0027arr\u0027 of N integers arr[1], arr[2], ..., arr[N].The\n        /// numbers in the array will be randomly ordered. Your task is to determine if\n        /// it is possible to get an array sorted in non-decreasing order by performing \n        /// the following operation on the given array:\n        /// You are allowed to perform right shift operation any number of times.\n        /// \n        /// One right shift operation means shifting all elements of the array by one\n        /// position in the right direction. The last element of the array will be moved to\n        /// the starting position in the array i.e. 0th index. \n        /// \n        /// If it is possible to obtain the sorted array by performing the above operation\n        /// then return True else return False.\n        /// If the given array is empty then return True.\n        /// \n        /// Note: The given list is guaranteed to have unique elements.\n        /// \n        /// For Example:\n        /// \n        /// MoveOneBall([3, 4, 5, 1, 2])==\u003ETrue\n        /// Explanation: By performin 2 right shift operations, non-decreasing order can\n        /// be achieved for the given array.\n        /// MoveOneBall([3, 5, 4, 1, 2])==\u003EFalse\n        /// Explanation:It is not possible to get non-decreasing order for the given\n        /// array by performing any number of right shift operations.\n        /// \n        /// \n        /// \u003C/summary\u003E\n        public static bool MoveOneBall (List\u003Cint\u003E arr) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = MoveOneBall(new List\u003Cint\u003E {3,4,5,1,2});\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = MoveOneBall(new List\u003Cint\u003E {3,5,10,1,2});\n            var expected2 = true;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = MoveOneBall(new List\u003Cint\u003E {4,3,1,2});\n            var expected3 = false;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = MoveOneBall(new List\u003Cint\u003E {3,5,4,1,2});\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = MoveOneBall(new List\u003Cint\u003E {});\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"We have an array \u0027arr\u0027 of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the array will be randomly ordered. Your task is to determine if\nit is possible to get an array sorted in non-decreasing order by performing \nthe following operation on the given array:\nYou are allowed to perform right shift operation any number of times.\n\nOne right shift operation means shifting all elements of the array by one\nposition in the right direction. The last element of the array will be moved to\nthe starting position in the array i.e. 0th index. \n\nIf it is possible to obtain the sorted array by performing the above operation\nthen return True else return False.\nIf the given array is empty then return True.\n\nNote: The given list is guaranteed to have unique elements.\n\nFor Example:\n\nmove_one_ball([3, 4, 5, 1, 2])==\u003ETrue\nExplanation: By performin 2 right shift operations, non-decreasing order can\nbe achieved for the given array.\nmove_one_ball([3, 5, 4, 1, 2])==\u003EFalse\nExplanation:It is not possible to get non-decreasing order for the given\narray by performing any number of right shift operations.\n\n","entry_point":"MoveOneBall","canonical_solution":null,"short-description":"Determine if array can be sorted via right shifts","name":"check_right_shift"}
{"task_id":"110","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// In this problem, you will implement a function that takes two lists of numbers,\n        /// and determines whether it is possible to perform an Exchange of elements\n        /// between them to make lst1 a list of only even numbers.\n        /// There is no limit on the number of Exchanged elements between lst1 and lst2.\n        /// If it is possible to Exchange elements between the lst1 and lst2 to make\n        /// all the elements of lst1 to be even, return \u0022YES\u0022.\n        /// Otherwise, return \u0022NO\u0022.\n        /// For example:\n        /// Exchange([1, 2, 3, 4], [1, 2, 3, 4]) =\u003E \u0022YES\u0022\n        /// Exchange([1, 2, 3, 4], [1, 5, 3, 4]) =\u003E \u0022NO\u0022\n        /// It is assumed that the input lists will be non-empty.\n        /// \n        /// \u003C/summary\u003E\n        public static string Exchange (List\u003Cint\u003E lst1, List\u003Cint\u003E lst2) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Exchange(new List\u003Cint\u003E {1,2,3,4},new List\u003Cint\u003E {1,2,3,4});\n            var expected1 = \u0022YES\u0022;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = Exchange(new List\u003Cint\u003E {1,2,3,4},new List\u003Cint\u003E {1,5,3,4});\n            var expected2 = \u0022NO\u0022;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = Exchange(new List\u003Cint\u003E {1,2,3,4},new List\u003Cint\u003E {2,1,4,3});\n            var expected3 = \u0022YES\u0022;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = Exchange(new List\u003Cint\u003E {5,7,3},new List\u003Cint\u003E {2,6,4});\n            var expected4 = \u0022YES\u0022;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = Exchange(new List\u003Cint\u003E {5,7,3},new List\u003Cint\u003E {2,6,3});\n            var expected5 = \u0022NO\u0022;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = Exchange(new List\u003Cint\u003E {3,2,6,1,8,9},new List\u003Cint\u003E {3,5,5,1,1,1});\n            var expected6 = \u0022NO\u0022;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = Exchange(new List\u003Cint\u003E {100,200},new List\u003Cint\u003E {200,200});\n            var expected7 = \u0022YES\u0022;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"In this problem, you will implement a function that takes two lists of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a list of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \u0022YES\u0022.\nOtherwise, return \u0022NO\u0022.\nFor example:\nexchange([1, 2, 3, 4], [1, 2, 3, 4]) =\u003E \u0022YES\u0022\nexchange([1, 2, 3, 4], [1, 5, 3, 4]) =\u003E \u0022NO\u0022\nIt is assumed that the input lists will be non-empty.\n","entry_point":"Exchange","canonical_solution":null,"short-description":"Determine if lst1 can be all even numbers","name":"make_lst1_even"}
{"task_id":"111","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Given a string representing a space separated lowercase letters, return a dictionary\n        /// of the letter with the most repetition and containing the corresponding count.\n        /// If several letters have the same occurrence, return all of them.\n        /// \n        /// Example:\n        /// Histogram(\u0027a b c\u0027) == {\u0027a\u0027: 1, \u0027b\u0027: 1, \u0027c\u0027: 1}\n        /// Histogram(\u0027a b b a\u0027) == {\u0027a\u0027: 2, \u0027b\u0027: 2}\n        /// Histogram(\u0027a b c a b\u0027) == {\u0027a\u0027: 2, \u0027b\u0027: 2}\n        /// Histogram(\u0027b b b b a\u0027) == {\u0027b\u0027: 4}\n        /// Histogram(\u0027\u0027) == {}\n        /// \n        /// \n        /// \u003C/summary\u003E\n        public static Dictionary\u003Cstring, int\u003E Histogram (string test) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Histogram(\u0022a b b a\u0022);\n            var expected1 = new Dictionary\u003Cstring, int\u003E {{\u0022a\u0022, 2},{\u0022b\u0022, 2}};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = Histogram(\u0022a b c a b\u0022);\n            var expected2 = new Dictionary\u003Cstring, int\u003E {{\u0022a\u0022, 2},{\u0022b\u0022, 2}};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = Histogram(\u0022a b c d g\u0022);\n            var expected3 = new Dictionary\u003Cstring, int\u003E {{\u0022a\u0022, 1},{\u0022b\u0022, 1},{\u0022c\u0022, 1},{\u0022d\u0022, 1},{\u0022g\u0022, 1}};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = Histogram(\u0022r t g\u0022);\n            var expected4 = new Dictionary\u003Cstring, int\u003E {{\u0022r\u0022, 1},{\u0022t\u0022, 1},{\u0022g\u0022, 1}};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = Histogram(\u0022b b b b a\u0022);\n            var expected5 = new Dictionary\u003Cstring, int\u003E {{\u0022b\u0022, 4}};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = Histogram(\u0022r t g\u0022);\n            var expected6 = new Dictionary\u003Cstring, int\u003E {{\u0022r\u0022, 1},{\u0022t\u0022, 1},{\u0022g\u0022, 1}};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = Histogram(\u0022\u0022);\n            var expected7 = new Dictionary\u003Cstring, int\u003E {};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = Histogram(\u0022a\u0022);\n            var expected8 = new Dictionary\u003Cstring, int\u003E {{\u0022a\u0022, 1}};\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Given a string representing a space separated lowercase letters, return a dictionary\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram(\u0027a b c\u0027) == {\u0027a\u0027: 1, \u0027b\u0027: 1, \u0027c\u0027: 1}\nhistogram(\u0027a b b a\u0027) == {\u0027a\u0027: 2, \u0027b\u0027: 2}\nhistogram(\u0027a b c a b\u0027) == {\u0027a\u0027: 2, \u0027b\u0027: 2}\nhistogram(\u0027b b b b a\u0027) == {\u0027b\u0027: 4}\nhistogram(\u0027\u0027) == {}\n\n","entry_point":"Histogram","canonical_solution":null,"short-description":"Return the most repeated letters and counts","name":"letter_count_dict"}
{"task_id":"112","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Task\n        /// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n        /// then check if the result string is palindrome.\n        /// A string is called palindrome if it reads the same backward as forward.\n        /// You should return a tuple containing the result string and True/False for the check.\n        /// Example\n        /// For s = \u0022abcde\u0022, c = \u0022ae\u0022, the result should be (\u0027bcd\u0027,False)\n        /// For s = \u0022abcdef\u0022, c = \u0022b\u0022  the result should be (\u0027acdef\u0027,False)\n        /// For s = \u0022abcdedcba\u0022, c = \u0022ab\u0022, the result should be (\u0027cdedc\u0027,True)\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cobject\u003E ReverseDelete (string s, string c) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = ReverseDelete(\u0022abcde\u0022,\u0022ae\u0022);\n            var expected1 = new List\u003Cobject\u003E {\u0022bcd\u0022,false};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = ReverseDelete(\u0022abcdef\u0022,\u0022b\u0022);\n            var expected2 = new List\u003Cobject\u003E {\u0022acdef\u0022,false};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = ReverseDelete(\u0022abcdedcba\u0022,\u0022ab\u0022);\n            var expected3 = new List\u003Cobject\u003E {\u0022cdedc\u0022,true};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = ReverseDelete(\u0022dwik\u0022,\u0022w\u0022);\n            var expected4 = new List\u003Cobject\u003E {\u0022dik\u0022,false};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = ReverseDelete(\u0022a\u0022,\u0022a\u0022);\n            var expected5 = new List\u003Cobject\u003E {\u0022\u0022,true};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = ReverseDelete(\u0022abcdedcba\u0022,\u0022\u0022);\n            var expected6 = new List\u003Cobject\u003E {\u0022abcdedcba\u0022,true};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = ReverseDelete(\u0022abcdedcba\u0022,\u0022v\u0022);\n            var expected7 = new List\u003Cobject\u003E {\u0022abcdedcba\u0022,true};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = ReverseDelete(\u0022vabba\u0022,\u0022v\u0022);\n            var expected8 = new List\u003Cobject\u003E {\u0022abba\u0022,true};\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = ReverseDelete(\u0022mamma\u0022,\u0022mia\u0022);\n            var expected9 = new List\u003Cobject\u003E {\u0022\u0022,true};\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Task\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.\nExample\nFor s = \u0022abcde\u0022, c = \u0022ae\u0022, the result should be (\u0027bcd\u0027,False)\nFor s = \u0022abcdef\u0022, c = \u0022b\u0022  the result should be (\u0027acdef\u0027,False)\nFor s = \u0022abcdedcba\u0022, c = \u0022ab\u0022, the result should be (\u0027cdedc\u0027,True)\n","entry_point":"ReverseDelete","canonical_solution":null,"short-description":"Remove chars from s, check if palindrome","name":"filter_\u0026_check"}
{"task_id":"113","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Given a list of strings, where each string consists of only digits, return a list.\n        /// Each element i of the output should be \u0022the number of odd elements in the\n        /// string i of the input.\u0022 where all the i\u0027s should be replaced by the number\n        /// of odd digits in the i\u0027th string of the input.\n        /// \n        /// \u003E\u003E\u003E OddCount([\u00271234567\u0027])\n        /// [\u0022the number of odd elements 4n the str4ng 4 of the 4nput.\u0022]\n        /// \u003E\u003E\u003E OddCount([\u00273\u0027,\u002211111111\u0022])\n        /// [\u0022the number of odd elements 1n the str1ng 1 of the 1nput.\u0022,\n        /// \u0022the number of odd elements 8n the str8ng 8 of the 8nput.\u0022]\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cstring\u003E OddCount (List\u003Cstring\u003E lst) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = OddCount(new List\u003Cstring\u003E {\u00221234567\u0022});\n            var expected1 = new List\u003Cstring\u003E {\u0022the number of odd elements 4n the str4ng 4 of the 4nput.\u0022};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = OddCount(new List\u003Cstring\u003E {\u00223\u0022,\u002211111111\u0022});\n            var expected2 = new List\u003Cstring\u003E {\u0022the number of odd elements 1n the str1ng 1 of the 1nput.\u0022,\u0022the number of odd elements 8n the str8ng 8 of the 8nput.\u0022};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = OddCount(new List\u003Cstring\u003E {\u0022271\u0022,\u0022137\u0022,\u0022314\u0022});\n            var expected3 = new List\u003Cstring\u003E {\u0022the number of odd elements 2n the str2ng 2 of the 2nput.\u0022,\u0022the number of odd elements 3n the str3ng 3 of the 3nput.\u0022,\u0022the number of odd elements 2n the str2ng 2 of the 2nput.\u0022};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Given a list of strings, where each string consists of only digits, return a list.\nEach element i of the output should be \u0022the number of odd elements in the\nstring i of the input.\u0022 where all the i\u0027s should be replaced by the number\nof odd digits in the i\u0027th string of the input.\n\n\u003E\u003E\u003E odd_count([\u00271234567\u0027])\n[\u0022the number of odd elements 4n the str4ng 4 of the 4nput.\u0022]\n\u003E\u003E\u003E odd_count([\u00273\u0027,\u002211111111\u0022])\n[\u0022the number of odd elements 1n the str1ng 1 of the 1nput.\u0022,\n\u0022the number of odd elements 8n the str8ng 8 of the 8nput.\u0022]\n","entry_point":"OddCount","canonical_solution":null,"short-description":"Return a list with odd digit counts as text","name":"count_odd_digits"}
{"task_id":"114","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Given an array of integers nums, find the minimum sum of any non-empty sub-array\n        /// of nums.\n        /// Example\n        /// MinSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n        /// MinSubArraySum([-1, -2, -3]) == -6\n        /// \n        /// \u003C/summary\u003E\n        public static int MinSubArraySum (List\u003Cint\u003E nums) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = MinSubArraySum(new List\u003Cint\u003E {2,3,4,1,2,4});\n            var expected1 = 1;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = MinSubArraySum(new List\u003Cint\u003E {-1,-2,-3});\n            var expected2 = -6;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = MinSubArraySum(new List\u003Cint\u003E {-1,-2,-3,2,-10});\n            var expected3 = -14;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = MinSubArraySum(new List\u003Cint\u003E {-9999999999999999});\n            var expected4 = -9999999999999999;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = MinSubArraySum(new List\u003Cint\u003E {0,10,20,1000000});\n            var expected5 = 0;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = MinSubArraySum(new List\u003Cint\u003E {-1,-2,-3,10,-5});\n            var expected6 = -6;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = MinSubArraySum(new List\u003Cint\u003E {100,-1,-2,-3,10,-5});\n            var expected7 = -6;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = MinSubArraySum(new List\u003Cint\u003E {10,11,13,8,3,4});\n            var expected8 = 3;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = MinSubArraySum(new List\u003Cint\u003E {100,-33,32,-1,0,-2});\n            var expected9 = -33;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n            var actual10 = MinSubArraySum(new List\u003Cint\u003E {-10});\n            var expected10 = -10;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\u0022Exception --- test case 9 failed to pass\u0022);}\n\n            var actual11 = MinSubArraySum(new List\u003Cint\u003E {7});\n            var expected11 = 7;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\u0022Exception --- test case 10 failed to pass\u0022);}\n\n            var actual12 = MinSubArraySum(new List\u003Cint\u003E {1,-1});\n            var expected12 = -1;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\u0022Exception --- test case 11 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nGiven an array of integers nums, find the minimum sum of any non-empty sub-array\nof nums.\nExample\nminSubArraySum([2, 3, 4, 1, 2, 4]) == 1\nminSubArraySum([-1, -2, -3]) == -6\n","entry_point":"MinSubArraySum","canonical_solution":null,"short-description":"Find the minimum sum of sub-arrays","name":"min_subarray_sum"}
{"task_id":"115","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// You are given a rectangular grid of wells. Each row represents a single well,\n        /// and each 1 in a row represents a single unit of water.\n        /// Each well has a corresponding bucket that can be used to extract water from it, \n        /// and all buckets have the same capacity.\n        /// Your task is to use the buckets to empty the wells.\n        /// Output the number of times you need to lower the buckets.\n        /// \n        /// Example 1:\n        /// Input: \n        /// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n        /// bucket_capacity : 1\n        /// Output: 6\n        /// \n        /// Example 2:\n        /// Input: \n        /// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n        /// bucket_capacity : 2\n        /// Output: 5\n        /// \n        /// Example 3:\n        /// Input: \n        /// grid : [[0,0,0], [0,0,0]]\n        /// bucket_capacity : 5\n        /// Output: 0\n        /// \n        /// Constraints:\n        /// * all wells have the same length\n        /// * 1 \u003C= grid.length \u003C= 10^2\n        /// * 1 \u003C= grid[:,1].length \u003C= 10^2\n        /// * grid[i][j] -\u003E 0 | 1\n        /// * 1 \u003C= capacity \u003C= 10\n        /// \n        /// \u003C/summary\u003E\n        public static int MaxFill (List\u003CList\u003Cint\u003E\u003E grid, int capacity) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = MaxFill(new List\u003CList\u003Cint\u003E\u003E {new List\u003Cint\u003E {0,0,1,0},new List\u003Cint\u003E {0,1,0,0},new List\u003Cint\u003E {1,1,1,1}},1);\n            var expected1 = 6;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = MaxFill(new List\u003CList\u003Cint\u003E\u003E {new List\u003Cint\u003E {0,0,1,1},new List\u003Cint\u003E {0,0,0,0},new List\u003Cint\u003E {1,1,1,1},new List\u003Cint\u003E {0,1,1,1}},2);\n            var expected2 = 5;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = MaxFill(new List\u003CList\u003Cint\u003E\u003E {new List\u003Cint\u003E {0,0,0},new List\u003Cint\u003E {0,0,0}},5);\n            var expected3 = 0;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = MaxFill(new List\u003CList\u003Cint\u003E\u003E {new List\u003Cint\u003E {1,1,1,1},new List\u003Cint\u003E {1,1,1,1}},2);\n            var expected4 = 4;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = MaxFill(new List\u003CList\u003Cint\u003E\u003E {new List\u003Cint\u003E {1,1,1,1},new List\u003Cint\u003E {1,1,1,1}},9);\n            var expected5 = 2;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it, \nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\n\nExample 1:\nInput: \ngrid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\nbucket_capacity : 1\nOutput: 6\n\nExample 2:\nInput: \ngrid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\nbucket_capacity : 2\nOutput: 5\n\nExample 3:\nInput: \ngrid : [[0,0,0], [0,0,0]]\nbucket_capacity : 5\nOutput: 0\n\nConstraints:\n* all wells have the same length\n* 1 \u003C= grid.length \u003C= 10^2\n* 1 \u003C= grid[:,1].length \u003C= 10^2\n* grid[i][j] -\u003E 0 | 1\n* 1 \u003C= capacity \u003C= 10\n","entry_point":"MaxFill","canonical_solution":null,"short-description":"Count bucket uses to empty water wells","name":"count_bucket_lifts"}
{"task_id":"116","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// In this Kata, you have to sort an array of non-negative integers according to\n        /// number of ones in their binary representation in ascending order.\n        /// For similar number of ones, sort based on decimal value.\n        /// \n        /// It must be implemented like this:\n        /// \u003E\u003E\u003E SortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n        /// \u003E\u003E\u003E SortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n        /// \u003E\u003E\u003E SortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cint\u003E SortArray (List\u003Cint\u003E arr) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SortArray(new List\u003Cint\u003E {1,5,2,3,4});\n            var expected1 = new List\u003Cint\u003E {1,2,4,3,5};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = SortArray(new List\u003Cint\u003E {-2,-3,-4,-5,-6});\n            var expected2 = new List\u003Cint\u003E {-4,-2,-6,-5,-3};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = SortArray(new List\u003Cint\u003E {1,0,2,3,4});\n            var expected3 = new List\u003Cint\u003E {0,1,2,4,3};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = SortArray(new List\u003Cint\u003E {});\n            var expected4 = new List\u003Cint\u003E {};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = SortArray(new List\u003Cint\u003E {2,5,77,4,5,3,5,7,2,3,4});\n            var expected5 = new List\u003Cint\u003E {2,2,4,4,3,3,5,5,5,7,77};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = SortArray(new List\u003Cint\u003E {3,6,44,12,32,5});\n            var expected6 = new List\u003Cint\u003E {32,3,5,6,12,44};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = SortArray(new List\u003Cint\u003E {2,4,8,16,32});\n            var expected7 = new List\u003Cint\u003E {2,4,8,16,32};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = SortArray(new List\u003Cint\u003E {2,4,8,16,32});\n            var expected8 = new List\u003Cint\u003E {2,4,8,16,32};\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nIn this Kata, you have to sort an array of non-negative integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\n\nIt must be implemented like this:\n\u003E\u003E\u003E sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n\u003E\u003E\u003E sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\u003E\u003E\u003E sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n","entry_point":"SortArray","canonical_solution":null,"short-description":"Sort integers by binary 1s, then by value","name":"sort_by_binary_ones"}
{"task_id":"117","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Given a string s and a natural number n, you have been tasked to implement \n        /// a function that returns a list of all words from string s that contain exactly \n        /// n consonants, in order these words appear in the string s.\n        /// If the string s is empty then the function should return an empty list.\n        /// Note: you may assume the input string contains only letters and spaces.\n        /// Examples:\n        /// SelectWords(\u0022Mary had a little lamb\u0022, 4) ==\u003E [\u0022little\u0022]\n        /// SelectWords(\u0022Mary had a little lamb\u0022, 3) ==\u003E [\u0022Mary\u0022, \u0022lamb\u0022]\n        /// SelectWords(\u0022simple white space\u0022, 2) ==\u003E []\n        /// SelectWords(\u0022Hello world\u0022, 4) ==\u003E [\u0022world\u0022]\n        /// SelectWords(\u0022Uncle sam\u0022, 3) ==\u003E [\u0022Uncle\u0022]\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cstring\u003E SelectWords (string s, int n) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SelectWords(\u0022Mary had a little lamb\u0022,4);\n            var expected1 = new List\u003Cstring\u003E {\u0022little\u0022};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = SelectWords(\u0022Mary had a little lamb\u0022,3);\n            var expected2 = new List\u003Cstring\u003E {\u0022Mary\u0022,\u0022lamb\u0022};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = SelectWords(\u0022simple white space\u0022,2);\n            var expected3 = new List\u003Cstring\u003E {};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = SelectWords(\u0022Hello world\u0022,4);\n            var expected4 = new List\u003Cstring\u003E {\u0022world\u0022};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = SelectWords(\u0022Uncle sam\u0022,3);\n            var expected5 = new List\u003Cstring\u003E {\u0022Uncle\u0022};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = SelectWords(\u0022\u0022,4);\n            var expected6 = new List\u003Cstring\u003E {};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = SelectWords(\u0022a b c d e f\u0022,1);\n            var expected7 = new List\u003Cstring\u003E {\u0022b\u0022,\u0022c\u0022,\u0022d\u0022,\u0022f\u0022};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Given a string s and a natural number n, you have been tasked to implement \na function that returns a list of all words from string s that contain exactly \nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\u0022Mary had a little lamb\u0022, 4) ==\u003E [\u0022little\u0022]\nselect_words(\u0022Mary had a little lamb\u0022, 3) ==\u003E [\u0022Mary\u0022, \u0022lamb\u0022]\nselect_words(\u0022simple white space\u0022, 2) ==\u003E []\nselect_words(\u0022Hello world\u0022, 4) ==\u003E [\u0022world\u0022]\nselect_words(\u0022Uncle sam\u0022, 3) ==\u003E [\u0022Uncle\u0022]\n","entry_point":"SelectWords","canonical_solution":null,"short-description":"Find words with n consonants in string s","name":"select_words"}
{"task_id":"118","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// You are given a word. Your task is to find the closest vowel that stands between \n        /// two consonants from the right side of the word (case sensitive).\n        /// \n        /// Vowels in the beginning and ending doesn\u0027t count. Return empty string if you didn\u0027t\n        /// find any vowel met the above condition. \n        /// \n        /// You may assume that the given string contains English letter only.\n        /// \n        /// Example:\n        /// GetClosestVowel(\u0022yogurt\u0022) ==\u003E \u0022u\u0022\n        /// GetClosestVowel(\u0022FULL\u0022) ==\u003E \u0022U\u0022\n        /// GetClosestVowel(\u0022quick\u0022) ==\u003E \u0022\u0022\n        /// GetClosestVowel(\u0022ab\u0022) ==\u003E \u0022\u0022\n        /// \n        /// \u003C/summary\u003E\n        public static string GetClosestVowel (string word) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = GetClosestVowel(\u0022yogurt\u0022);\n            var expected1 = \u0022u\u0022;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = GetClosestVowel(\u0022full\u0022);\n            var expected2 = \u0022u\u0022;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = GetClosestVowel(\u0022easy\u0022);\n            var expected3 = \u0022\u0022;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = GetClosestVowel(\u0022eAsy\u0022);\n            var expected4 = \u0022\u0022;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = GetClosestVowel(\u0022ali\u0022);\n            var expected5 = \u0022\u0022;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = GetClosestVowel(\u0022bad\u0022);\n            var expected6 = \u0022a\u0022;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = GetClosestVowel(\u0022most\u0022);\n            var expected7 = \u0022o\u0022;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = GetClosestVowel(\u0022ab\u0022);\n            var expected8 = \u0022\u0022;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = GetClosestVowel(\u0022ba\u0022);\n            var expected9 = \u0022\u0022;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n            var actual10 = GetClosestVowel(\u0022quick\u0022);\n            var expected10 = \u0022\u0022;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\u0022Exception --- test case 9 failed to pass\u0022);}\n\n            var actual11 = GetClosestVowel(\u0022anime\u0022);\n            var expected11 = \u0022i\u0022;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\u0022Exception --- test case 10 failed to pass\u0022);}\n\n            var actual12 = GetClosestVowel(\u0022Asia\u0022);\n            var expected12 = \u0022\u0022;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\u0022Exception --- test case 11 failed to pass\u0022);}\n\n            var actual13 = GetClosestVowel(\u0022Above\u0022);\n            var expected13 = \u0022o\u0022;\n            var result13 = compareLogic.Compare(actual13, expected13);\n            if (!result13.AreEqual) {throw new Exception(\u0022Exception --- test case 12 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"You are given a word. Your task is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case sensitive).\n\nVowels in the beginning and ending doesn\u0027t count. Return empty string if you didn\u0027t\nfind any vowel met the above condition. \n\nYou may assume that the given string contains English letter only.\n\nExample:\nget_closest_vowel(\u0022yogurt\u0022) ==\u003E \u0022u\u0022\nget_closest_vowel(\u0022FULL\u0022) ==\u003E \u0022U\u0022\nget_closest_vowel(\u0022quick\u0022) ==\u003E \u0022\u0022\nget_closest_vowel(\u0022ab\u0022) ==\u003E \u0022\u0022\n","entry_point":"GetClosestVowel","canonical_solution":null,"short-description":"Find closest vowel between consonants","name":"find_mid_vowel"}
{"task_id":"119","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// You are given a list of two strings, both strings consist of open\n        /// parentheses \u0027(\u0027 or close parentheses \u0027)\u0027 only.\n        /// Your job is to check if it is possible to concatenate the two strings in\n        /// some order, that the resulting string will be good.\n        /// A string S is considered to be good if and only if all parentheses in S\n        /// are balanced. For example: the string \u0027(())()\u0027 is good, while the string\n        /// \u0027())\u0027 is not.\n        /// Return \u0027Yes\u0027 if there\u0027s a way to make a good string, and return \u0027No\u0027 otherwise.\n        /// \n        /// Examples:\n        /// MatchParens([\u0027()(\u0027, \u0027)\u0027]) == \u0027Yes\u0027\n        /// MatchParens([\u0027)\u0027, \u0027)\u0027]) == \u0027No\u0027\n        /// \n        /// \u003C/summary\u003E\n        public static string MatchParens (List\u003Cstring\u003E lst) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = MatchParens(new List\u003Cstring\u003E {\u0022()(\u0022,\u0022)\u0022});\n            var expected1 = \u0022Yes\u0022;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = MatchParens(new List\u003Cstring\u003E {\u0022)\u0022,\u0022)\u0022});\n            var expected2 = \u0022No\u0022;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = MatchParens(new List\u003Cstring\u003E {\u0022(()(())\u0022,\u0022())())\u0022});\n            var expected3 = \u0022No\u0022;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = MatchParens(new List\u003Cstring\u003E {\u0022)())\u0022,\u0022(()()(\u0022});\n            var expected4 = \u0022Yes\u0022;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = MatchParens(new List\u003Cstring\u003E {\u0022(())))\u0022,\u0022(()())((\u0022});\n            var expected5 = \u0022Yes\u0022;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = MatchParens(new List\u003Cstring\u003E {\u0022()\u0022,\u0022())\u0022});\n            var expected6 = \u0022No\u0022;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = MatchParens(new List\u003Cstring\u003E {\u0022(()(\u0022,\u0022()))()\u0022});\n            var expected7 = \u0022Yes\u0022;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = MatchParens(new List\u003Cstring\u003E {\u0022((((\u0022,\u0022((())\u0022});\n            var expected8 = \u0022No\u0022;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = MatchParens(new List\u003Cstring\u003E {\u0022)(()\u0022,\u0022(()(\u0022});\n            var expected9 = \u0022No\u0022;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n            var actual10 = MatchParens(new List\u003Cstring\u003E {\u0022)(\u0022,\u0022)(\u0022});\n            var expected10 = \u0022No\u0022;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\u0022Exception --- test case 9 failed to pass\u0022);}\n\n            var actual11 = MatchParens(new List\u003Cstring\u003E {\u0022(\u0022,\u0022)\u0022});\n            var expected11 = \u0022Yes\u0022;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\u0022Exception --- test case 10 failed to pass\u0022);}\n\n            var actual12 = MatchParens(new List\u003Cstring\u003E {\u0022)\u0022,\u0022(\u0022});\n            var expected12 = \u0022Yes\u0022;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\u0022Exception --- test case 11 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nYou are given a list of two strings, both strings consist of open\nparentheses \u0027(\u0027 or close parentheses \u0027)\u0027 only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string \u0027(())()\u0027 is good, while the string\n\u0027())\u0027 is not.\nReturn \u0027Yes\u0027 if there\u0027s a way to make a good string, and return \u0027No\u0027 otherwise.\n\nExamples:\nmatch_parens([\u0027()(\u0027, \u0027)\u0027]) == \u0027Yes\u0027\nmatch_parens([\u0027)\u0027, \u0027)\u0027]) == \u0027No\u0027\n","entry_point":"MatchParens","canonical_solution":null,"short-description":"Check if concatenating strings makes balanced parentheses","name":"check_balanced"}
{"task_id":"120","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Given an array arr of integers and a positive integer k, return a sorted list \n        /// of length k with the Maximum k numbers in arr.\n        /// \n        /// Example 1:\n        /// \n        /// Input: arr = [-3, -4, 5], k = 3\n        /// Output: [-4, -3, 5]\n        /// \n        /// Example 2:\n        /// \n        /// Input: arr = [4, -4, 4], k = 2\n        /// Output: [4, 4]\n        /// \n        /// Example 3:\n        /// \n        /// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        /// Output: [2]\n        /// \n        /// Note:\n        /// 1. The length of the array will be in the range of [1, 1000].\n        /// 2. The elements in the array will be in the range of [-1000, 1000].\n        /// 3. 0 \u003C= k \u003C= len(arr)\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cint\u003E Maximum (List\u003Cint\u003E arr, int k) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Maximum(new List\u003Cint\u003E {-3,-4,5},3);\n            var expected1 = new List\u003Cint\u003E {-4,-3,5};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = Maximum(new List\u003Cint\u003E {4,-4,4},2);\n            var expected2 = new List\u003Cint\u003E {4,4};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = Maximum(new List\u003Cint\u003E {-3,2,1,2,-1,-2,1},1);\n            var expected3 = new List\u003Cint\u003E {2};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = Maximum(new List\u003Cint\u003E {123,-123,20,0,1,2,-3},3);\n            var expected4 = new List\u003Cint\u003E {2,20,123};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = Maximum(new List\u003Cint\u003E {-123,20,0,1,2,-3},4);\n            var expected5 = new List\u003Cint\u003E {0,1,2,20};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = Maximum(new List\u003Cint\u003E {5,15,0,3,-13,-8,0},7);\n            var expected6 = new List\u003Cint\u003E {-13,-8,0,0,3,5,15};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = Maximum(new List\u003Cint\u003E {-1,0,2,5,3,-10},2);\n            var expected7 = new List\u003Cint\u003E {3,5};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = Maximum(new List\u003Cint\u003E {1,0,5,-7},1);\n            var expected8 = new List\u003Cint\u003E {5};\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = Maximum(new List\u003Cint\u003E {4,-4},2);\n            var expected9 = new List\u003Cint\u003E {-4,4};\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n            var actual10 = Maximum(new List\u003Cint\u003E {-10,10},2);\n            var expected10 = new List\u003Cint\u003E {-10,10};\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\u0022Exception --- test case 9 failed to pass\u0022);}\n\n            var actual11 = Maximum(new List\u003Cint\u003E {1,2,3,-23,243,-400,0},0);\n            var expected11 = new List\u003Cint\u003E {};\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\u0022Exception --- test case 10 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nGiven an array arr of integers and a positive integer k, return a sorted list \nof length k with the maximum k numbers in arr.\n\nExample 1:\n\nInput: arr = [-3, -4, 5], k = 3\nOutput: [-4, -3, 5]\n\nExample 2:\n\nInput: arr = [4, -4, 4], k = 2\nOutput: [4, 4]\n\nExample 3:\n\nInput: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\nOutput: [2]\n\nNote:\n1. The length of the array will be in the range of [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n3. 0 \u003C= k \u003C= len(arr)\n","entry_point":"Maximum","canonical_solution":null,"short-description":"Return sorted list of max k numbers from array","name":"max_k_numbers"}
{"task_id":"121","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n        /// \n        /// \n        /// Examples\n        /// Solution([5, 8, 7, 1]) ==\u003E 12\n        /// Solution([3, 3, 3, 3, 3]) ==\u003E 9\n        /// Solution([30, 13, 24, 321]) ==\u003E0\n        /// \n        /// \u003C/summary\u003E\n        public static int Solution (List\u003Cint\u003E lst) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Solution(new List\u003Cint\u003E {5,8,7,1});\n            var expected1 = 12;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = Solution(new List\u003Cint\u003E {3,3,3,3,3});\n            var expected2 = 9;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = Solution(new List\u003Cint\u003E {30,13,24,321});\n            var expected3 = 0;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = Solution(new List\u003Cint\u003E {5,9});\n            var expected4 = 5;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = Solution(new List\u003Cint\u003E {2,4,8});\n            var expected5 = 0;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = Solution(new List\u003Cint\u003E {30,13,23,32});\n            var expected6 = 23;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = Solution(new List\u003Cint\u003E {3,13,2,9});\n            var expected7 = 3;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n\nExamples\nsolution([5, 8, 7, 1]) ==\u003E 12\nsolution([3, 3, 3, 3, 3]) ==\u003E 9\nsolution([30, 13, 24, 321]) ==\u003E0\n","entry_point":"Solution","canonical_solution":null,"short-description":"Sum odd numbers at even indices","name":"sum_odd_evens"}
{"task_id":"122","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Given a non-empty array of integers arr and an integer k, return\n        /// the sum of the elements with at most two digits from the first k elements of arr.\n        /// \n        /// Example:\n        /// \n        /// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        /// Output: 24 # sum of 21 \u002B 3\n        /// \n        /// Constraints:\n        /// 1. 1 \u003C= len(arr) \u003C= 100\n        /// 2. 1 \u003C= k \u003C= len(arr)\n        /// \n        /// \u003C/summary\u003E\n        public static int AddElements (List\u003Cint\u003E arr, int k) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = AddElements(new List\u003Cint\u003E {1,-2,-3,41,57,76,87,88,99},3);\n            var expected1 = -4;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = AddElements(new List\u003Cint\u003E {111,121,3,4000,5,6},2);\n            var expected2 = 0;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = AddElements(new List\u003Cint\u003E {11,21,3,90,5,6,7,8,9},4);\n            var expected3 = 125;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = AddElements(new List\u003Cint\u003E {111,21,3,4000,5,6,7,8,9},4);\n            var expected4 = 24;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = AddElements(new List\u003Cint\u003E {1},1);\n            var expected5 = 1;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nGiven a non-empty array of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\n\nExample:\n\nInput: arr = [111,21,3,4000,5,6,7,8,9], k = 4\nOutput: 24 # sum of 21 \u002B 3\n\nConstraints:\n1. 1 \u003C= len(arr) \u003C= 100\n2. 1 \u003C= k \u003C= len(arr)\n","entry_point":"AddElements","canonical_solution":null,"short-description":"Sum of two-digit nums in first k elements","name":"sum_first_k_elems"}
{"task_id":"123","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n        /// \n        /// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n        /// as follows: start with any positive integer n. Then each term is obtained from the \n        /// previous term as follows: if the previous term is even, the next term is one half of \n        /// the previous term. If the previous term is odd, the next term is 3 times the previous\n        /// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n        /// \n        /// Note: \n        /// 1. Collatz(1) is [1].\n        /// 2. returned list sorted in increasing order.\n        /// \n        /// For example:\n        /// GetOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cint\u003E GetOddCollatz (int n) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = GetOddCollatz(14);\n            var expected1 = new List\u003Cint\u003E {1,5,7,11,13,17};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = GetOddCollatz(5);\n            var expected2 = new List\u003Cint\u003E {1,5};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = GetOddCollatz(12);\n            var expected3 = new List\u003Cint\u003E {1,3,5};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = GetOddCollatz(1);\n            var expected4 = new List\u003Cint\u003E {1};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nGiven a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the \nprevious term as follows: if the previous term is even, the next term is one half of \nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n1. Collatz(1) is [1].\n2. returned list sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n","entry_point":"GetOddCollatz","canonical_solution":null,"short-description":"Return sorted odd numbers from Collatz sequence","name":"odd_collatz_nums"}
{"task_id":"124","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// You have to write a function which validates a given date string and\n        /// returns True if the date is valid otherwise False.\n        /// The date is valid if all of the following rules are satisfied:\n        /// 1. The date string is not empty.\n        /// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n        /// 3. The months should not be less than 1 or higher than 12.\n        /// 4. The date should be in the format: mm-dd-yyyy\n        /// \n        /// for example: \n        /// ValidDate(\u002703-11-2000\u0027) =\u003E True\n        /// \n        /// ValidDate(\u002715-01-2012\u0027) =\u003E False\n        /// \n        /// ValidDate(\u002704-0-2040\u0027) =\u003E False\n        /// \n        /// ValidDate(\u002706-04-2020\u0027) =\u003E True\n        /// \n        /// ValidDate(\u002706/04/2020\u0027) =\u003E False\n        /// \n        /// \u003C/summary\u003E\n        public static bool ValidDate (string date) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = ValidDate(\u002203-11-2000\u0022);\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = ValidDate(\u002215-01-2012\u0022);\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = ValidDate(\u002204-0-2040\u0022);\n            var expected3 = false;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = ValidDate(\u002206-04-2020\u0022);\n            var expected4 = true;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = ValidDate(\u002201-01-2007\u0022);\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = ValidDate(\u002203-32-2011\u0022);\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = ValidDate(\u0022\u0022);\n            var expected7 = false;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = ValidDate(\u002204-31-3000\u0022);\n            var expected8 = false;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = ValidDate(\u002206-06-2005\u0022);\n            var expected9 = true;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n            var actual10 = ValidDate(\u002221-31-2000\u0022);\n            var expected10 = false;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\u0022Exception --- test case 9 failed to pass\u0022);}\n\n            var actual11 = ValidDate(\u002204-12-2003\u0022);\n            var expected11 = true;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\u0022Exception --- test case 10 failed to pass\u0022);}\n\n            var actual12 = ValidDate(\u002204122003\u0022);\n            var expected12 = false;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\u0022Exception --- test case 11 failed to pass\u0022);}\n\n            var actual13 = ValidDate(\u002220030412\u0022);\n            var expected13 = false;\n            var result13 = compareLogic.Compare(actual13, expected13);\n            if (!result13.AreEqual) {throw new Exception(\u0022Exception --- test case 12 failed to pass\u0022);}\n\n            var actual14 = ValidDate(\u00222003-04\u0022);\n            var expected14 = false;\n            var result14 = compareLogic.Compare(actual14, expected14);\n            if (!result14.AreEqual) {throw new Exception(\u0022Exception --- test case 13 failed to pass\u0022);}\n\n            var actual15 = ValidDate(\u00222003-04-12\u0022);\n            var expected15 = false;\n            var result15 = compareLogic.Compare(actual15, expected15);\n            if (!result15.AreEqual) {throw new Exception(\u0022Exception --- test case 14 failed to pass\u0022);}\n\n            var actual16 = ValidDate(\u002204-2003\u0022);\n            var expected16 = false;\n            var result16 = compareLogic.Compare(actual16, expected16);\n            if (!result16.AreEqual) {throw new Exception(\u0022Exception --- test case 15 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"You have to write a function which validates a given date string and\nreturns True if the date is valid otherwise False.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\u002703-11-2000\u0027) =\u003E True\n\nvalid_date(\u002715-01-2012\u0027) =\u003E False\n\nvalid_date(\u002704-0-2040\u0027) =\u003E False\n\nvalid_date(\u002706-04-2020\u0027) =\u003E True\n\nvalid_date(\u002706/04/2020\u0027) =\u003E False\n","entry_point":"ValidDate","canonical_solution":null,"short-description":"Validate date string; return True/False","name":"validate_date_function"}
{"task_id":"125","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n        /// should split on commas \u0027,\u0027 if no commas exists you should return the number of lower-case letters with odd order in the\n        /// alphabet, ord(\u0027a\u0027) = 0, ord(\u0027b\u0027) = 1, ... ord(\u0027z\u0027) = 25\n        /// Examples\n        /// SplitWords(\u0022Hello world!\u0022) \u279E [\u0022Hello\u0022, \u0022world!\u0022]\n        /// SplitWords(\u0022Hello,world!\u0022) \u279E [\u0022Hello\u0022, \u0022world!\u0022]\n        /// SplitWords(\u0022abcdef\u0022) == 3 \n        /// \n        /// \u003C/summary\u003E\n        public static object SplitWords (string txt) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SplitWords(\u0022Hello world!\u0022);\n            var expected1 = new List\u003Cobject\u003E {\u0022Hello\u0022,\u0022world!\u0022};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = SplitWords(\u0022Hello,world!\u0022);\n            var expected2 = new List\u003Cobject\u003E {\u0022Hello\u0022,\u0022world!\u0022};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = SplitWords(\u0022Hello world,!\u0022);\n            var expected3 = new List\u003Cobject\u003E {\u0022Hello\u0022,\u0022world,!\u0022};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = SplitWords(\u0022Hello,Hello,world !\u0022);\n            var expected4 = new List\u003Cobject\u003E {\u0022Hello,Hello,world\u0022,\u0022!\u0022};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = SplitWords(\u0022abcdef\u0022);\n            var expected5 = 3;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = SplitWords(\u0022aaabb\u0022);\n            var expected6 = 2;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = SplitWords(\u0022aaaBb\u0022);\n            var expected7 = 1;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = SplitWords(\u0022\u0022);\n            var expected8 = 0;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nGiven a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\nshould split on commas \u0027,\u0027 if no commas exists you should return the number of lower-case letters with odd order in the\nalphabet, ord(\u0027a\u0027) = 0, ord(\u0027b\u0027) = 1, ... ord(\u0027z\u0027) = 25\nExamples\nsplit_words(\u0022Hello world!\u0022) \u279E [\u0022Hello\u0022, \u0022world!\u0022]\nsplit_words(\u0022Hello,world!\u0022) \u279E [\u0022Hello\u0022, \u0022world!\u0022]\nsplit_words(\u0022abcdef\u0022) == 3 \n","entry_point":"SplitWords","canonical_solution":null,"short-description":"Split words on space/comma or count odd letters","name":"split_words"}
{"task_id":"126","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Given a list of numbers, return whether or not they are sorted\n        /// in ascending order. If list has more than 1 duplicate of the same\n        /// number, return False. Assume no negative numbers and only integers.\n        /// \n        /// Examples\n        /// IsSorted([5]) \u279E True\n        /// IsSorted([1, 2, 3, 4, 5]) \u279E True\n        /// IsSorted([1, 3, 2, 4, 5]) \u279E False\n        /// IsSorted([1, 2, 3, 4, 5, 6]) \u279E True\n        /// IsSorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n        /// IsSorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n        /// IsSorted([1, 2, 2, 3, 3, 4]) \u279E True\n        /// IsSorted([1, 2, 2, 2, 3, 4]) \u279E False\n        /// \n        /// \u003C/summary\u003E\n        public static bool IsSorted (List\u003Cint\u003E lst) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = IsSorted(new List\u003Cint\u003E {5});\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = IsSorted(new List\u003Cint\u003E {1,2,3,4,5});\n            var expected2 = true;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = IsSorted(new List\u003Cint\u003E {1,3,2,4,5});\n            var expected3 = false;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = IsSorted(new List\u003Cint\u003E {1,2,3,4,5,6});\n            var expected4 = true;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = IsSorted(new List\u003Cint\u003E {1,2,3,4,5,6,7});\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = IsSorted(new List\u003Cint\u003E {1,3,2,4,5,6,7});\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = IsSorted(new List\u003Cint\u003E {});\n            var expected7 = true;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = IsSorted(new List\u003Cint\u003E {1});\n            var expected8 = true;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = IsSorted(new List\u003Cint\u003E {3,2,1});\n            var expected9 = false;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n            var actual10 = IsSorted(new List\u003Cint\u003E {1,2,2,2,3,4});\n            var expected10 = false;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\u0022Exception --- test case 9 failed to pass\u0022);}\n\n            var actual11 = IsSorted(new List\u003Cint\u003E {1,2,3,3,3,4});\n            var expected11 = false;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\u0022Exception --- test case 10 failed to pass\u0022);}\n\n            var actual12 = IsSorted(new List\u003Cint\u003E {1,2,2,3,3,4});\n            var expected12 = true;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\u0022Exception --- test case 11 failed to pass\u0022);}\n\n            var actual13 = IsSorted(new List\u003Cint\u003E {1,2,3,4});\n            var expected13 = true;\n            var result13 = compareLogic.Compare(actual13, expected13);\n            if (!result13.AreEqual) {throw new Exception(\u0022Exception --- test case 12 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nGiven a list of numbers, return whether or not they are sorted\nin ascending order. If list has more than 1 duplicate of the same\nnumber, return False. Assume no negative numbers and only integers.\n\nExamples\nis_sorted([5]) \u279E True\nis_sorted([1, 2, 3, 4, 5]) \u279E True\nis_sorted([1, 3, 2, 4, 5]) \u279E False\nis_sorted([1, 2, 3, 4, 5, 6]) \u279E True\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\nis_sorted([1, 2, 2, 3, 3, 4]) \u279E True\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n","entry_point":"IsSorted","canonical_solution":null,"short-description":"Check if list is sorted; no \u003E1 duplicates","name":"check_sorted_list"}
{"task_id":"127","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// You are given two intervals,\n        /// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n        /// The given intervals are closed which means that the interval (start, end)\n        /// includes both start and end.\n        /// For each given interval, it is assumed that its start is less or equal its end.\n        /// Your task is to determine whether the length of Intersection of these two \n        /// intervals is a prime number.\n        /// Example, the Intersection of the intervals (1, 3), (2, 4) is (2, 3)\n        /// which its length is 1, which not a prime number.\n        /// If the length of the Intersection is a prime number, return \u0022YES\u0022,\n        /// otherwise, return \u0022NO\u0022.\n        /// If the two intervals don\u0027t intersect, return \u0022NO\u0022.\n        /// \n        /// \n        /// [input/output] samples:\n        /// Intersection((1, 2), (2, 3)) ==\u003E \u0022NO\u0022\n        /// Intersection((-1, 1), (0, 4)) ==\u003E \u0022NO\u0022\n        /// Intersection((-3, -1), (-5, 5)) ==\u003E \u0022YES\u0022\n        /// \n        /// \u003C/summary\u003E\n        public static string Intersection (List\u003Cint\u003E interval1, List\u003Cint\u003E interval2) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Intersection(new List\u003Cint\u003E {1,2},new List\u003Cint\u003E {2,3});\n            var expected1 = \u0022NO\u0022;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = Intersection(new List\u003Cint\u003E {-1,1},new List\u003Cint\u003E {0,4});\n            var expected2 = \u0022NO\u0022;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = Intersection(new List\u003Cint\u003E {-3,-1},new List\u003Cint\u003E {-5,5});\n            var expected3 = \u0022YES\u0022;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = Intersection(new List\u003Cint\u003E {-2,2},new List\u003Cint\u003E {-4,0});\n            var expected4 = \u0022YES\u0022;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = Intersection(new List\u003Cint\u003E {-11,2},new List\u003Cint\u003E {-1,-1});\n            var expected5 = \u0022NO\u0022;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = Intersection(new List\u003Cint\u003E {1,2},new List\u003Cint\u003E {3,5});\n            var expected6 = \u0022NO\u0022;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = Intersection(new List\u003Cint\u003E {1,2},new List\u003Cint\u003E {1,2});\n            var expected7 = \u0022NO\u0022;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = Intersection(new List\u003Cint\u003E {-2,-2},new List\u003Cint\u003E {-3,-2});\n            var expected8 = \u0022NO\u0022;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"You are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \u0022YES\u0022,\notherwise, return \u0022NO\u0022.\nIf the two intervals don\u0027t intersect, return \u0022NO\u0022.\n\n\n[input/output] samples:\nintersection((1, 2), (2, 3)) ==\u003E \u0022NO\u0022\nintersection((-1, 1), (0, 4)) ==\u003E \u0022NO\u0022\nintersection((-3, -1), (-5, 5)) ==\u003E \u0022YES\u0022\n","entry_point":"Intersection","canonical_solution":null,"short-description":"Check if the intersection length is prime","name":"intersection_prime"}
{"task_id":"128","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// You are given an array arr of integers and you need to return\n        /// sum of magnitudes of integers multiplied by product of all signs\n        /// of each number in the array, represented by 1, -1 or 0.\n        /// Note: return None for empty arr.\n        /// \n        /// Example:\n        /// \u003E\u003E\u003E ProdSigns([1, 2, 2, -4]) == -9\n        /// \u003E\u003E\u003E ProdSigns([0, 1]) == 0\n        /// \u003E\u003E\u003E ProdSigns([]) == None\n        /// \n        /// \u003C/summary\u003E\n        public static object ProdSigns (List\u003Cint\u003E arr) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = ProdSigns(new List\u003Cint\u003E {1,2,2,-4});\n            var expected1 = -9;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = ProdSigns(new List\u003Cint\u003E {0,1});\n            var expected2 = 0;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = ProdSigns(new List\u003Cint\u003E {1,1,1,2,3,-1,1});\n            var expected3 = -10;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = ProdSigns(new List\u003Cint\u003E {});\n            var expected4 = null;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = ProdSigns(new List\u003Cint\u003E {2,4,1,2,-1,-1,9});\n            var expected5 = 20;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = ProdSigns(new List\u003Cint\u003E {-1,1,-1,1});\n            var expected6 = 4;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = ProdSigns(new List\u003Cint\u003E {-1,1,1,1});\n            var expected7 = -4;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = ProdSigns(new List\u003Cint\u003E {-1,1,1,0});\n            var expected8 = 0;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nYou are given an array arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the array, represented by 1, -1 or 0.\nNote: return None for empty arr.\n\nExample:\n\u003E\u003E\u003E prod_signs([1, 2, 2, -4]) == -9\n\u003E\u003E\u003E prod_signs([0, 1]) == 0\n\u003E\u003E\u003E prod_signs([]) == None\n","entry_point":"ProdSigns","canonical_solution":null,"short-description":"Return sum of magnitudes with sign product","name":"compute_prod_sum"}
{"task_id":"129","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Given a grid with N rows and N columns (N \u003E= 2) and a positive integer k, \n        /// each cell of the grid contains a value. Every integer in the range [1, N * N]\n        /// inclusive appears exactly once on the cells of the grid.\n        /// \n        /// You have to find the minimum path of length k in the grid. You can start\n        /// from any cell, and in each step you can move to any of the neighbor cells,\n        /// in other words, you can go to cells which share an edge with you current\n        /// cell.\n        /// Please note that a path of length k means visiting exactly k cells (not\n        /// necessarily distinct).\n        /// You CANNOT go off the grid.\n        /// A path A (of length k) is considered less than a path B (of length k) if\n        /// after making the ordered lists of the values on the cells that A and B go\n        /// through (let\u0027s call them lst_A and lst_B), lst_A is lexicographically less\n        /// than lst_B, in other words, there exist an integer index i (1 \u003C= i \u003C= k)\n        /// such that lst_A[i] \u003C lst_B[i] and for any j (1 \u003C= j \u003C i) we have\n        /// lst_A[j] = lst_B[j].\n        /// It is guaranteed that the answer is unique.\n        /// Return an ordered list of the values on the cells that the minimum path go through.\n        /// \n        /// Examples:\n        /// \n        /// Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        /// Output: [1, 2, 1]\n        /// \n        /// Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        /// Output: [1]\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cint\u003E MinPath (List\u003CList\u003Cint\u003E\u003E grid, int k) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = MinPath(new List\u003CList\u003Cint\u003E\u003E {new List\u003Cint\u003E {1,2,3},new List\u003Cint\u003E {4,5,6},new List\u003Cint\u003E {7,8,9}},3);\n            var expected1 = new List\u003Cint\u003E {1,2,1};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = MinPath(new List\u003CList\u003Cint\u003E\u003E {new List\u003Cint\u003E {5,9,3},new List\u003Cint\u003E {4,1,6},new List\u003Cint\u003E {7,8,2}},1);\n            var expected2 = new List\u003Cint\u003E {1};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = MinPath(new List\u003CList\u003Cint\u003E\u003E {new List\u003Cint\u003E {1,2,3,4},new List\u003Cint\u003E {5,6,7,8},new List\u003Cint\u003E {9,10,11,12},new List\u003Cint\u003E {13,14,15,16}},4);\n            var expected3 = new List\u003Cint\u003E {1,2,1,2};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = MinPath(new List\u003CList\u003Cint\u003E\u003E {new List\u003Cint\u003E {6,4,13,10},new List\u003Cint\u003E {5,7,12,1},new List\u003Cint\u003E {3,16,11,15},new List\u003Cint\u003E {8,14,9,2}},7);\n            var expected4 = new List\u003Cint\u003E {1,10,1,10,1,10,1};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = MinPath(new List\u003CList\u003Cint\u003E\u003E {new List\u003Cint\u003E {8,14,9,2},new List\u003Cint\u003E {6,4,13,15},new List\u003Cint\u003E {5,7,1,12},new List\u003Cint\u003E {3,10,11,16}},5);\n            var expected5 = new List\u003Cint\u003E {1,7,1,7,1};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = MinPath(new List\u003CList\u003Cint\u003E\u003E {new List\u003Cint\u003E {11,8,7,2},new List\u003Cint\u003E {5,16,14,4},new List\u003Cint\u003E {9,3,15,6},new List\u003Cint\u003E {12,13,10,1}},9);\n            var expected6 = new List\u003Cint\u003E {1,6,1,6,1,6,1,6,1};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = MinPath(new List\u003CList\u003Cint\u003E\u003E {new List\u003Cint\u003E {12,13,10,1},new List\u003Cint\u003E {9,3,15,6},new List\u003Cint\u003E {5,16,14,4},new List\u003Cint\u003E {11,8,7,2}},12);\n            var expected7 = new List\u003Cint\u003E {1,6,1,6,1,6,1,6,1,6,1,6};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = MinPath(new List\u003CList\u003Cint\u003E\u003E {new List\u003Cint\u003E {2,7,4},new List\u003Cint\u003E {3,1,5},new List\u003Cint\u003E {6,8,9}},8);\n            var expected8 = new List\u003Cint\u003E {1,3,1,3,1,3,1,3};\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = MinPath(new List\u003CList\u003Cint\u003E\u003E {new List\u003Cint\u003E {6,1,5},new List\u003Cint\u003E {3,8,9},new List\u003Cint\u003E {2,7,4}},8);\n            var expected9 = new List\u003Cint\u003E {1,5,1,5,1,5,1,5};\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n            var actual10 = MinPath(new List\u003CList\u003Cint\u003E\u003E {new List\u003Cint\u003E {1,2},new List\u003Cint\u003E {3,4}},10);\n            var expected10 = new List\u003Cint\u003E {1,2,1,2,1,2,1,2,1,2};\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\u0022Exception --- test case 9 failed to pass\u0022);}\n\n            var actual11 = MinPath(new List\u003CList\u003Cint\u003E\u003E {new List\u003Cint\u003E {1,3},new List\u003Cint\u003E {3,2}},10);\n            var expected11 = new List\u003Cint\u003E {1,3,1,3,1,3,1,3,1,3};\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\u0022Exception --- test case 10 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nGiven a grid with N rows and N columns (N \u003E= 2) and a positive integer k, \neach cell of the grid contains a value. Every integer in the range [1, N * N]\ninclusive appears exactly once on the cells of the grid.\n\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered lists of the values on the cells that A and B go\nthrough (let\u0027s call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 \u003C= i \u003C= k)\nsuch that lst_A[i] \u003C lst_B[i] and for any j (1 \u003C= j \u003C i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered list of the values on the cells that the minimum path go through.\n\nExamples:\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\nOutput: [1, 2, 1]\n\nInput: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\nOutput: [1]\n","entry_point":"MinPath","canonical_solution":null,"short-description":"Find min k-length path of lexicographic order","name":"find_min_path_k"}
{"task_id":"130","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n        /// the last couple centuries. However, what people don\u0027t know is Tribonacci sequence.\n        /// Tribonacci sequence is defined by the recurrence:\n        /// Tri(1) = 3\n        /// Tri(n) = 1 \u002B n / 2, if n is even.\n        /// Tri(n) =  Tri(n - 1) \u002B Tri(n - 2) \u002B Tri(n \u002B 1), if n is odd.\n        /// For example:\n        /// Tri(2) = 1 \u002B (2 / 2) = 2\n        /// Tri(4) = 3\n        /// Tri(3) = Tri(2) \u002B Tri(1) \u002B Tri(4)\n        /// = 2 \u002B 3 \u002B 3 = 8 \n        /// You are given a non-negative integer number n, you have to a return a list of the \n        /// first n \u002B 1 numbers of the Tribonacci sequence.\n        /// Examples:\n        /// Tri(3) = [1, 3, 2, 8]\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cobject\u003E Tri (int n) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Tri(3);\n            var expected1 = new List\u003Cobject\u003E {1,3,2.0,8.0};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = Tri(4);\n            var expected2 = new List\u003Cobject\u003E {1,3,2.0,8.0,3.0};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = Tri(5);\n            var expected3 = new List\u003Cobject\u003E {1,3,2.0,8.0,3.0,15.0};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = Tri(6);\n            var expected4 = new List\u003Cobject\u003E {1,3,2.0,8.0,3.0,15.0,4.0};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = Tri(7);\n            var expected5 = new List\u003Cobject\u003E {1,3,2.0,8.0,3.0,15.0,4.0,24.0};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = Tri(8);\n            var expected6 = new List\u003Cobject\u003E {1,3,2.0,8.0,3.0,15.0,4.0,24.0,5.0};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = Tri(9);\n            var expected7 = new List\u003Cobject\u003E {1,3,2.0,8.0,3.0,15.0,4.0,24.0,5.0,35.0};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = Tri(20);\n            var expected8 = new List\u003Cobject\u003E {1,3,2.0,8.0,3.0,15.0,4.0,24.0,5.0,35.0,6.0,48.0,7.0,63.0,8.0,80.0,9.0,99.0,10.0,120.0,11.0};\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = Tri(0);\n            var expected9 = new List\u003Cobject\u003E {1};\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n            var actual10 = Tri(1);\n            var expected10 = new List\u003Cobject\u003E {1,3};\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\u0022Exception --- test case 9 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \nthe last couple centuries. However, what people don\u0027t know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 \u002B n / 2, if n is even.\ntri(n) =  tri(n - 1) \u002B tri(n - 2) \u002B tri(n \u002B 1), if n is odd.\nFor example:\ntri(2) = 1 \u002B (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) \u002B tri(1) \u002B tri(4)\n= 2 \u002B 3 \u002B 3 = 8 \nYou are given a non-negative integer number n, you have to a return a list of the \nfirst n \u002B 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = [1, 3, 2, 8]\n","entry_point":"Tri","canonical_solution":null,"short-description":"Introduction to the Tribonacci sequence","name":"tribonacci_seq"}
{"task_id":"131","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Given a positive integer n, return the product of the odd Digits.\n        /// Return 0 if all Digits are even.\n        /// For example:\n        /// Digits(1)  == 1\n        /// Digits(4)  == 0\n        /// Digits(235) == 15\n        /// \n        /// \u003C/summary\u003E\n        public static int Digits (int n) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Digits(5);\n            var expected1 = 5;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = Digits(54);\n            var expected2 = 5;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = Digits(120);\n            var expected3 = 1;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = Digits(5014);\n            var expected4 = 5;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = Digits(98765);\n            var expected5 = 315;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = Digits(5576543);\n            var expected6 = 2625;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = Digits(2468);\n            var expected7 = 0;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Given a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n","entry_point":"Digits","canonical_solution":null,"short-description":"Return product of odd digits or 0 if all even","name":"odd_digit_product"}
{"task_id":"132","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Create a function that takes a string as input which contains only square brackets.\n        /// The function should return True if and only if there is a valid subsequence of brackets \n        /// where at least one bracket in the subsequence is nested.\n        /// \n        /// IsNested(\u0027[[]]\u0027) \u279E True\n        /// IsNested(\u0027[]]]]]]][[[[[]\u0027) \u279E False\n        /// IsNested(\u0027[][]\u0027) \u279E False\n        /// IsNested(\u0027[]\u0027) \u279E False\n        /// IsNested(\u0027[[][]]\u0027) \u279E True\n        /// IsNested(\u0027[[]][[\u0027) \u279E True\n        /// \n        /// \u003C/summary\u003E\n        public static bool IsNested (string string0) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = IsNested(\u0022[[]]\u0022);\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = IsNested(\u0022[]]]]]]][[[[[]\u0022);\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = IsNested(\u0022[][]\u0022);\n            var expected3 = false;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = IsNested(\u0022[]\u0022);\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = IsNested(\u0022[[[[]]]]\u0022);\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = IsNested(\u0022[]]]]]]]]]]\u0022);\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = IsNested(\u0022[][][[]]\u0022);\n            var expected7 = true;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = IsNested(\u0022[[]\u0022);\n            var expected8 = false;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = IsNested(\u0022[]]\u0022);\n            var expected9 = false;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n            var actual10 = IsNested(\u0022[[]][[\u0022);\n            var expected10 = true;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\u0022Exception --- test case 9 failed to pass\u0022);}\n\n            var actual11 = IsNested(\u0022[[][]]\u0022);\n            var expected11 = true;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\u0022Exception --- test case 10 failed to pass\u0022);}\n\n            var actual12 = IsNested(\u0022\u0022);\n            var expected12 = false;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\u0022Exception --- test case 11 failed to pass\u0022);}\n\n            var actual13 = IsNested(\u0022[[[[[[[[\u0022);\n            var expected13 = false;\n            var result13 = compareLogic.Compare(actual13, expected13);\n            if (!result13.AreEqual) {throw new Exception(\u0022Exception --- test case 12 failed to pass\u0022);}\n\n            var actual14 = IsNested(\u0022]]]]]]]]\u0022);\n            var expected14 = false;\n            var result14 = compareLogic.Compare(actual14, expected14);\n            if (!result14.AreEqual) {throw new Exception(\u0022Exception --- test case 13 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nCreate a function that takes a string as input which contains only square brackets.\nThe function should return True if and only if there is a valid subsequence of brackets \nwhere at least one bracket in the subsequence is nested.\n\nis_nested(\u0027[[]]\u0027) \u279E True\nis_nested(\u0027[]]]]]]][[[[[]\u0027) \u279E False\nis_nested(\u0027[][]\u0027) \u279E False\nis_nested(\u0027[]\u0027) \u279E False\nis_nested(\u0027[[][]]\u0027) \u279E True\nis_nested(\u0027[[]][[\u0027) \u279E True\n","entry_point":"IsNested","canonical_solution":null,"short-description":"Check if brackets string has nested subsequence","name":"check_nesting"}
{"task_id":"133","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// You are given a list of numbers.\n        /// You need to return the sum of squared numbers in the given list,\n        /// round each element in the list to the upper int(Ceiling) first.\n        /// Examples:\n        /// For lst = [1,2,3] the output should be 14\n        /// For lst = [1,4,9] the output should be 98\n        /// For lst = [1,3,5,7] the output should be 84\n        /// For lst = [1.4,4.2,0] the output should be 29\n        /// For lst = [-2.4,1,1] the output should be 6\n        /// \n        /// \n        /// \n        /// \u003C/summary\u003E\n        public static int SumSquares (List\u003Cobject\u003E lst) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SumSquares(new List\u003Cobject\u003E {1,2,3});\n            var expected1 = 14;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = SumSquares(new List\u003Cobject\u003E {1.0,2,3});\n            var expected2 = 14;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = SumSquares(new List\u003Cobject\u003E {1,3,5,7});\n            var expected3 = 84;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = SumSquares(new List\u003Cobject\u003E {1.4,4.2,0});\n            var expected4 = 29;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = SumSquares(new List\u003Cobject\u003E {-2.4,1,1});\n            var expected5 = 6;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = SumSquares(new List\u003Cobject\u003E {100,1,15,2});\n            var expected6 = 10230;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = SumSquares(new List\u003Cobject\u003E {10000,10000});\n            var expected7 = 200000000;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = SumSquares(new List\u003Cobject\u003E {-1.4,4.6,6.3});\n            var expected8 = 75;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = SumSquares(new List\u003Cobject\u003E {-1.4,17.9,18.9,19.9});\n            var expected9 = 1086;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n            var actual10 = SumSquares(new List\u003Cobject\u003E {0});\n            var expected10 = 0;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\u0022Exception --- test case 9 failed to pass\u0022);}\n\n            var actual11 = SumSquares(new List\u003Cobject\u003E {-1});\n            var expected11 = 1;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\u0022Exception --- test case 10 failed to pass\u0022);}\n\n            var actual12 = SumSquares(new List\u003Cobject\u003E {-1,1,0});\n            var expected12 = 2;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\u0022Exception --- test case 11 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"You are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n\n\n","entry_point":"SumSquares","canonical_solution":null,"short-description":"Sum of ceiling-squared numbers in a list","name":"sum_squares_ceiling"}
{"task_id":"134","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Create a function that returns True if the last character\n        /// of a given string is an alphabetical character and is not\n        /// a part of a word, and False otherwise.\n        /// Note: \u0022word\u0022 is a group of characters separated by space.\n        /// \n        /// Examples:\n        /// CheckIfLastCharIsALetter(\u0022apple pie\u0022) \u279E False\n        /// CheckIfLastCharIsALetter(\u0022apple pi e\u0022) \u279E True\n        /// CheckIfLastCharIsALetter(\u0022apple pi e \u0022) \u279E False\n        /// CheckIfLastCharIsALetter(\u0022\u0022) \u279E False \n        /// \n        /// \u003C/summary\u003E\n        public static bool CheckIfLastCharIsALetter (string txt) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = CheckIfLastCharIsALetter(\u0022apple\u0022);\n            var expected1 = false;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = CheckIfLastCharIsALetter(\u0022apple pi e\u0022);\n            var expected2 = true;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = CheckIfLastCharIsALetter(\u0022eeeee\u0022);\n            var expected3 = false;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = CheckIfLastCharIsALetter(\u0022A\u0022);\n            var expected4 = true;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = CheckIfLastCharIsALetter(\u0022Pumpkin pie \u0022);\n            var expected5 = false;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = CheckIfLastCharIsALetter(\u0022Pumpkin pie 1\u0022);\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = CheckIfLastCharIsALetter(\u0022\u0022);\n            var expected7 = false;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = CheckIfLastCharIsALetter(\u0022eeeee e \u0022);\n            var expected8 = false;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = CheckIfLastCharIsALetter(\u0022apple pie\u0022);\n            var expected9 = false;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n            var actual10 = CheckIfLastCharIsALetter(\u0022apple pi e \u0022);\n            var expected10 = false;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\u0022Exception --- test case 9 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nCreate a function that returns True if the last character\nof a given string is an alphabetical character and is not\na part of a word, and False otherwise.\nNote: \u0022word\u0022 is a group of characters separated by space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\u0022apple pie\u0022) \u279E False\ncheck_if_last_char_is_a_letter(\u0022apple pi e\u0022) \u279E True\ncheck_if_last_char_is_a_letter(\u0022apple pi e \u0022) \u279E False\ncheck_if_last_char_is_a_letter(\u0022\u0022) \u279E False \n","entry_point":"CheckIfLastCharIsALetter","canonical_solution":null,"short-description":"Check if string ends with a standalone letter","name":"last_char_letter"}
{"task_id":"135","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Create a function which returns the largest index of an element which\n        /// is not greater than or equal to the element immediately preceding it. If\n        /// no such element exists then return -1. The given array will not contain\n        /// duplicate values.\n        /// \n        /// Examples:\n        /// CanArrange([1,2,4,3,5]) = 3\n        /// CanArrange([1,2,3]) = -1\n        /// \n        /// \u003C/summary\u003E\n        public static int CanArrange (List\u003Cint\u003E arr) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = CanArrange(new List\u003Cint\u003E {1,2,4,3,5});\n            var expected1 = 3;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = CanArrange(new List\u003Cint\u003E {1,2,4,5});\n            var expected2 = -1;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = CanArrange(new List\u003Cint\u003E {1,4,2,5,6,7,8,9,10});\n            var expected3 = 2;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = CanArrange(new List\u003Cint\u003E {4,8,5,7,3});\n            var expected4 = 4;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = CanArrange(new List\u003Cint\u003E {});\n            var expected5 = -1;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Create a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given array will not contain\nduplicate values.\n\nExamples:\ncan_arrange([1,2,4,3,5]) = 3\ncan_arrange([1,2,3]) = -1\n","entry_point":"CanArrange","canonical_solution":null,"short-description":"Find last index where order breaks","name":"find_index_drop"}
{"task_id":"136","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Create a function that returns a tuple (a, b), where \u0027a\u0027 is\n        /// the largest of negative integers, and \u0027b\u0027 is the smallest\n        /// of positive integers in a list.\n        /// If there is no negative or positive integers, return them as None.\n        /// \n        /// Examples:\n        /// LargestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (None, 1)\n        /// LargestSmallestIntegers([]) == (None, None)\n        /// LargestSmallestIntegers([0]) == (None, None)\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cobject\u003E LargestSmallestIntegers (List\u003Cint\u003E lst) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = LargestSmallestIntegers(new List\u003Cint\u003E {2,4,1,3,5,7});\n            var expected1 = new List\u003Cobject\u003E {null,1};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = LargestSmallestIntegers(new List\u003Cint\u003E {2,4,1,3,5,7,0});\n            var expected2 = new List\u003Cobject\u003E {null,1};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = LargestSmallestIntegers(new List\u003Cint\u003E {1,3,2,4,5,6,-2});\n            var expected3 = new List\u003Cobject\u003E {-2,1};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = LargestSmallestIntegers(new List\u003Cint\u003E {4,5,3,6,2,7,-7});\n            var expected4 = new List\u003Cobject\u003E {-7,2};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = LargestSmallestIntegers(new List\u003Cint\u003E {7,3,8,4,9,2,5,-9});\n            var expected5 = new List\u003Cobject\u003E {-9,2};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = LargestSmallestIntegers(new List\u003Cint\u003E {});\n            var expected6 = new List\u003Cobject\u003E {null,null};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = LargestSmallestIntegers(new List\u003Cint\u003E {0});\n            var expected7 = new List\u003Cobject\u003E {null,null};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = LargestSmallestIntegers(new List\u003Cint\u003E {-1,-3,-5,-6});\n            var expected8 = new List\u003Cobject\u003E {-1,null};\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = LargestSmallestIntegers(new List\u003Cint\u003E {-1,-3,-5,-6,0});\n            var expected9 = new List\u003Cobject\u003E {-1,null};\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n            var actual10 = LargestSmallestIntegers(new List\u003Cint\u003E {-6,-4,-4,-3,1});\n            var expected10 = new List\u003Cobject\u003E {-3,1};\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\u0022Exception --- test case 9 failed to pass\u0022);}\n\n            var actual11 = LargestSmallestIntegers(new List\u003Cint\u003E {-6,-4,-4,-3,-100,1});\n            var expected11 = new List\u003Cobject\u003E {-3,1};\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\u0022Exception --- test case 10 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nCreate a function that returns a tuple (a, b), where \u0027a\u0027 is\nthe largest of negative integers, and \u0027b\u0027 is the smallest\nof positive integers in a list.\nIf there is no negative or positive integers, return them as None.\n\nExamples:\nlargest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\nlargest_smallest_integers([]) == (None, None)\nlargest_smallest_integers([0]) == (None, None)\n","entry_point":"LargestSmallestIntegers","canonical_solution":null,"short-description":"Return largest neg and smallest pos ints","name":"largest/smallest_ints"}
{"task_id":"137","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Create a function that takes integers, floats, or strings representing\n        /// real numbers, and returns the larger variable in its given variable type.\n        /// Return None if the values are equal.\n        /// Note: If a real number is represented as a string, the floating point might be . or ,\n        /// \n        /// CompareOne(1, 2.5) \u279E 2.5\n        /// CompareOne(1, \u00222,3\u0022) \u279E \u00222,3\u0022\n        /// CompareOne(\u00225,1\u0022, \u00226\u0022) \u279E \u00226\u0022\n        /// CompareOne(\u00221\u0022, 1) \u279E None\n        /// \n        /// \u003C/summary\u003E\n        public static object CompareOne (object a, object b) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = CompareOne(1,2);\n            var expected1 = 2;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = CompareOne(1,2.5);\n            var expected2 = 2.5;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = CompareOne(2,3);\n            var expected3 = 3;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = CompareOne(5,6);\n            var expected4 = 6;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = CompareOne(1,\u00222,3\u0022);\n            var expected5 = \u00222,3\u0022;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = CompareOne(\u00225,1\u0022,\u00226\u0022);\n            var expected6 = \u00226\u0022;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = CompareOne(\u00221\u0022,\u00222\u0022);\n            var expected7 = \u00222\u0022;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = CompareOne(\u00221\u0022,1);\n            var expected8 = null;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nCreate a function that takes integers, floats, or strings representing\nreal numbers, and returns the larger variable in its given variable type.\nReturn None if the values are equal.\nNote: If a real number is represented as a string, the floating point might be . or ,\n\ncompare_one(1, 2.5) \u279E 2.5\ncompare_one(1, \u00222,3\u0022) \u279E \u00222,3\u0022\ncompare_one(\u00225,1\u0022, \u00226\u0022) \u279E \u00226\u0022\ncompare_one(\u00221\u0022, 1) \u279E None\n","entry_point":"CompareOne","canonical_solution":null,"short-description":"Compare integers, floats, strings, return larger","name":"compare_numbers"}
{"task_id":"138","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n        /// Example\n        /// IsEqualToSumEven(4) == False\n        /// IsEqualToSumEven(6) == False\n        /// IsEqualToSumEven(8) == True\n        /// \n        /// \u003C/summary\u003E\n        public static bool IsEqualToSumEven (int n) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = IsEqualToSumEven(4);\n            var expected1 = false;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = IsEqualToSumEven(6);\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = IsEqualToSumEven(8);\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = IsEqualToSumEven(10);\n            var expected4 = true;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = IsEqualToSumEven(11);\n            var expected5 = false;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = IsEqualToSumEven(12);\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = IsEqualToSumEven(13);\n            var expected7 = false;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = IsEqualToSumEven(16);\n            var expected8 = true;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == False\nis_equal_to_sum_even(6) == False\nis_equal_to_sum_even(8) == True\n","entry_point":"IsEqualToSumEven","canonical_solution":null,"short-description":"Check if n equals the sum of 4 evens","name":"sum_of_4_evens"}
{"task_id":"139","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// The Brazilian factorial is defined as:\n        /// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n        /// where n \u003E 0\n        /// \n        /// For example:\n        /// \u003E\u003E\u003E SpecialFactorial(4)\n        /// 288\n        /// \n        /// The function will receive an integer as input and should return the special\n        /// factorial of this integer.\n        /// \n        /// \u003C/summary\u003E\n        public static int SpecialFactorial (int n) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SpecialFactorial(4);\n            var expected1 = 288;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = SpecialFactorial(5);\n            var expected2 = 34560;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = SpecialFactorial(7);\n            var expected3 = 125411328000;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = SpecialFactorial(1);\n            var expected4 = 1;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"The Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n \u003E 0\n\nFor example:\n\u003E\u003E\u003E special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n","entry_point":"SpecialFactorial","canonical_solution":null,"short-description":"Brazilian factorial multiplies descending factorials","name":"brazilian_factorial"}
{"task_id":"140","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Given a string text, replace all spaces in it with underscores, \n        /// and if a string has more than 2 consecutive spaces, \n        /// then replace all consecutive spaces with - \n        /// \n        /// FixSpaces(\u0022Example\u0022) == \u0022Example\u0022\n        /// FixSpaces(\u0022Example 1\u0022) == \u0022Example_1\u0022\n        /// FixSpaces(\u0022 Example 2\u0022) == \u0022_Example_2\u0022\n        /// FixSpaces(\u0022 Example   3\u0022) == \u0022_Example-3\u0022\n        /// \n        /// \u003C/summary\u003E\n        public static string FixSpaces (string text) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = FixSpaces(\u0022Example\u0022);\n            var expected1 = \u0022Example\u0022;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = FixSpaces(\u0022Mudasir Hanif \u0022);\n            var expected2 = \u0022Mudasir_Hanif_\u0022;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = FixSpaces(\u0022Yellow Yellow  Dirty  Fellow\u0022);\n            var expected3 = \u0022Yellow_Yellow__Dirty__Fellow\u0022;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = FixSpaces(\u0022Exa   mple\u0022);\n            var expected4 = \u0022Exa-mple\u0022;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = FixSpaces(\u0022   Exa 1 2 2 mple\u0022);\n            var expected5 = \u0022-Exa_1_2_2_mple\u0022;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nGiven a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthen replace all consecutive spaces with - \n\nfix_spaces(\u0022Example\u0022) == \u0022Example\u0022\nfix_spaces(\u0022Example 1\u0022) == \u0022Example_1\u0022\nfix_spaces(\u0022 Example 2\u0022) == \u0022_Example_2\u0022\nfix_spaces(\u0022 Example   3\u0022) == \u0022_Example-3\u0022\n","entry_point":"FixSpaces","canonical_solution":null,"short-description":"Replace spaces with underscores or hyphen","name":"space/underscore"}
{"task_id":"141","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Create a function which takes a string representing a file\u0027s name, and returns\n        /// \u0027Yes\u0027 if the the file\u0027s name is valid, and returns \u0027No\u0027 otherwise.\n        /// A file\u0027s name is considered to be valid if and only if all the following conditions \n        /// are met:\n        /// - There should not be more than three digits (\u00270\u0027-\u00279\u0027) in the file\u0027s name.\n        /// - The file\u0027s name contains exactly one dot \u0027.\u0027\n        /// - The substring before the dot should not be empty, and it starts with a letter from \n        /// the latin alphapet (\u0027a\u0027-\u0027z\u0027 and \u0027A\u0027-\u0027Z\u0027).\n        /// - The substring after the dot should be one of these: [\u0027txt\u0027, \u0027exe\u0027, \u0027dll\u0027]\n        /// Examples:\n        /// FileNameCheck(\u0022example.txt\u0022) # =\u003E \u0027Yes\u0027\n        /// FileNameCheck(\u00221example.dll\u0022) # =\u003E \u0027No\u0027 (the name should start with a latin alphapet letter)\n        /// \n        /// \u003C/summary\u003E\n        public static string FileNameCheck (string file_name) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = FileNameCheck(\u0022example.txt\u0022);\n            var expected1 = \u0022Yes\u0022;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = FileNameCheck(\u00221example.dll\u0022);\n            var expected2 = \u0022No\u0022;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = FileNameCheck(\u0022s1sdf3.asd\u0022);\n            var expected3 = \u0022No\u0022;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = FileNameCheck(\u0022K.dll\u0022);\n            var expected4 = \u0022Yes\u0022;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = FileNameCheck(\u0022MY16FILE3.exe\u0022);\n            var expected5 = \u0022Yes\u0022;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = FileNameCheck(\u0022His12FILE94.exe\u0022);\n            var expected6 = \u0022No\u0022;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = FileNameCheck(\u0022_Y.txt\u0022);\n            var expected7 = \u0022No\u0022;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = FileNameCheck(\u0022?aREYA.exe\u0022);\n            var expected8 = \u0022No\u0022;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = FileNameCheck(\u0022/this_is_valid.dll\u0022);\n            var expected9 = \u0022No\u0022;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n            var actual10 = FileNameCheck(\u0022this_is_valid.wow\u0022);\n            var expected10 = \u0022No\u0022;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\u0022Exception --- test case 9 failed to pass\u0022);}\n\n            var actual11 = FileNameCheck(\u0022this_is_valid.txt\u0022);\n            var expected11 = \u0022Yes\u0022;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\u0022Exception --- test case 10 failed to pass\u0022);}\n\n            var actual12 = FileNameCheck(\u0022this_is_valid.txtexe\u0022);\n            var expected12 = \u0022No\u0022;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\u0022Exception --- test case 11 failed to pass\u0022);}\n\n            var actual13 = FileNameCheck(\u0022#this2_i4s_5valid.ten\u0022);\n            var expected13 = \u0022No\u0022;\n            var result13 = compareLogic.Compare(actual13, expected13);\n            if (!result13.AreEqual) {throw new Exception(\u0022Exception --- test case 12 failed to pass\u0022);}\n\n            var actual14 = FileNameCheck(\u0022@this1_is6_valid.exe\u0022);\n            var expected14 = \u0022No\u0022;\n            var result14 = compareLogic.Compare(actual14, expected14);\n            if (!result14.AreEqual) {throw new Exception(\u0022Exception --- test case 13 failed to pass\u0022);}\n\n            var actual15 = FileNameCheck(\u0022this_is_12valid.6exe4.txt\u0022);\n            var expected15 = \u0022No\u0022;\n            var result15 = compareLogic.Compare(actual15, expected15);\n            if (!result15.AreEqual) {throw new Exception(\u0022Exception --- test case 14 failed to pass\u0022);}\n\n            var actual16 = FileNameCheck(\u0022all.exe.txt\u0022);\n            var expected16 = \u0022No\u0022;\n            var result16 = compareLogic.Compare(actual16, expected16);\n            if (!result16.AreEqual) {throw new Exception(\u0022Exception --- test case 15 failed to pass\u0022);}\n\n            var actual17 = FileNameCheck(\u0022I563_No.exe\u0022);\n            var expected17 = \u0022Yes\u0022;\n            var result17 = compareLogic.Compare(actual17, expected17);\n            if (!result17.AreEqual) {throw new Exception(\u0022Exception --- test case 16 failed to pass\u0022);}\n\n            var actual18 = FileNameCheck(\u0022Is3youfault.txt\u0022);\n            var expected18 = \u0022Yes\u0022;\n            var result18 = compareLogic.Compare(actual18, expected18);\n            if (!result18.AreEqual) {throw new Exception(\u0022Exception --- test case 17 failed to pass\u0022);}\n\n            var actual19 = FileNameCheck(\u0022no_one#knows.dll\u0022);\n            var expected19 = \u0022Yes\u0022;\n            var result19 = compareLogic.Compare(actual19, expected19);\n            if (!result19.AreEqual) {throw new Exception(\u0022Exception --- test case 18 failed to pass\u0022);}\n\n            var actual20 = FileNameCheck(\u00221I563_Yes3.exe\u0022);\n            var expected20 = \u0022No\u0022;\n            var result20 = compareLogic.Compare(actual20, expected20);\n            if (!result20.AreEqual) {throw new Exception(\u0022Exception --- test case 19 failed to pass\u0022);}\n\n            var actual21 = FileNameCheck(\u0022I563_Yes3.txtt\u0022);\n            var expected21 = \u0022No\u0022;\n            var result21 = compareLogic.Compare(actual21, expected21);\n            if (!result21.AreEqual) {throw new Exception(\u0022Exception --- test case 20 failed to pass\u0022);}\n\n            var actual22 = FileNameCheck(\u0022final..txt\u0022);\n            var expected22 = \u0022No\u0022;\n            var result22 = compareLogic.Compare(actual22, expected22);\n            if (!result22.AreEqual) {throw new Exception(\u0022Exception --- test case 21 failed to pass\u0022);}\n\n            var actual23 = FileNameCheck(\u0022final132\u0022);\n            var expected23 = \u0022No\u0022;\n            var result23 = compareLogic.Compare(actual23, expected23);\n            if (!result23.AreEqual) {throw new Exception(\u0022Exception --- test case 22 failed to pass\u0022);}\n\n            var actual24 = FileNameCheck(\u0022_f4indsartal132.\u0022);\n            var expected24 = \u0022No\u0022;\n            var result24 = compareLogic.Compare(actual24, expected24);\n            if (!result24.AreEqual) {throw new Exception(\u0022Exception --- test case 23 failed to pass\u0022);}\n\n            var actual25 = FileNameCheck(\u0022.txt\u0022);\n            var expected25 = \u0022No\u0022;\n            var result25 = compareLogic.Compare(actual25, expected25);\n            if (!result25.AreEqual) {throw new Exception(\u0022Exception --- test case 24 failed to pass\u0022);}\n\n            var actual26 = FileNameCheck(\u0022s.\u0022);\n            var expected26 = \u0022No\u0022;\n            var result26 = compareLogic.Compare(actual26, expected26);\n            if (!result26.AreEqual) {throw new Exception(\u0022Exception --- test case 25 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Create a function which takes a string representing a file\u0027s name, and returns\n\u0027Yes\u0027 if the the file\u0027s name is valid, and returns \u0027No\u0027 otherwise.\nA file\u0027s name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits (\u00270\u0027-\u00279\u0027) in the file\u0027s name.\n- The file\u0027s name contains exactly one dot \u0027.\u0027\n- The substring before the dot should not be empty, and it starts with a letter from \nthe latin alphapet (\u0027a\u0027-\u0027z\u0027 and \u0027A\u0027-\u0027Z\u0027).\n- The substring after the dot should be one of these: [\u0027txt\u0027, \u0027exe\u0027, \u0027dll\u0027]\nExamples:\nfile_name_check(\u0022example.txt\u0022) # =\u003E \u0027Yes\u0027\nfile_name_check(\u00221example.dll\u0022) # =\u003E \u0027No\u0027 (the name should start with a latin alphapet letter)\n","entry_point":"FileNameCheck","canonical_solution":null,"short-description":"Check file name validity based on conditions","name":"validate_file_names"}
{"task_id":"142","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// \u003C/summary\u003E\n        public static int SumSquares (List\u003Cint\u003E lst) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SumSquares(new List\u003Cint\u003E {1,2,3});\n            var expected1 = 6;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = SumSquares(new List\u003Cint\u003E {1,4,9});\n            var expected2 = 14;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = SumSquares(new List\u003Cint\u003E {});\n            var expected3 = 0;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = SumSquares(new List\u003Cint\u003E {1,1,1,1,1,1,1,1,1});\n            var expected4 = 9;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = SumSquares(new List\u003Cint\u003E {-1,-1,-1,-1,-1,-1,-1,-1,-1});\n            var expected5 = -3;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = SumSquares(new List\u003Cint\u003E {0});\n            var expected6 = 0;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = SumSquares(new List\u003Cint\u003E {-1,-5,2,-1,-5});\n            var expected7 = -126;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = SumSquares(new List\u003Cint\u003E {-56,-99,1,0,-2});\n            var expected8 = 3030;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = SumSquares(new List\u003Cint\u003E {-1,0,0,0,0,0,0,0,-1});\n            var expected9 = 0;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n            var actual10 = SumSquares(new List\u003Cint\u003E {-16,-9,-2,36,36,26,-20,25,-40,20,-4,12,-26,35,37});\n            var expected10 = -14196;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\u0022Exception --- test case 9 failed to pass\u0022);}\n\n            var actual11 = SumSquares(new List\u003Cint\u003E {-1,-3,17,-1,-15,13,-1,14,-14,-12,-5,14,-14,6,13,11,16,16,4,10});\n            var expected11 = -1448;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\u0022Exception --- test case 10 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"","entry_point":"SumSquares","canonical_solution":null,"short-description":"C# program to sum squares of a list","name":"sum_squares_code"}
{"task_id":"143","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// You are given a string representing a sentence,\n        /// the sentence contains some words separated by a space,\n        /// and you have to return a string that contains the words from the original sentence,\n        /// whose lengths are prime numbers,\n        /// the order of the words in the new string should be the same as the original one.\n        /// \n        /// Example 1:\n        /// Input: sentence = \u0022This is a test\u0022\n        /// Output: \u0022is\u0022\n        /// \n        /// Example 2:\n        /// Input: sentence = \u0022lets go for swimming\u0022\n        /// Output: \u0022go for\u0022\n        /// \n        /// Constraints:\n        /// * 1 \u003C= len(sentence) \u003C= 100\n        /// * sentence contains only letters\n        /// \n        /// \u003C/summary\u003E\n        public static string WordsInSentence (string sentence) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = WordsInSentence(\u0022This is a test\u0022);\n            var expected1 = \u0022is\u0022;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = WordsInSentence(\u0022lets go for swimming\u0022);\n            var expected2 = \u0022go for\u0022;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = WordsInSentence(\u0022there is no place available here\u0022);\n            var expected3 = \u0022there is no place\u0022;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = WordsInSentence(\u0022Hi I am Hussein\u0022);\n            var expected4 = \u0022Hi am Hussein\u0022;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = WordsInSentence(\u0022go for it\u0022);\n            var expected5 = \u0022go for it\u0022;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = WordsInSentence(\u0022here\u0022);\n            var expected6 = \u0022\u0022;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = WordsInSentence(\u0022here is\u0022);\n            var expected7 = \u0022is\u0022;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\n\nExample 1:\nInput: sentence = \u0022This is a test\u0022\nOutput: \u0022is\u0022\n\nExample 2:\nInput: sentence = \u0022lets go for swimming\u0022\nOutput: \u0022go for\u0022\n\nConstraints:\n* 1 \u003C= len(sentence) \u003C= 100\n* sentence contains only letters\n","entry_point":"WordsInSentence","canonical_solution":null,"short-description":"Extract words with prime lengths from a sentence","name":"words_w/_prime_lengths"}
{"task_id":"144","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Your task is to implement a function that will Simplify the expression\n        /// x * n. The function returns True if x * n evaluates to a whole number and False\n        /// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n        /// \u003Cnumerator\u003E/\u003Cdenominator\u003E where both numerator and denominator are positive whole numbers.\n        /// \n        /// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n        /// \n        /// Simplify(\u00221/5\u0022, \u00225/1\u0022) = True\n        /// Simplify(\u00221/6\u0022, \u00222/1\u0022) = False\n        /// Simplify(\u00227/10\u0022, \u002210/2\u0022) = False\n        /// \n        /// \u003C/summary\u003E\n        public static bool Simplify (string x, string n) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Simplify(\u00221/5\u0022,\u00225/1\u0022);\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = Simplify(\u00221/6\u0022,\u00222/1\u0022);\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = Simplify(\u00225/1\u0022,\u00223/1\u0022);\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = Simplify(\u00227/10\u0022,\u002210/2\u0022);\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = Simplify(\u00222/10\u0022,\u002250/10\u0022);\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = Simplify(\u00227/2\u0022,\u00224/2\u0022);\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = Simplify(\u002211/6\u0022,\u00226/1\u0022);\n            var expected7 = true;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = Simplify(\u00222/3\u0022,\u00225/2\u0022);\n            var expected8 = false;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = Simplify(\u00225/2\u0022,\u00223/5\u0022);\n            var expected9 = false;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n            var actual10 = Simplify(\u00222/4\u0022,\u00228/4\u0022);\n            var expected10 = true;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\u0022Exception --- test case 9 failed to pass\u0022);}\n\n            var actual11 = Simplify(\u00222/4\u0022,\u00224/2\u0022);\n            var expected11 = true;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\u0022Exception --- test case 10 failed to pass\u0022);}\n\n            var actual12 = Simplify(\u00221/5\u0022,\u00225/1\u0022);\n            var expected12 = true;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\u0022Exception --- test case 11 failed to pass\u0022);}\n\n            var actual13 = Simplify(\u00221/5\u0022,\u00221/5\u0022);\n            var expected13 = false;\n            var result13 = compareLogic.Compare(actual13, expected13);\n            if (!result13.AreEqual) {throw new Exception(\u0022Exception --- test case 12 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Your task is to implement a function that will simplify the expression\nx * n. The function returns True if x * n evaluates to a whole number and False\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n\u003Cnumerator\u003E/\u003Cdenominator\u003E where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\nsimplify(\u00221/5\u0022, \u00225/1\u0022) = True\nsimplify(\u00221/6\u0022, \u00222/1\u0022) = False\nsimplify(\u00227/10\u0022, \u002210/2\u0022) = False\n","entry_point":"Simplify","canonical_solution":null,"short-description":"Function checks if x * n is a whole number","name":"fraction_eval"}
{"task_id":"145","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Write a function which sorts the given list of integers\n        /// in ascending order according to the sum of their digits.\n        /// Note: if there are several items with similar sum of their digits,\n        /// order them based on their index in original list.\n        /// \n        /// For example:\n        /// \u003E\u003E\u003E OrderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        /// \u003E\u003E\u003E OrderByPoints([]) == []\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cint\u003E OrderByPoints (List\u003Cint\u003E nums) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = OrderByPoints(new List\u003Cint\u003E {1,11,-1,-11,-12});\n            var expected1 = new List\u003Cint\u003E {-1,-11,1,-12,11};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = OrderByPoints(new List\u003Cint\u003E {1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46});\n            var expected2 = new List\u003Cint\u003E {0,2,3,6,53,423,423,423,1234,145,37,46,56,463,3457};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = OrderByPoints(new List\u003Cint\u003E {});\n            var expected3 = new List\u003Cint\u003E {};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = OrderByPoints(new List\u003Cint\u003E {1,-11,-32,43,54,-98,2,-3});\n            var expected4 = new List\u003Cint\u003E {-3,-32,-98,-11,1,2,43,54};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = OrderByPoints(new List\u003Cint\u003E {1,2,3,4,5,6,7,8,9,10,11});\n            var expected5 = new List\u003Cint\u003E {1,10,2,11,3,4,5,6,7,8,9};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = OrderByPoints(new List\u003Cint\u003E {0,6,6,-76,-21,23,4});\n            var expected6 = new List\u003Cint\u003E {-76,-21,0,4,23,6,6};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nWrite a function which sorts the given list of integers\nin ascending order according to the sum of their digits.\nNote: if there are several items with similar sum of their digits,\norder them based on their index in original list.\n\nFor example:\n\u003E\u003E\u003E order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n\u003E\u003E\u003E order_by_points([]) == []\n","entry_point":"OrderByPoints","canonical_solution":null,"short-description":"Sort list by digit sum, keep original order","name":"sort_by_digit_sum"}
{"task_id":"146","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Write a function that takes an array of numbers as input and returns \n        /// the number of elements in the array that are greater than 10 and both \n        /// first and last digits of a number are odd (1, 3, 5, 7, 9).\n        /// For example:\n        /// SpecialFilter([15, -73, 14, -15]) =\u003E 1 \n        /// SpecialFilter([33, -2, -3, 45, 21, 109]) =\u003E 2\n        /// \n        /// \u003C/summary\u003E\n        public static int SpecialFilter (List\u003Cint\u003E nums) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SpecialFilter(new List\u003Cint\u003E {5,-2,1,-5});\n            var expected1 = 0;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = SpecialFilter(new List\u003Cint\u003E {15,-73,14,-15});\n            var expected2 = 1;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = SpecialFilter(new List\u003Cint\u003E {33,-2,-3,45,21,109});\n            var expected3 = 2;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = SpecialFilter(new List\u003Cint\u003E {43,-12,93,125,121,109});\n            var expected4 = 4;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = SpecialFilter(new List\u003Cint\u003E {71,-2,-33,75,21,19});\n            var expected5 = 3;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = SpecialFilter(new List\u003Cint\u003E {1});\n            var expected6 = 0;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = SpecialFilter(new List\u003Cint\u003E {});\n            var expected7 = 0;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Write a function that takes an array of numbers as input and returns \nthe number of elements in the array that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter([15, -73, 14, -15]) =\u003E 1 \nspecialFilter([33, -2, -3, 45, 21, 109]) =\u003E 2\n","entry_point":"SpecialFilter","canonical_solution":null,"short-description":"Function: Count array numbers \u003E10, odd digits","name":"count_odd_nums"}
{"task_id":"147","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// You are given a positive integer n. You have to create an integer array a of length n.\n        /// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i \u002B 1.\n        /// Return the number of triples (a[i], a[j], a[k]) of a where i \u003C j \u003C k, \n        /// and a[i] \u002B a[j] \u002B a[k] is a multiple of 3.\n        /// \n        /// Example :\n        /// Input: n = 5\n        /// Output: 1\n        /// Explanation: \n        /// a = [1, 3, 7, 13, 21]\n        /// The only valid triple is (1, 7, 13).\n        /// \n        /// \u003C/summary\u003E\n        public static int GetMaxTriples (int n) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = GetMaxTriples(5);\n            var expected1 = 1;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = GetMaxTriples(6);\n            var expected2 = 4;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = GetMaxTriples(10);\n            var expected3 = 36;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = GetMaxTriples(100);\n            var expected4 = 53361;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nYou are given a positive integer n. You have to create an integer array a of length n.\nFor each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i \u002B 1.\nReturn the number of triples (a[i], a[j], a[k]) of a where i \u003C j \u003C k, \nand a[i] \u002B a[j] \u002B a[k] is a multiple of 3.\n\nExample :\nInput: n = 5\nOutput: 1\nExplanation: \na = [1, 3, 7, 13, 21]\nThe only valid triple is (1, 7, 13).\n","entry_point":"GetMaxTriples","canonical_solution":null,"short-description":"Count triples where sum is multiple of 3","name":"triples_sum_%_3"}
{"task_id":"148","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// There are eight planets in our solar system: the closerst to the Sun \n        /// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n        /// Uranus, Neptune.\n        /// Write a function that takes two planet names as strings planet1 and planet2. \n        /// The function should return a tuple containing all planets whose orbits are \n        /// located between the orbit of planet1 and the orbit of planet2, sorted by \n        /// the proximity to the sun. \n        /// The function should return an empty tuple if planet1 or planet2\n        /// are not correct planet names. \n        /// Examples\n        /// Bf(\u0022Jupiter\u0022, \u0022Neptune\u0022) ==\u003E (\u0022Saturn\u0022, \u0022Uranus\u0022)\n        /// Bf(\u0022Earth\u0022, \u0022Mercury\u0022) ==\u003E (\u0022Venus\u0022)\n        /// Bf(\u0022Mercury\u0022, \u0022Uranus\u0022) ==\u003E (\u0022Venus\u0022, \u0022Earth\u0022, \u0022Mars\u0022, \u0022Jupiter\u0022, \u0022Saturn\u0022)\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cstring\u003E Bf (string planet1, string planet2) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Bf(\u0022Jupiter\u0022,\u0022Neptune\u0022);\n            var expected1 = new List\u003Cstring\u003E {\u0022Saturn\u0022,\u0022Uranus\u0022};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = Bf(\u0022Earth\u0022,\u0022Mercury\u0022);\n            var expected2 = new List\u003Cstring\u003E {\u0022Venus\u0022};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = Bf(\u0022Mercury\u0022,\u0022Uranus\u0022);\n            var expected3 = new List\u003Cstring\u003E {\u0022Venus\u0022,\u0022Earth\u0022,\u0022Mars\u0022,\u0022Jupiter\u0022,\u0022Saturn\u0022};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = Bf(\u0022Neptune\u0022,\u0022Venus\u0022);\n            var expected4 = new List\u003Cstring\u003E {\u0022Earth\u0022,\u0022Mars\u0022,\u0022Jupiter\u0022,\u0022Saturn\u0022,\u0022Uranus\u0022};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = Bf(\u0022Earth\u0022,\u0022Earth\u0022);\n            var expected5 = new List\u003Cstring\u003E {};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = Bf(\u0022Mars\u0022,\u0022Earth\u0022);\n            var expected6 = new List\u003Cstring\u003E {};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = Bf(\u0022Jupiter\u0022,\u0022Makemake\u0022);\n            var expected7 = new List\u003Cstring\u003E {};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nThere are eight planets in our solar system: the closerst to the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2. \nThe function should return a tuple containing all planets whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2, sorted by \nthe proximity to the sun. \nThe function should return an empty tuple if planet1 or planet2\nare not correct planet names. \nExamples\nbf(\u0022Jupiter\u0022, \u0022Neptune\u0022) ==\u003E (\u0022Saturn\u0022, \u0022Uranus\u0022)\nbf(\u0022Earth\u0022, \u0022Mercury\u0022) ==\u003E (\u0022Venus\u0022)\nbf(\u0022Mercury\u0022, \u0022Uranus\u0022) ==\u003E (\u0022Venus\u0022, \u0022Earth\u0022, \u0022Mars\u0022, \u0022Jupiter\u0022, \u0022Saturn\u0022)\n","entry_point":"Bf","canonical_solution":null,"short-description":"Planets function finds orbits between two","name":"solar_system_fx"}
{"task_id":"149","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Write a function that accepts a list of strings as a parameter,\n        /// deletes the strings that have odd lengths from it,\n        /// and returns the resulted list with a sorted order,\n        /// The list is always a list of strings and never an array of numbers,\n        /// and it may contain duplicates.\n        /// The order of the list should be ascending by length of each word, and you\n        /// should return the list sorted by that rule.\n        /// If two words have the same length, sort the list alphabetically.\n        /// The function should return a list of strings in sorted order.\n        /// You may assume that all words will have the same length.\n        /// For example:\n        /// assert list_sort([\u0022aa\u0022, \u0022a\u0022, \u0022aaa\u0022]) =\u003E [\u0022aa\u0022]\n        /// assert list_sort([\u0022ab\u0022, \u0022a\u0022, \u0022aaa\u0022, \u0022cd\u0022]) =\u003E [\u0022ab\u0022, \u0022cd\u0022]\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cstring\u003E SortedListSum (List\u003Cstring\u003E lst) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SortedListSum(new List\u003Cstring\u003E {\u0022aa\u0022,\u0022a\u0022,\u0022aaa\u0022});\n            var expected1 = new List\u003Cstring\u003E {\u0022aa\u0022};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = SortedListSum(new List\u003Cstring\u003E {\u0022school\u0022,\u0022AI\u0022,\u0022asdf\u0022,\u0022b\u0022});\n            var expected2 = new List\u003Cstring\u003E {\u0022AI\u0022,\u0022asdf\u0022,\u0022school\u0022};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = SortedListSum(new List\u003Cstring\u003E {\u0022d\u0022,\u0022b\u0022,\u0022c\u0022,\u0022a\u0022});\n            var expected3 = new List\u003Cstring\u003E {};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = SortedListSum(new List\u003Cstring\u003E {\u0022d\u0022,\u0022dcba\u0022,\u0022abcd\u0022,\u0022a\u0022});\n            var expected4 = new List\u003Cstring\u003E {\u0022abcd\u0022,\u0022dcba\u0022};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = SortedListSum(new List\u003Cstring\u003E {\u0022AI\u0022,\u0022ai\u0022,\u0022au\u0022});\n            var expected5 = new List\u003Cstring\u003E {\u0022AI\u0022,\u0022ai\u0022,\u0022au\u0022};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = SortedListSum(new List\u003Cstring\u003E {\u0022a\u0022,\u0022b\u0022,\u0022b\u0022,\u0022c\u0022,\u0022c\u0022,\u0022a\u0022});\n            var expected6 = new List\u003Cstring\u003E {};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = SortedListSum(new List\u003Cstring\u003E {\u0022aaaa\u0022,\u0022bbbb\u0022,\u0022dd\u0022,\u0022cc\u0022});\n            var expected7 = new List\u003Cstring\u003E {\u0022cc\u0022,\u0022dd\u0022,\u0022aaaa\u0022,\u0022bbbb\u0022};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Write a function that accepts a list of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted list with a sorted order,\nThe list is always a list of strings and never an array of numbers,\nand it may contain duplicates.\nThe order of the list should be ascending by length of each word, and you\nshould return the list sorted by that rule.\nIf two words have the same length, sort the list alphabetically.\nThe function should return a list of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert list_sort([\u0022aa\u0022, \u0022a\u0022, \u0022aaa\u0022]) =\u003E [\u0022aa\u0022]\nassert list_sort([\u0022ab\u0022, \u0022a\u0022, \u0022aaa\u0022, \u0022cd\u0022]) =\u003E [\u0022ab\u0022, \u0022cd\u0022]\n","entry_point":"SortedListSum","canonical_solution":null,"short-description":"Filter and sort even-length strings","name":"sort_even-length"}
{"task_id":"150","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// A simple program which should return the value of x if n is \n        /// a prime number and should return the value of y otherwise.\n        /// \n        /// Examples:\n        /// for XOrY(7, 34, 12) == 34\n        /// for XOrY(15, 8, 5) == 5\n        /// \n        /// \n        /// \u003C/summary\u003E\n        public static int XOrY (int n, int x, int y) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = XOrY(7,34,12);\n            var expected1 = 34;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = XOrY(15,8,5);\n            var expected2 = 5;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = XOrY(3,33,5212);\n            var expected3 = 33;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = XOrY(1259,3,52);\n            var expected4 = 3;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = XOrY(7919,-1,12);\n            var expected5 = -1;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = XOrY(3609,1245,583);\n            var expected6 = 583;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = XOrY(91,56,129);\n            var expected7 = 129;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = XOrY(6,34,1234);\n            var expected8 = 1234;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = XOrY(1,2,0);\n            var expected9 = 0;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n            var actual10 = XOrY(2,2,0);\n            var expected10 = 2;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\u0022Exception --- test case 9 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"A simple program which should return the value of x if n is \na prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n","entry_point":"XOrY","canonical_solution":null,"short-description":"Return x if n is prime, else return y","name":"return_x_or_y"}
{"task_id":"151","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Given a list of numbers, return the sum of squares of the numbers\n        /// in the list that are odd. Ignore numbers that are negative or not integers.\n        /// \n        /// DoubleTheDifference([1, 3, 2, 0]) == 1 \u002B 9 \u002B 0 \u002B 0 = 10\n        /// DoubleTheDifference([-1, -2, 0]) == 0\n        /// DoubleTheDifference([9, -2]) == 81\n        /// DoubleTheDifference([0]) == 0  \n        /// \n        /// If the input list is empty, return 0.\n        /// \n        /// \u003C/summary\u003E\n        public static int DoubleTheDifference (List\u003Cobject\u003E lst) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = DoubleTheDifference(new List\u003Cobject\u003E {});\n            var expected1 = 0;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = DoubleTheDifference(new List\u003Cobject\u003E {5,4});\n            var expected2 = 25;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = DoubleTheDifference(new List\u003Cobject\u003E {0.1,0.2,0.3});\n            var expected3 = 0;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = DoubleTheDifference(new List\u003Cobject\u003E {-10,-20,-30});\n            var expected4 = 0;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = DoubleTheDifference(new List\u003Cobject\u003E {-1,-2,8});\n            var expected5 = 0;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = DoubleTheDifference(new List\u003Cobject\u003E {0.2,3,5});\n            var expected6 = 34;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = DoubleTheDifference(new List\u003Cobject\u003E {-99,-97,-95,-93,-91,-89,-87,-85,-83,-81,-79,-77,-75,-73,-71,-69,-67,-65,-63,-61,-59,-57,-55,-53,-51,-49,-47,-45,-43,-41,-39,-37,-35,-33,-31,-29,-27,-25,-23,-21,-19,-17,-15,-13,-11,-9,-7,-5,-3,-1,1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99});\n            var expected7 = 166650;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nGiven a list of numbers, return the sum of squares of the numbers\nin the list that are odd. Ignore numbers that are negative or not integers.\n\ndouble_the_difference([1, 3, 2, 0]) == 1 \u002B 9 \u002B 0 \u002B 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference([0]) == 0  \n\nIf the input list is empty, return 0.\n","entry_point":"DoubleTheDifference","canonical_solution":null,"short-description":"Sum squares of odd non-neg integers","name":"sum_odd_squares"}
{"task_id":"152","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// I think we all remember that feeling when the result of some long-awaited\n        /// event is finally known. The feelings and thoughts you have at that moment are\n        /// definitely worth noting down and comparing.\n        /// Your task is to determine if a person correctly guessed the results of a number of matches.\n        /// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n        /// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n        /// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n        /// \n        /// \n        /// example:\n        /// \n        /// Compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -\u003E [0,0,0,0,3,3]\n        /// Compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -\u003E [4,4,1,0,0,6]\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cint\u003E Compare (List\u003Cint\u003E game, List\u003Cint\u003E guess) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Compare(new List\u003Cint\u003E {1,2,3,4,5,1},new List\u003Cint\u003E {1,2,3,4,2,-2});\n            var expected1 = new List\u003Cint\u003E {0,0,0,0,3,3};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = Compare(new List\u003Cint\u003E {0,0,0,0,0,0},new List\u003Cint\u003E {0,0,0,0,0,0});\n            var expected2 = new List\u003Cint\u003E {0,0,0,0,0,0};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = Compare(new List\u003Cint\u003E {1,2,3},new List\u003Cint\u003E {-1,-2,-3});\n            var expected3 = new List\u003Cint\u003E {2,4,6};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = Compare(new List\u003Cint\u003E {1,2,3,5},new List\u003Cint\u003E {-1,2,3,4});\n            var expected4 = new List\u003Cint\u003E {2,0,0,1};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"I think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two arrays of scores and guesses of equal length, where each index shows a match. \nReturn an array of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -\u003E [0,0,0,0,3,3]\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -\u003E [4,4,1,0,0,6]\n","entry_point":"Compare","canonical_solution":null,"short-description":"Check match guesses; output differences","name":"score_difference"}
{"task_id":"153","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// You will be given the name of a class (a string) and a list of extensions.\n        /// The extensions are to be used to load additional classes to the class. The\n        /// strength of the extension is as follows: Let CAP be the number of the uppercase\n        /// letters in the extension\u0027s name, and let SM be the number of lowercase letters \n        /// in the extension\u0027s name, the strength is given by the fraction CAP - SM. \n        /// You should find the strongest extension and return a string in this \n        /// format: ClassName.StrongestExtensionName.\n        /// If there are two or more extensions with the same strength, you should\n        /// choose the one that comes first in the list.\n        /// For example, if you are given \u0022Slices\u0022 as the class and a list of the\n        /// extensions: [\u0027SErviNGSliCes\u0027, \u0027Cheese\u0027, \u0027StuFfed\u0027] then you should\n        /// return \u0027Slices.SErviNGSliCes\u0027 since \u0027SErviNGSliCes\u0027 is the strongest extension \n        /// (its strength is -1).\n        /// Example:\n        /// for StrongestExtension(\u0027my_class\u0027, [\u0027AA\u0027, \u0027Be\u0027, \u0027CC\u0027]) == \u0027my_class.AA\u0027\n        /// \n        /// \u003C/summary\u003E\n        public static string StrongestExtension (string class_name, List\u003Cstring\u003E extensions) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = StrongestExtension(\u0022Watashi\u0022,new List\u003Cstring\u003E {\u0022tEN\u0022,\u0022niNE\u0022,\u0022eIGHt8OKe\u0022});\n            var expected1 = \u0022Watashi.eIGHt8OKe\u0022;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = StrongestExtension(\u0022Boku123\u0022,new List\u003Cstring\u003E {\u0022nani\u0022,\u0022NazeDa\u0022,\u0022YEs.WeCaNe\u0022,\u002232145tggg\u0022});\n            var expected2 = \u0022Boku123.YEs.WeCaNe\u0022;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = StrongestExtension(\u0022__YESIMHERE\u0022,new List\u003Cstring\u003E {\u0022t\u0022,\u0022eMptY\u0022,\u0022nothing\u0022,\u0022zeR00\u0022,\u0022NuLl__\u0022,\u0022123NoooneB321\u0022});\n            var expected3 = \u0022__YESIMHERE.NuLl__\u0022;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = StrongestExtension(\u0022K\u0022,new List\u003Cstring\u003E {\u0022Ta\u0022,\u0022TAR\u0022,\u0022t234An\u0022,\u0022cosSo\u0022});\n            var expected4 = \u0022K.TAR\u0022;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = StrongestExtension(\u0022__HAHA\u0022,new List\u003Cstring\u003E {\u0022Tab\u0022,\u0022123\u0022,\u0022781345\u0022,\u0022-_-\u0022});\n            var expected5 = \u0022__HAHA.123\u0022;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = StrongestExtension(\u0022YameRore\u0022,new List\u003Cstring\u003E {\u0022HhAas\u0022,\u0022okIWILL123\u0022,\u0022WorkOut\u0022,\u0022Fails\u0022,\u0022-_-\u0022});\n            var expected6 = \u0022YameRore.okIWILL123\u0022;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = StrongestExtension(\u0022finNNalLLly\u0022,new List\u003Cstring\u003E {\u0022Die\u0022,\u0022NowW\u0022,\u0022Wow\u0022,\u0022WoW\u0022});\n            var expected7 = \u0022finNNalLLly.WoW\u0022;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = StrongestExtension(\u0022_\u0022,new List\u003Cstring\u003E {\u0022Bb\u0022,\u002291245\u0022});\n            var expected8 = \u0022_.Bb\u0022;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = StrongestExtension(\u0022Sp\u0022,new List\u003Cstring\u003E {\u0022671235\u0022,\u0022Bb\u0022});\n            var expected9 = \u0022Sp.671235\u0022;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"You will be given the name of a class (a string) and a list of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension\u0027s name, and let SM be the number of lowercase letters \nin the extension\u0027s name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the list.\nFor example, if you are given \u0022Slices\u0022 as the class and a list of the\nextensions: [\u0027SErviNGSliCes\u0027, \u0027Cheese\u0027, \u0027StuFfed\u0027] then you should\nreturn \u0027Slices.SErviNGSliCes\u0027 since \u0027SErviNGSliCes\u0027 is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\u0027my_class\u0027, [\u0027AA\u0027, \u0027Be\u0027, \u0027CC\u0027]) == \u0027my_class.AA\u0027\n","entry_point":"StrongestExtension","canonical_solution":null,"short-description":"Find strongest extension for a class","name":"strongest_ext"}
{"task_id":"154","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n        /// CycpatternCheck(\u0022abcd\u0022,\u0022abd\u0022) =\u003E False\n        /// CycpatternCheck(\u0022hello\u0022,\u0022ell\u0022) =\u003E True\n        /// CycpatternCheck(\u0022whassup\u0022,\u0022psus\u0022) =\u003E False\n        /// CycpatternCheck(\u0022abab\u0022,\u0022baa\u0022) =\u003E True\n        /// CycpatternCheck(\u0022efef\u0022,\u0022eeff\u0022) =\u003E False\n        /// CycpatternCheck(\u0022himenss\u0022,\u0022simen\u0022) =\u003E True\n        /// \n        /// \n        /// \u003C/summary\u003E\n        public static bool CycpatternCheck (string a, string b) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = CycpatternCheck(\u0022xyzw\u0022,\u0022xyw\u0022);\n            var expected1 = false;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = CycpatternCheck(\u0022yello\u0022,\u0022ell\u0022);\n            var expected2 = true;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = CycpatternCheck(\u0022whattup\u0022,\u0022ptut\u0022);\n            var expected3 = false;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = CycpatternCheck(\u0022efef\u0022,\u0022fee\u0022);\n            var expected4 = true;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = CycpatternCheck(\u0022abab\u0022,\u0022aabb\u0022);\n            var expected5 = false;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = CycpatternCheck(\u0022winemtt\u0022,\u0022tinem\u0022);\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\ncycpattern_check(\u0022abcd\u0022,\u0022abd\u0022) =\u003E False\ncycpattern_check(\u0022hello\u0022,\u0022ell\u0022) =\u003E True\ncycpattern_check(\u0022whassup\u0022,\u0022psus\u0022) =\u003E False\ncycpattern_check(\u0022abab\u0022,\u0022baa\u0022) =\u003E True\ncycpattern_check(\u0022efef\u0022,\u0022eeff\u0022) =\u003E False\ncycpattern_check(\u0022himenss\u0022,\u0022simen\u0022) =\u003E True\n\n","entry_point":"CycpatternCheck","canonical_solution":null,"short-description":"Check if any rotation of word is in text","name":"rotate_check"}
{"task_id":"155","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Given an integer. return a tuple that has the number of even and odd digits respectively.\n        /// \n        /// Example:\n        /// EvenOddCount(-12) ==\u003E (1, 1)\n        /// EvenOddCount(123) ==\u003E (1, 2)\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cint\u003E EvenOddCount (int num) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = EvenOddCount(7);\n            var expected1 = new List\u003Cint\u003E {0,1};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = EvenOddCount(-78);\n            var expected2 = new List\u003Cint\u003E {1,1};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = EvenOddCount(3452);\n            var expected3 = new List\u003Cint\u003E {2,2};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = EvenOddCount(346211);\n            var expected4 = new List\u003Cint\u003E {3,3};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = EvenOddCount(-345821);\n            var expected5 = new List\u003Cint\u003E {3,3};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = EvenOddCount(-2);\n            var expected6 = new List\u003Cint\u003E {1,0};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = EvenOddCount(-45347);\n            var expected7 = new List\u003Cint\u003E {2,3};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = EvenOddCount(0);\n            var expected8 = new List\u003Cint\u003E {1,0};\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\nExample:\neven_odd_count(-12) ==\u003E (1, 1)\neven_odd_count(123) ==\u003E (1, 2)\n","entry_point":"EvenOddCount","canonical_solution":null,"short-description":"Count even and odd digits in integer","name":"count_even/odd"}
{"task_id":"156","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Given a positive integer, obtain its roman numeral equivalent as a string,\n        /// and return it in lowercase.\n        /// Restrictions: 1 \u003C= num \u003C= 1000\n        /// \n        /// Examples:\n        /// \u003E\u003E\u003E IntToMiniRoman(19) == \u0027xix\u0027\n        /// \u003E\u003E\u003E IntToMiniRoman(152) == \u0027clii\u0027\n        /// \u003E\u003E\u003E IntToMiniRoman(426) == \u0027cdxxvi\u0027\n        /// \n        /// \u003C/summary\u003E\n        public static string IntToMiniRoman (int number) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = IntToMiniRoman(19);\n            var expected1 = \u0022xix\u0022;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = IntToMiniRoman(152);\n            var expected2 = \u0022clii\u0022;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = IntToMiniRoman(251);\n            var expected3 = \u0022ccli\u0022;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = IntToMiniRoman(426);\n            var expected4 = \u0022cdxxvi\u0022;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = IntToMiniRoman(500);\n            var expected5 = \u0022d\u0022;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = IntToMiniRoman(1);\n            var expected6 = \u0022i\u0022;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = IntToMiniRoman(4);\n            var expected7 = \u0022iv\u0022;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = IntToMiniRoman(43);\n            var expected8 = \u0022xliii\u0022;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = IntToMiniRoman(90);\n            var expected9 = \u0022xc\u0022;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n            var actual10 = IntToMiniRoman(94);\n            var expected10 = \u0022xciv\u0022;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\u0022Exception --- test case 9 failed to pass\u0022);}\n\n            var actual11 = IntToMiniRoman(532);\n            var expected11 = \u0022dxxxii\u0022;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\u0022Exception --- test case 10 failed to pass\u0022);}\n\n            var actual12 = IntToMiniRoman(900);\n            var expected12 = \u0022cm\u0022;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\u0022Exception --- test case 11 failed to pass\u0022);}\n\n            var actual13 = IntToMiniRoman(994);\n            var expected13 = \u0022cmxciv\u0022;\n            var result13 = compareLogic.Compare(actual13, expected13);\n            if (!result13.AreEqual) {throw new Exception(\u0022Exception --- test case 12 failed to pass\u0022);}\n\n            var actual14 = IntToMiniRoman(1000);\n            var expected14 = \u0022m\u0022;\n            var result14 = compareLogic.Compare(actual14, expected14);\n            if (!result14.AreEqual) {throw new Exception(\u0022Exception --- test case 13 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 \u003C= num \u003C= 1000\n\nExamples:\n\u003E\u003E\u003E int_to_mini_roman(19) == \u0027xix\u0027\n\u003E\u003E\u003E int_to_mini_roman(152) == \u0027clii\u0027\n\u003E\u003E\u003E int_to_mini_roman(426) == \u0027cdxxvi\u0027\n","entry_point":"IntToMiniRoman","canonical_solution":null,"short-description":"Convert integer to lowercase Roman numeral","name":"convert_to_roman"}
{"task_id":"157","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Given the lengths of the three sides of a triangle. Return True if the three\n        /// sides form a right-angled triangle, False otherwise.\n        /// A right-angled triangle is a triangle in which one angle is right angle or \n        /// 90 degree.\n        /// Example:\n        /// RightAngleTriangle(3, 4, 5) == True\n        /// RightAngleTriangle(1, 2, 3) == False\n        /// \n        /// \u003C/summary\u003E\n        public static bool RightAngleTriangle (int a, int b, int c) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = RightAngleTriangle(3,4,5);\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = RightAngleTriangle(1,2,3);\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = RightAngleTriangle(10,6,8);\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = RightAngleTriangle(2,2,2);\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = RightAngleTriangle(7,24,25);\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = RightAngleTriangle(10,5,7);\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = RightAngleTriangle(5,12,13);\n            var expected7 = true;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = RightAngleTriangle(15,8,17);\n            var expected8 = true;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = RightAngleTriangle(48,55,73);\n            var expected9 = true;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n            var actual10 = RightAngleTriangle(1,1,1);\n            var expected10 = false;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\u0022Exception --- test case 9 failed to pass\u0022);}\n\n            var actual11 = RightAngleTriangle(2,2,10);\n            var expected11 = false;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\u0022Exception --- test case 10 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nGiven the lengths of the three sides of a triangle. Return True if the three\nsides form a right-angled triangle, False otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or \n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == True\nright_angle_triangle(1, 2, 3) == False\n","entry_point":"RightAngleTriangle","canonical_solution":null,"short-description":"Check if sides form a right triangle","name":"check_right_triangle"}
{"task_id":"158","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// Write a function that accepts a list of strings.\n        /// The list contains different words. Return the word with maximum number\n        /// of unique characters. If multiple strings have maximum number of unique\n        /// characters, return the one which comes first in lexicographical order.\n        /// \n        /// FindMax([\u0022name\u0022, \u0022of\u0022, \u0022string\u0022]) == \u0022string\u0022\n        /// FindMax([\u0022name\u0022, \u0022enam\u0022, \u0022game\u0022]) == \u0022enam\u0022\n        /// FindMax([\u0022aaaaaaa\u0022, \u0022bb\u0022 ,\u0022cc\u0022]) == \u0022\u0022aaaaaaa\u0022\n        /// \n        /// \u003C/summary\u003E\n        public static string FindMax (List\u003Cstring\u003E words) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = FindMax(new List\u003Cstring\u003E {\u0022name\u0022,\u0022of\u0022,\u0022string\u0022});\n            var expected1 = \u0022string\u0022;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = FindMax(new List\u003Cstring\u003E {\u0022name\u0022,\u0022enam\u0022,\u0022game\u0022});\n            var expected2 = \u0022enam\u0022;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = FindMax(new List\u003Cstring\u003E {\u0022aaaaaaa\u0022,\u0022bb\u0022,\u0022cc\u0022});\n            var expected3 = \u0022aaaaaaa\u0022;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = FindMax(new List\u003Cstring\u003E {\u0022abc\u0022,\u0022cba\u0022});\n            var expected4 = \u0022abc\u0022;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = FindMax(new List\u003Cstring\u003E {\u0022play\u0022,\u0022this\u0022,\u0022game\u0022,\u0022of\u0022,\u0022footbott\u0022});\n            var expected5 = \u0022footbott\u0022;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = FindMax(new List\u003Cstring\u003E {\u0022we\u0022,\u0022are\u0022,\u0022gonna\u0022,\u0022rock\u0022});\n            var expected6 = \u0022gonna\u0022;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = FindMax(new List\u003Cstring\u003E {\u0022we\u0022,\u0022are\u0022,\u0022a\u0022,\u0022mad\u0022,\u0022nation\u0022});\n            var expected7 = \u0022nation\u0022;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = FindMax(new List\u003Cstring\u003E {\u0022this\u0022,\u0022is\u0022,\u0022a\u0022,\u0022prrk\u0022});\n            var expected8 = \u0022this\u0022;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n            var actual9 = FindMax(new List\u003Cstring\u003E {\u0022b\u0022});\n            var expected9 = \u0022b\u0022;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\u0022Exception --- test case 8 failed to pass\u0022);}\n\n            var actual10 = FindMax(new List\u003Cstring\u003E {\u0022play\u0022,\u0022play\u0022,\u0022play\u0022});\n            var expected10 = \u0022play\u0022;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\u0022Exception --- test case 9 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"Write a function that accepts a list of strings.\nThe list contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n\nfind_max([\u0022name\u0022, \u0022of\u0022, \u0022string\u0022]) == \u0022string\u0022\nfind_max([\u0022name\u0022, \u0022enam\u0022, \u0022game\u0022]) == \u0022enam\u0022\nfind_max([\u0022aaaaaaa\u0022, \u0022bb\u0022 ,\u0022cc\u0022]) == \u0022\u0022aaaaaaa\u0022\n","entry_point":"FindMax","canonical_solution":null,"short-description":"Find word with most unique chars","name":"max_unique_word"}
{"task_id":"159","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// You\u0027re a hungry rabbit, and you already have Eaten a certain number of carrots,\n        /// but now you need to Eat more carrots to complete the day\u0027s meals.\n        /// you should return an array of [ total number of Eaten carrots after your meals,\n        /// the number of carrots left after your meals ]\n        /// if there are not enough remaining carrots, you will Eat all remaining carrots, but will still be hungry.\n        /// \n        /// Example:\n        /// * Eat(5, 6, 10) -\u003E [11, 4]\n        /// * Eat(4, 8, 9) -\u003E [12, 1]\n        /// * Eat(1, 10, 10) -\u003E [11, 0]\n        /// * Eat(2, 11, 5) -\u003E [7, 0]\n        /// \n        /// Variables:\n        /// @number : integer\n        /// the number of carrots that you have Eaten.\n        /// @need : integer\n        /// the number of carrots that you need to Eat.\n        /// @remaining : integer\n        /// the number of remaining carrots thet exist in stock\n        /// \n        /// Constrain:\n        /// * 0 \u003C= number \u003C= 1000\n        /// * 0 \u003C= need \u003C= 1000\n        /// * 0 \u003C= remaining \u003C= 1000\n        /// \n        /// Have fun :)\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cint\u003E Eat (int number, int need, int remaining) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Eat(5,6,10);\n            var expected1 = new List\u003Cint\u003E {11,4};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = Eat(4,8,9);\n            var expected2 = new List\u003Cint\u003E {12,1};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = Eat(1,10,10);\n            var expected3 = new List\u003Cint\u003E {11,0};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = Eat(2,11,5);\n            var expected4 = new List\u003Cint\u003E {7,0};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = Eat(4,5,7);\n            var expected5 = new List\u003Cint\u003E {9,2};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = Eat(4,5,1);\n            var expected6 = new List\u003Cint\u003E {5,0};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nYou\u0027re a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day\u0027s meals.\nyou should return an array of [ total number of eaten carrots after your meals,\nthe number of carrots left after your meals ]\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\nExample:\n* eat(5, 6, 10) -\u003E [11, 4]\n* eat(4, 8, 9) -\u003E [12, 1]\n* eat(1, 10, 10) -\u003E [11, 0]\n* eat(2, 11, 5) -\u003E [7, 0]\n\nVariables:\n@number : integer\nthe number of carrots that you have eaten.\n@need : integer\nthe number of carrots that you need to eat.\n@remaining : integer\nthe number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 \u003C= number \u003C= 1000\n* 0 \u003C= need \u003C= 1000\n* 0 \u003C= remaining \u003C= 1000\n\nHave fun :)\n","entry_point":"Eat","canonical_solution":null,"short-description":"Calculate carrots eaten and remaining","name":"carrot_totals"}
{"task_id":"160","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Given two lists operator, and operand. The first list has basic algebra operations, and \n        /// the second list is a list of integers. Use the two given lists to build the algebric \n        /// expression and return the evaluation of this expression.\n        /// \n        /// The basic algebra operations:\n        /// Addition ( \u002B ) \n        /// Subtraction ( - ) \n        /// Multiplication ( * ) \n        /// Floor division ( // ) \n        /// Exponentiation ( ** ) \n        /// \n        /// Example:\n        /// operator[\u0027\u002B\u0027, \u0027*\u0027, \u0027-\u0027]\n        /// array = [2, 3, 4, 5]\n        /// result = 2 \u002B 3 * 4 - 5\n        /// =\u003E result = 9\n        /// \n        /// Note:\n        /// The length of operator list is equal to the length of operand list minus one.\n        /// Operand is a list of of non-negative integers.\n        /// Operator list has at least one operator, and operand list has at least two operands.\n        /// \n        /// \n        /// \u003C/summary\u003E\n        public static int DoAlgebra (List\u003Cstring\u003E operator, List\u003Cint\u003E operand) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = DoAlgebra(new List\u003Cstring\u003E {\u0022**\u0022,\u0022*\u0022,\u0022\u002B\u0022},new List\u003Cint\u003E {2,3,4,5});\n            var expected1 = 37;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = DoAlgebra(new List\u003Cstring\u003E {\u0022\u002B\u0022,\u0022*\u0022,\u0022-\u0022},new List\u003Cint\u003E {2,3,4,5});\n            var expected2 = 9;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = DoAlgebra(new List\u003Cstring\u003E {\u0022//\u0022,\u0022*\u0022},new List\u003Cint\u003E {7,3,4});\n            var expected3 = 8;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nGiven two lists operator, and operand. The first list has basic algebra operations, and \nthe second list is a list of integers. Use the two given lists to build the algebric \nexpression and return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( \u002B ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \n\nExample:\noperator[\u0027\u002B\u0027, \u0027*\u0027, \u0027-\u0027]\narray = [2, 3, 4, 5]\nresult = 2 \u002B 3 * 4 - 5\n=\u003E result = 9\n\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n\n","entry_point":"DoAlgebra","canonical_solution":null,"short-description":"Evaluate expression from operator and operand lists","name":"evaluate_expression"}
{"task_id":"161","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// You are given a string s.\n        /// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n        /// otherwise keep it as it is.\n        /// If the string contains no letters, reverse the string.\n        /// The function should return the resulted string.\n        /// Examples\n        /// Solve(\u00221234\u0022) = \u00224321\u0022\n        /// Solve(\u0022ab\u0022) = \u0022AB\u0022\n        /// Solve(\u0022#a@C\u0022) = \u0022#A@c\u0022\n        /// \n        /// \u003C/summary\u003E\n        public static string Solve (string s) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Solve(\u0022AsDf\u0022);\n            var expected1 = \u0022aSdF\u0022;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = Solve(\u00221234\u0022);\n            var expected2 = \u00224321\u0022;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = Solve(\u0022ab\u0022);\n            var expected3 = \u0022AB\u0022;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = Solve(\u0022#a@C\u0022);\n            var expected4 = \u0022#A@c\u0022;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n            var actual5 = Solve(\u0022#AsdfW^45\u0022);\n            var expected5 = \u0022#aSDFw^45\u0022;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\u0022Exception --- test case 4 failed to pass\u0022);}\n\n            var actual6 = Solve(\u0022#6@2\u0022);\n            var expected6 = \u00222@6#\u0022;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\u0022Exception --- test case 5 failed to pass\u0022);}\n\n            var actual7 = Solve(\u0022#$a^D\u0022);\n            var expected7 = \u0022#$A^d\u0022;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\u0022Exception --- test case 6 failed to pass\u0022);}\n\n            var actual8 = Solve(\u0022#ccc\u0022);\n            var expected8 = \u0022#CCC\u0022;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\u0022Exception --- test case 7 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"You are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa, \notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\u00221234\u0022) = \u00224321\u0022\nsolve(\u0022ab\u0022) = \u0022AB\u0022\nsolve(\u0022#a@C\u0022) = \u0022#A@c\u0022\n","entry_point":"Solve","canonical_solution":null,"short-description":"Reverse case or reverse string","name":"change_letter_case"}
{"task_id":"162","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Given a string \u0027text\u0027, return its md5 hash equivalent string.\n        /// If \u0027text\u0027 is an empty string, return None.\n        /// \n        /// \u003E\u003E\u003E StringToMd5(\u0027Hello world\u0027) == \u00273e25960a79dbc69b674cd4ec67a72c62\u0027\n        /// \n        /// \u003C/summary\u003E\n        public static object StringToMd5 (string text) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = StringToMd5(\u0022Hello world\u0022);\n            var expected1 = \u00223e25960a79dbc69b674cd4ec67a72c62\u0022;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = StringToMd5(\u0022\u0022);\n            var expected2 = null;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = StringToMd5(\u0022A B C\u0022);\n            var expected3 = \u00220ef78513b0cb8cef12743f5aeb35f888\u0022;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = StringToMd5(\u0022password\u0022);\n            var expected4 = \u00225f4dcc3b5aa765d61d8327deb882cf99\u0022;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nGiven a string \u0027text\u0027, return its md5 hash equivalent string.\nIf \u0027text\u0027 is an empty string, return None.\n\n\u003E\u003E\u003E string_to_md5(\u0027Hello world\u0027) == \u00273e25960a79dbc69b674cd4ec67a72c62\u0027\n","entry_point":"StringToMd5","canonical_solution":null,"short-description":"Convert string to MD5 hash, return None if empty","name":"string_to_md5"}
{"task_id":"163","prompt":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// \u003Csummary\u003E \n        /// You\u0027re an expert C# programmer\n        /// \n        /// Given two positive integers a and b, return the even digits between a\n        /// and b, in ascending order.\n        /// \n        /// For example:\n        /// GenerateIntegers(2, 8) =\u003E [2, 4, 6, 8]\n        /// GenerateIntegers(8, 2) =\u003E [2, 4, 6, 8]\n        /// GenerateIntegers(10, 14) =\u003E []\n        /// \n        /// \u003C/summary\u003E\n        public static List\u003Cint\u003E GenerateIntegers (int a, int b) \n        {","test":"\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = GenerateIntegers(2,10);\n            var expected1 = new List\u003Cint\u003E {2,4,6,8};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\u0022Exception --- test case 0 failed to pass\u0022);}\n\n            var actual2 = GenerateIntegers(10,2);\n            var expected2 = new List\u003Cint\u003E {2,4,6,8};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\u0022Exception --- test case 1 failed to pass\u0022);}\n\n            var actual3 = GenerateIntegers(132,2);\n            var expected3 = new List\u003Cint\u003E {2,4,6,8};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\u0022Exception --- test case 2 failed to pass\u0022);}\n\n            var actual4 = GenerateIntegers(17,89);\n            var expected4 = new List\u003Cint\u003E {};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\u0022Exception --- test case 3 failed to pass\u0022);}\n\n        }\n    }\n}\n","language":"csharp","description":"\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order.\n\nFor example:\ngenerate_integers(2, 8) =\u003E [2, 4, 6, 8]\ngenerate_integers(8, 2) =\u003E [2, 4, 6, 8]\ngenerate_integers(10, 14) =\u003E []\n","entry_point":"GenerateIntegers","canonical_solution":null,"short-description":"Return even digits in given range","name":"even_digits"}
