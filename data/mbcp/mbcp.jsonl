{"name":"min-cost-path","description":"Find minimum cost path in a cost matrix","text":"Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].","code":"R = 3;\nC = 3;\n\npublic int MinCost(int[][] cost, int m, int n) \n{\n    int[][] tc = new int[R][];\n    for (int x = 0; x \u003C R; x\u002B\u002B)\n    {\n        tc[x] = new int[C];\n    }\n    \n    tc[0][0] = cost[0][0];\n    \n    for (int i = 1; i \u003C= m; i\u002B\u002B) \n    {\n        tc[i][0] = tc[i - 1][0] \u002B cost[i][0];\n    }\n    \n    for (int j = 1; j \u003C= n; j\u002B\u002B) \n    {\n        tc[0][j] = tc[0][j - 1] \u002B cost[0][j];\n    }\n    \n    for (int i = 1; i \u003C= m; i\u002B\u002B) \n    {\n        for (int j = 1; j \u003C= n; j\u002B\u002B) \n        {\n            tc[i][j] = Math.Min(Math.Min(tc[i - 1][j - 1], tc[i - 1][j]), tc[i][j - 1]) \u002B cost[i][j];\n        }\n    }\n    \n    return tc[m][n];\n}","task_id":1,"test_setup_code":"","test_list":["Debug.Assert(MinCost(new int[][] { new int[] { 1, 2, 3 }, new int[] { 4, 8, 2 }, new int[] { 1, 5, 3 } }, 2, 2) == 8);","Debug.Assert(MinCost(new int[][] { new int[] { 2, 3, 4 }, new int[] { 5, 9, 3 }, new int[] { 2, 6, 4 } }, 2, 2) == 12);","Debug.Assert(MinCost(new int[][] { new int[] { 3, 4, 5 }, new int[] { 6, 10, 4 }, new int[] { 3, 7, 5 } }, 2, 2) == 16);"],"challenge_test_list":[]}
{"name":"similar-elems","description":"Find similar elements in two tuple lists","text":"Write a function to find the similar elements from the given two tuple lists.","code":"public static Tuple\u003CT\u003E SimilarElements\u003CT\u003E(Tuple\u003CT\u003E testTup1, Tuple\u003CT\u003E testTup2) {\n    var res = testTup1.Item1.Where(x =\u003E testTup2.Item1.Contains(x)).Distinct().ToArray();\n    return Tuple.Create(res);\n}","task_id":2,"test_setup_code":"","test_list":["Debug.Assert(SimilarElements(new int[] { 3, 4, 5, 6 }, new int[] { 5, 7, 4, 10 }).SequenceEqual(new int[] { 4, 5 }));","Debug.Assert(SimilarElements(new int[] { 1, 2, 3, 4 }, new int[] { 5, 4, 3, 7 }).SequenceEqual(new int[] { 3, 4 }));","Debug.Assert(SimilarElements(new Tuple\u003Cint, int, int, int\u003E(11, 12, 14, 13), new Tuple\u003Cint, int, int, int\u003E(17, 15, 14, 13)).SequenceEqual(new List\u003Cint\u003E { 13, 14 }));"],"challenge_test_list":[]}
{"name":"non-prime-finder","description":"Identify non-prime numbers using Python function","text":"Write a C# function to identify non-prime numbers.","code":"public bool IsNotPrime(int n) \n{\n    bool result = false;\n    for (int i = 2; i \u003C= (int)Math.Sqrt(n); i\u002B\u002B)\n    {\n        if (n % i == 0)\n        {\n            result = true;\n        }\n    }\n    return result;\n}","task_id":3,"test_setup_code":"","test_list":["Debug.Assert(IsNotPrime(2) == false);","Debug.Assert(IsNotPrime(10) == true);","Debug.Assert(IsNotPrime(35) == true);"],"challenge_test_list":[]}
{"name":"largest-ints-heap","description":"Find largest integers using a heap queue algorithm","text":"Write a function to find the largest integers from a given list of numbers using heap queue algorithm.","code":"public List\u003Cint\u003E HeapQueueLargest(List\u003Cint\u003E nums, int n) \n{\n    return nums.OrderByDescending(x =\u003E x).Take(n).ToList();\n}","task_id":4,"test_setup_code":"","test_list":["Debug.Assert(HeapQueueLargest(new List\u003Cint\u003E { 25, 35, 22, 85, 14, 65, 75, 22, 58 }, 3).SequenceEqual(new List\u003Cint\u003E { 85, 75, 65 }));","Debug.Assert(HeapQueueLargest(new List\u003Cint\u003E { 25, 35, 22, 85, 14, 65, 75, 22, 58 }, 2).SequenceEqual(new List\u003Cint\u003E { 85, 75 }));","Debug.Assert(HeapQueueLargest(new int[] { 25, 35, 22, 85, 14, 65, 75, 22, 58 }, 5).SequenceEqual(new int[] { 85, 75, 65, 58, 35 }));"],"challenge_test_list":[]}
{"name":"domino-ways-3xn","description":"Count domino arrangements for a 3 x n board","text":"Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.","code":"public int CountWays(int n) \n{ \n    int[] A = new int[n \u002B 1]; \n    int[] B = new int[n \u002B 1]; \n    A[0] = 1; \n    A[1] = 0; \n    B[0] = 0; \n    B[1] = 1; \n    for (int i = 2; i \u003C= n; i\u002B\u002B) \n    { \n        A[i] = A[i - 2] \u002B 2 * B[i - 1]; \n        B[i] = A[i - 1] \u002B B[i - 2]; \n    } \n    return A[n]; \n}","task_id":5,"test_setup_code":"","test_list":["Debug.Assert(CountWays(2) == 3);","Debug.Assert(CountWays(8) == 153);","Debug.Assert(CountWays(12) == 2131);"],"challenge_test_list":[]}
{"name":"bit-position-check","description":"Check if two numbers differ at only one bit","text":"Write a C# function to check whether the two numbers differ at one bit position only or not.","code":"bool IsPowerOfTwo(int x) \n{ \n    return x != 0 \u0026\u0026 (x \u0026 (x - 1)) == 0; \n}\n\nbool DifferAtOneBitPos(int a, int b) \n{ \n    return IsPowerOfTwo(a ^ b); \n}","task_id":6,"test_setup_code":"","test_list":["Debug.Assert(DifferAtOneBitPos(13, 9) == true);","Debug.Assert(DifferAtOneBitPos(15, 8) == false);","Debug.Assert(DifferAtOneBitPos(2, 4) == false);"],"challenge_test_list":[]}
{"name":"find-long-words","description":"Find words of 4\u002B characters using regex","text":"Write a function to find all words which are at least 4 characters long in a string by using regex.","code":"public List\u003Cstring\u003E FindCharLong(string text) \n{\n    return Regex.Matches(text, @\u0022\\b\\w{4,}\\b\u0022)\n                .Cast\u003CMatch\u003E()\n                .Select(match =\u003E match.Value)\n                .ToList();\n}","task_id":7,"test_setup_code":"","test_list":["Debug.Assert(FindCharLong(\u0022Please move back to stream\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022Please\u0022, \u0022move\u0022, \u0022back\u0022, \u0022stream\u0022 }));","Debug.Assert(FindCharLong(\u0022Jing Eco and Tech\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022Jing\u0022, \u0022Tech\u0022 }));","Debug.Assert(FindCharLong(\u0022Jhingai wulu road Zone 3\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022Jhingai\u0022, \u0022wulu\u0022, \u0022road\u0022, \u0022Zone\u0022 }));"],"challenge_test_list":[]}
{"name":"squares-from-list","description":"Square elements in a list with a lambda function","text":"Write a function to find squares of individual elements in a list using lambda function.","code":"public List\u003Cint\u003E SquareNums(List\u003Cint\u003E nums) \n{\n    var squareNums = nums.Select(x =\u003E x * x).ToList();\n    return squareNums;\n}","task_id":8,"test_setup_code":"","test_list":["Debug.Assert(SquareNums(new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }).SequenceEqual(new int[] { 1, 4, 9, 16, 25, 36, 49, 64, 81, 100 }));","Debug.Assert(SquareNums(new int[] { 10, 20, 30 }).SequenceEqual(new int[] { 100, 400, 900 }));","Debug.Assert(SquareNums(new int[] { 12, 15 }).SequenceEqual(new int[] { 144, 225 }));"],"challenge_test_list":[]}
{"name":"min-rotations-same","description":"Find minimum rotations for string match","text":"Write a C# function to find the minimum number of rotations required to get the same string.","code":"public int FindRotations(string str) \n{ \n    string tmp = str \u002B str; \n    int n = str.Length; \n    for (int i = 1; i \u003C= n; i\u002B\u002B) \n    { \n        string substring = tmp.Substring(i, n); \n        if (str == substring) \n        { \n            return i; \n        } \n    } \n    return n; \n}","task_id":9,"test_setup_code":"","test_list":["Debug.Assert(FindRotations(\u0022aaaa\u0022) == 1);","Debug.Assert(FindRotations(\u0022ab\u0022) == 2);","Debug.Assert(FindRotations(\u0022abc\u0022) == 3);"],"challenge_test_list":[]}
{"name":"get-n-smallest","description":"Get the n smallest items from a dataset","text":"Write a function to get the n smallest items from a dataset.","code":"public List\u003Cint\u003E SmallNNum(List\u003Cint\u003E list1, int n) {\n    var smallest = list1.OrderBy(x =\u003E x).Take(n).ToList();\n    return smallest;\n}","task_id":10,"test_setup_code":"","test_list":["Debug.Assert(SmallNNum(new int[] { 10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100 }, 2).SequenceEqual(new int[] { 10, 20 }));","Debug.Assert(SmallNNum(new int[] { 10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100 }, 5).SequenceEqual(new int[] { 10, 20, 20, 40, 50 }));","Debug.Assert(SmallNNum(new int[] { 10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100 }, 3).SequenceEqual(new int[] { 10, 20, 20 }));"],"challenge_test_list":[]}
{"name":"remove-first-last","description":"Remove first and last occurrence of a character","text":"Write a C# function to remove first and last occurrence of a given character from the string.","code":"string RemoveOcc(string s, char ch) \n{\n    for (int i = 0; i \u003C s.Length; i\u002B\u002B) \n    {\n        if (s[i] == ch) \n        {\n            s = s.Remove(i, 1);\n            break;\n        }\n    }\n    for (int i = s.Length - 1; i \u003E= 0; i--) \n    {\n        if (s[i] == ch) \n        {\n            s = s.Remove(i, 1);\n            break;\n        }\n    }\n    return s;\n}","task_id":11,"test_setup_code":"","test_list":["Debug.Assert(RemoveOcc(\u0022hello\u0022, \u0022l\u0022) == \u0022heo\u0022);","Debug.Assert(RemoveOcc(\u0022abcda\u0022, \u0022a\u0022) == \u0022bcd\u0022);","Debug.Assert(RemoveOcc(\u0022PHP\u0022, \u0022P\u0022) == \u0022H\u0022);"],"challenge_test_list":["Assert(remove_Occ(\u0022hellolloll\u0022, \u0022l\u0022) == \u0022helollol\u0022);\n\npublic string Remove_Occ(string str, string occ)\n{\n    return str.Replace(occ, \u0022\u0022);\n}","Assert.RemoveOcc(\u0022\u0022, \u0022l\u0022) == \u0022\u0022;"]}
{"name":"sort-matrix-by-sum","description":"Sort a matrix by the sum of its rows in ascending order","text":"Write a function to sort a given matrix in ascending order according to the sum of its rows.","code":"public List\u003CList\u003Cint\u003E\u003E SortMatrix(List\u003CList\u003Cint\u003E\u003E M)\n{\n    var result = M.OrderBy(row =\u003E row.Sum()).ToList();\n    return result;\n}","task_id":12,"test_setup_code":"","test_list":["Debug.Assert(SortMatrix(new int[][] { new int[] { 1, 2, 3 }, new int[] { 2, 4, 5 }, new int[] { 1, 1, 1 } }) == new int[][] { new int[] { 1, 1, 1 }, new int[] { 1, 2, 3 }, new int[] { 2, 4, 5 } });","Debug.Assert(SortMatrix(new int[][] { new int[] { 1, 2, 3 }, new int[] { -2, 4, -5 }, new int[] { 1, -1, 1 } }).SequenceEqual(new int[][] { new int[] { -2, 4, -5 }, new int[] { 1, -1, 1 }, new int[] { 1, 2, 3 } }));","Debug.Assert(SortMatrix(new int[,] {{5,8,9},{6,4,3},{2,1,4}}).SequenceEqual(new int[,] {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}}));"],"challenge_test_list":[]}
{"name":"count-common-words","description":"Count the most frequent words in a dictionary","text":"Write a function to count the most common words in a dictionary.","code":"using System.Collections.Generic;\nusing System.Linq;\n\npublic class WordCounter\n{\n    public List\u003CKeyValuePair\u003Cstring, int\u003E\u003E CountCommon(List\u003Cstring\u003E words)\n    {\n        var wordCounts = words.GroupBy(word =\u003E word)\n                              .ToDictionary(g =\u003E g.Key, g =\u003E g.Count());\n        return wordCounts.OrderByDescending(pair =\u003E pair.Value)\n                         .Take(4)\n                         .ToList();\n    }\n}","task_id":13,"test_setup_code":"","test_list":["Debug.Assert(CountCommon(new List\u003Cstring\u003E { \u0022red\u0022, \u0022green\u0022, \u0022black\u0022, \u0022pink\u0022, \u0022black\u0022, \u0022white\u0022, \u0022black\u0022, \u0022eyes\u0022, \u0022white\u0022, \u0022black\u0022, \u0022orange\u0022, \u0022pink\u0022, \u0022pink\u0022, \u0022red\u0022, \u0022red\u0022, \u0022white\u0022, \u0022orange\u0022, \u0022white\u0022, \u0022black\u0022, \u0022pink\u0022, \u0022green\u0022, \u0022green\u0022, \u0022pink\u0022, \u0022green\u0022, \u0022pink\u0022, \u0022white\u0022, \u0022orange\u0022, \u0022orange\u0022, \u0022red\u0022 }).SequenceEqual(new List\u003CTuple\u003Cstring, int\u003E\u003E { Tuple.Create(\u0022pink\u0022, 6), Tuple.Create(\u0022black\u0022, 5), Tuple.Create(\u0022white\u0022, 5), Tuple.Create(\u0022red\u0022, 4) }));","var result = CountCommon(new List\u003Cstring\u003E { \u0022one\u0022, \u0022two\u0022, \u0022three\u0022, \u0022four\u0022, \u0022five\u0022, \u0022one\u0022, \u0022two\u0022, \u0022one\u0022, \u0022three\u0022, \u0022one\u0022 });\nDebug.Assert(result.SequenceEqual(new List\u003CTuple\u003Cstring, int\u003E\u003E { Tuple.Create(\u0022one\u0022, 4), Tuple.Create(\u0022two\u0022, 2), Tuple.Create(\u0022three\u0022, 2), Tuple.Create(\u0022four\u0022, 1) }));","Debug.Assert(CountCommon(new List\u003Cstring\u003E { \u0022Facebook\u0022, \u0022Apple\u0022, \u0022Amazon\u0022, \u0022Netflix\u0022, \u0022Google\u0022, \u0022Apple\u0022, \u0022Netflix\u0022, \u0022Amazon\u0022 }).SequenceEqual(new List\u003CTuple\u003Cstring, int\u003E\u003E { Tuple.Create(\u0022Apple\u0022, 2), Tuple.Create(\u0022Amazon\u0022, 2), Tuple.Create(\u0022Netflix\u0022, 2), Tuple.Create(\u0022Facebook\u0022, 1) }));"],"challenge_test_list":[]}
{"name":"triangular-prism","description":"Calculate triangular prism volume in Python","text":"Write a C# function to find the volume of a triangular prism.","code":"public double FindVolume(double l, double b, double h) \n{ \n    return (l * b * h) / 2; \n}","task_id":14,"test_setup_code":"","test_list":["Debug.Assert(FindVolume(10, 8, 6) == 240);","Debug.Assert(FindVolume(3, 2, 2) == 6);","Debug.Assert(FindVolume(1, 2, 1) == 1);"],"challenge_test_list":[]}
{"name":"split-at-lowercase","description":"Split a string at every lowercase letter","text":"Write a function to split a string at lowercase letters.","code":"public List\u003Cstring\u003E SplitLowerString(string text) {\n    return Regex.Matches(text, \u0022[a-z][^a-z]*\u0022)\n                .Cast\u003CMatch\u003E()\n                .Select(m =\u003E m.Value)\n                .ToList();\n}","task_id":15,"test_setup_code":"","test_list":["Debug.Assert(SplitLowerString(\u0022AbCd\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022bC\u0022, \u0022d\u0022 }));","Debug.Assert(SplitLowerString(\u0022Python\u0022).SequenceEqual(new[] { \u0027y\u0027, \u0027t\u0027, \u0027h\u0027, \u0027o\u0027, \u0027n\u0027 }));","Debug.Assert(SplitLowerString(\u0022Programming\u0022).SequenceEqual(new char[] { \u0027r\u0027, \u0027o\u0027, \u0027g\u0027, \u0027r\u0027, \u0027a\u0027, \u0027m\u0027, \u0027m\u0027, \u0027i\u0027, \u0027n\u0027, \u0027g\u0027 }));"],"challenge_test_list":[]}
{"name":"find-seq-letters","description":"Find sequences of lowercase letters with underscores","text":"Write a function to find sequences of lowercase letters joined with an underscore.","code":"public string TextLowercaseUnderscore(string text)  \n{  \n    string patterns = \u0022^[a-z]\u002B_[a-z]\u002B$\u0022;  \n    if (Regex.IsMatch(text, patterns))  \n    {  \n        return \u0022Found a match!\u0022;  \n    }  \n    else  \n    {  \n        return \u0022Not matched!\u0022;  \n    }  \n}","task_id":16,"test_setup_code":"","test_list":["Debug.Assert(TextLowercaseUnderscore(\u0022aab_cbbbc\u0022) == \u0022Found a match!\u0022);","Debug.Assert(TextLowercaseUnderscore(\u0022aab_Abbbc\u0022) == \u0022Not matched!\u0022);","Debug.Assert(TextLowercaseUnderscore(\u0022Aaab_abbbc\u0022) == \u0022Not matched!\u0022);"],"challenge_test_list":["Assert.IsTrue(TextLowercaseUnderscore(\u0022aab-cbbbc\u0022) == \u0022Not matched!\u0022);"]}
{"name":"perimeter-of-square","description":"Calculate the perimeter of a square given its side","text":"Write a function to find the perimeter of a square.","code":"public int SquarePerimeter(int a)\n{\n    int perimeter = 4 * a;\n    return perimeter;\n}","task_id":17,"test_setup_code":"","test_list":["Debug.Assert(SquarePerimeter(10) == 40);","Debug.Assert(SquarePerimeter(5) == 20);","Debug.Assert(SquarePerimeter(4) == 16);"],"challenge_test_list":[]}
{"name":"remove-common-chars","description":"Remove chars in first string found in second string","text":"Write a function to remove characters from the first string which are present in the second string.","code":"const int NO_OF_CHARS = 256;\n\npublic List\u003Cchar\u003E StrToList(string str)\n{\n    List\u003Cchar\u003E temp = new List\u003Cchar\u003E();\n    foreach (char x in str)\n    {\n        temp.Add(x);\n    }\n    return temp;\n}\n\npublic string LstToString(List\u003Cchar\u003E list)\n{\n    return new string(list.ToArray());\n}\n\npublic int[] GetCharCountArray(string str)\n{\n    int[] count = new int[NO_OF_CHARS];\n    foreach (char i in str)\n    {\n        count[i]\u002B\u002B;\n    }\n    return count;\n}\n\npublic string RemoveDirtyChars(string str, string secondStr)\n{\n    int[] count = GetCharCountArray(secondStr);\n    int ipInd = 0;\n    int resInd = 0;\n    char temp;\n    List\u003Cchar\u003E strList = StrToList(str);\n    while (ipInd != strList.Count)\n    {\n        temp = strList[ipInd];\n        if (count[temp] == 0)\n        {\n            strList[resInd] = strList[ipInd];\n            resInd\u002B\u002B;\n        }\n        ipInd\u002B\u002B;\n    }\n    return LstToString(strList.GetRange(0, resInd));\n}","task_id":18,"test_setup_code":"","test_list":["Debug.Assert(RemoveDirtyChars(\u0022probasscurve\u0022, \u0022pros\u0022) == \u0022bacuve\u0022);","Debug.Assert(RemoveDirtyChars(\u0022digitalindia\u0022, \u0022talent\u0022) == \u0022digiidi\u0022);","Debug.Assert(RemoveDirtyChars(\u0022exoticmiles\u0022, \u0022toxic\u0022) == \u0022emles\u0022);"],"challenge_test_list":[]}
{"name":"check-duplicates","description":"Check for duplicates in an integer array","text":"Write a function to find whether a given array of integers contains any duplicate element.","code":"public bool TestDuplicate(int[] arraynums) {\n    HashSet\u003Cint\u003E numsSet = new HashSet\u003Cint\u003E(arraynums);\n    return arraynums.Length != numsSet.Count;\n}","task_id":19,"test_setup_code":"","test_list":["Debug.Assert(TestDuplicate(new int[] { 1, 2, 3, 4, 5 }) == false);","Debug.Assert(TestDuplicate(new int[] { 1, 2, 3, 4, 4 }) == true);","Debug.Assert(TestDuplicate(new int[] { 1, 1, 2, 2, 3, 3, 4, 4, 5 }) == true);"],"challenge_test_list":[]}
{"name":"woodball-checker","description":"Check if a number is woodball or not","text":"Write a function to check if the given number is woodball or not.","code":"public bool IsWoodall(int x) \n{\n    if (x % 2 == 0) \n    {\n        return false;\n    }\n    if (x == 1) \n    {\n        return true;\n    }\n    x = x \u002B 1;\n    int p = 0;\n    while (x % 2 == 0) \n    {\n        x = x / 2;\n        p = p \u002B 1;\n        if (p == x) \n        {\n            return true;\n        }\n    }\n    return false;\n}","task_id":20,"test_setup_code":"","test_list":["Debug.Assert(IsWoodall(383) == true);","Debug.Assert(IsWoodall(254) == false);","Debug.Assert(IsWoodall(200) == false);"],"challenge_test_list":["Assert.IsTrue(IsWoodall(32212254719));","Assert.IsFalse(IsWoodall(32212254718));","Assert.IsTrue(IsWoodall(159));"]}
{"name":"find-multiples-n","description":"Find m multiples of n using a function","text":"Write a function to find m number of multiples of n.","code":"public List\u003Cint\u003E MultiplesOfNum(int m, int n) \n{ \n    List\u003Cint\u003E multiplesOfNum = new List\u003Cint\u003E(); \n    for (int i = n; i \u003C= (m \u002B 1) * n; i \u002B= n) \n    { \n        multiplesOfNum.Add(i); \n    } \n    return multiplesOfNum; \n}","task_id":21,"test_setup_code":"","test_list":["Debug.Assert(MultiplesOfNum(4, 3).SequenceEqual(new List\u003Cint\u003E { 3, 6, 9, 12 }));","Debug.Assert(MultiplesOfNum(2, 5).SequenceEqual(new List\u003Cint\u003E { 5, 10 }));","Debug.Assert(MultiplesOfNum(9, 2).SequenceEqual(new List\u003Cint\u003E { 2, 4, 6, 8, 10, 12, 14, 16, 18 }));"],"challenge_test_list":[]}
{"name":"first-dup-element","description":"Find the first duplicate in an integer array","text":"Write a function to find the first duplicate element in a given array of integers.","code":"public int FindFirstDuplicate(int[] nums) \n{\n    HashSet\u003Cint\u003E numSet = new HashSet\u003Cint\u003E();\n    int noDuplicate = -1;\n\n    for (int i = 0; i \u003C nums.Length; i\u002B\u002B) \n    {\n        if (numSet.Contains(nums[i])) \n        {\n            return nums[i];\n        } \n        else \n        {\n            numSet.Add(nums[i]);\n        }\n    }\n\n    return noDuplicate;\n}","task_id":22,"test_setup_code":"","test_list":["Debug.Assert(FindFirstDuplicate(new int[] { 1, 2, 3, 4, 4, 5 }) == 4);","Debug.Assert(FindFirstDuplicate(new int[] { 1, 2, 3, 4 }) == -1);","Debug.Assert(FindFirstDuplicate(new int[] { 1, 1, 2, 3, 3, 2, 2 }) == 1);"],"challenge_test_list":[]}
{"name":"max-sum-list","description":"Find max sum of list elements in a list of lists","text":"Write a C# function to find the maximum sum of elements of list in a list of lists.","code":"public static int MaximumSum(List\u003CList\u003Cint\u003E\u003E list1) \n{\n    int maxi = -100000;\n    foreach (var x in list1) \n    {\n        int sum = 0;\n        foreach (var y in x) \n        {\n            sum \u002B= y;      \n        }\n        maxi = Math.Max(sum, maxi);\n    }\n    return maxi;\n}","task_id":23,"test_setup_code":"","test_list":["Debug.Assert(MaximumSum(new int[][] { new int[] { 1, 2, 3 }, new int[] { 4, 5, 6 }, new int[] { 10, 11, 12 }, new int[] { 7, 8, 9 } }) == 33);","Debug.Assert(MaximumSum(new int[,] { { 0, 1, 1 }, { 1, 1, 2 }, { 3, 2, 1 } }) == 6);","Debug.Assert(MaximumSum(new int[][] { new int[] { 0, 1, 3 }, new int[] { 1, 2, 1 }, new int[] { 9, 8, 2 }, new int[] { 0, 1, 0 }, new int[] { 6, 4, 8 } }) == 19);"],"challenge_test_list":["Assert.AreEqual(-2, MaximumSum(new int[][] { new int[] { 0, -1, -1 }, new int[] { -1, -1, -2 }, new int[] { -3, -2, -1 } }));"]}
{"name":"binary-to-decimal","description":"Convert a binary number to decimal value","text":"Write a function to convert the given binary number to its decimal equivalent.","code":"public static int BinaryToDecimal(int binary) \n{ \n    int decimal = 0, i = 0; \n    while (binary != 0) \n    { \n        int dec = binary % 10; \n        decimal \u002B= dec * (int)Math.Pow(2, i); \n        binary /= 10; \n        i\u002B\u002B; \n    } \n    return decimal; \n}","task_id":24,"test_setup_code":"","test_list":["Debug.Assert(BinaryToDecimal(100) == 4);","Debug.Assert(BinaryToDecimal(1011) == 11);","Debug.Assert(BinaryToDecimal(1101101) == 109);"],"challenge_test_list":[]}
{"name":"non-repeated-prod","description":"Product of unique array elements in Python","text":"Write a C# function to find the product of non-repeated elements in a given array.","code":"public int FindProduct(int[] arr, int n) \n{ \n    Array.Sort(arr); \n    int prod = 1; \n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    { \n        if (arr[i - 1] != arr[i]) \n        { \n            prod *= arr[i]; \n        } \n    } \n    return prod; \n}","task_id":25,"test_setup_code":"","test_list":["Debug.Assert(FindProduct(new int[] { 1, 1, 2, 3 }, 4) == 6);","Debug.Assert(FindProduct(new int[] { 1, 2, 3, 1, 1 }, 5) == 6);","Debug.Assert(FindProduct(new int[] { 1, 1, 4, 5, 6 }, 5) == 120);"],"challenge_test_list":["Assert.IsTrue(FindProduct(new List\u003Cint\u003E { 1, 1, 4, 5, 6, 5, 7, 1, 1, 3, 4 }, 11) == 2520);"]}
{"name":"check-tuple-k","description":"Check if tuple list contains all k elements","text":"Write a function to check if the given tuple list has all k elements.","code":"public bool CheckKElements(List\u003CTuple\u003Cint, int\u003E\u003E testList, int K) {\n    bool res = true;\n    foreach (var tup in testList) {\n        foreach (var ele in tup) {\n            if (ele != K) {\n                res = false;\n            }\n        }\n    }\n    return res;\n}","task_id":26,"test_setup_code":"","test_list":["Debug.Assert(CheckKElements(new List\u003CTuple\u003Cint, int\u003E\u003E { Tuple.Create(4, 4), Tuple.Create(4, 4, 4), Tuple.Create(4, 4), Tuple.Create(4, 4, 4, 4), Tuple.Create(4, )}, 4) == true);","Debug.Assert(CheckKElements(new (int, int)[]{(7, 7, 7), (7, 7)}, 7) == true);","Debug.Assert(CheckKElements(new Tuple\u003Cint, int\u003E[] { Tuple.Create(9, 9), Tuple.Create(9, 9, 9, 9) }, 7) == false);"],"challenge_test_list":["Assert.IsFalse(CheckKElements(new List\u003CTuple\u003Cint\u003E\u003E { Tuple.Create(4, 4), Tuple.Create(4, 4, 4), Tuple.Create(4, 4), Tuple.Create(4, 4, 6, 4), Tuple.Create(4) }, 4));"]}
{"name":"remove-digits-from-list","description":"Remove digits from a list of strings using Python","text":"Write a C# function to remove all digits from a list of strings.","code":"using System.Collections.Generic;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n    public List\u003Cstring\u003E Remove(List\u003Cstring\u003E list)\n    {\n        string pattern = \u0022[0-9]\u0022;\n        for (int i = 0; i \u003C list.Count; i\u002B\u002B)\n        {\n            list[i] = Regex.Replace(list[i], pattern, \u0022\u0022);\n        }\n        return list;\n    }\n}","task_id":27,"test_setup_code":"","test_list":["Debug.Assert(Remove(new List\u003Cstring\u003E { \u00224words\u0022, \u00223letters\u0022, \u00224digits\u0022 }).SequenceEqual(new List\u003Cstring\u003E { \u0022words\u0022, \u0022letters\u0022, \u0022digits\u0022 }));","Debug.Assert(Remove(new List\u003Cstring\u003E { \u002228Jan\u0022, \u002212Jan\u0022, \u002211Jan\u0022 }).SequenceEqual(new List\u003Cstring\u003E { \u0022Jan\u0022, \u0022Jan\u0022, \u0022Jan\u0022 }));","Debug.Assert(Remove(new List\u003Cstring\u003E { \u0022wonder1\u0022, \u0022wonder2\u0022, \u0022wonder3\u0022 }).SequenceEqual(new List\u003Cstring\u003E { \u0022wonder\u0022, \u0022wonder\u0022, \u0022wonder\u0022 }));"],"challenge_test_list":[]}
{"name":"binomial-coeff","description":"Calculate binomial coefficient using Python function","text":"Write a C# function to find binomial co-efficient.","code":"public int BinomialCoeff(int n, int k) \n{ \n    if (k \u003E n) \n    { \n        return 0; \n    } \n    if (k == 0 || k == n) \n    { \n        return 1; \n    } \n    return BinomialCoeff(n - 1, k - 1) \u002B BinomialCoeff(n - 1, k); \n}","task_id":28,"test_setup_code":"","test_list":["Debug.Assert(BinomialCoeff(5, 2) == 10);","Debug.Assert(BinomialCoeff(4, 3) == 4);","Debug.Assert(BinomialCoeff(3, 2) == 3);"],"challenge_test_list":["if (BinomialCoeff(14, 6) != 3003) throw new Exception(\u0022Assertion failed\u0022);"]}
{"name":"odd-count-element","description":"Find element with odd occurrences in a list","text":"Write a C# function to find the element occurring odd number of times.","code":"public int GetOddOccurrence(int[] arr, int arrSize)\n{\n    for (int i = 0; i \u003C arrSize; i\u002B\u002B)\n    {\n        int count = 0;\n        for (int j = 0; j \u003C arrSize; j\u002B\u002B)\n        {\n            if (arr[i] == arr[j])\n            {\n                count\u002B\u002B;\n            }\n        }\n        if (count % 2 != 0)\n        {\n            return arr[i];\n        }\n    }\n    return -1;\n}","task_id":29,"test_setup_code":"","test_list":["Debug.Assert(GetOddOccurrence(new int[] { 1, 2, 3, 1, 2, 3, 1 }, 7) == 1);","Debug.Assert(GetOddOccurrence(new int[] { 1, 2, 3, 2, 3, 1, 3 }, 7) == 3);","Debug.Assert(GetOddOccurrence(new int[] { 2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2 }, 13) == 5);"],"challenge_test_list":[]}
{"name":"count-same-substr","description":"Count substrings with matching start and end characters","text":"Write a C# function to count all the substrings starting and ending with same characters.","code":"public static int CountSubstringWithEqualEnds(string s) \n{\n    int result = 0; \n    int n = s.Length; \n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    {\n        for (int j = 1; j \u003C= n - i; j\u002B\u002B) \n        {\n            if (CheckEquality(s.Substring(i, j))) \n            {\n                result\u002B\u002B; \n            }\n        }\n    }\n    return result; \n}\n\npublic static bool CheckEquality(string s) \n{\n    return (s[0] == s[s.Length - 1]); \n}","task_id":30,"test_setup_code":"","test_list":["Debug.Assert(CheckEquality(\u0022abc\u0022) == 3);","CheckEquality(count_Substring_With_Equal_Ends(\u0022abcda\u0022) == 6);","Debug.Assert(CheckEquality(\u0022ab\u0022) == 2);"],"challenge_test_list":[]}
{"name":"top-k-frequent","description":"Find top k most frequent integers using heaps","text":"Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.","code":"public List\u003Cint\u003E Func(int[][] nums, int k)\n{\n    var d = new Dictionary\u003Cint, int\u003E();\n    foreach (var row in nums)\n    {\n        foreach (var i in row)\n        {\n            if (d.ContainsKey(i))\n                d[i]\u002B\u002B;\n            else\n                d[i] = 1;\n        }\n    }\n    \n    var temp = new List\u003C(int, int)\u003E();\n    foreach (var kvp in d)\n    {\n        int key = kvp.Key;\n        int v = kvp.Value;\n        if (temp.Count \u003C k)\n        {\n            temp.Add((v, key));\n            if (temp.Count == k)\n                temp.Sort((a, b) =\u003E a.Item1.CompareTo(b.Item1));\n        }\n        else\n        {\n            if (v \u003E temp[0].Item1)\n            {\n                temp.RemoveAt(0);\n                temp.Add((v, key));\n                temp.Sort((a, b) =\u003E a.Item1.CompareTo(b.Item1));\n            }\n        }\n    }\n\n    var result = new List\u003Cint\u003E();\n    while (temp.Count \u003E 0)\n    {\n        var (v, key) = temp[0];\n        temp.RemoveAt(0);\n        result.Add(key);\n    }\n    return result;\n}","task_id":31,"test_setup_code":"","test_list":["Debug.Assert(Func(new List\u003CList\u003Cint\u003E\u003E{ new List\u003Cint\u003E{1, 2, 6}, new List\u003Cint\u003E{1, 3, 4, 5, 7, 8}, new List\u003Cint\u003E{1, 3, 5, 6, 8, 9}, new List\u003Cint\u003E{2, 5, 7, 11}, new List\u003Cint\u003E{1, 4, 7, 8, 12} }, 3).SequenceEqual(new List\u003Cint\u003E{5, 7, 1}));","Debug.Assert(Func(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 1, 2, 6 }, new List\u003Cint\u003E { 1, 3, 4, 5, 7, 8 }, new List\u003Cint\u003E { 1, 3, 5, 6, 8, 9 }, new List\u003Cint\u003E { 2, 5, 7, 11 }, new List\u003Cint\u003E { 1, 4, 7, 8, 12 } }, 1).SequenceEqual(new List\u003Cint\u003E { 1 }));","Debug.Assert(Func(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 1, 2, 6 }, new List\u003Cint\u003E { 1, 3, 4, 5, 7, 8 }, new List\u003Cint\u003E { 1, 3, 5, 6, 8, 9 }, new List\u003Cint\u003E { 2, 5, 7, 11 }, new List\u003Cint\u003E { 1, 4, 7, 8, 12 } }, 5).SequenceEqual(new List\u003Cint\u003E { 6, 5, 7, 8, 1 }));"],"challenge_test_list":[]}
{"name":"largest-prime-fac","description":"Find largest prime factor of a number in Python","text":"Write a C# function to find the largest prime factor of a given number.","code":"using System;\n\npublic class PrimeFactors\n{\n    public static int MaxPrimeFactors(int n)\n    {\n        int maxPrime = -1;\n        while (n % 2 == 0)\n        {\n            maxPrime = 2;\n            n \u003E\u003E= 1;\n        }\n        for (int i = 3; i \u003C= Math.Sqrt(n); i \u002B= 2)\n        {\n            while (n % i == 0)\n            {\n                maxPrime = i;\n                n /= i;\n            }\n        }\n        if (n \u003E 2)\n        {\n            maxPrime = n;\n        }\n        return maxPrime;\n    }\n}","task_id":32,"test_setup_code":"","test_list":["Debug.Assert(MaxPrimeFactors(15) == 5);","Debug.Assert(MaxPrimeFactors(6) == 3);","Debug.Assert(MaxPrimeFactors(2) == 2);"],"challenge_test_list":[]}
{"name":"decimal-to-binary","description":"Convert a decimal number to binary format in Python","text":"Write a C# function to convert a decimal number to binary number.","code":"public static int DecimalToBinary(int N) \n{ \n    int B_Number = 0; \n    int cnt = 0; \n    while (N != 0) \n    { \n        int rem = N % 2; \n        int c = (int)Math.Pow(10, cnt); \n        B_Number \u002B= rem * c; \n        N /= 2; \n        cnt\u002B\u002B; \n    } \n    return B_Number; \n}","task_id":33,"test_setup_code":"","test_list":["Debug.Assert(DecimalToBinary(10) == 1010);","Debug.Assert(DecimalToBinary(1) == 1);","Debug.Assert(DecimalToBinary(20) == 10100);"],"challenge_test_list":[]}
{"name":"missing-num-array","description":"Find the missing number in a sorted array","text":"Write a C# function to find the missing number in a sorted array.","code":"public int FindMissing(int[] ar, int N) \n{ \n    int l = 0; \n    int r = N - 1; \n    while (l \u003C= r) \n    { \n        int mid = (l \u002B r) / 2; \n        if (ar[mid] != mid \u002B 1 \u0026\u0026 mid \u003E 0 \u0026\u0026 ar[mid - 1] == mid) \n        { \n            return mid \u002B 1; \n        } \n        else if (ar[mid] != mid \u002B 1) \n        { \n            r = mid - 1; \n        } \n        else \n        { \n            l = mid \u002B 1; \n        } \n    } \n    return -1; \n}","task_id":34,"test_setup_code":"","test_list":["Debug.Assert(FindMissing(new int[] { 1, 2, 3, 5 }) == 4);","Debug.Assert(FindMissing(new int[] { 1, 3, 4, 5 }, 4) == 2);","Debug.Assert(FindMissing(new int[] { 1, 2, 3, 5, 6, 7 }, 5) == 4);"],"challenge_test_list":[]}
{"name":"rectangular-num","description":"Find the n-th rectangular number efficiently","text":"Write a function to find the n-th rectangular number.","code":"public int FindRectNum(int n)  \n{  \n    return n * (n \u002B 1);  \n}","task_id":35,"test_setup_code":"","test_list":["Debug.Assert(FindRectNum(4) == 20);","Debug.Assert(FindRectNum(5) == 30);","Debug.Assert(FindRectNum(6) == 42);"],"challenge_test_list":[]}
{"name":"nth-digit-fraction","description":"Find the nth digit in a proper fraction","text":"Write a C# function to find the nth digit in the proper fraction of two given numbers.","code":"public int FindNthDigit(int p, int q, int N) \n{  \n    while (N \u003E 0) \n    { \n        N -= 1;  \n        p *= 10;  \n        int res = p / q;  \n        p %= q;  \n    } \n    return res;  \n}","task_id":36,"test_setup_code":"","test_list":["Debug.Assert(FindNthDigit(1, 2, 1) == 5);","Debug.Assert(FindNthDigit(3, 5, 1) == 6);","Debug.Assert(FindNthDigit(5, 6, 5) == 3);"],"challenge_test_list":[]}
{"name":"sort-mixed-list","description":"Sort a mixed list of integers and strings","text":"Write a function to sort a given mixed list of integers and strings.","code":"public List\u003Cobject\u003E SortMixedList(List\u003Cobject\u003E mixedList) {\n    var intPart = mixedList.OfType\u003Cint\u003E().OrderBy(i =\u003E i).ToList();\n    var strPart = mixedList.OfType\u003Cstring\u003E().OrderBy(i =\u003E i).ToList();\n    return intPart.Concat(strPart).ToList();\n}","task_id":37,"test_setup_code":"","test_list":["Debug.Assert(SortMixedList(new object[] { 19, \u0022red\u0022, 12, \u0022green\u0022, \u0022blue\u0022, 10, \u0022white\u0022, \u0022green\u0022, 1 }).SequenceEqual(new object[] { 1, 10, 12, 19, \u0022blue\u0022, \u0022green\u0022, \u0022green\u0022, \u0022red\u0022, \u0022white\u0022 }));","Debug.Assert(SortMixedList(new object[] { 19, \u0022red\u0022, 12, \u0022green\u0022, \u0022blue\u0022, 10, \u0022white\u0022, \u0022green\u0022, 1 }).SequenceEqual(new object[] { 1, 10, 12, 19, \u0022blue\u0022, \u0022green\u0022, \u0022green\u0022, \u0022red\u0022, \u0022white\u0022 }));","Debug.Assert(SortMixedList(new List\u003Cobject\u003E { 19, \u0022red\u0022, 12, \u0022green\u0022, \u0022blue\u0022, 10, \u0022white\u0022, \u0022green\u0022, 1 }).SequenceEqual(new List\u003Cobject\u003E { 1, 10, 12, 19, \u0022blue\u0022, \u0022green\u0022, \u0022green\u0022, \u0022red\u0022, \u0022white\u0022 }));"],"challenge_test_list":[]}
{"name":"even-odd-divide","description":"Find division of first even and odd numbers","text":"Write a function to find the division of first even and odd number of a given list.","code":"public static double DivEvenOdd(List\u003Cint\u003E list1)\n{\n    int firstEven = list1.FirstOrDefault(el =\u003E el % 2 == 0);\n    int firstOdd = list1.FirstOrDefault(el =\u003E el % 2 != 0);\n    if (firstOdd == 0) return -1; // Handle division by zero\n    return (double)firstEven / firstOdd;\n}","task_id":38,"test_setup_code":"","test_list":["Debug.Assert(DivEvenOdd(new int[] { 1, 3, 5, 7, 4, 1, 6, 8 }) == 4);","Debug.Assert(DivEvenOdd(new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }) == 2);","Debug.Assert(DivEvenOdd(new int[] { 1, 5, 7, 9, 10 }) == 10);"],"challenge_test_list":[]}
{"name":"valid-letters-rearrangement","description":"Check for rearrangement of string with different adjacent letters","text":"Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.","code":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Solution\n{\n    public string RearangeString(string S)\n    {\n        var ctr = S.GroupBy(c =\u003E c).ToDictionary(g =\u003E g.Key, g =\u003E g.Count());\n        var heap = new List\u003C(int, char)\u003E(ctr.Select(kvp =\u003E (-kvp.Value, kvp.Key)));\n        Heapify(heap);\n        if (-heap[0].Item1 * 2 \u003E S.Length \u002B 1)\n        {\n            return \u0022\u0022;\n        }\n        \n        var ans = new List\u003Cchar\u003E();\n        while (heap.Count \u003E= 2)\n        {\n            var (nct1, char1) = Pop(heap);\n            var (nct2, char2) = Pop(heap);\n            ans.Add(char1);\n            ans.Add(char2);\n            if (nct1 \u002B 1 \u003C 0) Push(heap, (nct1 \u002B 1, char1));\n            if (nct2 \u002B 1 \u003C 0) Push(heap, (nct2 \u002B 1, char2));\n        }\n        \n        return new string(ans.ToArray()) \u002B (heap.Count \u003E 0 ? heap[0].Item2.ToString() : \u0022\u0022);\n    }\n\n    private void Heapify(List\u003C(int, char)\u003E heap)\n    {\n        // Implement min-heapify method for a tuple list\n        // This is a placeholder as a full heap implementation is needed\n        heap.Sort((x, y) =\u003E x.Item1.CompareTo(y.Item1));\n    }\n\n    private (int, char) Pop(List\u003C(int, char)\u003E heap)\n    {\n        var item = heap[0];\n        heap.RemoveAt(0);\n        return item;\n    }\n\n    private void Push(List\u003C(int, char)\u003E heap, (int, char) item)\n    {\n        heap.Add(item);\n        // Re-heapify to maintain heap order\n        heap.Sort((x, y) =\u003E x.Item1.CompareTo(y.Item1));\n    }\n}","task_id":39,"test_setup_code":"","test_list":["Debug.Assert(RearangeString(\u0022aab\u0022) == \u0022aba\u0022);","Debug.Assert(RearangeString(\u0022aabb\u0022) == \u0022abab\u0022);","Debug.Assert(RearangeString(\u0022abccdd\u0022) == \u0022cdabcd\u0022);"],"challenge_test_list":[]}
{"name":"list-element-freq","description":"Count element frequency in a list of lists","text":"Write a function to find frequency of the elements in a given list of lists using collections module.","code":"using System.Collections.Generic;\nusing System.Linq;\n\npublic class Example\n{\n    public Dictionary\u003Cint, int\u003E FreqElement(IEnumerable\u003CIEnumerable\u003Cint\u003E\u003E nums)\n    {\n        var result = nums.SelectMany(x =\u003E x)\n                         .GroupBy(x =\u003E x)\n                         .ToDictionary(g =\u003E g.Key, g =\u003E g.Count());\n        return result;\n    }\n}","task_id":40,"test_setup_code":"","test_list":["var result = FreqElement(new int[][] { new int[] { 1, 2, 3, 2 }, new int[] { 4, 5, 6, 2 }, new int[] { 7, 1, 9, 5 } });\nvar expected = new Dictionary\u003Cint, int\u003E { { 2, 3 }, { 1, 2 }, { 5, 2 }, { 3, 1 }, { 4, 1 }, { 6, 1 }, { 7, 1 }, { 9, 1 } };\nDebug.Assert(result.SequenceEqual(expected));","Debug.Assert(freq_element(new int[][] { new int[] { 1, 2, 3, 4 }, new int[] { 5, 6, 7, 8 }, new int[] { 9, 10, 11, 12 } }).SequenceEqual(new Dictionary\u003Cint, int\u003E { { 1, 1 }, { 2, 1 }, { 3, 1 }, { 4, 1 }, { 5, 1 }, { 6, 1 }, { 7, 1 }, { 8, 1 }, { 9, 1 }, { 10, 1 }, { 11, 1 }, { 12, 1 } }));","Debug.Assert(FreqElement(new int[][] { new int[] { 15, 20, 30, 40 }, new int[] { 80, 90, 100, 110 }, new int[] { 30, 30, 80, 90 } })\n    .SequenceEqual(new Dictionary\u003Cint, int\u003E { { 30, 3 }, { 80, 2 }, { 90, 2 }, { 15, 1 }, { 20, 1 }, { 40, 1 }, { 100, 1 }, { 110, 1 } }));"],"challenge_test_list":[]}
{"name":"filter-even-numbers","description":"Filter even numbers with a lambda function","text":"Write a function to filter even numbers using lambda function.","code":"public List\u003Cint\u003E FilterEvenNumbers(List\u003Cint\u003E nums)\n{\n    List\u003Cint\u003E evenNums = nums.Where(x =\u003E x % 2 == 0).ToList();\n    return evenNums;\n}","task_id":41,"test_setup_code":"","test_list":["Debug.Assert(FilterEvenNumbers(new List\u003Cint\u003E { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }).SequenceEqual(new List\u003Cint\u003E { 2, 4, 6, 8, 10 }));\n\npublic List\u003Cint\u003E FilterEvenNumbers(List\u003Cint\u003E numbers) {\n    return numbers.Where(n =\u003E n % 2 == 0).ToList();\n}","Debug.Assert(FilterEvenNumbers(new List\u003Cint\u003E { 10, 20, 45, 67, 84, 93 }).SequenceEqual(new List\u003Cint\u003E { 10, 20, 84 }));","Debug.Assert(FilterEvenNumbers(new List\u003Cint\u003E { 5, 7, 9, 8, 6, 4, 3 }).SequenceEqual(new List\u003Cint\u003E { 8, 6, 4 }));\n\npublic static List\u003Cint\u003E FilterEvenNumbers(List\u003Cint\u003E numbers) {\n    return numbers.Where(n =\u003E n % 2 == 0).ToList();\n}"],"challenge_test_list":[]}
{"name":"sum-repeated-elts","description":"Sum repeated elements in an array using Python","text":"Write a C# function to find the sum of repeated elements in a given array.","code":"public int FindSum(int[] arr, int n) \n{ \n    return arr.Where(x =\u003E arr.Count(y =\u003E y == x) \u003E 1).Sum(); \n}","task_id":42,"test_setup_code":"","test_list":["Debug.Assert(FindSum(new int[] { 1, 2, 3, 1, 1, 4, 5, 6 }, 8) == 3);","Debug.Assert(FindSum(new int[] { 1, 2, 3, 1, 1 }, 5) == 3);","Debug.Assert(FindSum(new int[] { 1, 1, 2 }, 3) == 2);"],"challenge_test_list":["Assert.IsTrue(FindSum(new int[] { 1, 1, 2, 3, 4, 5, 6, 3, 5 }, 9) == 18);"]}
{"name":"find_lower_seqs","description":"Find lowercase letter sequences with regex","text":"Write a function to find sequences of lowercase letters joined with an underscore using regex.","code":"public string TextMatch(string text)  \n{  \n    string patterns = \u0022^[a-z]\u002B_[a-z]\u002B$\u0022;  \n    if (Regex.IsMatch(text, patterns))  \n    {  \n        return \u0022Found a match!\u0022;  \n    }  \n    else  \n    {  \n        return \u0022Not matched!\u0022;  \n    }  \n}","task_id":43,"test_setup_code":"","test_list":["Debug.Assert(TextMatch(\u0022aab_cbbbc\u0022) == \u0022Found a match!\u0022);\n\nstring TextMatch(string input) {\n    // Your previous implementation here\n}","Debug.Assert(TextMatch(\u0022aab_Abbbc\u0022) == \u0022Not matched!\u0022);","Debug.Assert(TextMatch(\u0022Aaab_abbbc\u0022) == \u0022Not matched!\u0022);"],"challenge_test_list":["Assert(textMatch(\u0022aab-cbbbc\u0022) == \u0022Not matched!\u0022);"]}
{"name":"match-word-start","description":"Match a word at the start of a string","text":"Write a function that matches a word at the beginning of a string.","code":"public string TextMatchString(string text) \n{\n    string patterns = @\u0022^\\w\u002B\u0022;\n    if (Regex.IsMatch(text, patterns)) \n    {\n        return \u0022Found a match!\u0022;\n    } \n    else \n    {\n        return \u0022Not matched!\u0022;\n    }\n}","task_id":44,"test_setup_code":"","test_list":["Debug.Assert(TextMatchString(\u0022python\u0022) == \u0022Not matched!\u0022);","Debug.Assert(TextMatchString(\u0022python\u0022) == \u0022Found a match!\u0022);","Debug.Assert(TextMatchString(\u0022  lang\u0022) == \u0022Not matched!\u0022);"],"challenge_test_list":["Assert.AreEqual(\u0022Found a match!\u0022, TextMatchString(\u0022foo\u0022));"]}
{"name":"gcd-of-array","description":"Find the gcd of array elements using a function","text":"Write a function to find the gcd of the given array elements.","code":"public static int FindGcd(int x, int y) \n{\n    while (y != 0) \n    {\n        int temp = y;\n        y = x % y;\n        x = temp;\n    }\n    return x;\n}\n\npublic static int GetGcd(List\u003Cint\u003E l) \n{\n    int num1 = l[0];\n    int num2 = l[1];\n    int gcd = FindGcd(num1, num2);\n    \n    for (int i = 2; i \u003C l.Count; i\u002B\u002B) \n    {\n        gcd = FindGcd(gcd, l[i]);\n    }\n    \n    return gcd;\n}","task_id":45,"test_setup_code":"","test_list":["Debug.Assert(GetGcd(new int[] { 2, 4, 6, 8, 16 }) == 2);","Debug.Assert(GetGcd(new int[] { 1, 2, 3 }) == 1);","Debug.Assert(GetGcd(new int[] { 2, 4, 6, 8 }) == 2);"],"challenge_test_list":[]}
{"name":"all-numbers-uniq","description":"Check if all numbers in a list are unique","text":"Write a C# function to determine whether all the numbers are different from each other are not.","code":"public bool TestDistinct(IEnumerable\u003Cint\u003E data)\n{\n    return data.Count() == data.Distinct().Count();\n}","task_id":46,"test_setup_code":"","test_list":["Debug.Assert(TestDistinct(new int[] { 1, 5, 7, 9 }) == true);","Debug.Assert(TestDistinct(new int[] { 2, 4, 5, 5, 7, 9 }) == false);","Debug.Assert(TestDistinct(new int[] { 1, 2, 3 }) == true);"],"challenge_test_list":[]}
{"name":"fact-a-div-fact-b","description":"Find last digit of factorial b divided by a","text":"Write a C# function to find the last digit when factorial of a divides factorial of b.","code":"public int ComputeLastDigit(int A, int B) \n{\n    int variable = 1;\n    if (A == B) \n    {\n        return 1;\n    }\n    else if ((B - A) \u003E= 5)  \n    {\n        return 0;\n    }\n    else \n    {\n        for (int i = A \u002B 1; i \u003C= B; i\u002B\u002B) \n        {\n            variable = (variable * (i % 10)) % 10;\n        }\n        return variable % 10;\n    }\n}","task_id":47,"test_setup_code":"","test_list":["Debug.Assert(ComputeLastDigit(2, 4) == 2);","Debug.Assert(ComputeLastDigit(6, 8) == 6);","Debug.Assert(ComputeLastDigit(1, 2) == 2);"],"challenge_test_list":["Assert.IsTrue(ComputeLastDigit(3, 7) == 0);","assert ComputeLastDigit(20, 23) == 6;","Assert.IsTrue(ComputeLastDigit(1021, 1024) == 4);"]}
{"name":"set-odd-bits.py","description":"Set all odd bits in a given number using Python","text":"Write a C# function to set all odd bits of a given number.","code":"public int OddBitSetNumber(int n) {\n    int count = 0;\n    int res = 0;\n    int temp = n;\n    while (temp \u003E 0) {\n        if (count % 2 == 0) {\n            res |= (1 \u003C\u003C count);\n        }\n        count\u002B\u002B;\n        temp \u003E\u003E= 1;\n    }\n    return (n | res);\n}","task_id":48,"test_setup_code":"","test_list":["Debug.Assert(OddBitSetNumber(10) == 15);","Debug.Assert(OddBitSetNumber(20) == 21);","Debug.Assert(OddBitSetNumber(30) == 31);"],"challenge_test_list":[]}
{"name":"extract-first-ele","description":"Extract specified elements from a 2D list","text":"Write a function to extract every first or specified element from a given two-dimensional list.","code":"public List\u003CT\u003E SpecifiedElement\u003CT\u003E(List\u003CList\u003CT\u003E\u003E nums, int N) \n{\n    return nums.Select(i =\u003E i[N]).ToList();\n}","task_id":49,"test_setup_code":"","test_list":["Debug.Assert(SpecifiedElement(new int[][] { new int[] { 1, 2, 3, 2 }, new int[] { 4, 5, 6, 2 }, new int[] { 7, 1, 9, 5 } }, 0).SequenceEqual(new int[] { 1, 4, 7 }));","Debug.Assert(SpecifiedElement(new int[][] { new int[] { 1, 2, 3, 2 }, new int[] { 4, 5, 6, 2 }, new int[] { 7, 1, 9, 5 } }, 2).SequenceEqual(new int[] { 3, 6, 9 }));","Debug.Assert(SpecifiedElement(new int[][] { new int[] { 1, 2, 3, 2 }, new int[] { 4, 5, 6, 2 }, new int[] { 7, 1, 9, 5 } }, 1).SequenceEqual(new List\u003Cint\u003E { 2, 5, 1 }));"],"challenge_test_list":[]}
{"name":"min-length-list","description":"Find the shortest list using a lambda function","text":"Write a function to find the list with minimum length using lambda function.","code":"public (int, List\u003Cstring\u003E) MinLengthList(List\u003CList\u003Cstring\u003E\u003E inputList) \n{\n    int minLength = inputList.Min(x =\u003E x.Count);\n    List\u003Cstring\u003E minList = inputList.OrderBy(i =\u003E i.Count).First();\n    return (minLength, minList);\n}","task_id":50,"test_setup_code":"","test_list":["Debug.Assert(MinLengthList(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 0 }, new List\u003Cint\u003E { 1, 3 }, new List\u003Cint\u003E { 5, 7 }, new List\u003Cint\u003E { 9, 11 }, new List\u003Cint\u003E { 13, 15, 17 } }) == (1, new List\u003Cint\u003E { 0 }));","Debug.Assert(MinLengthList(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 1, 2, 3, 4, 5 }, new List\u003Cint\u003E { 1, 2, 3, 4 }, new List\u003Cint\u003E { 1, 2, 3 }, new List\u003Cint\u003E { 1, 2 }, new List\u003Cint\u003E { 1 } }) == (1, new List\u003Cint\u003E { 1 }));","Debug.Assert(MinLengthList(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 3, 4, 5 }, new List\u003Cint\u003E { 6, 7, 8, 9 }, new List\u003Cint\u003E { 10, 11, 12 }, new List\u003Cint\u003E { 1, 2 } }) == (2, new List\u003Cint\u003E { 1, 2 }));"],"challenge_test_list":[]}
{"name":"equilateral-check","description":"Check if a triangle is equilateral or not","text":"Write a function to print check if the triangle is equilateral or not.","code":"public bool CheckEquilateral(int x, int y, int z)  \n{  \n    if (x == y \u0026\u0026 y == z)  \n        return true;  \n    else  \n        return false;  \n}","task_id":51,"test_setup_code":"","test_list":["Debug.Assert(CheckEquilateral(6, 8, 12) == false);","Debug.Assert(CheckEquilateral(6, 6, 12) == false);","Debug.Assert(CheckEquilateral(6, 6, 6) == true);"],"challenge_test_list":[]}
{"name":"calc-area-parallel","description":"Calculate the area of a parallelogram function","text":"Write a function to caluclate area of a parallelogram.","code":"public double ParallelogramArea(double b, double h)  \n{  \n    double area = b * h;  \n    return area;  \n}","task_id":52,"test_setup_code":"","test_list":["Debug.Assert(ParallelogramArea(10, 20) == 200);","Debug.Assert(ParallelogramArea(15, 20) == 300);","Debug.Assert(ParallelogramArea(8, 9) == 72);\n\npublic static double ParallelogramArea(double baseLength, double height)\n{\n    return baseLength * height;\n}"],"challenge_test_list":[]}
{"name":"first-last-check","description":"Check if the first and last characters match","text":"Write a C# function to check whether the first and last characters of a given string are equal or not.","code":"public string CheckEquality(string str)\n{\n    if (str[0] == str[str.Length - 1])\n    {\n        return \u0022Equal\u0022;\n    }\n    else\n    {\n        return \u0022Not Equal\u0022;\n    }\n}","task_id":53,"test_setup_code":"","test_list":["Debug.Assert(CheckEquality(\u0022abcda\u0022) == \u0022Equal\u0022);","Debug.Assert(CheckEquality(\u0022ab\u0022) == \u0022Not Equal\u0022);","Debug.Assert(CheckEquality(\u0022mad\u0022) == \u0022Not Equal\u0022);"],"challenge_test_list":[]}
{"name":"counting-sort-arr","description":"Sort an array using the counting sort algorithm","text":"Write a function to sort the given array by using counting sort.","code":"public List\u003Cint\u003E CountingSort(List\u003Cint\u003E myList) \n{\n    int maxValue = 0;\n    for (int i = 0; i \u003C myList.Count; i\u002B\u002B) \n    {\n        if (myList[i] \u003E maxValue) \n        {\n            maxValue = myList[i];\n        }\n    }\n    int[] buckets = new int[maxValue \u002B 1];\n    foreach (int i in myList) \n    {\n        buckets[i]\u002B\u002B;\n    }\n    int index = 0;\n    for (int j = 0; j \u003C= maxValue; j\u002B\u002B) \n    {\n        for (int a = 0; a \u003C buckets[j]; a\u002B\u002B) \n        {\n            myList[index] = j;\n            index\u002B\u002B;\n        }\n    }\n    return myList;\n}","task_id":54,"test_setup_code":"","test_list":["Debug.Assert(CountingSort(new int[] { 1, 23, 4, 5, 6, 7, 8 }).SequenceEqual(new int[] { 1, 4, 5, 6, 7, 8, 23 }));","Debug.Assert(CountingSort(new int[] { 12, 9, 28, 33, 69, 45 }).SequenceEqual(new int[] { 9, 12, 28, 33, 45, 69 }));","Debug.Assert(CountingSort(new int[] { 8, 4, 14, 3, 2, 1 }).SequenceEqual(new int[] { 1, 2, 3, 4, 8, 14 }));"],"challenge_test_list":[]}
{"name":"geometric-term","description":"Find the t-th term of a geometric series","text":"Write a function to find t-nth term of geometric series.","code":"public static double TnGp(double a, int n, double r)\n{\n    double tn = a * Math.Pow(r, n - 1);\n    return tn;\n}","task_id":55,"test_setup_code":"","test_list":["Debug.Assert(TnGp(1, 5, 2) == 16);","Debug.Assert(TnGp(1, 5, 4) == 256);","Debug.Assert(TnGp(2, 6, 3) == 486);"],"challenge_test_list":[]}
{"name":"twice-reverse-check","description":"Check if a number is one less than double its reverse","text":"Write a C# function to check if a given number is one less than twice its reverse.","code":"public int Rev(int num)    \n{    \n    int revNum = 0;    \n    while (num \u003E 0)    \n    {    \n        revNum = (revNum * 10 \u002B num % 10);    \n        num /= 10;    \n    }    \n    return revNum;    \n}    \n\npublic bool Check(int n)    \n{    \n    return (2 * Rev(n) == n \u002B 1);    \n}","task_id":56,"test_setup_code":"","test_list":["Debug.Assert(Check(70) == false);","Debug.Assert(Check(23) == false);","Debug.Assert(Check(73) == true);"],"challenge_test_list":[]}
{"name":"largest-number-form","description":"Find the largest number from given digits","text":"Write a C# function to find the largest number that can be formed with the given digits.","code":"public long FindMaxNum(int[] arr, int n) \n{ \n    Array.Sort(arr);\n    Array.Reverse(arr);\n    long num = arr[0]; \n    for (int i = 1; i \u003C n; i\u002B\u002B) \n    { \n        num = num * 10 \u002B arr[i]; \n    } \n    return num; \n}","task_id":57,"test_setup_code":"","test_list":["Debug.Assert(FindMaxNum(new int[] { 1, 2, 3 }, 3) == 321);","Debug.Assert(FindMaxNum(new int[] { 4, 5, 6, 1 }, 4) == 6541);","Debug.Assert(FindMaxNum(new int[] { 1, 2, 3, 9 }, 4) == 9321);"],"challenge_test_list":[]}
{"name":"opposite-signs","description":"Check if two integers have opposite signs","text":"Write a C# function to check whether the given two integers have opposite sign or not.","code":"bool OppositeSigns(int x, int y) \n{ \n    return ((x ^ y) \u003C 0); \n}","task_id":58,"test_setup_code":"","test_list":["Debug.Assert(OppositeSigns(1, -2) == true);","Debug.Assert(OppositeSigns(3, 2) == false);","Debug.Assert(OppositeSigns(-10, -10) == false);"],"challenge_test_list":[]}
{"name":"nth-octagonal","description":"Find the nth octagonal number function","text":"Write a function to find the nth octagonal number.","code":"public static int IsOctagonal(int n) \n{ \n    return 3 * n * n - 2 * n; \n}","task_id":59,"test_setup_code":"","test_list":["Debug.Assert(IsOctagonal(5) == 65);","Debug.Assert(IsOctagonal(10) == 280);","Debug.Assert(IsOctagonal(15) == 645);"],"challenge_test_list":[]}
{"name":"max-length-subseq","description":"Find max subsequence length with adjacent difference","text":"Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.","code":"int MaxLenSub(int[] arr, int n) \n{ \n    List\u003Cint\u003E mls = new List\u003Cint\u003E(); \n    int max = 0; \n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    { \n        mls.Add(1); \n    } \n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    { \n        for (int j = 0; j \u003C i; j\u002B\u002B) \n        { \n            if (Math.Abs(arr[i] - arr[j]) \u003C= 1 \u0026\u0026 mls[i] \u003C mls[j] \u002B 1) \n            { \n                mls[i] = mls[j] \u002B 1; \n            } \n        } \n    } \n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    { \n        if (max \u003C mls[i]) \n        { \n            max = mls[i]; \n        } \n    } \n    return max; \n}","task_id":60,"test_setup_code":"","test_list":["Debug.Assert(MaxLenSub(new int[] { 2, 5, 6, 3, 7, 6, 5, 8 }, 8) == 5);","Debug.Assert(MaxLenSub(new int[] { -2, -1, 5, -1, 4, 0, 3 }, 7) == 4);","Debug.Assert(MaxLenSub(new int[] { 9, 11, 13, 15, 18 }, 5) == 1);"],"challenge_test_list":[]}
{"name":"count-substr-sum","description":"Count substrings where digit sum equals length","text":"Write a C# function to count number of substrings with the sum of digits equal to their length.","code":"public int CountSubstrings(string s, int n) {\n    int count = 0, sum = 0;\n    var mp = new Dictionary\u003Cint, int\u003E();\n    mp[0] = 1;\n\n    for (int i = 0; i \u003C n; i\u002B\u002B) {\n        sum \u002B= s[i] - \u00270\u0027;\n        count \u002B= mp.TryGetValue(sum - (i \u002B 1), out int value) ? value : 0;\n        if (mp.ContainsKey(sum - (i \u002B 1))) {\n            mp[sum - (i \u002B 1)]\u002B\u002B;\n        } else {\n            mp[sum - (i \u002B 1)] = 1;\n        }\n    }\n    return count;\n}","task_id":61,"test_setup_code":"","test_list":["Debug.Assert(CountSubstrings(\u0022112112\u0022, 6) == 6);","Debug.Assert(CountSubstrings(\u0022111\u0022, 3) == 6);","Debug.Assert(CountSubstrings(\u00221101112\u0022, 7) == 12);"],"challenge_test_list":[]}
{"name":"smallest-number","description":"Find the smallest number in a list using Python","text":"Write a C# function to find smallest number in a list.","code":"public static int SmallestNum(IEnumerable\u003Cint\u003E xs)\n{\n    return xs.Min();\n}","task_id":62,"test_setup_code":"","test_list":["Debug.Assert(SmallestNum(new int[] { 10, 20, 1, 45, 99 }) == 1);","Debug.Assert(SmallestNum(new int[] { 1, 2, 3 }) == 1);","Debug.Assert(SmallestNum(new int[] { 45, 46, 50, 60 }) == 45);"],"challenge_test_list":[]}
{"name":"max-diff-pairs","description":"Find max difference in tuple pairs","text":"Write a function to find the maximum difference between available pairs in the given tuple list.","code":"public static int MaxDifference(List\u003CTuple\u003Cint, int\u003E\u003E testList)\n{\n    var temp = testList.Select(pair =\u003E Math.Abs(pair.Item2 - pair.Item1)).ToList();\n    int res = temp.Max();\n    return res;\n}","task_id":63,"test_setup_code":"","test_list":["Debug.Assert(MaxDifference(new List\u003C(int, int)\u003E { (3, 5), (1, 7), (10, 3), (1, 2) }) == 7);","Debug.Assert(MaxDifference(new Tuple\u003Cint, int\u003E[] { Tuple.Create(4, 6), Tuple.Create(2, 17), Tuple.Create(9, 13), Tuple.Create(11, 12) }) == 15);","Debug.Assert(MaxDifference(new List\u003CTuple\u003Cint, int\u003E\u003E { Tuple.Create(12, 35), Tuple.Create(21, 27), Tuple.Create(13, 23), Tuple.Create(41, 22) }) == 23);"],"challenge_test_list":[]}
{"name":"sort-tuples-lambda","description":"Sort a list of tuples with a lambda function","text":"Write a function to sort a list of tuples using lambda.","code":"public List\u003CTuple\u003Cstring, int\u003E\u003E SubjectMarks(List\u003CTuple\u003Cstring, int\u003E\u003E subjectmarks) \n{\n    subjectmarks.Sort((x, y) =\u003E x.Item2.CompareTo(y.Item2));\n    return subjectmarks;\n}","task_id":64,"test_setup_code":"","test_list":["Debug.Assert(SubjectMarks(new Tuple\u003Cstring, int\u003E[] { Tuple.Create(\u0022English\u0022, 88), Tuple.Create(\u0022Science\u0022, 90), Tuple.Create(\u0022Maths\u0022, 97), Tuple.Create(\u0022Social sciences\u0022, 82) }).SequenceEqual(new Tuple\u003Cstring, int\u003E[] { Tuple.Create(\u0022Social sciences\u0022, 82), Tuple.Create(\u0022English\u0022, 88), Tuple.Create(\u0022Science\u0022, 90), Tuple.Create(\u0022Maths\u0022, 97) }));","Debug.Assert(SubjectMarks(new List\u003CTuple\u003Cstring, int\u003E\u003E { Tuple.Create(\u0022Telugu\u0022, 49), Tuple.Create(\u0022Hindhi\u0022, 54), Tuple.Create(\u0022Social\u0022, 33) }).SequenceEqual(new List\u003CTuple\u003Cstring, int\u003E\u003E { Tuple.Create(\u0022Social\u0022, 33), Tuple.Create(\u0022Telugu\u0022, 49), Tuple.Create(\u0022Hindhi\u0022, 54) }));","Debug.Assert(SubjectMarks(new (string, int)[]{(\u0022Physics\u0022, 96), (\u0022Chemistry\u0022, 97), (\u0022Biology\u0022, 45)}) == new (string, int)[]{(\u0022Biology\u0022, 45), (\u0022Physics\u0022, 96), (\u0022Chemistry\u0022, 97)});"],"challenge_test_list":[]}
{"name":"list-sum-recursion","description":"Recursive function to calculate list sum","text":"Write a function of recursion list sum.","code":"public int RecursiveListSum(object dataList)\r\n{\r\n    int total = 0;\r\n    foreach (var element in (System.Collections.IEnumerable)dataList)\r\n    {\r\n        if (element is System.Collections.IEnumerable \u0026\u0026 !(element is string))\r\n        {\r\n            total \u002B= RecursiveListSum(element);\r\n        }\r\n        else\r\n        {\r\n            total \u002B= Convert.ToInt32(element);\r\n        }\r\n    }\r\n    return total;\r\n}","task_id":65,"test_setup_code":"","test_list":["Debug.Assert(RecursiveListSum(new object[] { 1, 2, new object[] { 3, 4 }, new object[] { 5, 6 } }) == 21);","Debug.Assert(RecursiveListSum(new object[] { 7, 10, new object[] { 15, 14 }, new object[] { 19, 41 } }) == 106);","Debug.Assert(RecursiveListSum(new object[] { 10, 20, new object[] { 30, 40 }, new object[] { 50, 60 } }) == 210);"],"challenge_test_list":[]}
{"name":"count-positive-numbers","description":"Count positive numbers in a list using Python","text":"Write a C# function to count positive numbers in a list.","code":"public int PosCount(List\u003Cint\u003E list)  \n{  \n    int posCount = 0;  \n    foreach (int num in list)  \n    {  \n        if (num \u003E= 0)  \n        {  \n            posCount\u002B\u002B;  \n        }  \n    }  \n    return posCount;  \n}","task_id":66,"test_setup_code":"","test_list":["Debug.Assert(PosCount(new int[] { 1, -2, 3, -4 }) == 2);","Debug.Assert(PosCount(new int[] { 3, 4, 5, -1 }) == 3);","Debug.Assert(PosCount(new List\u003Cint\u003E { 1, 2, 3, 4 }) == 4);"],"challenge_test_list":[]}
{"name":"bell-number-partition","description":"Count the partitions of a set of bell numbers","text":"Write a function to find the number of ways to partition a set of bell numbers.","code":"public static int BellNumber(int n)   \n{   \n    int[,] bell = new int[n \u002B 1, n \u002B 1];   \n    bell[0, 0] = 1;   \n    for (int i = 1; i \u003C= n; i\u002B\u002B)   \n    {   \n        bell[i, 0] = bell[i - 1, i - 1];   \n        for (int j = 1; j \u003C= i; j\u002B\u002B)   \n        {   \n            bell[i, j] = bell[i - 1, j - 1] \u002B bell[i, j - 1];   \n        }   \n    }   \n    return bell[n, 0];   \n}","task_id":67,"test_setup_code":"","test_list":["Debug.Assert(BellNumber(2) == 2);","Debug.Assert(BellNumber(10) == 115975);","Debug.Assert(BellNumber(56) == 6775685320645824322581483068371419745979053216268760300);"],"challenge_test_list":[]}
{"name":"monotonic-check.py","description":"Check if an array is monotonic in Python","text":"Write a C# function to check whether the given array is monotonic or not.","code":"public bool IsMonotonic(int[] A) \n{ \n    return (A.Zip(A.Skip(1), (a, b) =\u003E a \u003C= b).All(x =\u003E x) || \n            A.Zip(A.Skip(1), (a, b) =\u003E a \u003E= b).All(x =\u003E x)); \n}","task_id":68,"test_setup_code":"","test_list":["Debug.Assert(IsMonotonic(new int[] { 6, 5, 4, 4 }) == true);","Debug.Assert(IsMonotonic(new int[] { 1, 2, 2, 3 }) == true);","Debug.Assert(IsMonotonic(new int[] { 1, 3, 2 }) == false);"],"challenge_test_list":[]}
{"name":"check-sublist.py","description":"Check if list contains specified sublist","text":"Write a function to check whether a list contains the given sublist or not.","code":"public bool IsSublist(List\u003Cint\u003E l, List\u003Cint\u003E s) \n{\n    bool subSet = false;\n    if (s.Count == 0) \n    {\n        subSet = true;\n    } \n    else if (s.SequenceEqual(l)) \n    {\n        subSet = true;\n    } \n    else if (s.Count \u003E l.Count) \n    {\n        subSet = false;\n    } \n    else \n    {\n        for (int i = 0; i \u003C l.Count; i\u002B\u002B) \n        {\n            if (l[i] == s[0]) \n            {\n                int n = 1;\n                while (n \u003C s.Count \u0026\u0026 l[i \u002B n] == s[n]) \n                {\n                    n\u002B\u002B;\n                }\n                if (n == s.Count) \n                {\n                    subSet = true;\n                }\n            }\n        }\n    }\n    return subSet;\n}","task_id":69,"test_setup_code":"","test_list":["Debug.Assert(IsSublist(new List\u003Cint\u003E { 2, 4, 3, 5, 7 }, new List\u003Cint\u003E { 3, 7 }) == false);","Debug.Assert(IsSublist(new List\u003Cint\u003E { 2, 4, 3, 5, 7 }, new List\u003Cint\u003E { 4, 3 }) == true);","Debug.Assert(IsSublist(new List\u003Cint\u003E { 2, 4, 3, 5, 7 }, new List\u003Cint\u003E { 1, 6 }) == false);"],"challenge_test_list":[]}
{"name":"equal-length-tuples","description":"Check if all tuples have equal length","text":"Write a function to find whether all the given tuples have equal length or not.","code":"public int FindEqualTuple(List\u003CTuple\u003E input, int k) {\n    int flag = 1;\n    foreach (var tuple in input) {\n        if (tuple.Length != k) {\n            flag = 0;\n            break;\n        }\n    }\n    return flag;\n}\n\npublic string GetEqual(List\u003CTuple\u003E input, int k) {\n    if (FindEqualTuple(input, k) == 1) {\n        return \u0022All tuples have same length\u0022;\n    } else {\n        return \u0022All tuples do not have same length\u0022;\n    }\n}","task_id":70,"test_setup_code":"","test_list":["Debug.Assert(GetEqual(new List\u003C(int, int, int)\u003E { (11, 22, 33), (44, 55, 66) }, 3) == \u0022All tuples have same length\u0022);","Debug.Assert(GetEqual(new List\u003CTuple\u003Cint, int, int\u003E\u003E { Tuple.Create(1, 2, 3), Tuple.Create(4, 5, 6, 7) }, 3) == \u0022All tuples do not have same length\u0022);","Debug.Assert(GetEqual(new List\u003CTuple\u003Cint, int\u003E\u003E { Tuple.Create(1, 2), Tuple.Create(3, 4) }, 2) == \u0022All tuples have same length\u0022);"],"challenge_test_list":[]}
{"name":"comb-sort-algorithm","description":"Sort a list using the comb sort algorithm","text":"Write a function to sort a list of elements using comb sort.","code":"public static List\u003Cint\u003E CombSort(List\u003Cint\u003E nums) {\n    double shrinkFact = 1.3;\n    int gaps = nums.Count;\n    bool swapped = true;\n    int i = 0;\n    while (gaps \u003E 1 || swapped) {\n        gaps = (int)(gaps / shrinkFact);\n        swapped = false;\n        i = 0;\n        while (gaps \u002B i \u003C nums.Count) {\n            if (nums[i] \u003E nums[i \u002B gaps]) {\n                int temp = nums[i];\n                nums[i] = nums[i \u002B gaps];\n                nums[i \u002B gaps] = temp;\n                swapped = true;\n            }\n            i\u002B\u002B;\n        }\n    }\n    return nums;\n}","task_id":71,"test_setup_code":"","test_list":["Debug.Assert(CombSort(new int[] { 5, 15, 37, 25, 79 }).SequenceEqual(new int[] { 5, 15, 25, 37, 79 }));","Debug.Assert(CombSort(new int[] { 41, 32, 15, 19, 22 }).SequenceEqual(new int[] { 15, 19, 22, 32, 41 }));","Debug.Assert(CombSort(new int[] { 99, 15, 13, 47 }).SequenceEqual(new int[] { 13, 15, 47, 99 }));"],"challenge_test_list":[]}
{"name":"diff-of-squares","description":"Check if a number is a difference of two squares","text":"Write a C# function to check whether the given number can be represented as difference of two squares or not.","code":"bool DifSquare(int n) \n{ \n    if (n % 4 != 2) \n    { \n        return true; \n    } \n    return false; \n}","task_id":72,"test_setup_code":"","test_list":["Debug.Assert(DifSquare(5) == true);","Debug.Assert(DifSquare(10) == false);","Debug.Assert(DifSquare(15) == true);"],"challenge_test_list":[]}
{"name":"split-string-regex","description":"Split a string by multiple delimiters using regex","text":"Write a function to split the given string with multiple delimiters by using regex.","code":"public List\u003Cstring\u003E MultipleSplit(string text) \n{\n    return Regex.Split(text, \u0022; |, |\\\\*|\\\\n\u0022).ToList();\n}","task_id":73,"test_setup_code":"","test_list":["Debug.Assert(MultipleSplit(\u0022Forces of the \\ndarkness*are coming into the play.\u0022) == new List\u003Cstring\u003E { \u0022Forces of the \u0022, \u0022darkness\u0022, \u0022are coming into the play.\u0022 });","Debug.Assert(MultipleSplit(\u0022Mi Box runs on the \\n Latest android*which has google assistance and chromecast.\u0022) == new List\u003Cstring\u003E { \u0022Mi Box runs on the \u0022, \u0022 Latest android\u0022, \u0022which has google assistance and chromecast.\u0022 });","Debug.Assert(MultipleSplit(\u0022Certain services\\nare subjected to change*over the seperate subscriptions.\u0022) == new List\u003Cstring\u003E { \u0022Certain services\u0022, \u0022are subjected to change\u0022, \u0022over the seperate subscriptions.\u0022 });"],"challenge_test_list":[]}
{"name":"check-pattern-seq","description":"Check if input follows the given patterns sequence","text":"Write a function to check whether it follows the sequence given in the patterns array.","code":"public bool IsSamePatterns(string[] colors, string[] patterns)    \n{    \n    if (colors.Length != patterns.Length) \n    {\n        return false;    \n    }    \n\n    Dictionary\u003Cstring, List\u003Cstring\u003E\u003E sdict = new Dictionary\u003Cstring, List\u003Cstring\u003E\u003E();\n    HashSet\u003Cstring\u003E pset = new HashSet\u003Cstring\u003E();\n    HashSet\u003Cstring\u003E sset = new HashSet\u003Cstring\u003E();    \n\n    for (int i = 0; i \u003C patterns.Length; i\u002B\u002B) \n    {\n        pset.Add(patterns[i]);\n        sset.Add(colors[i]);\n        \n        if (!sdict.ContainsKey(patterns[i])) \n        {\n            sdict[patterns[i]] = new List\u003Cstring\u003E();\n        }\n\n        sdict[patterns[i]].Add(colors[i]);\n    }\n\n    if (pset.Count != sset.Count) \n    {\n        return false;   \n    }   \n\n    foreach (var values in sdict.Values) \n    {\n        for (int i = 0; i \u003C values.Count - 1; i\u002B\u002B) \n        {\n            if (values[i] != values[i \u002B 1]) \n            {\n                return false;\n            }\n        }\n    }\n\n    return true; \n}","task_id":74,"test_setup_code":"","test_list":["Debug.Assert(IsSamePatterns(new string[] { \u0022red\u0022, \u0022green\u0022, \u0022green\u0022 }, new string[] { \u0022a\u0022, \u0022b\u0022, \u0022b\u0022 }) == true);","Debug.Assert(IsSamePatterns(new string[] { \u0022red\u0022, \u0022green\u0022, \u0022greenn\u0022 }, new string[] { \u0022a\u0022, \u0022b\u0022, \u0022b\u0022 }) == false);","Debug.Assert(IsSamePatterns(new string[] { \u0022red\u0022, \u0022green\u0022, \u0022greenn\u0022 }, new string[] { \u0022a\u0022, \u0022b\u0022}) == false);"],"challenge_test_list":[]}
{"name":"divisible-by-k","description":"Find tuples where all elements are divisible by k","text":"Write a function to find tuples which have all elements divisible by k from the given list of tuples.","code":"public string FindTuples(List\u003CTuple\u003Cint, int\u003E\u003E testList, int K) {\n    var res = testList.Where(sub =\u003E sub.All(ele =\u003E ele % K == 0)).ToList();\n    return res.ToString();\n}","task_id":75,"test_setup_code":"","test_list":["Debug.Assert(FindTuples(new List\u003CTuple\u003Cint, int, int\u003E\u003E { Tuple.Create(6, 24, 12), Tuple.Create(7, 9, 6), Tuple.Create(12, 18, 21) }, 6) == \u0022[(6, 24, 12)]\u0022);","Debug.Assert(FindTuples(new List\u003CValueTuple\u003Cint, int, int\u003E\u003E { (5, 25, 30), (4, 2, 3), (7, 8, 9) }, 5).ToString() == \u0022[(5, 25, 30)]\u0022);","Debug.Assert(FindTuples(new Tuple\u003Cint, int, int\u003E[] { Tuple.Create(7, 9, 16), Tuple.Create(8, 16, 4), Tuple.Create(19, 17, 18) }, 4) == \u0022[(8, 16, 4)]\u0022);"],"challenge_test_list":[]}
{"name":"count-squares-in-rect","description":"Count squares in a rectangle using a Python function","text":"Write a C# function to count the number of squares in a rectangle.","code":"public int CountSquares(int m, int n) {\n    if (n \u003C m) {\n        int temp = m;\n        m = n;\n        n = temp;\n    }\n    return (int)((m * (m \u002B 1) * (2 * m \u002B 1) / 6) \u002B ((n - m) * m * (m \u002B 1) / 2));\n}","task_id":76,"test_setup_code":"","test_list":["Debug.Assert(CountSquares(4, 3) == 20);","Debug.Assert(CountSquares(2, 2) == 5);","Debug.Assert(CountSquares(1, 1) == 1);"],"challenge_test_list":[]}
{"name":"even-odd-diff","description":"Calculate even and odd digit sum difference","text":"Write a C# function to find the difference between sum of even and odd digits.","code":"public bool IsDiff(int n) \n{ \n    return (n % 11 == 0); \n}","task_id":77,"test_setup_code":"","test_list":["Debug.Assert(IsDiff(12345) == false);","Debug.Assert(IsDiff(1212112) == true);","Debug.Assert(IsDiff(1212) == false);"],"challenge_test_list":[]}
{"name":"odd-bits-count","description":"Count integers with an odd number of set bits","text":"Write a C# function to find number of integers with odd number of set bits.","code":"public static double Count_With_Odd_SetBits(int n) \n{ \n    if (n % 2 != 0) \n    { \n        return (n \u002B 1) / 2.0; \n    } \n    int count = Convert.ToString(n, 2).Count(c =\u003E c == \u00271\u0027); \n    double ans = n / 2.0; \n    if (count % 2 != 0) \n    { \n        ans \u002B= 1; \n    } \n    return ans; \n}","task_id":78,"test_setup_code":"","test_list":["Debug.Assert(Count_With_Odd_SetBits(5) == 3);","Debug.Assert(Count_With_Odd_SetBits(10) == 5);","Debug.Assert(Count_With_Odd_SetBits(15) == 8);"],"challenge_test_list":[]}
{"name":"check-odd-length","description":"Check if a word\u0027s length is odd or even","text":"Write a C# function to check whether the length of the word is odd or not.","code":"public bool WordLen(string s) \n{ \n    string[] words = s.Split(\u0027 \u0027); \n    foreach (string word in words) \n    { \n        if (word.Length % 2 != 0) \n        { \n            return true; \n        } \n        else \n        { \n            return false; \n        } \n    } \n    return false; \n}","task_id":79,"test_setup_code":"","test_list":["Debug.Assert(WordLen(\u0022Hadoop\u0022) == false);","Debug.Assert(WordLen(\u0022great\u0022) == true);","Debug.Assert(WordLen(\u0022structure\u0022) == true);"],"challenge_test_list":[]}
{"name":"nth-tetra-num","description":"Find the nth tetrahedral number efficiently","text":"Write a function to find the nth tetrahedral number.","code":"public static double TetrahedralNumber(int n) \n{ \n    return (n * (n \u002B 1) * (n \u002B 2)) / 6.0; \n}","task_id":80,"test_setup_code":"","test_list":["Debug.Assert(TetrahedralNumber(5) == 35.0);","Debug.Assert(TetrahedralNumber(6) == 56.0);","Debug.Assert(TetrahedralNumber(7) == 84.0);"],"challenge_test_list":[]}
{"name":"zip-two-tuples","description":"Zip two given tuples into a single tuple","text":"Write a function to zip the two given tuples.","code":"List\u003CTuple\u003CT, T\u003E\u003E ZipTuples\u003CT\u003E(Tuple\u003CT\u003E[] testTup1, Tuple\u003CT\u003E[] testTup2) \n{\n    List\u003CTuple\u003CT, T\u003E\u003E res = new List\u003CTuple\u003CT, T\u003E\u003E();\n    for (int i = 0; i \u003C testTup1.Length; i\u002B\u002B) \n    {\n        res.Add(Tuple.Create(testTup1[i], testTup2[i % testTup2.Length]));\n    }\n    return res;\n}","task_id":81,"test_setup_code":"","test_list":["Debug.Assert(ZipTuples(new int[] { 7, 8, 4, 5, 9, 10 }, new int[] { 1, 5, 6 }).SequenceEqual(new List\u003CTuple\u003Cint, int\u003E\u003E { Tuple.Create(7, 1), Tuple.Create(8, 5), Tuple.Create(4, 6), Tuple.Create(5, 1), Tuple.Create(9, 5), Tuple.Create(10, 6) }));","Debug.Assert(ZipTuples(new int[] { 8, 9, 5, 6, 10, 11 }, new int[] { 2, 6, 7 }).SequenceEqual(new List\u003CTuple\u003Cint, int\u003E\u003E { Tuple.Create(8, 2), Tuple.Create(9, 6), Tuple.Create(5, 7), Tuple.Create(6, 2), Tuple.Create(10, 6), Tuple.Create(11, 7) }));","Debug.Assert(ZipTuples((9, 10, 6, 7, 11, 12), (3, 7, 8)).SequenceEqual(new List\u003CTuple\u003Cint, int\u003E\u003E { Tuple.Create(9, 3), Tuple.Create(10, 7), Tuple.Create(6, 8), Tuple.Create(7, 3), Tuple.Create(11, 7), Tuple.Create(12, 8) }));"],"challenge_test_list":[]}
{"name":"sphere-volume","description":"Calculate the volume of a sphere given its radius","text":"Write a function to find the volume of a sphere.","code":"public double VolumeSphere(double r)\n{\n    double volume = (4.0 / 3.0) * Math.PI * r * r * r;\n    return volume;\n}","task_id":82,"test_setup_code":"","test_list":["Debug.Assert(VolumeSphere(10) == 4188.790204786391);","Debug.Assert(VolumeSphere(25) == 65449.84694978735);","Debug.Assert(VolumeSphere(20) == 33510.32163829113);"],"challenge_test_list":[]}
{"name":"char-sum-finder","description":"Find a character from the sum of string characters","text":"Write a C# function to find the character made by adding all the characters of the given string.","code":"public char GetChar(string strr)  \n{  \n    int summ = 0;  \n    for (int i = 0; i \u003C strr.Length; i\u002B\u002B)  \n    {  \n        summ \u002B= (strr[i] - \u0027a\u0027 \u002B 1);  \n    }  \n    if (summ % 26 == 0)  \n    {  \n        return \u0027z\u0027;  \n    }  \n    else  \n    {  \n        summ = summ % 26;  \n        return (char)(\u0027a\u0027 \u002B summ - 1);  \n    }  \n}","task_id":83,"test_setup_code":"","test_list":["Debug.Assert(GetChar(\u0022abc\u0022) == \u0022f\u0022);","Debug.Assert(GetChar(\u0022gfg\u0022) == \u0022t\u0022);","Debug.Assert(GetChar(\u0022ab\u0022) == \u0022c\u0022);"],"challenge_test_list":[]}
{"name":"newman-conway","description":"Find the n-th number in the Newman Conway sequence","text":"Write a function to find the n-th number in newman conway sequence.","code":"public int Sequence(int n) \n{ \n    if (n == 1 || n == 2) \n    {\n        return 1; \n    } \n    else \n    {\n        return Sequence(Sequence(n - 1)) \u002B Sequence(n - Sequence(n - 1)); \n    } \n}","task_id":84,"test_setup_code":"","test_list":["Debug.Assert(Sequence(10) == 6);","Debug.Assert(Sequence(2) == 1);","Debug.Assert(Sequence(3) == 2);"],"challenge_test_list":[]}
{"name":"surface-area-sphere","description":"Calculate the surface area of a sphere","text":"Write a function to find the surface area of a sphere.","code":"public static double SurfaceAreaSphere(double r)\n{\n    double surfaceArea = 4 * Math.PI * r * r;\n    return surfaceArea;\n}","task_id":85,"test_setup_code":"","test_list":["Debug.Assert(SurfaceAreaSphere(10) == 1256.6370614359173);","Debug.Assert(SurfaceAreaSphere(15) == 2827.4333882308138);","Debug.Assert(SurfaceAreaSphere(20) == 5026.548245743669);"],"challenge_test_list":[]}
{"name":"nth-centered-hex","description":"Find the nth centered hexagonal number","text":"Write a function to find nth centered hexagonal number.","code":"public int CenteredHexagonalNumber(int n)  \n{  \n    return 3 * n * (n - 1) \u002B 1;  \n}","task_id":86,"test_setup_code":"","test_list":["Debug.Assert(CenteredHexagonalNumber(10) == 271);","Debug.Assert(CenteredHexagonalNumber(2) == 7);","Debug.Assert(CenteredHexagonalNumber(9) == 217);"],"challenge_test_list":[]}
{"name":"merge-three-dicts","description":"Merge three dictionaries into one expression","text":"Write a function to merge three dictionaries into a single expression.","code":"public static Dictionary\u003Cstring, object\u003E MergeDictionariesThree(Dictionary\u003Cstring, object\u003E dict1, Dictionary\u003Cstring, object\u003E dict2, Dictionary\u003Cstring, object\u003E dict3) {\n    var mergedDict = new Dictionary\u003Cstring, object\u003E(dict1);\n    foreach (var kvp in dict2) {\n        mergedDict[kvp.Key] = kvp.Value;\n    }\n    foreach (var kvp in dict3) {\n        mergedDict[kvp.Key] = kvp.Value;\n    }\n    return mergedDict;\n}","task_id":87,"test_setup_code":"","test_list":["Debug.Assert(MergeDictionariesThree(new Dictionary\u003Cstring, string\u003E { { \u0022R\u0022, \u0022Red\u0022 }, { \u0022B\u0022, \u0022Black\u0022 }, { \u0022P\u0022, \u0022Pink\u0022 } }, new Dictionary\u003Cstring, string\u003E { { \u0022G\u0022, \u0022Green\u0022 }, { \u0022W\u0022, \u0022White\u0022 } }, new Dictionary\u003Cstring, string\u003E { { \u0022O\u0022, \u0022Orange\u0022 }, { \u0022W\u0022, \u0022White\u0022 }, { \u0022B\u0022, \u0022Black\u0022 } }) == new Dictionary\u003Cstring, string\u003E { { \u0022B\u0022, \u0022Black\u0022 }, { \u0022R\u0022, \u0022Red\u0022 }, { \u0022P\u0022, \u0022Pink\u0022 }, { \u0022G\u0022, \u0022Green\u0022 }, { \u0022W\u0022, \u0022White\u0022 }, { \u0022O\u0022, \u0022Orange\u0022 } });","Debug.Assert(MergeDictionariesThree(new Dictionary\u003Cstring, string\u003E { { \u0022R\u0022, \u0022Red\u0022 }, { \u0022B\u0022, \u0022Black\u0022 }, { \u0022P\u0022, \u0022Pink\u0022 } }, \n                                     new Dictionary\u003Cstring, string\u003E { { \u0022G\u0022, \u0022Green\u0022 }, { \u0022W\u0022, \u0022White\u0022 } }, \n                                     new Dictionary\u003Cstring, string\u003E { { \u0022L\u0022, \u0022lavender\u0022 }, { \u0022B\u0022, \u0022Blue\u0022 } }) \n                                     .SequenceEqual(new Dictionary\u003Cstring, string\u003E { { \u0022W\u0022, \u0022White\u0022 }, { \u0022P\u0022, \u0022Pink\u0022 }, { \u0022B\u0022, \u0022Black\u0022 }, { \u0022R\u0022, \u0022Red\u0022 }, { \u0022G\u0022, \u0022Green\u0022 }, { \u0022L\u0022, \u0022lavender\u0022 } }));","Debug.Assert(MergeDictionariesThree(new Dictionary\u003Cstring, string\u003E { {\u0022R\u0022, \u0022Red\u0022}, {\u0022B\u0022, \u0022Black\u0022}, {\u0022P\u0022, \u0022Pink\u0022} }, new Dictionary\u003Cstring, string\u003E { {\u0022L\u0022, \u0022lavender\u0022}, {\u0022B\u0022, \u0022Blue\u0022} }, new Dictionary\u003Cstring, string\u003E { {\u0022G\u0022, \u0022Green\u0022}, {\u0022W\u0022, \u0022White\u0022} }).SequenceEqual(new Dictionary\u003Cstring, string\u003E { {\u0022B\u0022, \u0022Black\u0022}, {\u0022P\u0022, \u0022Pink\u0022}, {\u0022R\u0022, \u0022Red\u0022}, {\u0022G\u0022, \u0022Green\u0022}, {\u0022L\u0022, \u0022lavender\u0022}, {\u0022W\u0022, \u0022White\u0022} }));"],"challenge_test_list":[]}
{"name":"element-frequency","description":"Count element frequencies in a list with a function","text":"Write a function to get the frequency of the elements in a list.","code":"using System.Collections.Generic;\n\npublic Dictionary\u003CT, int\u003E FreqCount\u003CT\u003E(List\u003CT\u003E list1)\n{\n    Dictionary\u003CT, int\u003E freqCount = new Dictionary\u003CT, int\u003E();\n\n    foreach (T item in list1)\n    {\n        if (freqCount.ContainsKey(item))\n        {\n            freqCount[item]\u002B\u002B;\n        }\n        else\n        {\n            freqCount[item] = 1;\n        }\n    }\n\n    return freqCount;\n}","task_id":88,"test_setup_code":"","test_list":["Debug.Assert(FreqCount(new int[] { 10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30 }).SequenceEqual(new Dictionary\u003Cint, int\u003E { { 10, 4 }, { 20, 4 }, { 40, 2 }, { 50, 2 }, { 30, 1 } }));","Debug.Assert(FreqCount(new int[] { 1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4 }).SequenceEqual(new Dictionary\u003Cint, int\u003E { { 1, 3 }, { 2, 2 }, { 3, 3 }, { 4, 3 } }));","Debug.Assert(FreqCount(new int[] { 5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5 }).SequenceEqual(new Dictionary\u003Cint, int\u003E { { 10, 1 }, { 5, 3 }, { 6, 2 }, { 7, 2 }, { 4, 2 }, { 9, 2 } }));"],"challenge_test_list":[]}
{"name":"closest-smaller-n","description":"Find the nearest smaller number to n","text":"Write a function to find the closest smaller number than n.","code":"public static int ClosestNum(int N) \n{\n    return N - 1;\n}","task_id":89,"test_setup_code":"","test_list":["Debug.Assert(ClosestNum(11) == 10);","Debug.Assert(ClosestNum(7) == 6);","Debug.Assert(ClosestNum(12) == 11);"],"challenge_test_list":[]}
{"name":"longest-word-fnd","description":"Find the length of the longest word in a string","text":"Write a C# function to find the length of the longest word.","code":"public static int LenLog(List\u003Cstring\u003E list1)\n{\n    int max = list1[0].Length;\n    foreach (var i in list1)\n    {\n        if (i.Length \u003E max)\n        {\n            max = i.Length;\n        }\n    }\n    return max;\n}","task_id":90,"test_setup_code":"","test_list":["Debug.Assert(LenLog(new string[] { \u0022python\u0022, \u0022PHP\u0022, \u0022bigdata\u0022 }) == 7);","Debug.Assert(LenLog(new string[] { \u0022a\u0022, \u0022ab\u0022, \u0022abc\u0022 }) == 3);","Debug.Assert(LenLog(new string[] { \u0022small\u0022, \u0022big\u0022, \u0022tall\u0022 }) == 5);"],"challenge_test_list":[]}
{"name":"substring-checker","description":"Check if a substring exists in a list of strings","text":"Write a function to check if a substring is present in a given list of string values.","code":"public bool FindSubstring(string[] str1, string subStr) \n{\n    return str1.Any(s =\u003E s.Contains(subStr));\n}","task_id":91,"test_setup_code":"","test_list":["Debug.Assert(FindSubstring(new string[] { \u0022red\u0022, \u0022black\u0022, \u0022white\u0022, \u0022green\u0022, \u0022orange\u0022 }, \u0022ack\u0022) == true);","Debug.Assert(FindSubstring(new string[] { \u0022red\u0022, \u0022black\u0022, \u0022white\u0022, \u0022green\u0022, \u0022orange\u0022 }, \u0022abc\u0022) == false);","Debug.Assert(FindSubstring(new string[] { \u0022red\u0022, \u0022black\u0022, \u0022white\u0022, \u0022green\u0022, \u0022orange\u0022 }, \u0022ange\u0022) == true);"],"challenge_test_list":[]}
{"name":"undulating-check","description":"Check if a number is undulating or not","text":"Write a function to check whether the given number is undulating or not.","code":"bool IsUndulating(List\u003Cint\u003E n) \n{ \n    if (n.Count \u003C= 2) \n    { \n        return false; \n    } \n    for (int i = 2; i \u003C n.Count; i\u002B\u002B) \n    { \n        if (n[i - 2] != n[i]) \n        { \n            return false; \n        } \n    } \n    return true; \n}","task_id":92,"test_setup_code":"","test_list":["Debug.Assert(IsUndulating(\u00221212121\u0022) == true);","Debug.Assert(IsUndulating(\u00221991\u0022) == false);","Debug.Assert(IsUndulating(\u0022121\u0022) == true);"],"challenge_test_list":[]}
{"name":"power-of-a-b","description":"Calculate a raised to the power of b","text":"Write a function to calculate the value of \u0027a\u0027 to the power \u0027b\u0027.","code":"public static int Power(int a, int b)\n{\n    if (b == 0)\n    {\n        return 1;\n    }\n    else if (a == 0)\n    {\n        return 0;\n    }\n    else if (b == 1)\n    {\n        return a;\n    }\n    else\n    {\n        return a * Power(a, b - 1);\n    }\n}","task_id":93,"test_setup_code":"","test_list":["Debug.Assert(Power(3, 4) == 81);","Debug.Assert(Power(2, 3) == 8);","Debug.Assert(Power(5, 5) == 3125);"],"challenge_test_list":[]}
{"name":"extract-min-index","description":"Extract minimum index value from given tuples","text":"Write a function to extract the index minimum value record from the given tuples.","code":"public static T indexMinimum\u003CT\u003E(List\u003CTuple\u003CT, int\u003E\u003E testList)\n{\n    var res = testList.OrderBy(x =\u003E x.Item2).First().Item1;\n    return res;\n}","task_id":94,"test_setup_code":"","test_list":["Debug.Assert(index_minimum(new Tuple\u003Cstring, int\u003E[] { Tuple.Create(\u0022Rash\u0022, 143), Tuple.Create(\u0022Manjeet\u0022, 200), Tuple.Create(\u0022Varsha\u0022, 100) }) == \u0022Varsha\u0022);","Debug.Assert(index_minimum(new Tuple\u003Cstring, int\u003E[] { Tuple.Create(\u0022Yash\u0022, 185), Tuple.Create(\u0022Dawood\u0022, 125), Tuple.Create(\u0022Sanya\u0022, 175) }) == \u0022Dawood\u0022);","Debug.Assert(index_minimum(new Tuple\u003Cstring, int\u003E[] { Tuple.Create(\u0022Sai\u0022, 345), Tuple.Create(\u0022Salman\u0022, 145), Tuple.Create(\u0022Ayesha\u0022, 96) }) == \u0022Ayesha\u0022);"],"challenge_test_list":[]}
{"name":"min-sublist-length","description":"Find minimum length of a sublist in Python","text":"Write a C# function to find the minimum length of sublist.","code":"public int FindMinLength(List\u003Cstring\u003E lst)  \n{  \n    int minLength = lst.Min(x =\u003E x.Length);  \n    return minLength;  \n}","task_id":95,"test_setup_code":"","test_list":["Debug.Assert(FindMinLength(new int[][] { new int[] { 1 }, new int[] { 1, 2 } }) == 1);","Debug.Assert(FindMinLength(new int[][] { new int[] { 1, 2 }, new int[] { 1, 2, 3 }, new int[] { 1, 2, 3, 4 } }) == 2);","Debug.Assert(FindMinLength(new int[][] { new int[] { 3, 3, 3 }, new int[] { 4, 4, 4, 4 } }) == 3);"],"challenge_test_list":[]}
{"name":"divisor-count.py","description":"Count divisors of a given integer using Python","text":"Write a C# function to find the number of divisors of a given integer.","code":"public int Divisor(int n)\n{\n    int x = 0;\n    for (int i = 1; i \u003C= n; i\u002B\u002B)\n    {\n        if (n % i == 0)\n        {\n            x\u002B\u002B;\n        }\n    }\n    return x;\n}","task_id":96,"test_setup_code":"","test_list":["Debug.Assert(Divisor(15) == 4);","Debug.Assert(Divisor(12) == 6);","Debug.Assert(Divisor(9) == 3);"],"challenge_test_list":[]}
{"name":"freq-count-lists","description":"Count frequency of elements in a list of lists","text":"Write a function to find frequency count of list of lists.","code":"public Dictionary\u003Cint, int\u003E FrequencyLists(List\u003CList\u003Cint\u003E\u003E list1) \n{\n    list1 = list1.SelectMany(sublist =\u003E sublist).ToList();\n    Dictionary\u003Cint, int\u003E dicData = new Dictionary\u003Cint, int\u003E();\n    foreach (int num in list1) \n    {\n        if (dicData.ContainsKey(num)) \n        {\n            dicData[num] \u002B= 1;\n        } \n        else \n        {\n            dicData[num] = 1;\n        }\n    }\n    return dicData;\n}","task_id":97,"test_setup_code":"","test_list":["Debug.Assert(FrequencyLists(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 1, 2, 3, 2 }, new List\u003Cint\u003E { 4, 5, 6, 2 }, new List\u003Cint\u003E { 7, 8, 9, 5 } }).SequenceEqual(new Dictionary\u003Cint, int\u003E { { 1, 1 }, { 2, 3 }, { 3, 1 }, { 4, 1 }, { 5, 2 }, { 6, 1 }, { 7, 1 }, { 8, 1 }, { 9, 1 } }));","Debug.Assert(FrequencyLists(new int[][] { new int[] { 1, 2, 3, 4 }, new int[] { 5, 6, 7, 8 }, new int[] { 9, 10, 11, 12 } }).SequenceEqual(new Dictionary\u003Cint, int\u003E { { 1, 1 }, { 2, 1 }, { 3, 1 }, { 4, 1 }, { 5, 1 }, { 6, 1 }, { 7, 1 }, { 8, 1 }, { 9, 1 }, { 10, 1 }, { 11, 1 }, { 12, 1 } }));","Debug.Assert(FrequencyLists(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 20, 30, 40, 17 }, new List\u003Cint\u003E { 18, 16, 14, 13 }, new List\u003Cint\u003E { 10, 20, 30, 40 } }) .SequenceEqual(new Dictionary\u003Cint, int\u003E { { 20, 2 }, { 30, 2 }, { 40, 2 }, { 17, 1 }, { 18, 1 }, { 16, 1 }, { 14, 1 }, { 13, 1 }, { 10, 1 } }));"],"challenge_test_list":[]}
{"name":"multiply-and-divide","description":"Multiply list numbers and divide by list length","text":"Write a function to multiply all the numbers in a list and divide with the length of the list.","code":"public static double MultiplyNum(List\u003Cint\u003E numbers)  \n{  \n    double total = 1;  \n    foreach (int x in numbers)  \n    {  \n        total *= x;  \n    }  \n    return total / numbers.Count;  \n}","task_id":98,"test_setup_code":"","test_list":["Debug.Assert(MultiplyNum(new double[] { 8, 2, 3, -1, 7 }) == -67.2);","Debug.Assert(MultiplyNum(-10, -20, -30) == -2000.0);","Debug.Assert(MultiplyNum(new Tuple\u003Cint, int, int\u003E(19, 15, 18)) == 1710.0);"],"challenge_test_list":[]}
{"name":"decimal-to-binary","description":"Convert decimal to binary using a function","text":"Write a function to convert the given decimal number to its binary equivalent.","code":"public static string DecimalToBinary(int n) \n{ \n    return Convert.ToString(n, 2); \n}","task_id":99,"test_setup_code":"","test_list":["Debug.Assert(DecimalToBinary(8) == \u00221000\u0022);","Debug.Assert(DecimalToBinary(18) == \u002210010\u0022);","Debug.Assert(DecimalToBinary(7) == \u0022111\u0022);"],"challenge_test_list":[]}
{"name":"next-palindrome","description":"Find the next smallest palindrome number","text":"Write a function to find the next smallest palindrome of a specified number.","code":"public static long NextSmallestPalindrome(long num)\n{\n    for (long i = num \u002B 1; i \u003C long.MaxValue; i\u002B\u002B)\n    {\n        if (i.ToString() == new string(i.ToString().Reverse().ToArray()))\n        {\n            return i;\n        }\n    }\n    return -1; // In case no palindrome is found within the range\n}","task_id":100,"test_setup_code":"","test_list":["Debug.Assert(NextSmallestPalindrome(99) == 101);","Debug.Assert(NextSmallestPalindrome(1221) == 1331);","Debug.Assert(NextSmallestPalindrome(120) == 121);"],"challenge_test_list":[]}
{"name":"kth-element-finder","description":"Find the kth element in an array","text":"Write a function to find the kth element in the given array.","code":"public int KthElement(int[] arr, int n, int k) {\n    for (int i = 0; i \u003C n; i\u002B\u002B) {\n        for (int j = 0; j \u003C n - i - 1; j\u002B\u002B) {\n            if (arr[j] \u003E arr[j \u002B 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j \u002B 1];\n                arr[j \u002B 1] = temp;\n            }\n        }\n    }\n    return arr[k - 1];\n}","task_id":101,"test_setup_code":"","test_list":["Debug.Assert(KthElement(new int[] { 12, 3, 5, 7, 19 }, 5, 2) == 3);","Debug.Assert(KthElement(new int[] { 17, 24, 8, 23 }, 4, 3) == 8);","Debug.Assert(KthElement(new int[] { 16, 21, 25, 36, 4 }, 5, 4) == 36);"],"challenge_test_list":[]}
{"name":"snake-to-camel","description":"Convert snake case to camel case string","text":"Write a function to convert snake case string to camel case string.","code":"public string SnakeToCamel(string word)\n{\n    return string.Concat(word.Split(\u0027_\u0027).Select(x =\u003E char.ToUpper(x[0]) \u002B x.Substring(1)));\n}","task_id":102,"test_setup_code":"","test_list":["Debug.Assert(SnakeToCamel(\u0022python_program\u0022) == \u0022PythonProgram\u0022);","Debug.Assert(SnakeToCamel(\u0022python_language\u0022) == \u0022PythonLanguage\u0022);","Debug.Assert(SnakeToCamel(\u0022programming_language\u0022) == \u0022ProgrammingLanguage\u0022);"],"challenge_test_list":[]}
{"name":"eulerian-n-m.py","description":"Calculate Eulerian number a(n, m) in a function","text":"Write a function to find eulerian number a(n, m).","code":"int EulerianNum(int n, int m) \n{ \n    if (m \u003E= n || n == 0) \n        return 0; \n    if (m == 0) \n        return 1; \n    return ((n - m) * EulerianNum(n - 1, m - 1) \u002B (m \u002B 1) * EulerianNum(n - 1, m)); \n}","task_id":103,"test_setup_code":"","test_list":["Debug.Assert(EulerianNum(3, 1) == 4);","Debug.Assert(EulerianNum(4, 1) == 11);","Debug.Assert(EulerianNum(5, 3) == 26);"],"challenge_test_list":[]}
{"name":"sort-sublists-using-lambda","description":"Sort sublists of strings using a lambda function","text":"Write a function to sort each sublist of strings in a given list of lists using lambda function.","code":"public List\u003CList\u003CT\u003E\u003E SortSublists\u003CT\u003E(List\u003CList\u003CT\u003E\u003E inputList) where T : IComparable\r\n{\r\n    var result = inputList.Select(x =\u003E x.OrderBy(y =\u003E y).ToList()).ToList();\r\n    return result;\r\n}","task_id":104,"test_setup_code":"","test_list":["Debug.Assert(SortSublists(new List\u003CList\u003Cstring\u003E\u003E() { new List\u003Cstring\u003E() { \u0022green\u0022, \u0022orange\u0022 }, new List\u003Cstring\u003E() { \u0022black\u0022, \u0022white\u0022 }, new List\u003Cstring\u003E() { \u0022white\u0022, \u0022black\u0022, \u0022orange\u0022 } }).SequenceEqual(new List\u003CList\u003Cstring\u003E\u003E() { new List\u003Cstring\u003E() { \u0022green\u0022, \u0022orange\u0022 }, new List\u003Cstring\u003E() { \u0022black\u0022, \u0022white\u0022 }, new List\u003Cstring\u003E() { \u0022black\u0022, \u0022orange\u0022, \u0022white\u0022 } }));","Debug.Assert(SortSublists(new List\u003CList\u003Cstring\u003E\u003E { new List\u003Cstring\u003E { \u0022 red \u0022, \u0022green\u0022 }, new List\u003Cstring\u003E { \u0022blue \u0022, \u0022 black\u0022 }, new List\u003Cstring\u003E { \u0022 orange\u0022, \u0022brown\u0022 } }).SequenceEqual(new List\u003CList\u003Cstring\u003E\u003E { new List\u003Cstring\u003E { \u0022 red \u0022, \u0022green\u0022 }, new List\u003Cstring\u003E { \u0022 black\u0022, \u0022blue \u0022 }, new List\u003Cstring\u003E { \u0022 orange\u0022, \u0022brown\u0022 } }));","Debug.Assert(SortSublists(new List\u003CList\u003Cstring\u003E\u003E { new List\u003Cstring\u003E { \u0022zilver\u0022, \u0022gold\u0022 }, new List\u003Cstring\u003E { \u0022magnesium\u0022, \u0022aluminium\u0022 }, new List\u003Cstring\u003E { \u0022steel\u0022, \u0022bronze\u0022 } }).SequenceEqual(new List\u003CList\u003Cstring\u003E\u003E { new List\u003Cstring\u003E { \u0022gold\u0022, \u0022zilver\u0022 }, new List\u003Cstring\u003E { \u0022aluminium\u0022, \u0022magnesium\u0022 }, new List\u003Cstring\u003E { \u0022bronze\u0022, \u0022steel\u0022 } }));"],"challenge_test_list":[]}
{"name":"count-true-booleans","description":"Count True Booleans in a Given List","text":"Write a C# function to count true booleans in the given list.","code":"public int Count(List\u003Cint\u003E lst)   \n{   \n    return lst.Sum();   \n}","task_id":105,"test_setup_code":"","test_list":["Debug.Assert(Count(new bool[] { true, false, true }) == 2);","Debug.Assert(Count(new bool[]{ false, false }) == 0);","Debug.Assert(Count(new List\u003Cbool\u003E { true, true, true }) == 3);"],"challenge_test_list":[]}
{"name":"add-list-to-tuple","description":"Add a list to specified tuples in a function","text":"Write a function to add the given list to the given tuples.","code":"public Tuple\u003CT\u003E AddLists\u003CT\u003E(List\u003CT\u003E testList, Tuple\u003CT\u003E testTup)\n{\n    var res = testTup.ToList().Concat(testList).ToArray();\n    return Tuple.Create(res);\n}","task_id":106,"test_setup_code":"","test_list":["Debug.Assert(AddLists(new List\u003Cint\u003E { 5, 6, 7 }, new Tuple\u003Cint, int\u003E(9, 10)).SequenceEqual(new Tuple\u003Cint, int, int, int, int\u003E(9, 10, 5, 6, 7)));","Debug.Assert(AddLists(new List\u003Cint\u003E { 6, 7, 8 }, new Tuple\u003Cint, int\u003E(10, 11)).SequenceEqual(new Tuple\u003Cint, int, int, int, int\u003E(10, 11, 6, 7, 8)));","Debug.Assert(AddLists(new List\u003Cint\u003E { 7, 8, 9 }, new Tuple\u003Cint, int\u003E(11, 12)).SequenceEqual(new Tuple\u003Cint, int, int, int, int\u003E(11, 12, 7, 8, 9)));"],"challenge_test_list":[]}
{"name":"count-hex-range","description":"Count hexadecimal numbers within a specified range","text":"Write a C# function to count hexadecimal numbers for a given range.","code":"public int CountHexadecimal(int L, int R)  \n{  \n    int count = 0;  \n    for (int i = L; i \u003C= R; i\u002B\u002B)  \n    {  \n        if (i \u003E= 10 \u0026\u0026 i \u003C= 15)  \n        {  \n            count\u002B\u002B;  \n        }  \n        else if (i \u003E 15)  \n        {  \n            int k = i;  \n            while (k != 0)  \n            {  \n                if (k % 16 \u003E= 10)  \n                {  \n                    count\u002B\u002B;  \n                }  \n                k /= 16;  \n            }  \n        }  \n    }  \n    return count;  \n}","task_id":107,"test_setup_code":"","test_list":["Debug.Assert(CountHexadecimal(10, 15) == 6);","Debug.Assert(CountHexadecimal(2, 4) == 0);","Debug.Assert(CountHexadecimal(15, 16) == 1);"],"challenge_test_list":[]}
{"name":"merge-sorted-iter","description":"Merge sorted inputs into one sorted iterator","text":"Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.","code":"using System.Collections.Generic;\nusing System.Linq;\n\npublic class Solution\n{\n    public IList\u003Cint\u003E MergeSortedList(IList\u003Cint\u003E num1, IList\u003Cint\u003E num2, IList\u003Cint\u003E num3)\n    {\n        num1 = num1.OrderBy(x =\u003E x).ToList();\n        num2 = num2.OrderBy(x =\u003E x).ToList();\n        num3 = num3.OrderBy(x =\u003E x).ToList();\n        var result = num1.Concat(num2).Concat(num3).OrderBy(x =\u003E x);\n        return result.ToList();\n    }\n}","task_id":108,"test_setup_code":"","test_list":["Debug.Assert(MergeSortedList(new int[] { 25, 24, 15, 4, 5, 29, 110 }, new int[] { 19, 20, 11, 56, 25, 233, 154 }, new int[] { 24, 26, 54, 48 }) == new int[] { 4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233 });","Debug.Assert(MergeSortedList(new List\u003Cint\u003E { 1, 3, 5, 6, 8, 9 }, new List\u003Cint\u003E { 2, 5, 7, 11 }, new List\u003Cint\u003E { 1, 4, 7, 8, 12 }).SequenceEqual(new List\u003Cint\u003E { 1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12 }));","Debug.Assert(MergeSortedList(new List\u003Cint\u003E { 18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1 }, new List\u003Cint\u003E { 25, 35, 22, 85, 14, 65, 75, 25, 58 }, new List\u003Cint\u003E { 12, 74, 9, 50, 61, 41 }).SequenceEqual(new List\u003Cint\u003E { 1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85 }));"],"challenge_test_list":[]}
{"name":"binary-rotations","description":"Count rotations of an odd binary string value","text":"Write a C# function to find the count of rotations of a binary string with odd value.","code":"public int OddEquivalent(string s, int n) \n{ \n    int count = 0; \n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    { \n        if (s[i] == \u00271\u0027) \n        { \n            count\u002B\u002B; \n        } \n    } \n    return count; \n}","task_id":109,"test_setup_code":"","test_list":["Debug.Assert(OddEquivalent(\u0022011001\u0022, 6) == 3);","Debug.Assert(OddEquivalent(\u002211011\u0022, 5) == 4);","Debug.Assert(OddEquivalent(\u00221010\u0022, 4) == 2);"],"challenge_test_list":[]}
{"name":"missing-ranges","description":"Extract missing ranges from a specified interval","text":"Write a function to extract the ranges that are missing from the given list with the given start range and end range values.","code":"public List\u003C(int, int)\u003E ExtractMissing(List\u003C(int, int)\u003E testList, int strtVal, int stopVal) \n{\n    var res = new List\u003C(int, int)\u003E();\n    foreach (var sub in testList) \n    {\n        if (sub.Item1 \u003E strtVal) \n        {\n            res.Add((strtVal, sub.Item1));\n            strtVal = sub.Item2;\n        }\n        if (strtVal \u003C stopVal) \n        {\n            res.Add((strtVal, stopVal));\n        }\n    }\n    return res;\n}","task_id":110,"test_setup_code":"","test_list":["Debug.Assert(ExtractMissing(new List\u003C(int, int)\u003E { (6, 9), (15, 34), (48, 70) }, 2, 100).SequenceEqual(new List\u003C(int, int)\u003E { (2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100) }));","Debug.Assert(ExtractMissing(new List\u003C(int, int)\u003E { (7, 2), (15, 19), (38, 50) }, 5, 60).SequenceEqual(new List\u003C(int, int)\u003E { (5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60) }));","Debug.Assert(ExtractMissing(new (int, int)[] { (7, 2), (15, 19), (38, 50) }, 1, 52).SequenceEqual(new (int, int)[] { (1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52) }));"],"challenge_test_list":[]}
{"name":"common-elements","description":"Find common elements in nested lists","text":"Write a function to find common elements in given nested lists. * list item * list item * list item * list item","code":"public List\u003CT\u003E CommonInNestedLists\u003CT\u003E(List\u003CList\u003CT\u003E\u003E nestedList)\n{\n    var sets = nestedList.Select(list =\u003E new HashSet\u003CT\u003E(list));\n    var intersection = sets.Aggregate((hashSet1, hashSet2) =\u003E\n    {\n        hashSet1.IntersectWith(hashSet2);\n        return hashSet1;\n    });\n    return intersection.ToList();\n}","task_id":111,"test_setup_code":"","test_list":["Debug.Assert(CommonInNestedLists(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 12, 18, 23, 25, 45 }, new List\u003Cint\u003E { 7, 12, 18, 24, 28 }, new List\u003Cint\u003E { 1, 5, 8, 12, 15, 16, 18 } }) .SequenceEqual(new List\u003Cint\u003E { 18, 12 }));","Debug.Assert(CommonInNestedLists(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 12, 5, 23, 25, 45 }, new List\u003Cint\u003E { 7, 11, 5, 23, 28 }, new List\u003Cint\u003E { 1, 5, 8, 18, 23, 16 } }) .SequenceEqual(new List\u003Cint\u003E { 5, 23 }));","Debug.Assert(CommonInNestedLists(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 2, 3, 4, 1 }, new List\u003Cint\u003E { 4, 5 }, new List\u003Cint\u003E { 6, 4, 8 }, new List\u003Cint\u003E { 4, 5 }, new List\u003Cint\u003E { 6, 8, 4 } }).SequenceEqual(new List\u003Cint\u003E { 4 }));"],"challenge_test_list":[]}
{"name":"cylinder-perimeter","description":"Calculate the perimeter of a cylinder in Python","text":"Write a C# function to find the perimeter of a cylinder.","code":"public static double Perimeter(double diameter, double height) \n{ \n    return 2 * (diameter \u002B height); \n}","task_id":112,"test_setup_code":"","test_list":["Debug.Assert(Perimeter(2, 4) == 12);","Debug.Assert(Perimeter(1, 2) == 6);","Debug.Assert(Perimeter(3, 1) == 8);"],"challenge_test_list":[]}
{"name":"check-if-integer","description":"Check if a string is an integer representation","text":"Write a function to check if a string represents an integer or not.","code":"public bool CheckInteger(string text)\n{\n    text = text.Trim();\n    if (text.Length \u003C 1)\n    {\n        return false;\n    }\n    else\n    {\n        if (text.All(c =\u003E \u00220123456789\u0022.Contains(c)))\n        {\n            return true;\n        }\n        else if ((text[0] == \u0027\u002B\u0027 || text[0] == \u0027-\u0027) \u0026\u0026 \n                 text.Substring(1).All(c =\u003E \u00220123456789\u0022.Contains(c)))\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n}","task_id":113,"test_setup_code":"","test_list":["Debug.Assert(CheckInteger(\u0022python\u0022) == false);","Debug.Assert(CheckInteger(\u00221\u0022) == true);","Debug.Assert(CheckInteger(\u002212345\u0022) == true);"],"challenge_test_list":[]}
{"name":"freq-tuple-list","description":"Assign frequency to tuples in a given list","text":"Write a function to assign frequency to each tuple in the given tuple list.","code":"using System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static string AssignFreq(List\u003Cint\u003E testList)\n    {\n        var res = testList.GroupBy(x =\u003E x)\n                          .Select(g =\u003E (g.Key, g.Count()))\n                          .ToList();\n        return res.ToString();\n    }\n}","task_id":114,"test_setup_code":"","test_list":["Debug.Assert(AssignFreq(new List\u003CTuple\u003Cint, int, int\u003E\u003E { Tuple.Create(6, 5, 8), Tuple.Create(2, 7), Tuple.Create(6, 5, 8), Tuple.Create(6, 5, 8), Tuple.Create(9), Tuple.Create(2, 7) }) == \u0022[(6, 5, 8, 3), (2, 7, 2), (9, 1)]\u0022);","Debug.Assert(AssignFreq(new List\u003CTuple\u003Cint, int\u003E\u003E { Tuple.Create(4, 2, 4), Tuple.Create(7, 1), Tuple.Create(4, 8), Tuple.Create(4, 2, 4), Tuple.Create(9, 2), Tuple.Create(7, 1) }) == \u0022[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]\u0022);","Debug.Assert(AssignFreq(new List\u003C(int, int, int)\u003E { (11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3) }) == \u0022[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]\u0022);"],"challenge_test_list":[]}
{"name":"check-empty-dicts","description":"Check if all dictionaries in a list are empty","text":"Write a function to check whether all dictionaries in a list are empty or not.","code":"bool EmptyDit(List\u003Cobject\u003E list1) {\n    bool emptyDit = list1.All(d =\u003E !d);\n    return emptyDit;\n}","task_id":115,"test_setup_code":"","test_list":["Debug.Assert(EmptyDit(new List\u003CDictionary\u003Cstring, object\u003E\u003E { new Dictionary\u003Cstring, object\u003E(), new Dictionary\u003Cstring, object\u003E(), new Dictionary\u003Cstring, object\u003E() }) == true);","Debug.Assert(EmptyDit(new List\u003CHashSet\u003Cint\u003E\u003E { new HashSet\u003Cint\u003E { 1, 2 }, new HashSet\u003Cint\u003E(), new HashSet\u003Cint\u003E() }) == false);","Debug.Assert(EmptyDit(new Dictionary\u003Cstring, object\u003E()) == true);"],"challenge_test_list":[]}
{"name":"tuple-to-int.py","description":"Convert a tuple of integers to a single integer","text":"Write a function to convert a given tuple of positive integers into an integer.","code":"public int TupleToInt(int[] nums)\n{\n    string result = string.Join(\u0022\u0022, nums.Select(n =\u003E n.ToString()));\n    return int.Parse(result);\n}","task_id":116,"test_setup_code":"","test_list":["Debug.Assert(TupleToInt((1, 2, 3)) == 123);","Debug.Assert(TupleToInt((4, 5, 6)) == 456);","Debug.Assert(TupleToInt((5, 6, 7)) == 567);"],"challenge_test_list":[]}
{"name":"convert-list-to-float","description":"Convert list elements to float when possible","text":"Write a function to convert all possible convertible elements in the list to float.","code":"public static string ListToFloat(List\u003C(string, string)\u003E testList)\n{\n    List\u003C(string, string)\u003E res = new List\u003C(string, string)\u003E();\n    foreach (var tup in testList)\n    {\n        List\u003Cobject\u003E temp = new List\u003Cobject\u003E();\n        foreach (var ele in tup)\n        {\n            if (double.TryParse(ele, out _))\n            {\n                temp.Add(double.Parse(ele));\n            }\n            else\n            {\n                temp.Add(ele);\n            }\n        }\n        res.Add(((string)temp[0], (string)temp[1]));\n    }\n    return res.ToString();\n}","task_id":117,"test_setup_code":"","test_list":["Debug.Assert(ListToFloat(new List\u003CTuple\u003Cstring, string\u003E\u003E { Tuple.Create(\u00223\u0022, \u00224\u0022), Tuple.Create(\u00221\u0022, \u002226.45\u0022), Tuple.Create(\u00227.32\u0022, \u00228\u0022), Tuple.Create(\u00224\u0022, \u00228\u0022) }) == \u0022[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\u0022);","Debug.Assert(ListToFloat(new List\u003CTuple\u003Cstring, string\u003E\u003E { Tuple.Create(\u00224\u0022, \u00224\u0022), Tuple.Create(\u00222\u0022, \u002227\u0022), Tuple.Create(\u00224.12\u0022, \u00229\u0022), Tuple.Create(\u00227\u0022, \u002211\u0022) }) == \u0022[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]\u0022);","Debug.Assert(ListToFloat(new List\u003CTuple\u003Cstring, string\u003E\u003E { Tuple.Create(\u00226\u0022, \u002278\u0022), Tuple.Create(\u00225\u0022, \u002226.45\u0022), Tuple.Create(\u00221.33\u0022, \u00224\u0022), Tuple.Create(\u002282\u0022, \u002213\u0022) }) == \u0022[ (6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0) ]\u0022);"],"challenge_test_list":[]}
{"name":"string-to-list","description":"Convert a string into a list format","text":"[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.","code":"public List\u003Cstring\u003E StringToList(string input) \n{ \n    List\u003Cstring\u003E lst = new List\u003Cstring\u003E(input.Split(\u0027 \u0027)); \n    return lst; \n}","task_id":118,"test_setup_code":"","test_list":["Debug.Assert(StringToList(\u0022python programming\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022python\u0022, \u0022programming\u0022 }));","Debug.Assert(StringToList(\u0022lists tuples strings\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022lists\u0022, \u0022tuples\u0022, \u0022strings\u0022 }));","Debug.Assert(StringToList(\u0022write a program\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022write\u0022, \u0022a\u0022, \u0022program\u0022 }));"],"challenge_test_list":[]}
{"name":"unique-element.py","description":"Find unique element in sorted array using Python","text":"Write a C# function to find the element that appears only once in a sorted array.","code":"public int Search(int[] arr, int n) \n{\n    int XOR = 0;\n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    {\n        XOR ^= arr[i];\n    }\n    return XOR;\n}","task_id":119,"test_setup_code":"","test_list":["Debug.Assert(Search(new int[] { 1, 1, 2, 2, 3 }, 5) == 3);","Debug.Assert(Search(new int[] { 1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8 }, 11) == 8);","Debug.Assert(Search(new int[] { 1, 2, 2, 3, 3, 4, 4 }, 7) == 1);"],"challenge_test_list":[]}
{"name":"max-product-tuples","description":"Find max product of tuple pairs in a list","text":"Write a function to find the maximum product from the pairs of tuples within a given list.","code":"public static int MaxProductTuple(List\u003CTuple\u003Cint, int\u003E\u003E list1)\n{\n    int resultMax = list1.Select(tuple =\u003E Math.Abs(tuple.Item1 * tuple.Item2)).Max();\n    return resultMax;\n}","task_id":120,"test_setup_code":"","test_list":["Debug.Assert(MaxProductTuple(new List\u003CTuple\u003Cint, int\u003E\u003E { Tuple.Create(2, 7), Tuple.Create(2, 6), Tuple.Create(1, 8), Tuple.Create(4, 9) }) == 36);","Debug.Assert(MaxProductTuple(new (int, int)[]{ (10, 20), (15, 2), (5, 10) }) == 200);","Debug.Assert(MaxProductTuple(new (int, int)[] { (11, 44), (10, 15), (20, 5), (12, 9) }) == 484);"],"challenge_test_list":[]}
{"name":"triplet-sum-finder","description":"Find triplet in array with a specific sum","text":"Write a function to find the triplet with sum of the given array","code":"bool CheckTriplet(int[] A, int n, int sum, int count) {\n    if (count == 3 \u0026\u0026 sum == 0) {\n        return true;\n    }\n    if (count == 3 || n == 0 || sum \u003C 0) {\n        return false;\n    }\n    return CheckTriplet(A, n - 1, sum - A[n - 1], count \u002B 1) || \n           CheckTriplet(A, n - 1, sum, count);\n}","task_id":121,"test_setup_code":"","test_list":["Debug.Assert(CheckTriplet(new int[] { 2, 7, 4, 0, 9, 5, 1, 3 }, 8, 6, 0) == true);","Debug.Assert(CheckTriplet(new int[] { 1, 4, 5, 6, 7, 8, 5, 9 }, 8, 6, 0) == false);","Debug.Assert(CheckTriplet(new int[] {10, 4, 2, 3, 5}, 5, 15, 0) == true);"],"challenge_test_list":[]}
{"name":"smart-number-fn","description":"Find the n\u2019th smart number efficiently","text":"Write a function to find n\u2019th smart number.","code":"const int MAX = 3000; \n\npublic int SmartNumber(int n) \n{\n    int[] primes = new int[MAX]; \n    List\u003Cint\u003E result = new List\u003Cint\u003E(); \n    \n    for (int i = 2; i \u003C MAX; i\u002B\u002B) \n    {\n        if (primes[i] == 0) \n        {\n            primes[i] = 1; \n            int j = i * 2; \n            while (j \u003C MAX) \n            {\n                primes[j]--; \n                if (primes[j] \u002B 3 == 0) \n                {\n                    result.Add(j); \n                }\n                j \u002B= i; \n            }\n        }\n    }\n    \n    result.Sort(); \n    return result[n - 1]; \n}","task_id":122,"test_setup_code":"","test_list":["Debug.Assert(smartNumber(1) == 30);","Debug.Assert(smartNumber(50) == 273);","Debug.Assert(SmartNumber(1000) == 2664);"],"challenge_test_list":[]}
{"name":"amicable-sum-01","description":"Sum amicable numbers up to a given limit","text":"Write a function to sum all amicable numbers from 1 to a specified number.","code":"public static int AmicableNumbersSum(int limit)\n{\n    if (limit.GetType() != typeof(int))\n    {\n        return \u0022Input is not an integer!\u0022;\n    }\n    if (limit \u003C 1)\n    {\n        return \u0022Input must be bigger than 0!\u0022;\n    }\n    HashSet\u003Cint\u003E amicables = new HashSet\u003Cint\u003E();\n    for (int num = 2; num \u003C= limit; num\u002B\u002B)\n    {\n        if (amicables.Contains(num))\n        {\n            continue;\n        }\n        int sumFact = Enumerable.Range(1, num - 1).Where(fact =\u003E num % fact == 0).Sum();\n        int sumFact2 = Enumerable.Range(1, sumFact - 1).Where(fact =\u003E sumFact % fact == 0).Sum();\n        if (num == sumFact2 \u0026\u0026 num != sumFact)\n        {\n            amicables.Add(num);\n            amicables.Add(sumFact2);\n        }\n    }\n    return amicables.Sum();\n}","task_id":123,"test_setup_code":"","test_list":["Debug.Assert(AmicableNumbersSum(999) == 504);","Debug.Assert(AmicableNumbersSum(9999) == 31626);","Debug.Assert(AmicableNumbersSum(99) == 0);"],"challenge_test_list":[]}
{"name":"angle-of-complex","description":"Get the angle of a complex number using a function","text":"Write a function to get the angle of a complex number.","code":"public static double AngleComplex(double a, double b)\n{\n    complex cn = new complex(a, b);\n    double angle = Math.Atan2(b, a);\n    return angle;\n}","task_id":124,"test_setup_code":"","test_list":["Debug.Assert(AngleComplex(0, new Complex(0, 1)) == 1.5707963267948966);","Debug.Assert(AngleComplex(2, new Complex(0, 1)) == 0.4636476090008061);","Debug.Assert(AngleComplex(0, new Complex(0, 2)) == 1.5707963267948966);"],"challenge_test_list":[]}
{"name":"max-diff-zeros-ones","description":"Max difference of 0s and 1s in binary substring","text":"Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.","code":"public int FindLength(string str, int n) \n{ \n    int currentSum = 0; \n    int maxSum = 0; \n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    { \n        currentSum \u002B= (str[i] == \u00270\u0027 ? 1 : -1); \n        if (currentSum \u003C 0) \n        { \n            currentSum = 0; \n        } \n        maxSum = Math.Max(currentSum, maxSum); \n    } \n    return maxSum \u003E 0 ? maxSum : 0; \n}","task_id":125,"test_setup_code":"","test_list":["Debug.Assert(FindLength(\u002211000010001\u0022, 11) == 6);","Debug.Assert(FindLength(\u002210111\u0022, 5) == 1);","Debug.Assert(FindLength(\u002211011101100101\u0022, 14) == 2);"],"challenge_test_list":[]}
{"name":"common-divisor-sum","description":"Sum of common divisors of two numbers in Python","text":"Write a C# function to find the sum of common divisors of two given numbers.","code":"public int Sum(int a, int b) \n{\n    int sum = 0;\n    for (int i = 1; i \u003C Math.Min(a, b); i\u002B\u002B) \n    {\n        if (a % i == 0 \u0026\u0026 b % i == 0) \n        {\n            sum \u002B= i;\n        }\n    }\n    return sum;\n}","task_id":126,"test_setup_code":"","test_list":["Debug.Assert(Sum(10, 15) == 6);","Debug.Assert(Sum(100, 150) == 93);","Debug.Assert(Sum(4, 6) == 3);"],"challenge_test_list":[]}
{"name":"multiply-integers","description":"Multiply two integers without the multiplication operator","text":"Write a function to multiply two integers without using the * operator in C#.","code":"public int MultiplyInt(int x, int y)\n{\n    if (y \u003C 0)\n    {\n        return -MultiplyInt(x, -y);\n    }\n    else if (y == 0)\n    {\n        return 0;\n    }\n    else if (y == 1)\n    {\n        return x;\n    }\n    else\n    {\n        return x \u002B MultiplyInt(x, y - 1);\n    }\n}","task_id":127,"test_setup_code":"","test_list":["Debug.Assert(MultiplyInt(10, 20) == 200);","Debug.Assert(MultiplyInt(5, 10) == 50);","Debug.Assert(MultiplyInt(4, 8) == 32);"],"challenge_test_list":[]}
{"name":"shortlist-words","description":"Shortlist words longer than n from a list","text":"Write a function to shortlist words that are longer than n from a given list of words.","code":"public List\u003Cstring\u003E LongWords(int n, string str) {\n    List\u003Cstring\u003E wordLen = new List\u003Cstring\u003E();\n    string[] txt = str.Split(\u0022 \u0022);\n    foreach (string x in txt) {\n        if (x.Length \u003E n) {\n            wordLen.Add(x);\n        }\n    }\n    return wordLen;\n}","task_id":128,"test_setup_code":"","test_list":["Debug.Assert(LongWords(3, \u0022python is a programming language\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022python\u0022, \u0022programming\u0022, \u0022language\u0022 }));","Debug.Assert(LongWords(2, \u0022writing a program\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022writing\u0022, \u0022program\u0022 }));","Debug.Assert(LongWords(5, \u0022sorting list\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022sorting\u0022 }));"],"challenge_test_list":[]}
{"name":"magic-square-fn","description":"Create a function to compute magic square values","text":"Write a function to calculate magic square.","code":"public static bool MagicSquareTest(int[][] myMatrix) {\n    int iSize = myMatrix[0].Length;\n    List\u003Cint\u003E sumList = new List\u003Cint\u003E();\n    sumList.AddRange(myMatrix.Select(lines =\u003E lines.Sum()));\n    \n    for (int col = 0; col \u003C iSize; col\u002B\u002B) {\n        sumList.Add(myMatrix.Sum(row =\u003E row[col]));\n    }\n    \n    int result1 = 0;\n    for (int i = 0; i \u003C iSize; i\u002B\u002B) {\n        result1 \u002B= myMatrix[i][i];\n    }\n    sumList.Add(result1);\n    \n    int result2 = 0;\n    for (int i = iSize - 1; i \u003E= 0; i--) {\n        result2 \u002B= myMatrix[i][i];\n    }\n    sumList.Add(result2);\n    \n    return sumList.Distinct().Count() \u003C= 1;\n}","task_id":129,"test_setup_code":"","test_list":["Debug.Assert(MagicSquareTest(new int[,] { { 7, 12, 1, 14 }, { 2, 13, 8, 11 }, { 16, 3, 10, 5 }, { 9, 6, 15, 4 } }) == true);","Debug.Assert(MagicSquareTest(new int[,] { { 2, 7, 6 }, { 9, 5, 1 }, { 4, 3, 8 } }) == true);","Debug.Assert(MagicSquareTest(new int[,] { { 2, 7, 6 }, { 9, 5, 1 }, { 4, 3, 7 } }) == false);"],"challenge_test_list":[]}
{"name":"max-frequency-item","description":"Find the most frequent item in a list","text":"Write a function to find the item with maximum frequency in a given list.","code":"using System.Collections.Generic;\n\npublic Tuple\u003Cint, int\u003E MaxOccurrences(List\u003Cint\u003E nums)\n{\n    Dictionary\u003Cint, int\u003E dict = new Dictionary\u003Cint, int\u003E();\n    foreach (var i in nums)\n    {\n        if (dict.ContainsKey(i))\n        {\n            dict[i]\u002B\u002B;\n        }\n        else\n        {\n            dict[i] = 1;\n        }\n    }\n\n    int maxKey = 0;\n    int maxValue = 0;\n    foreach (var kvp in dict)\n    {\n        if (kvp.Value \u003E maxValue)\n        {\n            maxValue = kvp.Value;\n            maxKey = kvp.Key;\n        }\n    }\n    return Tuple.Create(maxKey, maxValue);\n}","task_id":130,"test_setup_code":"","test_list":["Debug.Assert(MaxOccurrences(new int[] { 2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2 }) == (2, 5));","Debug.Assert(MaxOccurrences(new int[] { 2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 16, 18 }) == (8, 2));","Debug.Assert(MaxOccurrences(new int[] { 10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10 }) == (20, 3));"],"challenge_test_list":[]}
{"name":"reverse-vowels","description":"Reverse the vowels in a given string using Python","text":"Write a C# function to reverse only the vowels of a given string.","code":"public string ReverseVowels(string str1)\n{\n    string vowels = \u0022\u0022;\n    foreach (char c in str1)\n    {\n        if (\u0022aeiouAEIOU\u0022.Contains(c))\n        {\n            vowels \u002B= c;\n        }\n    }\n    string resultString = \u0022\u0022;\n    foreach (char c in str1)\n    {\n        if (\u0022aeiouAEIOU\u0022.Contains(c))\n        {\n            resultString \u002B= vowels[vowels.Length - 1];\n            vowels = vowels.Substring(0, vowels.Length - 1);\n        }\n        else\n        {\n            resultString \u002B= c;\n        }\n    }\n    return resultString;\n}","task_id":131,"test_setup_code":"","test_list":["Debug.Assert(ReverseVowels(\u0022Python\u0022) == \u0022Python\u0022);","Debug.Assert(ReverseVowels(\u0022USA\u0022) == \u0022ASU\u0022);","Debug.Assert(ReverseVowels(\u0022ab\u0022) == \u0022ab\u0022);"],"challenge_test_list":[]}
{"name":"tuple-to-string","description":"Convert a tuple into a string representation","text":"Write a function to convert tuple to a string.","code":"public string TupString(tuple\u003Cstring\u003E tup1)\n{\n    string str = string.Join(\u0022\u0022, tup1);\n    return str;\n}","task_id":132,"test_setup_code":"","test_list":["Debug.Assert(TupString(new Tuple\u003Cstring, string, string, string, string, string, string, string, string\u003E(\u0027e\u0027, \u0027x\u0027, \u0027e\u0027, \u0027r\u0027, \u0027c\u0027, \u0027i\u0027, \u0027s\u0027, \u0027e\u0027, \u0027s\u0027)) == \u0022exercises\u0022);","Debug.Assert(TupString(new string[] { \u0022p\u0022, \u0022y\u0022, \u0022t\u0022, \u0022h\u0022, \u0022o\u0022, \u0022n\u0022 }) == \u0022python\u0022);","Debug.Assert(TupString(new Tuple\u003Cstring, string, string, string, string, string, string\u003E(\u0027p\u0027, \u0027r\u0027, \u0027o\u0027, \u0027g\u0027, \u0027r\u0027, \u0027a\u0027, \u0027m\u0027)) == \u0022program\u0022);"],"challenge_test_list":[]}
{"name":"sum-negative-numbers","description":"Sum negative numbers in a list using lambda function","text":"Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.","code":"public int SumNegativenum(List\u003Cint\u003E nums) \n{\n    var sumNegativenum = nums.Where(num =\u003E num \u003C 0).ToList();\n    return sumNegativenum.Sum();\n}","task_id":133,"test_setup_code":"","test_list":["Debug.Assert(SumNegativenum(new List\u003Cint\u003E { 2, 4, -6, -9, 11, -12, 14, -5, 17 }) == -32);","Debug.Assert(SumNegativenum(new int[] { 10, 15, -14, 13, -18, 12, -20 }) == -52);\n\npublic int SumNegativenum(int[] numbers)\n{\n    return numbers.Where(x =\u003E x \u003C 0).Sum();\n}","Debug.Assert(SumNegativenum(new int[] { 19, -65, 57, 39, 152, -639, 121, 44, 90, -190 }) == -894);\n\npublic int SumNegativenum(int[] nums) {\n    return nums.Where(n =\u003E n \u003C 0).Sum();\n}"],"challenge_test_list":[]}
{"name":"check-last-elem","description":"Check last array element\u0027s parity after p operations","text":"Write a C# function to check whether the last element of given array is even or odd after performing an operation p times.","code":"public string CheckLast(int[] arr, int n, int p) \n{ \n    int sum = 0; \n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    { \n        sum \u002B= arr[i]; \n    } \n    if (p == 1) \n    { \n        if (sum % 2 == 0) \n        { \n            return \u0022ODD\u0022; \n        } \n        else \n        { \n            return \u0022EVEN\u0022; \n        } \n    } \n    return \u0022EVEN\u0022; \n}","task_id":134,"test_setup_code":"","test_list":["Debug.Assert(CheckLast(new int[] { 5, 7, 10 }, 3, 1) == \u0022ODD\u0022);","Debug.Assert(CheckLast(new int[] { 2, 3 }, 2, 3) == \u0022EVEN\u0022);","Debug.Assert(CheckLast(new int[] { 1, 2, 3 }, 3, 1) == \u0022ODD\u0022);"],"challenge_test_list":[]}
{"name":"nth-hex-number","description":"Find the nth hexagonal number efficiently","text":"Write a function to find the nth hexagonal number.","code":"public static int HexagonalNum(int n) \n{\n    return n * (2 * n - 1);\n}","task_id":135,"test_setup_code":"","test_list":["Debug.Assert(HexagonalNum(10) == 190);","Debug.Assert(HexagonalNum(5) == 45);","Debug.Assert(HexagonalNum(7) == 91);"],"challenge_test_list":[]}
{"name":"calculate-electricity-bill","description":"Calculate electricity bill with a function","text":"Write a function to calculate electricity bill.","code":"public static double CalElectBill(int units)\n{\n    double amount;\n    double surcharge;\n\n    if (units \u003C 50)\n    {\n        amount = units * 2.60;\n        surcharge = 25;\n    }\n    else if (units \u003C= 100)\n    {\n        amount = 130 \u002B ((units - 50) * 3.25);\n        surcharge = 35;\n    }\n    else if (units \u003C= 200)\n    {\n        amount = 130 \u002B 162.50 \u002B ((units - 100) * 5.26);\n        surcharge = 45;\n    }\n    else\n    {\n        amount = 130 \u002B 162.50 \u002B 526 \u002B ((units - 200) * 8.45);\n        surcharge = 75;\n    }\n\n    double total = amount \u002B surcharge;\n    return total;\n}","task_id":136,"test_setup_code":"","test_list":["Debug.Assert(CalElectBill(75) == 246.25);","Debug.Assert(CalElectBill(265) == 1442.75);","Debug.Assert(CalElectBill(100) == 327.5);"],"challenge_test_list":[]}
{"name":"zeroes-ratio","description":"Calculate the ratio of zeroes in an integer array","text":"Write a function to find the ration of zeroes in an array of integers.","code":"using System;\n\npublic class Program\n{\n    public static double ZeroCount(int[] nums)\n    {\n        int n = nums.Length;\n        int n1 = 0;\n        foreach (int x in nums)\n        {\n            if (x == 0)\n            {\n                n1 \u002B= 1;\n            }\n        }\n        return Math.Round((double)n1 / n, 2);\n    }\n}","task_id":137,"test_setup_code":"","test_list":["Debug.Assert(ZeroCount(new int[] { 0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8 }) == 0.15);","Debug.Assert(ZeroCount(new int[] { 2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8 }) == 0.00);","Debug.Assert(ZeroCount(new int[] { 2, 4, -6, -9, 11, -12, 14, -5, 17 }) == 0.00);"],"challenge_test_list":[]}
{"name":"power-of-two-sum","description":"Check if a number is a sum of non-zero powers of 2","text":"Write a C# function to check whether the given number can be represented as sum of non-zero powers of 2 or not.","code":"public bool IsSumOfPowersOfTwo(int n) \n{ \n    if (n % 2 == 1) \n    { \n        return false; \n    } \n    else \n    { \n        return true; \n    } \n}","task_id":138,"test_setup_code":"","test_list":["Debug.Assert(IsSumOfPowersOfTwo(10) == true);","Debug.Assert(IsSumOfPowersOfTwo(7) == false);","Debug.Assert(IsSumOfPowersOfTwo(14) == true);"],"challenge_test_list":[]}
{"name":"circumference-circle","description":"Calculate the circumference of a circle given radius","text":"Write a function to find the circumference of a circle.","code":"public double CircleCircumference(double r)  \n{  \n    double perimeter = 2 * 3.1415 * r;  \n    return perimeter;  \n}","task_id":139,"test_setup_code":"","test_list":["Debug.Assert(CircleCircumference(10) == 62.830000000000005);","Debug.Assert(CircleCircumference(5) == 31.415000000000003);","Debug.Assert(CircleCircumference(4) == 25.132);"],"challenge_test_list":[]}
{"name":"extract-singles","description":"Extract unique elements from a tuple list","text":"Write a function to extract elements that occur singly in the given tuple list.","code":"public List\u003CT\u003E ExtractSingly\u003CT\u003E(List\u003CList\u003CT\u003E\u003E testList) {\n    List\u003CT\u003E res = new List\u003CT\u003E();\n    HashSet\u003CT\u003E temp = new HashSet\u003CT\u003E();\n    foreach (var inner in testList) {\n        foreach (var ele in inner) {\n            if (!temp.Contains(ele)) {\n                temp.Add(ele);\n                res.Add(ele);\n            }\n        }\n    }\n    return res;\n}","task_id":140,"test_setup_code":"","test_list":["Debug.Assert(ExtractSingly(new List\u003CTuple\u003Cint, int, int\u003E\u003E { Tuple.Create(3, 4, 5), Tuple.Create(4, 5, 7), Tuple.Create(1, 4) }).SequenceEqual(new List\u003Cint\u003E { 3, 4, 5, 7, 1 }));","Debug.Assert(ExtractSingly(new Tuple\u003Cint, int, int\u003E[] { Tuple.Create(1, 2, 3), Tuple.Create(4, 2, 3), Tuple.Create(7, 8) }).SequenceEqual(new List\u003Cint\u003E { 1, 2, 3, 4, 7, 8 }));","Debug.Assert(ExtractSingly(new List\u003CTuple\u003Cint, int, int\u003E\u003E { Tuple.Create(7, 8, 9), Tuple.Create(10, 11, 12), Tuple.Create(10, 11) }).SequenceEqual(new List\u003Cint\u003E { 7, 8, 9, 10, 11, 12 }));"],"challenge_test_list":[]}
{"name":"pancake-sort-list","description":"Pancake sort function to arrange list elements","text":"Write a function to sort a list of elements using pancake sort.","code":"public List\u003Cint\u003E PancakeSort(List\u003Cint\u003E nums) {\n    int arrLen = nums.Count;\n    while (arrLen \u003E 1) {\n        int mi = nums.IndexOf(nums.Take(arrLen).Max());\n        nums = nums.Take(mi \u002B 1).Reverse().ToList().Concat(nums.Skip(mi \u002B 1)).ToList();\n        nums = nums.Take(arrLen).Reverse().ToList().Concat(nums.Skip(arrLen)).ToList();\n        arrLen--;\n    }\n    return nums;\n}","task_id":141,"test_setup_code":"","test_list":["Debug.Assert(PancakeSort(new int[] { 15, 79, 25, 38, 69 }).SequenceEqual(new int[] { 15, 25, 38, 69, 79 }));","Debug.Assert(PancakeSort(new int[] { 98, 12, 54, 36, 85 }).SequenceEqual(new int[] { 12, 36, 54, 85, 98 }));","Debug.Assert(PancakeSort(new int[] { 41, 42, 32, 12, 23 }).SequenceEqual(new int[] { 12, 23, 32, 41, 42 }));"],"challenge_test_list":[]}
{"name":"count-same-pairs","description":"Count identical pairs in three lists","text":"Write a function to count the same pair in three given lists.","code":"public int CountSamePair(List\u003Cint\u003E list1, List\u003Cint\u003E list2, List\u003Cint\u003E list3) {\n    int result = list1.Zip(list2, (m, n) =\u003E new { m, n })\n                      .Zip(list3, (pair, o) =\u003E pair.m == pair.n \u0026\u0026 pair.m == o)\n                      .Count(equal =\u003E equal);\n    return result;\n}","task_id":142,"test_setup_code":"","test_list":["Debug.Assert(CountSamePair(new int[] { 1, 2, 3, 4, 5, 6, 7, 8 }, new int[] { 2, 2, 3, 1, 2, 6, 7, 9 }, new int[] { 2, 1, 3, 1, 2, 6, 7, 9 }) == 3);","Debug.Assert(CountSamePair(new int[] { 1, 2, 3, 4, 5, 6, 7, 8 }, new int[] { 2, 2, 3, 1, 2, 6, 7, 8 }, new int[] { 2, 1, 3, 1, 2, 6, 7, 8 }) == 4);","Debug.Assert(CountSamePair(new int[] { 1, 2, 3, 4, 2, 6, 7, 8 }, new int[] { 2, 2, 3, 1, 2, 6, 7, 8 }, new int[] { 2, 1, 3, 1, 2, 6, 7, 8 }) == 5);"],"challenge_test_list":[]}
{"name":"find-lists-in-tuple","description":"Count lists in a given tuple using a function","text":"Write a function to find number of lists present in the given tuple.","code":"public int FindLists(object Input) \n{\n    if (Input is List\u003Cobject\u003E) \n    {\n        return 1;\n    }\n    else \n    {\n        return ((ICollection)Input).Count;\n    }\n}","task_id":143,"test_setup_code":"","test_list":["Debug.Assert(FindLists(new List\u003Cint\u003E[] { new List\u003Cint\u003E { 1, 2, 3, 4 }, new List\u003Cint\u003E { 5, 6, 7, 8 } }) == 2);","Debug.Assert(FindLists(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 1, 2 }, new List\u003Cint\u003E { 3, 4 }, new List\u003Cint\u003E { 5, 6 } }) == 3);","Debug.Assert(FindLists(new List\u003Cint\u003E { 9, 8, 7, 6, 5, 4, 3, 2, 1 }) == 1);"],"challenge_test_list":[]}
{"name":"absolute-diff-sum","description":"Sum absolute differences of array pairs","text":"Write a C# function to find the sum of absolute differences in all pairs of the given array.","code":"public int SumPairs(int[] arr, int n) \n{ \n    int sum = 0; \n    for (int i = n - 1; i \u003E= 0; i--) \n    { \n        sum \u002B= i * arr[i] - (n - 1 - i) * arr[i]; \n    } \n    return sum; \n}","task_id":144,"test_setup_code":"","test_list":["Debug.Assert(SumPairs(new int[] { 1, 8, 9, 15, 16 }, 5) == 74);","Debug.Assert(SumPairs(new int[] { 1, 2, 3, 4 }, 4) == 10);","Debug.Assert(SumPairs(new int[] { 1, 2, 3, 4, 5, 7, 9, 11, 14 }, 9) == 188);"],"challenge_test_list":[]}
{"name":"max-diff-array","description":"Find max difference between elements in an array","text":"Write a C# function to find the maximum difference between any two elements in a given array.","code":"public static int MaxAbsDiff(int[] arr, int n) \n{ \n    int minEle = arr[0]; \n    int maxEle = arr[0]; \n    for (int i = 1; i \u003C n; i\u002B\u002B) \n    { \n        minEle = Math.Min(minEle, arr[i]); \n        maxEle = Math.Max(maxEle, arr[i]); \n    } \n    return (maxEle - minEle); \n}","task_id":145,"test_setup_code":"","test_list":["Debug.Assert(MaxAbsDiff(new int[] { 2, 1, 5, 3 }, 4) == 4);","Debug.Assert(MaxAbsDiff(new int[] {9, 3, 2, 5, 1}, 5) == 8);\n\npublic static int MaxAbsDiff(int[] values, int target)\n{\n    // Implementation here\n}","Debug.Assert(MaxAbsDiff(new int[] {3, 2, 1}, 3) == 2);"],"challenge_test_list":[]}
{"name":"ascii-value-string","description":"Find ASCII value of total string characters","text":"Write a function to find the ascii value of total characters in a string.","code":"public int AsciiValueString(string str1) {\n    for (int i = 0; i \u003C str1.Length; i\u002B\u002B) {\n        return (int)str1[i];\n    }\n    return 0; // In case the string is empty\n}","task_id":146,"test_setup_code":"","test_list":["Debug.Assert(AsciiValueString(\u0022python\u0022) == 112);","Debug.Assert(AsciiValueString(\u0022Program\u0022) == 80);","Debug.Assert(AsciiValueString(\u0022Language\u0022) == 76);"],"challenge_test_list":[]}
{"name":"max-path-sum","description":"Find the max path sum in a triangle array","text":"Write a function to find the maximum total path sum in the given triangle.","code":"public int MaxPathSum(int[][] tri, int m, int n) \n{\n    for (int i = m - 1; i \u003E= 0; i--) \n    {\n        for (int j = 0; j \u003C= i; j\u002B\u002B) \n        {\n            if (tri[i \u002B 1][j] \u003E tri[i \u002B 1][j \u002B 1]) \n            {\n                tri[i][j] \u002B= tri[i \u002B 1][j];\n            } \n            else \n            {\n                tri[i][j] \u002B= tri[i \u002B 1][j \u002B 1];\n            }\n        }\n    }\n    return tri[0][0];\n}","task_id":147,"test_setup_code":"","test_list":["Debug.Assert(MaxPathSum(new int[][] { new int[] { 1, 0, 0 }, new int[] { 4, 8, 0 }, new int[] { 1, 5, 3 } }, 2, 2) == 14);","Debug.Assert(MaxPathSum(new int[][] { new int[] { 13, 0, 0 }, new int[] { 7, 4, 0 }, new int[] { 2, 4, 6 } }, 2, 2) == 24);","Debug.Assert(MaxPathSum(new int[,] { { 2, 0, 0 }, { 11, 18, 0 }, { 21, 25, 33 } }, 2, 2) == 53);"],"challenge_test_list":[]}
{"name":"max-digit-split","description":"Maximize digit sum by splitting a number","text":"Write a function to divide a number into two parts such that the sum of digits is maximum.","code":"int SumDigitsSingle(int x) \n{ \n    int ans = 0; \n    while (x != 0) \n    { \n        ans \u002B= x % 10; \n        x /= 10; \n    } \n    return ans; \n}\n\nint Closest(int x) \n{ \n    int ans = 0; \n    while (ans * 10 \u002B 9 \u003C= x) \n    { \n        ans = ans * 10 \u002B 9; \n    } \n    return ans; \n}\n\nint SumDigitsTwoParts(int N) \n{ \n    int A = Closest(N); \n    return SumDigitsSingle(A) \u002B SumDigitsSingle(N - A); \n}","task_id":148,"test_setup_code":"","test_list":["Debug.Assert(SumDigitsTwoParts(35) == 17);","Debug.Assert(SumDigitsTwoParts(7) == 7);","Debug.Assert(SumDigitsTwoParts(100) == 19);"],"challenge_test_list":[]}
{"name":"longest-subseq","description":"Find longest subsequence with adjacent diffs of one","text":"Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.","code":"int LongestSubseqWithDiffOne(int[] arr, int n) \n{ \n    int[] dp = new int[n]; \n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    { \n        dp[i] = 1; \n    } \n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    { \n        for (int j = 0; j \u003C i; j\u002B\u002B) \n        { \n            if ((arr[i] == arr[j] \u002B 1) || (arr[i] == arr[j] - 1)) \n            { \n                dp[i] = Math.Max(dp[i], dp[j] \u002B 1); \n            } \n        } \n    } \n    int result = 1; \n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    { \n        if (result \u003C dp[i]) \n        { \n            result = dp[i]; \n        } \n    } \n    return result; \n}","task_id":149,"test_setup_code":"","test_list":["Debug.Assert(LongestSubseqWithDiffOne(new int[] { 1, 2, 3, 4, 5, 3, 2 }, 7) == 6);","Debug.Assert(LongestSubseqWithDiffOne(new int[] { 10, 9, 4, 5, 4, 8, 6 }, 7) == 3);","Debug.Assert(LongestSubseqWithDiffOne(new int[] { 1, 2, 3, 2, 3, 7, 2, 1 }, 8) == 7);"],"challenge_test_list":[]}
{"name":"find-number-in-seq","description":"Check if a number exists in an infinite sequence","text":"Write a C# function to find whether the given number is present in the infinite sequence or not.","code":"public bool DoesContainB(int a, int b, int c) \n{ \n    if (a == b) \n    { \n        return true; \n    } \n    if ((b - a) * c \u003E 0 \u0026\u0026 (b - a) % c == 0) \n    { \n        return true; \n    } \n    return false; \n}","task_id":150,"test_setup_code":"","test_list":["Debug.Assert(DoesContainB(1, 7, 3) == true);","Debug.Assert(DoesContainB(1, -3, 5) == false);","Debug.Assert(DoesContainB(3, 2, 5) == false);"],"challenge_test_list":[]}
{"name":"co-prime-check.py","description":"Check if a number is co-prime with another","text":"Write a C# function to check whether the given number is co-prime or not.","code":"public int Gcd(int p, int q) {\n    while (q != 0) {\n        int temp = q;\n        q = p % q;\n        p = temp;\n    }\n    return p;\n}\n\npublic bool IsCoprime(int x, int y) {\n    return Gcd(x, y) == 1;\n}","task_id":151,"test_setup_code":"","test_list":["Debug.Assert(IsCoprime(17, 13) == true);","Debug.Assert(IsCoprime(15, 21) == false);","Debug.Assert(IsCoprime(25, 45) == false);"],"challenge_test_list":[]}
{"name":"merge-sort-array","description":"Sort an array using the merge sort algorithm","text":"Write a function to sort the given array by using merge sort.","code":"public List\u003Cint\u003E Merge(List\u003Cint\u003E a, List\u003Cint\u003E b) {\n    List\u003Cint\u003E c = new List\u003Cint\u003E();\n    while (a.Count != 0 \u0026\u0026 b.Count != 0) {\n        if (a[0] \u003C b[0]) {\n            c.Add(a[0]);\n            a.RemoveAt(0);\n        } else {\n            c.Add(b[0]);\n            b.RemoveAt(0);\n        }\n    }\n    if (a.Count == 0) {\n        c.AddRange(b);\n    } else {\n        c.AddRange(a);\n    }\n    return c;\n}\n\npublic List\u003Cint\u003E MergeSort(List\u003Cint\u003E x) {\n    if (x.Count == 0 || x.Count == 1) {\n        return x;\n    } else {\n        int middle = x.Count / 2;\n        List\u003Cint\u003E a = MergeSort(x.GetRange(0, middle));\n        List\u003Cint\u003E b = MergeSort(x.GetRange(middle, x.Count - middle));\n        return Merge(a, b);\n    }\n}","task_id":152,"test_setup_code":"","test_list":["Debug.Assert(MergeSort(new int[] { 3, 4, 2, 6, 5, 7, 1, 9 }).SequenceEqual(new int[] { 1, 2, 3, 4, 5, 6, 7, 9 }));","Debug.Assert(MergeSort(new int[] { 7, 25, 45, 78, 11, 33, 19 }).SequenceEqual(new int[] { 7, 11, 19, 25, 33, 45, 78 }));","Debug.Assert(MergeSort(new List\u003Cint\u003E { 3, 1, 4, 9, 8 }).SequenceEqual(new List\u003Cint\u003E { 1, 3, 4, 8, 9 }));"],"challenge_test_list":[]}
{"name":"find-vertex-parabola","description":"Find the vertex of a given parabola function","text":"Write a function to find the vertex of a parabola.","code":"public (double, double) ParabolaVertex(double a, double b, double c) \n{ \n    var vertex = ((-b / (2 * a)), (((4 * a * c) - (b * b)) / (4 * a))); \n    return vertex; \n}","task_id":153,"test_setup_code":"","test_list":["Debug.Assert(ParabolaVertex(5, 3, 2).Equals((-0.3, 1.55)));","Debug.Assert(ParabolaVertex(9, 8, 4).Equals((-0.4444444444444444, 2.2222222222222223)));","Debug.Assert(ParabolaVertex(2, 4, 6).Equals((-1.0, 4.0)));"],"challenge_test_list":[]}
{"name":"extract-elements","description":"Extract elements from a specified 2D list","text":"Write a function to extract every specified element from a given two dimensional list.","code":"public List\u003Cint\u003E SpecifiedElement(List\u003CList\u003Cint\u003E\u003E nums, int N) {\n    List\u003Cint\u003E result = new List\u003Cint\u003E();\n    foreach (var i in nums) {\n        result.Add(i[N]);\n    }\n    return result;\n}","task_id":154,"test_setup_code":"","test_list":["Debug.Assert(SpecifiedElement(new int[][] { new int[] { 1, 2, 3, 2 }, new int[] { 4, 5, 6, 2 }, new int[] { 7, 1, 9, 5 } }, 0).SequenceEqual(new int[] { 1, 4, 7 }));","Debug.Assert(SpecifiedElement(new int[][] { new int[] { 1, 2, 3, 2 }, new int[] { 4, 5, 6, 2 }, new int[] { 7, 1, 9, 5 } }, 2).SequenceEqual(new int[] { 3, 6, 9 }));","Debug.Assert(SpecifiedElement(new int[][] { new int[] { 1, 2, 3, 2 }, new int[] { 4, 5, 6, 2 }, new int[] { 7, 1, 9, 5 } }, 3).SequenceEqual(new int[] { 2, 2, 5 }));"],"challenge_test_list":[]}
{"name":"toggle-even-bits","description":"Toggle even bits of a number using Python function","text":"Write a C# function to toggle all even bits of a given number.","code":"public static int EvenBitToggleNumber(int n) \n{ \n    int res = 0; \n    int count = 0; \n    int temp = n; \n    while (temp \u003E 0) \n    { \n        if (count % 2 == 1) \n        { \n            res |= (1 \u003C\u003C count); \n        } \n        count\u002B\u002B; \n        temp \u003E\u003E= 1; \n    } \n    return n ^ res; \n}","task_id":155,"test_setup_code":"","test_list":["Debug.Assert(EvenBitToggleNumber(10) == 0);","Debug.Assert(EvenBitToggleNumber(20) == 30);","Debug.Assert(EvenBitToggleNumber(30) == 20);"],"challenge_test_list":[]}
{"name":"tuple-to-int-tup","description":"Convert string tuple to integer tuple","text":"Write a function to convert a tuple of string values to a tuple of integer values.","code":"public static (int, int)[] TupleIntStr((string, string)[] tupleStr) {\n    var result = tupleStr.Select(x =\u003E (int.Parse(x.Item1), int.Parse(x.Item2))).ToArray();\n    return result;\n}","task_id":156,"test_setup_code":"","test_list":["Debug.Assert(TupleIntStr(new Tuple\u003Cstring, string\u003E[] { new Tuple\u003Cstring, string\u003E(\u0022333\u0022, \u002233\u0022), new Tuple\u003Cstring, string\u003E(\u00221416\u0022, \u002255\u0022) }).Equals(new Tuple\u003Cint, int\u003E[] { new Tuple\u003Cint, int\u003E(333, 33), new Tuple\u003Cint, int\u003E(1416, 55) }));","Debug.Assert(TupleIntStr((new Tuple\u003Cstring, string\u003E(\u0022999\u0022, \u002299\u0022), new Tuple\u003Cstring, string\u003E(\u00221000\u0022, \u0022500\u0022))) == (new Tuple\u003Cint, int\u003E(999, 99), new Tuple\u003Cint, int\u003E(1000, 500)));","Debug.Assert(TupleIntStr(((\u0022666\u0022, \u002266\u0022), (\u00221500\u0022, \u0022555\u0022))) == ((666, 66), (1500, 555)));"],"challenge_test_list":[]}
{"name":"run-length-encode","description":"Reflect run-length encoding in a list function","text":"Write a function to reflect the run-length encoding from a list.","code":"public List\u003CList\u003Cobject\u003E\u003E EncodeList(List\u003Cint\u003E list1) {\n    return list1.GroupBy(x =\u003E x)\n                 .Select(g =\u003E new List\u003Cobject\u003E { g.Count(), g.Key })\n                 .ToList();\n}","task_id":157,"test_setup_code":"","test_list":["Debug.Assert(EncodeList(new List\u003Cobject\u003E { 1, 1, 2, 3, 4, 4.3, 5, 1 }).SequenceEqual(new List\u003CList\u003Cobject\u003E\u003E { new List\u003Cobject\u003E { 2, 1 }, new List\u003Cobject\u003E { 1, 2 }, new List\u003Cobject\u003E { 1, 3 }, new List\u003Cobject\u003E { 1, 4 }, new List\u003Cobject\u003E { 1, 4.3 }, new List\u003Cobject\u003E { 1, 5 }, new List\u003Cobject\u003E { 1, 1 } }));","Debug.Assert(EncodeList(\u0022automatically\u0022).SequenceEqual(new List\u003CList\u003Cobject\u003E\u003E { new List\u003Cobject\u003E { 1, \u0027a\u0027 }, new List\u003Cobject\u003E { 1, \u0027u\u0027 }, new List\u003Cobject\u003E { 1, \u0027t\u0027 }, new List\u003Cobject\u003E { 1, \u0027o\u0027 }, new List\u003Cobject\u003E { 1, \u0027m\u0027 }, new List\u003Cobject\u003E { 1, \u0027a\u0027 }, new List\u003Cobject\u003E { 1, \u0027t\u0027 }, new List\u003Cobject\u003E { 1, \u0027i\u0027 }, new List\u003Cobject\u003E { 1, \u0027c\u0027 }, new List\u003Cobject\u003E { 1, \u0027a\u0027 }, new List\u003Cobject\u003E { 2, \u0027l\u0027 }, new List\u003Cobject\u003E { 1, \u0027y\u0027 } }));","Debug.Assert(EncodeList(\u0022python\u0022).SequenceEqual(new List\u003CList\u003Cobject\u003E\u003E { new List\u003Cobject\u003E { 1, \u0027p\u0027 }, new List\u003Cobject\u003E { 1, \u0027y\u0027 }, new List\u003Cobject\u003E { 1, \u0027t\u0027 }, new List\u003Cobject\u003E { 1, \u0027h\u0027 }, new List\u003Cobject\u003E { 1, \u0027o\u0027 }, new List\u003Cobject\u003E { 1, \u0027n\u0027 } } }));"],"challenge_test_list":[]}
{"name":"equalize-elements","description":"Find operations to equalize array elements","text":"Write a C# function to find k number of operations required to make all elements equal.","code":"public static int MinOps(int[] arr, int n, int k) \n{ \n    int max1 = arr.Max(); \n    int res = 0; \n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    { \n        if ((max1 - arr[i]) % k != 0) \n        { \n            return -1; \n        } \n        else \n        { \n            res \u002B= (max1 - arr[i]) / k; \n        } \n    } \n    return res; \n}","task_id":158,"test_setup_code":"","test_list":["Debug.Assert(MinOps(new int[] { 2, 2, 2, 2 }, 4, 3) == 0);","Debug.Assert(MinOps(new int[] { 4, 2, 6, 8 }, 4, 3) == -1);","Debug.Assert(MinOps(new int[] { 21, 33, 9, 45, 63 }, 5, 6) == 24);"],"challenge_test_list":[]}
{"name":"season-printer","description":"Print season based on given month and day","text":"Write a function to print the season for the given month and day.","code":"public string MonthSeason(string month, int days) {\n    string season;\n    if (month == \u0022January\u0022 || month == \u0022February\u0022 || month == \u0022March\u0022) {\n        season = \u0022winter\u0022;\n    } else if (month == \u0022April\u0022 || month == \u0022May\u0022 || month == \u0022June\u0022) {\n        season = \u0022spring\u0022;\n    } else if (month == \u0022July\u0022 || month == \u0022August\u0022 || month == \u0022September\u0022) {\n        season = \u0022summer\u0022;\n    } else {\n        season = \u0022autumn\u0022;\n    }\n    \n    if (month == \u0022March\u0022 \u0026\u0026 days \u003E 19) {\n        season = \u0022spring\u0022;\n    } else if (month == \u0022June\u0022 \u0026\u0026 days \u003E 20) {\n        season = \u0022summer\u0022;\n    } else if (month == \u0022September\u0022 \u0026\u0026 days \u003E 21) {\n        season = \u0022autumn\u0022;\n    } else if (month == \u0022October\u0022 \u0026\u0026 days \u003E 21) {\n        season = \u0022autumn\u0022;\n    } else if (month == \u0022November\u0022 \u0026\u0026 days \u003E 21) {\n        season = \u0022autumn\u0022;\n    } else if (month == \u0022December\u0022 \u0026\u0026 days \u003E 20) {\n        season = \u0022winter\u0022;\n    }\n    \n    return season;\n}","task_id":159,"test_setup_code":"","test_list":["Debug.Assert(MonthSeason(\u0022January\u0022, 4) == \u0022winter\u0022);","Debug.Assert(MonthSeason(\u0022October\u0022, 28) == \u0022autumn\u0022);","Debug.Assert(MonthSeason(\u0022June\u0022, 6) == \u0022spring\u0022);"],"challenge_test_list":[]}
{"name":"find-x-and-y","description":"Find integers x and y for ax \u002B by = n","text":"Write a function to find x and y that satisfies ax \u002B by = n.","code":"public (string, int, string, int) Solution(int a, int b, int n) \n{\n    int i = 0;\n    while (i * a \u003C= n) \n    {\n        if ((n - (i * a)) % b == 0) \n        {\n            return (\u0022x = \u0022, i, \u0022, y = \u0022, (n - (i * a)) / b);\n        }\n        i\u002B\u002B;\n    }\n    return (\u0022No solution\u0022);\n}","task_id":160,"test_setup_code":"","test_list":["Debug.Assert(Solution(2, 3, 7).Equals(Tuple.Create(\u0022x = \u0022, 2, \u0022, y = \u0022, 1)));","Debug.Assert(Solution(4, 2, 7) == \u0022No solution\u0022);","Debug.Assert(Solution(1, 13, 17).Equals(Tuple.Create(\u0022x = \u0022, 4, \u0022, y = \u0022, 1)));"],"challenge_test_list":[]}
{"name":"remove-list-items","description":"Remove elements from one list found in another","text":"Write a function to remove all elements from a given list present in another list.","code":"public List\u003Cint\u003E RemoveElements(List\u003Cint\u003E list1, List\u003Cint\u003E list2) {\n    List\u003Cint\u003E result = list1.Where(x =\u003E !list2.Contains(x)).ToList();\n    return result;\n}","task_id":161,"test_setup_code":"","test_list":["Debug.Assert(RemoveElements(new List\u003Cint\u003E { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, new List\u003Cint\u003E { 2, 4, 6, 8 }).SequenceEqual(new List\u003Cint\u003E { 1, 3, 5, 7, 9, 10 }));","Debug.Assert(RemoveElements(new List\u003Cint\u003E { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, new List\u003Cint\u003E { 1, 3, 5, 7 }).SequenceEqual(new List\u003Cint\u003E { 2, 4, 6, 8, 9, 10 }));","Debug.Assert(RemoveElements(new List\u003Cint\u003E { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, new List\u003Cint\u003E { 5, 7 }).SequenceEqual(new List\u003Cint\u003E { 1, 2, 3, 4, 6, 8, 9, 10 }));"],"challenge_test_list":[]}
{"name":"sum-positive-ints","description":"Sum positive integers in decreasing steps from n","text":"Write a function to calculate the sum of the positive integers of n\u002B(n-2)\u002B(n-4)... (until n-x =\u003C 0).","code":"public int SumSeries(int n) \n{\n    if (n \u003C 1) \n    {\n        return 0;\n    } \n    else \n    {\n        return n \u002B SumSeries(n - 2);\n    }\n}","task_id":162,"test_setup_code":"","test_list":["Debug.Assert(SumSeries(6) == 12);","Debug.Assert(SumSeries(10) == 30);","Debug.Assert(SumSeries(9) == 25);"],"challenge_test_list":[]}
{"name":"polygon-area.calc","description":"Calculate area of a regular polygon using a function","text":"Write a function to calculate the area of a regular polygon.","code":"public static double AreaPolygon(int s, double l)  \n{  \n    double area = s * (l * l) / (4 * Math.Tan(Math.PI / s));  \n    return area;  \n}","task_id":163,"test_setup_code":"","test_list":["Debug.Assert(AreaPolygon(4, 20) == 400.00000000000006);","Debug.Assert(AreaPolygon(10, 15) == 1731.1969896610804);","Debug.Assert(AreaPolygon(9, 7) == 302.90938549487214);"],"challenge_test_list":[]}
{"name":"sum-of-divs-check","description":"Check if sums of divisors are equal in Python","text":"Write a C# function to check whether the sum of divisors are same or not.","code":"using System;\n\npublic class DivisorSumCalculator\n{\n    public static int DivSum(int n)\n    {\n        int sum = 1;\n        int i = 2;\n        while (i * i \u003C= n)\n        {\n            if (n % i == 0)\n            {\n                sum \u002B= i \u002B (int)Math.Floor(n / (double)i);\n            }\n            i\u002B\u002B;\n        }\n        return sum;\n    }\n\n    public static bool AreEquivalent(int num1, int num2)\n    {\n        return DivSum(num1) == DivSum(num2);\n    }\n}","task_id":164,"test_setup_code":"","test_list":["Debug.Assert(!AreEquivalent(36, 57));","Debug.Assert(AreEquivalent(2, 4) == false);","Debug.Assert(AreEquivalent(23, 47) == true);"],"challenge_test_list":[]}
{"name":"count-char-position","description":"Count alphabetic position matches in a string","text":"Write a C# function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.","code":"public int CountCharPosition(string str1) \n{ \n    int countChars = 0; \n    for (int i = 0; i \u003C str1.Length; i\u002B\u002B) \n    { \n        if ((i == str1[i] - \u0027A\u0027) || (i == str1[i] - \u0027a\u0027)) \n        { \n            countChars\u002B\u002B; \n        } \n    } \n    return countChars; \n}","task_id":165,"test_setup_code":"","test_list":["Debug.Assert(CountCharPosition(\u0022xbcefg\u0022) == 2);","Debug.Assert(CountCharPosition(\u0022ABcED\u0022) == 3);","Debug.Assert(CountCharPosition(\u0022AbgdeF\u0022) == 5);"],"challenge_test_list":[]}
{"name":"count-xor-pairs","description":"Count pairs with even XOR in a list","text":"Write a C# function to count the pairs with xor as an even number.","code":"public int FindEvenPair(int[] A, int N) \n{\n    int evenPair = 0;\n    for (int i = 0; i \u003C N; i\u002B\u002B) \n    {\n        for (int j = i \u002B 1; j \u003C N; j\u002B\u002B) \n        {\n            if ((A[i] ^ A[j]) % 2 == 0) \n            {\n                evenPair\u002B\u002B;\n            }\n        }\n    }\n    return evenPair;\n}","task_id":166,"test_setup_code":"","test_list":["Debug.Assert(FindEvenPair(new int[] { 5, 4, 7, 2, 1 }, 5) == 4);","Debug.Assert(FindEvenPair(new int[] { 7, 2, 8, 1, 0, 5, 11 }, 7) == 9);","Debug.Assert(FindEvenPair(new int[] { 1, 2, 3 }, 3) == 1);"],"challenge_test_list":[]}
{"name":"smallest-power-of-2","description":"Find smallest power of 2 greater than n","text":"Write a C# function to find smallest power of 2 greater than or equal to n.","code":"public static int NextPowerOf2(int n) \n{ \n    int count = 0; \n    if (n != 0 \u0026\u0026 (n \u0026 (n - 1)) == 0) \n    { \n        return n; \n    } \n    while (n != 0) \n    { \n        n \u003E\u003E= 1; \n        count\u002B\u002B; \n    } \n    return 1 \u003C\u003C count; \n}","task_id":167,"test_setup_code":"","test_list":["Debug.Assert(NextPowerOf2(0) == 1);","Debug.Assert(NextPowerOf2(5) == 8);","Debug.Assert(NextPowerOf2(17) == 32);"],"challenge_test_list":[]}
{"name":"find-number-freq","description":"Count occurrences of a number in an array","text":"Write a C# function to find the frequency of a number in a given array.","code":"public int Frequency(List\u003Cint\u003E a, int x) \n{ \n    int count = 0; \n    foreach (int i in a) \n    { \n        if (i == x) count\u002B\u002B; \n    } \n    return count; \n}","task_id":168,"test_setup_code":"","test_list":["Debug.Assert(Frequency(new int[] { 1, 2, 3 }, 4) == 0);","Debug.Assert(Frequency(new int[] { 1, 2, 2, 3, 3, 3, 4 }, 3) == 3);","Debug.Assert(Frequency(new int[] { 0, 1, 2, 3, 1, 2 }, 1) == 2);"],"challenge_test_list":[]}
{"name":"pell-number-calc","description":"Calculate the nth Pell number using a function","text":"Write a function to calculate the nth pell number.","code":"public static int GetPell(int n) \n{ \n    if (n \u003C= 2) \n    { \n        return n; \n    } \n    int a = 1; \n    int b = 2; \n    for (int i = 3; i \u003C= n; i\u002B\u002B) \n    { \n        int c = 2 * b \u002B a; \n        a = b; \n        b = c; \n    } \n    return b; \n}","task_id":169,"test_setup_code":"","test_list":["Debug.Assert(GetPell(4) == 12);","Debug.Assert(GetPell(7) == 169);","Debug.Assert(GetPell(8) == 408);"],"challenge_test_list":[]}
{"name":"sum-between-idxs","description":"Calculate sum of numbers in a specified index range","text":"Write a function to find sum of the numbers in a list between the indices of a specified range.","code":"public int SumRangeList(List\u003Cint\u003E list1, int m, int n) \n{\n    int sumRange = 0;\n    for (int i = m; i \u003C= n; i\u002B\u002B)\n    {\n        sumRange \u002B= list1[i];\n    }\n    return sumRange;\n}","task_id":170,"test_setup_code":"","test_list":["Debug.Assert(SumRangeList(new List\u003Cint\u003E { 2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12 }, 8, 10) == 29);","Debug.Assert(SumRangeList(new List\u003Cint\u003E { 2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12 }, 5, 7) == 16);","Debug.Assert(SumRangeList(new List\u003Cint\u003E { 2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12 }, 7, 10) == 38);"],"challenge_test_list":[]}
{"name":"perimeter-penta","description":"Calculate the perimeter of a pentagon easily","text":"Write a function to find the perimeter of a pentagon.","code":"public double PerimeterPentagon(double a)  \n{  \n    double perimeter = 5 * a;  \n    return perimeter;  \n}","task_id":171,"test_setup_code":"","test_list":["Debug.Assert(PerimeterPentagon(5) == 25);","Debug.Assert(PerimeterPentagon(10) == 50);","Debug.Assert(PerimeterPentagon(15) == 75);"],"challenge_test_list":[]}
{"name":"std-occurrences","description":"Count occurrences of \u0027std\u0027 in a string","text":"Write a function to find the occurence of characters \u0027std\u0027 in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item","code":"public int CountOccurance(string s) {\n    int count = 0;\n    for (int i = 0; i \u003C s.Length - 2; i\u002B\u002B) {\n        if (s[i] == \u0027s\u0027 \u0026\u0026 s[i \u002B 1] == \u0027t\u0027 \u0026\u0026 s[i \u002B 2] == \u0027d\u0027) {\n            count\u002B\u002B;\n        }\n    }\n    return count;\n}","task_id":172,"test_setup_code":"","test_list":["Debug.Assert(CountOccurance(\u0022letstdlenstdporstd\u0022) == 3);","Debug.Assert(CountOccurance(\u0022truststdsolensporsd\u0022) == 1);","Debug.Assert(CountOccurance(\u0022makestdsostdworthit\u0022) == 2);"],"challenge_test_list":[]}
{"name":"remove-non-alnum","description":"Remove non-alphanumeric characters from a string","text":"Write a function to remove everything except alphanumeric characters from a string.","code":"public string RemoveSplchar(string text) \n{ \n    var pattern = new Regex(@\u0022[\\W_]\u002B\u0022);\n    return pattern.Replace(text, \u0022\u0022); \n}","task_id":173,"test_setup_code":"","test_list":["Debug.Assert(RemoveSplchar(\u0022python  @#\u0026^%$*program123\u0022) == \u0022pythonprogram123\u0022);","Debug.Assert(RemoveSplchar(\u0022python %^$@!^\u0026*()  programming24%$^^()    language\u0022) == \u0022pythonprogramming24language\u0022);","Debug.Assert(RemoveSplchar(\u0022python   ^%\u0026^()(\u002B_)(_^\u002667)                  program\u0022) == \u0022python67program\u0022);"],"challenge_test_list":[]}
{"name":"group-kv-pairs","description":"Group key-value pairs into a dictionary of lists","text":"Write a function to group a sequence of key-value pairs into a dictionary of lists.","code":"public Dictionary\u003CTKey, List\u003CTValue\u003E\u003E GroupKeyValue\u003CTKey, TValue\u003E(IEnumerable\u003CKeyValuePair\u003CTKey, TValue\u003E\u003E l)\n{\n    var result = new Dictionary\u003CTKey, List\u003CTValue\u003E\u003E();\n    foreach (var kvp in l)\n    {\n        if (!result.ContainsKey(kvp.Key))\n        {\n            result[kvp.Key] = new List\u003CTValue\u003E();\n        }\n        result[kvp.Key].Add(kvp.Value);\n    }\n    return result;\n}","task_id":174,"test_setup_code":"","test_list":["Debug.Assert(GroupKeyValue(new List\u003CTuple\u003Cstring, int\u003E\u003E { Tuple.Create(\u0022yellow\u0022, 1), Tuple.Create(\u0022blue\u0022, 2), Tuple.Create(\u0022yellow\u0022, 3), Tuple.Create(\u0022blue\u0022, 4), Tuple.Create(\u0022red\u0022, 1) }).SequenceEqual(new Dictionary\u003Cstring, List\u003Cint\u003E\u003E { { \u0022yellow\u0022, new List\u003Cint\u003E { 1, 3 } }, { \u0022blue\u0022, new List\u003Cint\u003E { 2, 4 } }, { \u0022red\u0022, new List\u003Cint\u003E { 1 } } }));","Debug.Assert(GroupKeyValue(new List\u003CTuple\u003Cstring, int\u003E\u003E { Tuple.Create(\u0022python\u0022, 1), Tuple.Create(\u0022python\u0022, 2), Tuple.Create(\u0022python\u0022, 3), Tuple.Create(\u0022python\u0022, 4), Tuple.Create(\u0022python\u0022, 5) }).SequenceEqual(new Dictionary\u003Cstring, List\u003Cint\u003E\u003E { { \u0022python\u0022, new List\u003Cint\u003E { 1, 2, 3, 4, 5 } } }));","Debug.Assert(GroupKeyValue(new Tuple\u003Cstring, int\u003E[] { \n    Tuple.Create(\u0022yellow\u0022, 100), \n    Tuple.Create(\u0022blue\u0022, 200), \n    Tuple.Create(\u0022yellow\u0022, 300), \n    Tuple.Create(\u0022blue\u0022, 400), \n    Tuple.Create(\u0022red\u0022, 100) \n}) == new Dictionary\u003Cstring, List\u003Cint\u003E\u003E { \n    { \u0022yellow\u0022, new List\u003Cint\u003E { 100, 300 } }, \n    { \u0022blue\u0022, new List\u003Cint\u003E { 200, 400 } }, \n    { \u0022red\u0022, new List\u003Cint\u003E { 100 } } \n});"],"challenge_test_list":[]}
{"name":"valid-parentheses","description":"Check if parentheses in a string are valid","text":"Write a function to verify validity of a string of parentheses.","code":"public bool IsValidParenthese(string str1) {\n    var stack = new Stack\u003Cchar\u003E();\n    var pchar = new Dictionary\u003Cchar, char\u003E {\n        { \u0027(\u0027, \u0027)\u0027 },\n        { \u0027{\u0027, \u0027}\u0027 },\n        { \u0027[\u0027, \u0027]\u0027 }\n    };\n    \n    foreach (char parenthese in str1) {\n        if (pchar.ContainsKey(parenthese)) {\n            stack.Push(parenthese);\n        } else if (stack.Count == 0 || pchar[stack.Pop()] != parenthese) {\n            return false;\n        }\n    }\n    return stack.Count == 0;\n}","task_id":175,"test_setup_code":"","test_list":["Debug.Assert(IsValidParenthese(\u0022(){}[]\u0022) == true);","Debug.Assert(IsValidParenthese(\u0022()[{)}\u0022) == false);","Debug.Assert(IsValidParenthese(\u0022()\u0022) == true);"],"challenge_test_list":[]}
{"name":"triangle-perim","description":"Calculate the perimeter of a triangle using a function","text":"Write a function to find the perimeter of a triangle.","code":"public int PerimeterTriangle(int a, int b, int c)\n{\n    int perimeter = a \u002B b \u002B c;\n    return perimeter;\n}","task_id":176,"test_setup_code":"","test_list":["Debug.Assert(PerimeterTriangle(10, 20, 30) == 60);","Debug.Assert(PerimeterTriangle(3, 4, 5) == 12);\n\npublic static int PerimeterTriangle(int a, int b, int c)\n{\n    return a \u002B b \u002B c;\n}","Debug.Assert(PerimeterTriangle(25, 35, 45) == 105);"],"challenge_test_list":[]}
{"name":"lcm-distinct-pair","description":"Find two numbers with LCM in specified range","text":"Write a C# function to find two distinct numbers such that their lcm lies within the given range.","code":"public (int, int) Answer(int L, int R) \n{\n    if (2 * L \u003C= R)\n    {\n        return (L, 2 * L);\n    }\n    else\n    {\n        return (-1, -1);\n    }\n}","task_id":177,"test_setup_code":"","test_list":["Debug.Assert(Answer(3, 8).Equals((3, 6)));","Debug.Assert(Answer(2, 6).Equals(ValueTuple.Create(2, 4)));","Debug.Assert(Answer(1, 3).Equals((1, 2)));"],"challenge_test_list":[]}
{"name":"string-searching","description":"Search for literal strings within a larger string","text":"Write a function to search some literals strings in a string.","code":"using System.Text.RegularExpressions;\n\npublic string StringLiterals(string[] patterns, string text)\n{\n    foreach (var pattern in patterns)\n    {\n        if (Regex.IsMatch(text, pattern))\n            return \u0022Matched!\u0022;\n        else\n            return \u0022Not Matched!\u0022;\n    }\n    return \u0022Not Matched!\u0022;\n}","task_id":178,"test_setup_code":"","test_list":["Debug.Assert(StringLiterals(new string[] { \u0022language\u0022 }, \u0022python language\u0022) == \u0022Matched!\u0022);","Debug.Assert(StringLiterals(new string[] { \u0022program\u0022 }, \u0022python language\u0022) == \u0022Not Matched!\u0022);","Debug.Assert(StringLiterals(new string[] {\u0022python\u0022}, \u0022programming language\u0022) == \u0022Not Matched!\u0022);"],"challenge_test_list":[]}
{"name":"keith-number-check","description":"Determine if a number is a keith number","text":"Write a function to find if the given number is a keith number or not.","code":"bool IsNumKeith(int x) \n{\n    List\u003Cint\u003E terms = new List\u003Cint\u003E(); \n    int temp = x; \n    int n = 0; \n    while (temp \u003E 0) \n    { \n        terms.Add(temp % 10); \n        temp = temp / 10; \n        n\u002B\u002B; \n    } \n    terms.Reverse(); \n    int nextTerm = 0; \n    int i = n; \n    while (nextTerm \u003C x) \n    { \n        nextTerm = 0; \n        for (int j = 1; j \u003C= n; j\u002B\u002B) \n        { \n            nextTerm \u002B= terms[i - j]; \n        } \n        terms.Add(nextTerm); \n        i\u002B\u002B; \n    } \n    return (nextTerm == x); \n}","task_id":179,"test_setup_code":"","test_list":["Debug.Assert(IsNumKeith(14) == true);","Debug.Assert(IsNumKeith(12) == false);","Debug.Assert(IsNumKeith(197) == true);"],"challenge_test_list":[]}
{"name":"distance-calculator","description":"Calculate distance between two geographic points","text":"Write a function to calculate distance between two points using latitude and longitude.","code":"using System;\n\npublic class GeoCalculator\n{\n    public static double DistanceLatLong(double slat, double slon, double elat, double elon)\n    {\n        return 6371.01 * Math.Acos(Math.Sin(slat) * Math.Sin(elat) \u002B Math.Cos(slat) * Math.Cos(elat) * Math.Cos(slon - elon));\n    }\n}","task_id":180,"test_setup_code":"","test_list":["Debug.Assert(DistanceLatLong(23.5, 67.5, 25.5, 69.5) == 12179.372041317429);","Debug.Assert(DistanceLatLong(10.5, 20.5, 30.5, 40.5) == 6069.397933300514);","Debug.Assert(DistanceLatLong(10, 20, 30, 40) == 6783.751974994595);"],"challenge_test_list":[]}
{"name":"longest-common-prefix","description":"Find the longest common prefix in a list of strings","text":"Write a function to find the longest common prefix in the given set of strings.","code":"string CommonPrefixUtil(string str1, string str2) \n{ \n    string result = \u0022\u0022; \n    int n1 = str1.Length; \n    int n2 = str2.Length; \n    int i = 0; \n    int j = 0; \n    while (i \u003C= n1 - 1 \u0026\u0026 j \u003C= n2 - 1) \n    { \n        if (str1[i] != str2[j]) \n            break; \n        result \u002B= str1[i]; \n        i\u002B\u002B; \n        j\u002B\u002B; \n    } \n    return result; \n} \n\nstring CommonPrefix(string[] arr, int n) \n{ \n    string prefix = arr[0]; \n    for (int i = 1; i \u003C n; i\u002B\u002B) \n    { \n        prefix = CommonPrefixUtil(prefix, arr[i]); \n    } \n    return prefix; \n}","task_id":181,"test_setup_code":"","test_list":["Debug.Assert(CommonPrefix(new string[] { \u0022tablets\u0022, \u0022tables\u0022, \u0022taxi\u0022, \u0022tamarind\u0022 }, 4) == \u0022ta\u0022);","Debug.Assert(CommonPrefix(new string[] { \u0022apples\u0022, \u0022ape\u0022, \u0022april\u0022 }, 3) == \u0022ap\u0022);","Debug.Assert(CommonPrefix(new string[] { \u0022teens\u0022, \u0022teenager\u0022, \u0022teenmar\u0022 }, 3) == \u0022teen\u0022);"],"challenge_test_list":[]}
{"name":"\u0060regex-char-types\u0060","description":"Regex function to identify character types","text":"Write a function to find uppercase, lowercase, special character and numeric values using regex.","code":"using System.Text.RegularExpressions;\n\npublic (List\u003Cstring\u003E, List\u003Cstring\u003E, List\u003Cstring\u003E, List\u003Cstring\u003E) FindCharacter(string input)\n{\n    var uppercaseCharacters = Regex.Matches(input, @\u0022[A-Z]\u0022)\n        .Cast\u003CMatch\u003E()\n        .Select(m =\u003E m.Value)\n        .ToList();\n    var lowercaseCharacters = Regex.Matches(input, @\u0022[a-z]\u0022)\n        .Cast\u003CMatch\u003E()\n        .Select(m =\u003E m.Value)\n        .ToList();\n    var numericalCharacters = Regex.Matches(input, @\u0022[0-9]\u0022)\n        .Cast\u003CMatch\u003E()\n        .Select(m =\u003E m.Value)\n        .ToList();\n    var specialCharacters = Regex.Matches(input, @\u0022[, .!?]\u0022)\n        .Cast\u003CMatch\u003E()\n        .Select(m =\u003E m.Value)\n        .ToList();\n\n    return (uppercaseCharacters, lowercaseCharacters, numericalCharacters, specialCharacters);\n}","task_id":182,"test_setup_code":"","test_list":["Debug.Assert(FindCharacter(\u0022ThisIsGeeksforGeeks\u0022).Equals((new char[] { \u0027T\u0027, \u0027I\u0027, \u0027G\u0027, \u0027G\u0027 }, new char[] { \u0027h\u0027, \u0027i\u0027, \u0027s\u0027, \u0027s\u0027, \u0027e\u0027, \u0027e\u0027, \u0027k\u0027, \u0027s\u0027, \u0027f\u0027, \u0027o\u0027, \u0027r\u0027, \u0027e\u0027, \u0027e\u0027, \u0027k\u0027, \u0027s\u0027 }, new char[] { }, new char[] { })));","Debug.Assert(FindCharacter(\u0022Hithere2\u0022).Item1.SequenceEqual(new[] {\u0027H\u0027}) \u0026\u0026 \n              FindCharacter(\u0022Hithere2\u0022).Item2.SequenceEqual(new[] {\u0027i\u0027, \u0027t\u0027, \u0027h\u0027, \u0027e\u0027, \u0027r\u0027, \u0027e\u0027}) \u0026\u0026 \n              FindCharacter(\u0022Hithere2\u0022).Item3.SequenceEqual(new[] {\u00272\u0027}) \u0026\u0026 \n              FindCharacter(\u0022Hithere2\u0022).Item4.Count == 0);","Debug.Assert(FindCharacter(\u0022HeyFolks32\u0022).Equals((new List\u003Cchar\u003E { \u0027H\u0027, \u0027F\u0027 }, new List\u003Cchar\u003E { \u0027e\u0027, \u0027y\u0027, \u0027o\u0027, \u0027l\u0027, \u0027k\u0027, \u0027s\u0027 }, new List\u003Cchar\u003E { \u00273\u0027, \u00272\u0027 }, new List\u003Cchar\u003E { })));"],"challenge_test_list":[]}
{"name":"distinct-pairs-k","description":"Count distinct pairs with a difference of k","text":"Write a function to count all the distinct pairs having a difference of k in any array.","code":"public int CountPairs(int[] arr, int n, int k) {\n    int count = 0;\n    for (int i = 0; i \u003C n; i\u002B\u002B) {\n        for (int j = i \u002B 1; j \u003C n; j\u002B\u002B) {\n            if (arr[i] - arr[j] == k || arr[j] - arr[i] == k) {\n                count\u002B\u002B;\n            }\n        }\n    }\n    return count;\n}","task_id":183,"test_setup_code":"","test_list":["Debug.Assert(CountPairs(new int[] { 1, 5, 3, 4, 2 }, 5, 3) == 2);","Debug.Assert(CountPairs(new int[] { 8, 12, 16, 4, 0, 20 }, 6, 4) == 5);","Debug.Assert(CountPairs(new int[] { 2, 4, 1, 3, 4 }, 5, 2) == 3);"],"challenge_test_list":[]}
{"name":"find-greater-than","description":"Find values in a list greater than a number","text":"Write a function to find all the values in a list that are greater than a specified number.","code":"public bool GreaterSpecificNum(List\u003Cint\u003E list, int num)  \n{  \n    return list.All(x =\u003E x \u003E= num);  \n}","task_id":184,"test_setup_code":"","test_list":["Debug.Assert(GreaterSpecificNum(new int[] { 220, 330, 500 }, 200) == true);","Debug.Assert(GreaterSpecificNum(new int[] { 12, 17, 21 }, 20) == false);","Debug.Assert(GreaterSpecificNum(new int[] { 1, 2, 3, 4 }, 10) == false);"],"challenge_test_list":[]}
{"name":"find-parabola-focus","description":"Find the focus of a given parabola function","text":"Write a function to find the focus of a parabola.","code":"public (double, double) ParabolaFocus(double a, double b, double c) \n{\n    var focus = (-b / (2 * a), ((4 * a * c) - (b * b) \u002B 1) / (4 * a));\n    return focus;\n}","task_id":185,"test_setup_code":"","test_list":["Debug.Assert(ParabolaFocus(5, 3, 2).Item1 == -0.3 \u0026\u0026 ParabolaFocus(5, 3, 2).Item2 == 1.6);","Debug.Assert(ParabolaFocus(9, 8, 4).Equals((-0.4444444444444444, 2.25)));","Debug.Assert(ParabolaFocus(2, 4, 6).Equals((-1.0, 4.125)));"],"challenge_test_list":[]}
{"name":"string-search-regex","description":"Search literals in a string using regex function","text":"Write a function to search some literals strings in a string by using regex.","code":"public string CheckLiterals(string text, List\u003Cstring\u003E patterns) {\n    foreach (var pattern in patterns) {\n        if (Regex.IsMatch(text, pattern)) {\n            return \u0022Matched!\u0022;\n        } else {\n            return \u0022Not Matched!\u0022;\n        }\n    }\n    return \u0022Not Matched!\u0022; // Added a return for case where no patterns are checked\n}","task_id":186,"test_setup_code":"","test_list":["Debug.Assert(CheckLiterals(\u0022The quick brown fox jumps over the lazy dog.\u0022, new string[] { \u0022fox\u0022 }) == \u0022Matched!\u0022);","Debug.Assert(CheckLiterals(\u0022The quick brown fox jumps over the lazy dog.\u0022, new string[] { \u0022horse\u0022 }) == \u0022Not Matched!\u0022);","Debug.Assert(CheckLiterals(\u0022The quick brown fox jumps over the lazy dog.\u0022, new string[] { \u0022lazy\u0022 }) == \u0022Matched!\u0022);"],"challenge_test_list":[]}
{"name":"longest-common-sub","description":"Find the longest common subsequence of two sequences","text":"Write a function to find the longest common subsequence for the given two sequences.","code":"public int LongestCommonSubsequence(char[] X, char[] Y, int m, int n) \n{ \n    if (m == 0 || n == 0) \n        return 0; \n    else if (X[m - 1] == Y[n - 1]) \n        return 1 \u002B LongestCommonSubsequence(X, Y, m - 1, n - 1); \n    else \n        return Math.Max(LongestCommonSubsequence(X, Y, m, n - 1), LongestCommonSubsequence(X, Y, m - 1, n)); \n}","task_id":187,"test_setup_code":"","test_list":["Debug.Assert(LongestCommonSubsequence(\u0022AGGTAB\u0022, \u0022GXTXAYB\u0022, 6, 7) == 4);","Debug.Assert(LongestCommonSubsequence(\u0022ABCDGH\u0022, \u0022AEDFHR\u0022, 6, 6) == 3);","Debug.Assert(LongestCommonSubsequence(\u0022AXYT\u0022, \u0022AYZX\u0022, 4, 4) == 2);"],"challenge_test_list":[]}
{"name":"product-of-squares","description":"Check if a number can be expressed as two squares","text":"Write a C# function to check whether the given number can be represented by product of two squares or not.","code":"bool ProdSquare(int n)  \n{  \n    for (int i = 2; i \u003C= n; i\u002B\u002B)  \n    {  \n        if (i * i \u003C n \u002B 1)  \n        {  \n            for (int j = 2; j \u003C= n; j\u002B\u002B)  \n            {  \n                if (i * i * j * j == n)  \n                {  \n                    return true;  \n                }  \n            }  \n        }  \n    }  \n    return false;  \n}","task_id":188,"test_setup_code":"","test_list":["Debug.Assert(ProdSquare(25) == false);","Debug.Assert(ProdSquare(30) == false);","Debug.Assert(ProdSquare(16) == true);"],"challenge_test_list":[]}
{"name":"first-missing-pos","description":"Find the first missing positive integer in an array","text":"Write a C# function to find the first missing positive number.","code":"int FirstMissingPositive(int[] arr, int n) \n{ \n    int ptr = 0; \n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    { \n        if (arr[i] == 1) \n        { \n            ptr = 1; \n            break; \n        } \n    } \n    if (ptr == 0) \n    { \n        return 1; \n    } \n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    { \n        if (arr[i] \u003C= 0 || arr[i] \u003E n) \n        { \n            arr[i] = 1; \n        } \n    } \n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    { \n        arr[(arr[i] - 1) % n] \u002B= n; \n    } \n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    { \n        if (arr[i] \u003C= n) \n        { \n            return i \u002B 1; \n        } \n    } \n    return n \u002B 1; \n}","task_id":189,"test_setup_code":"","test_list":["Debug.Assert(FirstMissingPositive(new int[] { 1, 2, 3, -1, 5 }, 5) == 4);","Debug.Assert(FirstMissingPositive(new int[] { 0, -1, -2, 1, 5, 8 }, 6) == 2);","Debug.Assert(FirstMissingPositive(new int[] { 0, 1, 2, 5, -8 }, 5) == 3);"],"challenge_test_list":[]}
{"name":"count-int-coords","description":"Count integral points within a square in Python","text":"Write a C# function to count the number of integral co-ordinates that lie inside a square.","code":"public int CountIntegralPoints(int x1, int y1, int x2, int y2) \n{ \n    return ((y2 - y1 - 1) * (x2 - x1 - 1)); \n}","task_id":190,"test_setup_code":"","test_list":["Debug.Assert(CountIntegralPoints(1, 1, 4, 4) == 4);","Debug.Assert(CountIntegralPoints(1, 2, 1, 2) == 1);","Debug.Assert(CountIntegralPoints(4, 2, 6, 4) == 1);"],"challenge_test_list":[]}
{"name":"check-30-days","description":"Check if month has 30 days or not","text":"Write a function to check whether the given month name contains 30 days or not.","code":"public bool CheckMonthNumber(string monthName3)\n{\n    if (monthName3 == \u0022April\u0022 || monthName3 == \u0022June\u0022 || monthName3 == \u0022September\u0022 || monthName3 == \u0022November\u0022)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}","task_id":191,"test_setup_code":"","test_list":["Debug.Assert(CheckMonthNumber(\u0022February\u0022) == false);","Debug.Assert(CheckMonthNumber(\u0022June\u0022) == true);","Debug.Assert(CheckMonthNumber(\u0022April\u0022) == true);"],"challenge_test_list":[]}
{"name":"check-letter-number","description":"Check if a string contains letters and numbers","text":"Write a C# function to check whether a string has atleast one letter and one number.","code":"public bool CheckString(string str) \n{\n    bool flagL = false;\n    bool flagN = false;\n    foreach (char i in str) \n    {\n        if (char.IsLetter(i)) \n        {\n            flagL = true;  \n        }\n        if (char.IsDigit(i)) \n        {\n            flagN = true;\n        }\n    }\n    return flagL \u0026\u0026 flagN;\n}","task_id":192,"test_setup_code":"","test_list":["Debug.Assert(CheckString(\u0022thishasboth29\u0022) == true);","Debug.Assert(CheckString(\u0022python\u0022) == false);","Debug.Assert(CheckString(\u0022string\u0022) == false);"],"challenge_test_list":[]}
{"name":"remove-dup-tuple","description":"Remove duplicates from a given tuple","text":"Write a function to remove the duplicates from the given tuple.","code":"public Tuple\u003CT\u003E RemoveTuple\u003CT\u003E(Tuple\u003CT\u003E testTup)\r\n{\r\n    var res = new HashSet\u003CT\u003E(testTup).ToArray();\r\n    return Tuple.Create(res);\r\n}","task_id":193,"test_setup_code":"","test_list":["Debug.Assert(RemoveTuple(new Tuple\u003Cint, int, int, int, int, int, int, int, int\u003E(1, 3, 5, 2, 3, 5, 1, 1, 3)).Equals(new Tuple\u003Cint, int, int, int\u003E(1, 2, 3, 5)));","Debug.Assert(RemoveTuple(new Tuple\u003Cint, int, int, int, int, int, int, int, int, int\u003E(2, 3, 4, 4, 5, 6, 6, 7, 8, 8)).SequenceEqual(new Tuple\u003Cint, int, int, int, int, int, int\u003E(2, 3, 4, 5, 6, 7, 8)));","Debug.Assert(RemoveTuple(new Tuple\u003Cint, int, int, int, int, int, int, int\u003E(11, 12, 13, 11, 11, 12, 14, 13)).Equals(new Tuple\u003Cint, int, int, int\u003E(11, 12, 13, 14)));"],"challenge_test_list":[]}
{"name":"octal-to-decimal","description":"Convert octal numbers to decimal in Python","text":"Write a C# function to convert octal number to decimal number.","code":"public int OctalToDecimal(int n)  \n{  \n    int num = n;  \n    int decValue = 0;  \n    int baseValue = 1;  \n    int temp = num;  \n    while (temp != 0)  \n    {  \n        int lastDigit = temp % 10;  \n        temp /= 10;  \n        decValue \u002B= lastDigit * baseValue;  \n        baseValue *= 8;  \n    }  \n    return decValue;  \n}","task_id":194,"test_setup_code":"","test_list":["Debug.Assert(OctalToDecimal(25) == 21);","Debug.Assert(OctalToDecimal(30) == 24);","Debug.Assert(OctalToDecimal(40) == 32);"],"challenge_test_list":[]}
{"name":"first-pos-sorted","description":"Find first index of an element in sorted array","text":"Write a C# function to find the first position of an element in a sorted array.","code":"int First(int[] arr, int x, int n) \n{ \n    int low = 0; \n    int high = n - 1; \n    int res = -1; \n    while (low \u003C= high) \n    { \n        int mid = (low \u002B high) / 2; \n        if (arr[mid] \u003E x) \n        { \n            high = mid - 1; \n        } \n        else if (arr[mid] \u003C x) \n        { \n            low = mid \u002B 1; \n        } \n        else \n        { \n            res = mid; \n            high = mid - 1; \n        } \n    } \n    return res; \n}","task_id":195,"test_setup_code":"","test_list":["Debug.Assert(First(new int[] { 1, 2, 3, 4, 5, 6, 6 }, 6, 6) == 5);","Debug.Assert(First(new int[] { 1, 2, 2, 2, 3, 2, 2, 4, 2 }, 2, 9) == 1);","Debug.Assert(First(new int[] { 1, 2, 3 }, 1, 3) == 0);"],"challenge_test_list":[]}
{"name":"remove-tuple-k","description":"Remove tuples of length k from a list","text":"Write a function to remove all the tuples with length k.","code":"public List\u003CTuple\u003E RemoveTuples(List\u003CTuple\u003E testList, int K) \n{\n    List\u003CTuple\u003E res = new List\u003CTuple\u003E();\n    foreach (var ele in testList)\n    {\n        if (ele.Item2 != K) // Assuming we\u0027re checking the length of the tuple.\n        {\n            res.Add(ele);\n        }\n    }\n    return res;\n}","task_id":196,"test_setup_code":"","test_list":["Debug.Assert(RemoveTuples(new List\u003CTuple\u003Cint, int\u003E\u003E { Tuple.Create(4, 5), Tuple.Create(4), Tuple.Create(8, 6, 7), Tuple.Create(1), Tuple.Create(3, 4, 6, 7) }, 1).SequenceEqual(new List\u003CTuple\u003Cint, int\u003E\u003E { Tuple.Create(4, 5), Tuple.Create(8, 6, 7), Tuple.Create(3, 4, 6, 7) }));","Debug.Assert(RemoveTuples(new List\u003CTuple\u003Cint, int\u003E\u003E { Tuple.Create(4, 5), Tuple.Create(4, 5), Tuple.Create(6, 7), Tuple.Create(1, 2, 3), Tuple.Create(3, 4, 6, 7) }, 2).SequenceEqual(new List\u003CTuple\u003Cint, int\u003E\u003E { Tuple.Create(1, 2, 3), Tuple.Create(3, 4, 6, 7) }));","Debug.Assert(RemoveTuples(new List\u003CTuple\u003Cint, int, int\u003E\u003E { Tuple.Create(1, 4, 4), Tuple.Create(4, 3), Tuple.Create(8, 6, 7), Tuple.Create(1), Tuple.Create(3, 6, 7) }, 3).SequenceEqual(new List\u003CTuple\u003Cint\u003E\u003E { Tuple.Create(4, 3), Tuple.Create(1) }));"],"challenge_test_list":[]}
{"name":"tuple-exp-one.py","description":"Exponentiate two given tuples in a function","text":"Write a function to perform the exponentiation of the given two tuples.","code":"public static Tuple\u003Cint\u003E FindExponentio(Tuple\u003Cint\u003E testTup1, Tuple\u003Cint\u003E testTup2) {\n    var res = testTup1.Zip(testTup2, (ele1, ele2) =\u003E (int)Math.Pow(ele1, ele2)).ToArray();\n    return Tuple.Create(res);\n}","task_id":197,"test_setup_code":"","test_list":["Debug.Assert(FindExponentio(new int[] { 10, 4, 5, 6 }, new int[] { 5, 6, 7, 5 }) == new int[] { 100000, 4096, 78125, 7776 });","Debug.Assert(FindExponentio(new int[] { 11, 5, 6, 7 }, new int[] { 6, 7, 8, 6 }).SequenceEqual(new int[] { 1771561, 78125, 1679616, 117649 }));","Debug.Assert(FindExponentio(new[] { 12, 6, 7, 8 }, new[] { 7, 8, 9, 7 }).SequenceEqual(new[] { 35831808, 1679616, 40353607, 2097152 }));"],"challenge_test_list":[]}
{"name":"largest-triangle","description":"Find largest triangle in an ellipse","text":"Write a function to find the largest triangle that can be inscribed in an ellipse.","code":"public double LargestTriangle(double a, double b) \n{ \n    if (a \u003C 0 || b \u003C 0) \n    { \n        return -1; \n    } \n    double area = (3 * Math.Sqrt(3) * Math.Pow(a, 2)) / (4 * b);  \n    return area; \n}","task_id":198,"test_setup_code":"","test_list":["Debug.Assert(LargestTriangle(4, 2) == 10.392304845413264);","Debug.Assert(LargestTriangle(5, 7) == 4.639421805988064);","Debug.Assert(LargestTriangle(9, 1) == 105.2220865598093);"],"challenge_test_list":[]}
{"name":"highest-power-of-2","description":"Find highest power of 2 less than or equal to n","text":"Write a C# function to find highest power of 2 less than or equal to given number.","code":"public int HighestPowerOf2(int n) \n{ \n    int res = 0; \n    for (int i = n; i \u003E 0; i--) \n    { \n        if ((i \u0026 (i - 1)) == 0) \n        { \n            res = i; \n            break; \n        } \n    } \n    return res; \n}","task_id":199,"test_setup_code":"","test_list":["Debug.Assert(HighestPowerOf2(10) == 8);","Debug.Assert(HighestPowerOf2(19) == 16);","Debug.Assert(HighestPowerOf2(32) == 32);"],"challenge_test_list":[]}
{"name":"max-positions.py","description":"Find indices of maximum values in a list","text":"Write a function to find all index positions of the maximum values in a given list.","code":"public List\u003Cint\u003E PositionMax(List\u003Cint\u003E list1) \n{\n    int maxVal = list1.Max();\n    List\u003Cint\u003E maxResult = new List\u003Cint\u003E();\n    for (int i = 0; i \u003C list1.Count; i\u002B\u002B) \n    {\n        if (list1[i] == maxVal) \n        {\n            maxResult.Add(i);\n        }\n    }\n    return maxResult;\n}","task_id":200,"test_setup_code":"","test_list":["Debug.Assert(PositionMax(new List\u003Cint\u003E { 12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54 }).SequenceEqual(new List\u003Cint\u003E { 7 }));","Debug.Assert(PositionMax(new int[] { 1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5 }).SequenceEqual(new int[] { 7, 8, 9, 10 }));","Debug.Assert(PositionMax(new int[] { 2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12 }).SequenceEqual(new int[] { 11 }));"],"challenge_test_list":[]}
{"name":"check-same-list","description":"Check if all elements in a list are identical","text":"Write a C# function to check whether the elements in a list are same or not.","code":"public bool ChkList(List\u003Cobject\u003E lst) \n{\n    return lst.Distinct().Count() == 1;\n}","task_id":201,"test_setup_code":"","test_list":["Debug.Assert(ChkList(new string[] { \u0022one\u0022, \u0022one\u0022, \u0022one\u0022 }) == true);","Debug.Assert(!ChkList(new List\u003Cstring\u003E { \u0022one\u0022, \u0022Two\u0022, \u0022Three\u0022 }));","Debug.Assert(ChkList(new string[] { \u0022bigdata\u0022, \u0022python\u0022, \u0022Django\u0022 }) == false);"],"challenge_test_list":[]}
{"name":"remove-even-chars","description":"Remove even-indexed characters from a string","text":"Write a function to remove even characters in a string.","code":"public string RemoveEven(string str1) \n{\n    string str2 = string.Empty;\n    for (int i = 1; i \u003C= str1.Length; i\u002B\u002B) \n    {\n        if (i % 2 != 0) \n        {\n            str2 \u002B= str1[i - 1];\n        }\n    }\n    return str2;\n}","task_id":202,"test_setup_code":"","test_list":["Debug.Assert(RemoveEven(\u0022python\u0022) == \u0022pto\u0022);","Debug.Assert(RemoveEven(\u0022program\u0022) == \u0022porm\u0022);","Debug.Assert(RemoveEven(\u0022language\u0022) == \u0022lnug\u0022);"],"challenge_test_list":[]}
{"name":"hamming-distance","description":"Calculate Hamming distance between two integers","text":"Write a C# function to find the hamming distance between given two integers.","code":"public int HammingDistance(int n1, int n2) \n{\n    int x = n1 ^ n2;\n    int setBits = 0;\n    while (x \u003E 0) \n    {\n        setBits \u002B= x \u0026 1;\n        x \u003E\u003E= 1;\n    }\n    return setBits;\n}","task_id":203,"test_setup_code":"","test_list":["Debug.Assert(HammingDistance(4, 8) == 2);","Debug.Assert(HammingDistance(2, 4) == 2);","Debug.Assert(HammingDistance(1, 2) == 2);"],"challenge_test_list":[]}
{"name":"count-char-in-str","description":"Count character occurrences in a string using Python","text":"Write a C# function to count the occurrence of a given character in a string.","code":"public int Count(string s, char c) \n{ \n    int res = 0; \n    for (int i = 0; i \u003C s.Length; i\u002B\u002B) \n    { \n        if (s[i] == c) \n        { \n            res\u002B\u002B; \n        } \n    } \n    return res; \n}","task_id":204,"test_setup_code":"","test_list":["Debug.Assert(Count(\u0022abcc\u0022, \u0022c\u0022) == 2);","Debug.Assert(Count(\u0022ababca\u0022, \u0022a\u0022) == 3);","Debug.Assert(Count(\u0022mnmm0pm\u0022, \u0022m\u0022) == 4);"],"challenge_test_list":[]}
{"name":"inversion-counts","description":"Find inversions in a list of tuples elements","text":"Write a function to find the inversions of tuple elements in the given tuple list.","code":"public Tuple\u003Cint\u003E InversionElements(Tuple\u003Cint\u003E testTup) {\n    var res = Tuple.Create(testTup.Item1, ~testTup.Item1, testTup.Item2, ~testTup.Item2, testTup.Item3, ~testTup.Item3);\n    return res;\n}","task_id":205,"test_setup_code":"","test_list":["Debug.Assert(InversionElements(new int[] { 7, 8, 9, 1, 10, 7 }).SequenceEqual(new int[] { -8, -9, -10, -2, -11, -8 }));","Debug.Assert(InversionElements(new int[] { 2, 4, 5, 6, 1, 7 }).SequenceEqual(new int[] { -3, -5, -6, -7, -2, -8 }));","Debug.Assert(InversionElements(new int[] { 8, 9, 11, 14, 12, 13 }).SequenceEqual(new int[] { -9, -10, -12, -15, -13, -14 }));"],"challenge_test_list":[]}
{"name":"adjacent-element-concatenation","description":"Concatenate adjacent elements in tuples","text":"Write a function to perform the adjacent element concatenation in the given tuples.","code":"public static Tuple\u003Cstring\u003E ConcatenateElements(Tuple\u003Cstring\u003E testTup) \n{\n    var res = testTup.Zip(testTup.Skip(1), (i, j) =\u003E i \u002B j).ToArray();\n    return Tuple.Create(res);\n}","task_id":206,"test_setup_code":"","test_list":["Debug.Assert(ConcatenateElements(new Tuple\u003Cstring, string, string, string, string, string\u003E(\u0022DSP \u0022, \u0022IS \u0022, \u0022BEST \u0022, \u0022FOR \u0022, \u0022ALL \u0022, \u0022UTS\u0022)) == new Tuple\u003Cstring, string, string, string, string\u003E(\u0022DSP IS \u0022, \u0022IS BEST \u0022, \u0022BEST FOR \u0022, \u0022FOR ALL \u0022, \u0022ALL UTS\u0022));","Debug.Assert(ConcatenateElements(new Tuple\u003Cstring, string, string, string, string, string\u003E(\u0022RES \u0022, \u0022IS \u0022, \u0022BEST \u0022, \u0022FOR \u0022, \u0022ALL \u0022, \u0022QESR\u0022)) == new Tuple\u003Cstring, string, string, string, string\u003E(\u0022RES IS \u0022, \u0022IS BEST \u0022, \u0022BEST FOR \u0022, \u0022FOR ALL \u0022, \u0022ALL QESR\u0022));","Debug.Assert(ConcatenateElements((\u0022MSAM\u0022, \u0022IS \u0022, \u0022BEST \u0022, \u0022FOR \u0022, \u0022ALL \u0022, \u0022SKD\u0022)).SequenceEqual(new[] { \u0022MSAMIS \u0022, \u0022IS BEST \u0022, \u0022BEST FOR \u0022, \u0022FOR ALL \u0022, \u0022ALL SKD\u0022 }));"],"challenge_test_list":[]}
{"name":"long-repeating-subs","description":"Count longest repeating subsequences with position constraints","text":"Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.","code":"public int FindLongestRepeatingSubseq(string str) \n{\n    int n = str.Length;\n    int[,] dp = new int[n \u002B 1, n \u002B 1];\n\n    for (int i = 1; i \u003C= n; i\u002B\u002B)\n    {\n        for (int j = 1; j \u003C= n; j\u002B\u002B)\n        {\n            if (str[i - 1] == str[j - 1] \u0026\u0026 i != j)\n            {\n                dp[i, j] = 1 \u002B dp[i - 1, j - 1];\n            }\n            else\n            {\n                dp[i, j] = Math.Max(dp[i, j - 1], dp[i - 1, j]);\n            }\n        }\n    }\n    return dp[n, n];\n}","task_id":207,"test_setup_code":"","test_list":["Debug.Assert(FindLongestRepeatingSubseq(\u0022AABEBCDD\u0022) == 3);","Debug.Assert(FindLongestRepeatingSubseq(\u0022aabb\u0022) == 2);","Debug.Assert(FindLongestRepeatingSubseq(\u0022aab\u0022) == 1);"],"challenge_test_list":[]}
{"name":"check-decimal-2","description":"Check decimal format with precision of two using regex","text":"Write a function to check the given decimal with a precision of 2 by using regex.","code":"using System.Text.RegularExpressions;\n\npublic static bool IsDecimal(string num)\n{\n    Regex numFetch = new Regex(@\u0022^[0-9]\u002B(\\.[0-9]{1,2})?$\u0022);\n    Match result = numFetch.Match(num);\n    return result.Success;\n}","task_id":208,"test_setup_code":"","test_list":["Debug.Assert(IsDecimal(\u0022123.11\u0022) == true);","Debug.Assert(IsDecimal(\u00220.21\u0022) == true);","Debug.Assert(IsDecimal(\u0022123.1214\u0022) == false);"],"challenge_test_list":[]}
{"name":"delete-min-and-insert","description":"Delete smallest heap element and insert new item","text":"Write a function to delete the smallest element from the given heap and then insert a new item.","code":"using System.Collections.Generic;\n\npublic List\u003Cint\u003E HeapReplace(List\u003Cint\u003E heap, int a)\n{\n    Heapify(heap);\n    heap[0] = a;\n    Heapify(heap);\n    return heap;\n}\n\nprivate void Heapify(List\u003Cint\u003E heap)\n{\n    int n = heap.Count;\n    for (int i = n / 2 - 1; i \u003E= 0; i--)\n    {\n        SiftDown(heap, i, n);\n    }\n}\n\nprivate void SiftDown(List\u003Cint\u003E heap, int i, int n)\n{\n    int smallest = i;\n    int left = 2 * i \u002B 1;\n    int right = 2 * i \u002B 2;\n\n    if (left \u003C n \u0026\u0026 heap[left] \u003C heap[smallest])\n    {\n        smallest = left;\n    }\n\n    if (right \u003C n \u0026\u0026 heap[right] \u003C heap[smallest])\n    {\n        smallest = right;\n    }\n\n    if (smallest != i)\n    {\n        int temp = heap[i];\n        heap[i] = heap[smallest];\n        heap[smallest] = temp;\n        SiftDown(heap, smallest, n);\n    }\n}","task_id":209,"test_setup_code":"","test_list":["Debug.Assert(HeapReplace(new List\u003Cint\u003E { 25, 44, 68, 21, 39, 23, 89 }, 21).SequenceEqual(new List\u003Cint\u003E { 21, 25, 23, 44, 39, 68, 89 }));","Debug.Assert(HeapReplace(new List\u003Cint\u003E { 25, 44, 68, 21, 39, 23, 89 }, 110).SequenceEqual(new List\u003Cint\u003E { 23, 25, 68, 44, 39, 110, 89 }));","Debug.Assert(HeapReplace(new List\u003Cint\u003E { 25, 44, 68, 21, 39, 23, 89 }, 500).SequenceEqual(new List\u003Cint\u003E { 23, 25, 68, 44, 39, 500, 89 }));"],"challenge_test_list":[]}
{"name":"check-allowed-chars","description":"Check string for allowed characters using regex","text":"Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.","code":"public static bool IsAllowedSpecificChar(string input)\r\n{\r\n    var getChar = new Regex(@\u0022[^a-zA-Z0-9\\.]\u0022);\r\n    var match = getChar.Match(input);\r\n    return !match.Success;\r\n}","task_id":210,"test_setup_code":"","test_list":["Debug.Assert(IsAllowedSpecificChar(\u0022ABCDEFabcdef123450\u0022) == true);","Debug.Assert(IsAllowedSpecificChar(\u0022*\u0026%@#!}{\u0022) == false);","Debug.Assert(IsAllowedSpecificChar(\u0022HELLOhowareyou98765\u0022) == true);"],"challenge_test_list":[]}
{"name":"count-oth-nth-bits","description":"Count numbers with specific bits set in Python","text":"Write a C# function to count numbers whose oth and nth bits are set.","code":"public int CountNum(int n) \n{ \n    if (n == 1) \n    { \n        return 1; \n    } \n    int count = (int)Math.Pow(2, n - 2); \n    return count; \n}","task_id":211,"test_setup_code":"","test_list":["Debug.Assert(CountNum(2) == 1);","Debug.Assert(CountNum(3) == 2);","Debug.Assert(CountNum(1) == 1);"],"challenge_test_list":[]}
{"name":"sum-of-fourth-pow","description":"Sum of fourth powers of n natural numbers","text":"Write a C# function to find the sum of fourth power of n natural numbers.","code":"public int FourthPowerSum(int n) \n{ \n    int sum = 0; \n    for (int i = 1; i \u003C= n; i\u002B\u002B) \n    { \n        sum \u002B= (i * i * i * i); \n    } \n    return sum; \n}","task_id":212,"test_setup_code":"","test_list":["Debug.Assert(FourthPowerSum(2) == 17);","Debug.Assert(FourthPowerSum(4) == 354);","Debug.Assert(FourthPowerSum(6) == 2275);"],"challenge_test_list":[]}
{"name":"string-tuple-concatenate","description":"Concatenate two tuples of strings into one","text":"Write a function to perform the concatenation of two string tuples.","code":"public static Tuple\u003Cstring\u003E ConcatenateStrings(Tuple\u003Cstring\u003E testTup1, Tuple\u003Cstring\u003E testTup2) {\n    var res = Tuple.Create(testTup1.Item1 \u002B testTup2.Item1, testTup1.Item2 \u002B testTup2.Item2);\n    return res;\n}","task_id":213,"test_setup_code":"","test_list":["Debug.Assert(ConcatenateStrings(new string[] { \u0022Manjeet\u0022, \u0022Nikhil\u0022, \u0022Akshat\u0022 }, new string[] { \u0022 Singh\u0022, \u0022 Meherwal\u0022, \u0022 Garg\u0022 }).SequenceEqual(new string[] { \u0022Manjeet Singh\u0022, \u0022Nikhil Meherwal\u0022, \u0022Akshat Garg\u0022 }));","Debug.Assert(ConcatenateStrings(new string[] { \u0022Shaik\u0022, \u0022Ayesha\u0022, \u0022Sanya\u0022 }, new string[] { \u0022 Dawood\u0022, \u0022 Begum\u0022, \u0022 Singh\u0022 }) == new string[] { \u0022Shaik Dawood\u0022, \u0022Ayesha Begum\u0022, \u0022Sanya Singh\u0022 });","Debug.Assert(ConcatenateStrings((\u0022Harpreet\u0022, \u0022Priyanka\u0022, \u0022Muskan\u0022), (\u0022Kour\u0022, \u0022 Agarwal\u0022, \u0022Sethi\u0022)) == (\u0022HarpreetKour\u0022, \u0022Priyanka Agarwal\u0022, \u0022MuskanSethi\u0022));"],"challenge_test_list":[]}
{"name":"radians-to-degrees","description":"Convert radians to degrees in a simple function","text":"Write a function to convert radians to degrees.","code":"public static double DegreeRadian(double radian)  \n{  \n    double degree = radian * (180 / Math.PI);  \n    return degree;  \n}","task_id":214,"test_setup_code":"","test_list":["Debug.Assert(DegreeRadian(90) == 5156.620156177409);","Debug.Assert(DegreeRadian(60) == 3437.746770784939);","Debug.Assert(DegreeRadian(120) == 6875.493541569878);"],"challenge_test_list":[]}
{"name":"decode-rle-list","description":"Decode a run-length encoded list into original values","text":"Write a function to decode a run-length encoded given list.","code":"public List\u003Cint\u003E DecodeList(List\u003Cobject\u003E alist) \n{\n    List\u003Cint\u003E Aux(object g) \n    {\n        if (g is List\u003Cobject\u003E list)\n        {\n            return new List\u003Cint\u003E { (int)list[1], (int)list[0] };\n        }\n        else\n        {\n            return new List\u003Cint\u003E { (int)g, 0 };\n        }\n    }\n\n    List\u003Cint\u003E result = new List\u003Cint\u003E();\n    foreach (var g in alist) \n    {\n        var auxResult = Aux(g);\n        foreach (var x in auxResult) \n        {\n            for (int i = 0; i \u003C x; i\u002B\u002B) \n            {\n                result.Add(x);\n            }\n        }\n    }\n    return result;\n}","task_id":215,"test_setup_code":"","test_list":["Debug.Assert(DecodeList(new object[][] { new object[] { 2, 1 }, 2, 3, new object[] { 2, 4 }, 5, 1 }).SequenceEqual(new List\u003Cint\u003E { 1, 1, 2, 3, 4, 4, 5, 1 }));","Debug.Assert(DecodeList(new object[] { \u0027a\u0027, \u0027u\u0027, \u0027t\u0027, \u0027o\u0027, \u0027m\u0027, \u0027a\u0027, \u0027t\u0027, \u0027i\u0027, \u0027c\u0027, \u0027a\u0027, new object[] { 2, \u0027l\u0027 }, \u0027y\u0027 }).SequenceEqual(new List\u003Cobject\u003E { \u0027a\u0027, \u0027u\u0027, \u0027t\u0027, \u0027o\u0027, \u0027m\u0027, \u0027a\u0027, \u0027t\u0027, \u0027i\u0027, \u0027c\u0027, \u0027a\u0027, \u0027l\u0027, \u0027l\u0027, \u0027y\u0027 }));","Debug.Assert(DecodeList(new char[] { \u0027p\u0027, \u0027y\u0027, \u0027t\u0027, \u0027h\u0027, \u0027o\u0027, \u0027n\u0027 }).SequenceEqual(new char[] { \u0027p\u0027, \u0027y\u0027, \u0027t\u0027, \u0027h\u0027, \u0027o\u0027, \u0027n\u0027 }));"],"challenge_test_list":[]}
{"name":"nested-list-check","description":"Check if one nested list is a subset of another","text":"Write a function to check if a nested list is a subset of another nested list.","code":"public bool CheckSubsetList(List\u003Cint\u003E list1, List\u003Cint\u003E list2) \n{\n    var l1 = list1[0];\n    var l2 = list2[0];\n    bool exist = true;\n\n    foreach (var i in list2) \n    {\n        if (!list1.Contains(i)) \n        {\n            exist = false;\n        }\n    }\n    return exist;\n}","task_id":216,"test_setup_code":"","test_list":["Debug.Assert(CheckSubsetList(new List\u003Cint\u003E { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 }, new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 12, 18, 23, 25, 45 }, new List\u003Cint\u003E { 7, 11, 19, 24, 28 }, new List\u003Cint\u003E { 1, 5, 8, 18, 15, 16 } }) == false);","Debug.Assert(CheckSubsetList(new int[][] { new int[] { 2, 3, 1 }, new int[] { 4, 5 }, new int[] { 6, 8 } }, new int[][] { new int[] { 4, 5 }, new int[] { 6, 8 } }) == true);","Debug.Assert(CheckSubsetList(new List\u003CList\u003Cstring\u003E\u003E { new List\u003Cstring\u003E { \u0022a\u0022, \u0022b\u0022 }, new List\u003Cstring\u003E { \u0022e\u0022 }, new List\u003Cstring\u003E { \u0022c\u0022, \u0022d\u0022 } }, new List\u003CList\u003Cstring\u003E\u003E { new List\u003Cstring\u003E { \u0022g\u0022 } }) == false);"],"challenge_test_list":[]}
{"name":"first-repeated","description":"Find the first repeated character in a string","text":"Write a C# function to find the first repeated character in a given string.","code":"public char FirstRepeatedChar(string str) \n{ \n    Dictionary\u003Cchar, int\u003E h = new Dictionary\u003Cchar, int\u003E(); \n    foreach (char ch in str) \n    { \n        if (h.ContainsKey(ch)) \n        { \n            return ch; \n        } \n        else \n        { \n            h[ch] = 0; \n        } \n    } \n    return \u0027\\0\u0027; \n}","task_id":217,"test_setup_code":"","test_list":["Debug.Assert(FirstRepeatedChar(\u0022Google\u0022) == \u0022o\u0022);","Debug.Assert(FirstRepeatedChar(\u0022data\u0022) == \u0022a\u0022);","Debug.Assert(FirstRepeatedChar(\u0022python\u0022) == \u0027\\0\u0027);"],"challenge_test_list":[]}
{"name":"min-ops-equal.py","description":"Find minimum operations to equal two numbers","text":"Write a C# function to find the minimum operations required to make two numbers equal.","code":"public int MinOperations(int A, int B)  \n{  \n    if (A \u003E B)  \n    {  \n        int temp = A;  \n        A = B;  \n        B = temp;  \n    }  \n    B = B / Gcd(A, B);  \n    return B - 1;  \n}  \n\nprivate int Gcd(int a, int b)  \n{  \n    while (b != 0)  \n    {  \n        int temp = b;  \n        b = a % b;  \n        a = temp;  \n    }  \n    return a;  \n}","task_id":218,"test_setup_code":"","test_list":["Debug.Assert(MinOperations(2, 4) == 1);","Debug.Assert(MinOperations(4, 10) == 4);","Debug.Assert(MinOperations(1, 4) == 3);"],"challenge_test_list":[]}
{"name":"max-min-k-elements","description":"Extract max and min k elements from a tuple","text":"Write a function to extract maximum and minimum k elements in the given tuple.","code":"public static Tuple\u003Cint[]\u003E ExtractMinMax(Tuple\u003Cint\u003E[] testTup, int K)\n{\n    List\u003Cint\u003E res = new List\u003Cint\u003E();\n    List\u003Cint\u003E temp = testTup.ToList().Select(t =\u003E t.Item1).ToList();\n    temp.Sort();\n    for (int idx = 0; idx \u003C temp.Count; idx\u002B\u002B)\n    {\n        if (idx \u003C K || idx \u003E= temp.Count - K)\n        {\n            res.Add(temp[idx]);\n        }\n    }\n    return Tuple.Create(res.ToArray());\n}","task_id":219,"test_setup_code":"","test_list":["Debug.Assert(ExtractMinMax(new Tuple\u003Cint, int, int, int, int, int\u003E(5, 20, 3, 7, 6, 8), 2).Equals(new Tuple\u003Cint, int, int, int\u003E(3, 5, 8, 20)));","Debug.Assert(ExtractMinMax(new int[] { 4, 5, 6, 1, 2, 7 }, 3).SequenceEqual(new int[] { 1, 2, 4, 5, 6, 7 }));","Debug.Assert(ExtractMinMax(new int[] { 2, 3, 4, 8, 9, 11, 7 }, 4).SequenceEqual(new int[] { 2, 3, 4, 7, 8, 9, 11 }));"],"challenge_test_list":[]}
{"name":"max-replace-colon","description":"Replace max n spaces commas or dots with a colon","text":"Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.","code":"public string ReplaceMaxSpecialChar(string text, int n)\n{\n    return Regex.Replace(text, \u0022[ ,.]\u0022, \u0022:\u0022, n);\n}","task_id":220,"test_setup_code":"","test_list":["Debug.Assert(ReplaceMaxSpecialChar(\u0022Python language, Programming language.\u0022, 2) == \u0022Python:language: Programming language.\u0022);","Debug.Assert(ReplaceMaxSpecialChar(\u0022a b c,d e f\u0022, 3) == \u0022a:b:c:d e f\u0022);","Debug.Assert(ReplaceMaxSpecialChar(\u0022ram reshma,ram rahim\u0022, 1) == \u0022ram:reshma,ram rahim\u0022);"],"challenge_test_list":[]}
{"name":"first-even-num","description":"Find the first even number in a list of numbers","text":"Write a C# function to find the first even number in a given list of numbers.","code":"public int FirstEven(IEnumerable\u003Cint\u003E nums)\n{\n    return nums.FirstOrDefault(el =\u003E el % 2 == 0, -1);\n}","task_id":221,"test_setup_code":"","test_list":["Debug.Assert(FirstEven(new List\u003Cint\u003E { 1, 3, 5, 7, 4, 1, 6, 8 }) == 4);","Debug.Assert(FirstEven(new int[] { 2, 3, 4 }) == 2);","Debug.Assert(FirstEven(new int[] { 5, 6, 7 }) == 6);"],"challenge_test_list":[]}
{"name":"same-type-check","description":"Check if tuple elements share the same type","text":"Write a function to check if all the elements in tuple have same data type or not.","code":"public bool CheckType(Tuple\u003Cobject\u003E testTuple)  \n{  \n    bool res = true;  \n    foreach (var ele in testTuple)  \n    {  \n        if (ele.GetType() != testTuple.Item1.GetType())  \n        {  \n            res = false;  \n            break;  \n        }  \n    }  \n    return res;  \n}","task_id":222,"test_setup_code":"","test_list":["Debug.Assert(CheckType(new Tuple\u003Cint, int, int, int, int, int\u003E(5, 6, 7, 3, 5, 6)) == true);","Debug.Assert(CheckType((1, 2, \u00224\u0022)) == false);","Debug.Assert(CheckType(new Tuple\u003Cint, int, int, int, int\u003E(3, 2, 1, 4, 5)) == true);"],"challenge_test_list":[]}
{"name":"\u0060majority-element\u0060","description":"Check for majority element in a sorted array","text":"Write a function to check for majority element in the given sorted array.","code":"public bool IsMajority(int[] arr, int n, int x) {\r\n    int i = BinarySearch(arr, 0, n - 1, x);\r\n    if (i == -1) {\r\n        return false;\r\n    }\r\n    if ((i \u002B n / 2) \u003C= (n - 1) \u0026\u0026 arr[i \u002B n / 2] == x) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\nprivate int BinarySearch(int[] arr, int low, int high, int x) {\r\n    if (high \u003E= low) {\r\n        int mid = (low \u002B high) / 2;\r\n        if ((mid == 0 || x \u003E arr[mid - 1]) \u0026\u0026 (arr[mid] == x)) {\r\n            return mid;\r\n        } else if (x \u003E arr[mid]) {\r\n            return BinarySearch(arr, mid \u002B 1, high, x);\r\n        } else {\r\n            return BinarySearch(arr, low, mid - 1, x);\r\n        }\r\n    }\r\n    return -1;\r\n}","task_id":223,"test_setup_code":"","test_list":["Debug.Assert(BinarySearch(new int[] { 1, 2, 3, 3, 3, 3, 10 }, 7, 3) == true);\n\nbool BinarySearch(int[] arr, int length, int target) {\n    // Implementation of the function will be here\n}","Debug.Assert(BinarySearch(new int[] { 1, 1, 2, 4, 4, 4, 6, 6 }, 8, 4) == false);","Debug.Assert(BinarySearch(new int[] { 1, 1, 1, 2, 2 }, 5, 1) == true);"],"challenge_test_list":[]}
{"name":"count-set-bits","description":"Count set bits in a number using Python function","text":"Write a C# function to count set bits of a given number.","code":"public int CountSetBits(int n) \n{ \n    int count = 0; \n    while (n != 0) \n    { \n        count \u002B= n \u0026 1; \n        n \u003E\u003E= 1; \n    } \n    return count; \n}","task_id":224,"test_setup_code":"","test_list":["Debug.Assert(CountSetBits(2) == 1);","Debug.Assert(CountSetBits(4) == 1);","Debug.Assert(CountSetBits(6) == 2);"],"challenge_test_list":[]}
{"name":"find-min-in-rotated","description":"Find minimum in a sorted rotated array","text":"Write a C# function to find the minimum element in a sorted and rotated array.","code":"public int FindMin(int[] arr, int low, int high) \n{ \n    while (low \u003C high) \n    { \n        int mid = low \u002B (high - low) / 2; \n        if (arr[mid] == arr[high]) \n        { \n            high--; \n        } \n        else if (arr[mid] \u003E arr[high]) \n        { \n            low = mid \u002B 1; \n        } \n        else \n        { \n            high = mid; \n        } \n    } \n    return arr[high]; \n}","task_id":225,"test_setup_code":"","test_list":["Debug.Assert(FindMin(new int[] { 1, 2, 3, 4, 5 }, 0, 4) == 1);","Debug.Assert(FindMin(new int[] { 4, 6, 8 }, 0, 2) == 4);","Debug.Assert(FindMin(new int[] { 2, 3, 5, 7, 9 }, 0, 4) == 2);"],"challenge_test_list":[]}
{"name":"remove-odd-chars","description":"Remove characters at odd indices from a string","text":"Write a C# function to remove the characters which have odd index values of a given string.","code":"public string OddValuesString(string str) \n{\n    string result = \u0022\u0022; \n    for (int i = 0; i \u003C str.Length; i\u002B\u002B) \n    {\n        if (i % 2 == 0) \n        {\n            result \u002B= str[i];\n        }\n    }\n    return result;\n}","task_id":226,"test_setup_code":"","test_list":["Debug.Assert(OddValuesString(\u0022abcdef\u0022) == \u0022ace\u0022);","Debug.Assert(OddValuesString(\u0022python\u0022) == \u0022pto\u0022);","Debug.Assert(OddValuesString(\u0022data\u0022) == \u0022dt\u0022);"],"challenge_test_list":[]}
{"name":"min-of-three-nums","description":"Find the minimum value among three numbers","text":"Write a function to find minimum of three numbers.","code":"public static int MinOfThree(int a, int b, int c) \n{\n    int smallest;\n    if ((a \u003C= b) \u0026\u0026 (a \u003C= c)) \n    {\n        smallest = a; \n    } \n    else if ((b \u003C= a) \u0026\u0026 (b \u003C= c)) \n    {\n        smallest = b; \n    } \n    else \n    {\n        smallest = c; \n    }\n    return smallest; \n}","task_id":227,"test_setup_code":"","test_list":["Debug.Assert(MinOfThree(10, 20, 0) == 0);","Debug.Assert(MinOfThree(19, 15, 18) == 15);","Debug.Assert(MinOfThree(-10, -20, -30) == -30);"],"challenge_test_list":[]}
{"name":"check-bits-unset","description":"Check if all bits are unset in the given range","text":"Write a C# function to check whether all the bits are unset in the given range or not.","code":"public static bool AllBitsSetInTheGivenRange(int n, int l, int r)  \n{  \n    int num = (((1 \u003C\u003C r) - 1) ^ ((1 \u003C\u003C (l - 1)) - 1));  \n    int newNum = n \u0026 num;  \n    return newNum == 0;  \n}","task_id":228,"test_setup_code":"","test_list":["Debug.Assert(AllBitsSetInTheGivenRange(4, 1, 2) == true);","Debug.Assert(AllBitsSetInTheGivenRange(17, 2, 4) == true);","Debug.Assert(AllBitsSetInTheGivenRange(39, 4, 6) == false);"],"challenge_test_list":[]}
{"name":"negative-first","description":"Rearrange array to place negatives before positives","text":"Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.","code":"public int[] ReArrangerArray(int[] arr, int n)\n{\n    int j = 0;\n    for (int i = 0; i \u003C n; i\u002B\u002B)\n    {\n        if (arr[i] \u003C 0)\n        {\n            int temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            j\u002B\u002B;\n        }\n    }\n    return arr;\n}","task_id":229,"test_setup_code":"","test_list":["Debug.Assert(ReArrangerArray(new int[] { -1, 2, -3, 4, 5, 6, -7, 8, 9 }, 9).SequenceEqual(new int[] { -1, -3, -7, 4, 5, 6, 2, 8, 9 }));","Debug.Assert(ReArrangerArray(new int[] { 12, -14, -26, 13, 15 }, 5).SequenceEqual(new int[] { -14, -26, 12, 13, 15 }));","Debug.Assert(ReArrangerArray(new int[] { 10, 24, 36, -42, -39, -78, 85 }, 7).SequenceEqual(new int[] { -42, -39, -78, 10, 24, 36, 85 }));"],"challenge_test_list":[]}
{"name":"replace-blanks","description":"Replace spaces in a string with a specified character","text":"Write a function to replace blank spaces with any character in a string.","code":"public string ReplaceBlank(string str1, char character)\n{\n    string str2 = str1.Replace(\u0027 \u0027, character);\n    return str2;\n}","task_id":230,"test_setup_code":"","test_list":["Debug.Assert(ReplaceBlank(\u0022hello people\u0022, \u0027@\u0027) == \u0022hello@people\u0022);","Debug.Assert(ReplaceBlank(\u0022python program language\u0022, \u0027$\u0027) == \u0022python$program$language\u0022);","Debug.Assert(ReplaceBlank(\u0022blank space\u0022, \u0022-\u0022) == \u0022blank-space\u0022);"],"challenge_test_list":[]}
{"name":"max-sum-triangle","description":"Maximize the sum in a right triangle of numbers","text":"Write a function to find the maximum sum in the given right triangle of numbers.","code":"public static int MaxSum(int[][] tri, int n) \n{\n    if (n \u003E 1) \n    {\n        tri[1][1] \u002B= tri[0][0];\n        tri[1][0] \u002B= tri[0][0];\n    }\n    for (int i = 2; i \u003C n; i\u002B\u002B) \n    {\n        tri[i][0] \u002B= tri[i - 1][0];\n        tri[i][i] \u002B= tri[i - 1][i - 1];\n        for (int j = 1; j \u003C i; j\u002B\u002B) \n        {\n            if (tri[i][j] \u002B tri[i - 1][j - 1] \u003E= tri[i][j] \u002B tri[i - 1][j]) \n            {\n                tri[i][j] \u002B= tri[i - 1][j - 1];\n            } \n            else \n            {\n                tri[i][j] \u002B= tri[i - 1][j];\n            }\n        }\n    }\n    return tri[n - 1].Max();\n}","task_id":231,"test_setup_code":"","test_list":["Debug.Assert(MaxSum(new int[][] { new int[] { 1 }, new int[] { 2, 1 }, new int[] { 3, 3, 2 } }, 3) == 6);","Debug.Assert(MaxSum(new int[][] { new int[] { 1 }, new int[] { 1, 2 }, new int[] { 4, 1, 12 } }, 3) == 15);","Debug.Assert(MaxSum(new int[][] { new int[] { 2 }, new int[] { 3, 2 }, new int[] { 13, 23, 12 } }, 3) == 28);"],"challenge_test_list":[]}
{"name":"get-n-largest-items","description":"Return the n largest items from a dataset","text":"Write a function to get the n largest items from a dataset.","code":"using System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static List\u003Cint\u003E LargNNum(List\u003Cint\u003E list1, int n)\n    {\n        var largest = new List\u003Cint\u003E(list1);\n        largest.Sort((a, b) =\u003E b.CompareTo(a));\n        return largest.GetRange(0, Math.Min(n, largest.Count));\n    }\n}","task_id":232,"test_setup_code":"","test_list":["Debug.Assert(LargNNum(new List\u003Cint\u003E { 10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100 }, 2).SequenceEqual(new List\u003Cint\u003E { 100, 90 }));","Debug.Assert(LargNNum(new int[] { 10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100 }, 5).SequenceEqual(new int[] { 100, 90, 80, 70, 60 }));","Debug.Assert(LargNNum(new List\u003Cint\u003E {10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 3).SequenceEqual(new List\u003Cint\u003E {100, 90, 80}));"],"challenge_test_list":[]}
{"name":"lateral-surface","description":"Calculate the lateral surface area of a cylinder","text":"Write a function to find the lateral surface area of a cylinder.","code":"public double LateralsufaceCylinder(double r, double h) {\n    double lateralsurface = 2 * 3.1415 * r * h;\n    return lateralsurface;\n}","task_id":233,"test_setup_code":"","test_list":["Debug.Assert(LateralsufaceCylinder(10, 5) == 314.15000000000003);","Debug.Assert(LateralsufaceCylinder(4, 5) == 125.66000000000001);","Debug.Assert(LateralsufaceCylinder(4, 10) == 251.32000000000002);"],"challenge_test_list":[]}
{"name":"cube-volume-func","description":"Calculate the volume of a cube given its side length","text":"Write a function to find the volume of a cube.","code":"public int VolumeCube(int l)\n{\n    int volume = l * l * l;\n    return volume;\n}","task_id":234,"test_setup_code":"","test_list":["Debug.Assert(VolumeCube(3) == 27);","Debug.Assert(VolumeCube(2) == 8);","Debug.Assert(VolumeCube(5) == 125);"],"challenge_test_list":[]}
{"name":"even-bits-set.py","description":"Set all even bits of a number using Python","text":"Write a C# function to set all even bits of a given number.","code":"public static int EvenBitSetNumber(int n) \n{ \n    int count = 0; \n    int res = 0; \n    int temp = n; \n    \n    while (temp \u003E 0) \n    { \n        if (count % 2 == 1) \n        { \n            res |= (1 \u003C\u003C count); \n        } \n        count\u002B\u002B; \n        temp \u003E\u003E= 1; \n    } \n    \n    return (n | res); \n}","task_id":235,"test_setup_code":"","test_list":["Debug.Assert(EvenBitSetNumber(10) == 10);","Debug.Assert(EvenBitSetNumber(20) == 30);","Debug.Assert(EvenBitSetNumber(30) == 30);"],"challenge_test_list":[]}
{"name":"max-triangles-in-triangle","description":"Count triangles in a given equilateral triangle","text":"Write a C# function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.","code":"public static int NoOfTriangle(int N, int K) \n{\n    if (N \u003C K) \n    {\n        return -1;\n    } \n    else \n    {\n        int Tri_up = ((N - K \u002B 1) * (N - K \u002B 2)) / 2;\n        int Tri_down = ((N - 2 * K \u002B 1) * (N - 2 * K \u002B 2)) / 2;\n        return Tri_up \u002B Tri_down;\n    }\n}","task_id":236,"test_setup_code":"","test_list":["Debug.Assert(NoOfTriangle(4, 2) == 7);","Debug.Assert(NoOfTriangle(4, 3) == 3);","Debug.Assert(NoOfTriangle(1, 3) == -1);"],"challenge_test_list":[]}
{"name":"check-similar-occur","description":"Check similar occurrences in given tuples","text":"Write a function to check the occurrences of records which occur similar times in the given tuples.","code":"using System.Collections.Generic;\nusing System.Linq;\n\npublic Dictionary\u003Cstring, int\u003E CheckOccurrences(List\u003CList\u003Cstring\u003E\u003E testList)\n{\n    var res = testList.Select(ele =\u003E string.Join(\u0022,\u0022, ele.OrderBy(x =\u003E x)))\n                      .GroupBy(x =\u003E x)\n                      .ToDictionary(g =\u003E g.Key, g =\u003E g.Count());\n    return res;\n}","task_id":237,"test_setup_code":"","test_list":["Debug.Assert(CheckOccurrences(new List\u003C(int, int)\u003E { (3, 1), (1, 3), (2, 5), (5, 2), (6, 3) }) .SequenceEqual(new Dictionary\u003C(int, int), int\u003E { {(1, 3), 2}, {(2, 5), 2}, {(3, 6), 1} }));","Debug.Assert(CheckOccurrences(new List\u003CTuple\u003Cint, int\u003E\u003E { Tuple.Create(4, 2), Tuple.Create(2, 4), Tuple.Create(3, 6), Tuple.Create(6, 3), Tuple.Create(7, 4) }) \n    .SequenceEqual(new Dictionary\u003CTuple\u003Cint, int\u003E, int\u003E { { Tuple.Create(2, 4), 2 }, { Tuple.Create(3, 6), 2 }, { Tuple.Create(4, 7), 1 } }));","Debug.Assert(CheckOccurrences(new (int, int)[] { (13, 2), (11, 23), (12, 25), (25, 12), (16, 23) }) == new Dictionary\u003C(int, int), int\u003E { { (2, 13), 1 }, { (11, 23), 1 }, { (12, 25), 2 }, { (16, 23), 1 } });"],"challenge_test_list":[]}
{"name":"count-non-empty-substrings","description":"Count non-empty substrings in a given string","text":"Write a C# function to count number of non-empty substrings of a given string.","code":"public int NumberOfSubstrings(string str) \n{ \n    int strLen = str.Length; \n    return (int)(strLen * (strLen \u002B 1) / 2); \n}","task_id":238,"test_setup_code":"","test_list":["Debug.Assert(NumberOfSubstrings(\u0022abc\u0022) == 6);","Debug.Assert(NumberOfSubstrings(\u0022abcd\u0022) == 10);","Debug.Assert(NumberOfSubstrings(\u0022abcde\u0022) == 15);"],"challenge_test_list":[]}
{"name":"\u0060double-sequence\u0060","description":"Count valid sequences with specific growth constraints","text":"Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.","code":"public int GetTotalNumberOfSequences(int m, int n) \n{\n    int[,] T = new int[m \u002B 1, n \u002B 1];\n    for (int i = 0; i \u003C= m; i\u002B\u002B) \n    {\n        for (int j = 0; j \u003C= n; j\u002B\u002B) \n        {\n            if (i == 0 || j == 0) \n            {\n                T[i, j] = 0;\n            } \n            else if (i \u003C j) \n            {\n                T[i, j] = 0;\n            } \n            else if (j == 1) \n            {\n                T[i, j] = i;\n            } \n            else \n            {\n                T[i, j] = T[i - 1, j] \u002B T[i / 2, j - 1];\n            }\n        }\n    }\n    return T[m, n];\n}","task_id":239,"test_setup_code":"","test_list":["Debug.Assert(GetTotalNumberOfSequences(10, 4) == 4);","Debug.Assert(GetTotalNumberOfSequences(5, 2) == 6);","Debug.Assert(GetTotalNumberOfSequences(16, 3) == 84);"],"challenge_test_list":[]}
{"name":"replace-last-item","description":"Replace last list element with another list","text":"Write a function to replace the last element of the list with another list.","code":"public List\u003CT\u003E ReplaceList\u003CT\u003E(List\u003CT\u003E list1, List\u003CT\u003E list2)\n{\n    list1.RemoveRange(list1.Count - list1.Count, list1.Count);\n    list1.AddRange(list2);\n    return list1;\n}","task_id":240,"test_setup_code":"","test_list":["Debug.Assert(ReplaceList(new List\u003Cint\u003E { 1, 3, 5, 7, 9, 10 }, new List\u003Cint\u003E { 2, 4, 6, 8 }).SequenceEqual(new List\u003Cint\u003E { 1, 3, 5, 7, 9, 2, 4, 6, 8 }));","Debug.Assert(ReplaceList(new List\u003Cint\u003E { 1, 2, 3, 4, 5 }, new List\u003Cint\u003E { 5, 6, 7, 8 }).SequenceEqual(new List\u003Cint\u003E { 1, 2, 3, 4, 5, 6, 7, 8 }));","Debug.Assert(ReplaceList(new string[] { \u0022red\u0022, \u0022blue\u0022, \u0022green\u0022 }, new string[] { \u0022yellow\u0022 }).SequenceEqual(new string[] { \u0022red\u0022, \u0022blue\u0022, \u0022yellow\u0022 }));"],"challenge_test_list":[]}
{"name":"\u0060generate-3d-array\u0060","description":"Create a 3D array filled with asterisks","text":"Write a function to generate a 3d array having each element as \u0027*\u0027.","code":"public string[][][] Array3D(int m, int n, int o)\n{\n    string[][][] array3D = new string[o][][];\n    for (int row = 0; row \u003C o; row\u002B\u002B)\n    {\n        array3D[row] = new string[n][];\n        for (int col = 0; col \u003C n; col\u002B\u002B)\n        {\n            array3D[row][col] = new string[m];\n            for (int k = 0; k \u003C m; k\u002B\u002B)\n            {\n                array3D[row][col][k] = \u0022*\u0022;\n            }\n        }\n    }\n    return array3D;\n}","task_id":241,"test_setup_code":"","test_list":["Debug.Assert(Array3D(6, 4, 3).SequenceEqual(new string[][][] {\n    new string[][] { new string[] { \u0027*\u0027, \u0027*\u0027, \u0027*\u0027, \u0027*\u0027, \u0027*\u0027, \u0027*\u0027 }, new string[] { \u0027*\u0027, \u0027*\u0027, \u0027*\u0027, \u0027*\u0027, \u0027*\u0027, \u0027*\u0027 }, new string[] { \u0027*\u0027, \u0027*\u0027, \u0027*\u0027, \u0027*\u0027, \u0027*\u0027, \u0027*\u0027 }, new string[] { \u0027*\u0027, \u0027*\u0027, \u0027*\u0027, \u0027*\u0027, \u0027*\u0027, \u0027*\u0027 } },\n    new string[][] { new string[] { \u0027*\u0027, \u0027*\u0027, \u0027*\u0027, \u0027*\u0027, \u0027*\u0027, \u0027*\u0027 }, new string[] { \u0027*\u0027, \u0027*\u0027, \u0027*\u0027, \u0027*\u0027, \u0027*\u0027, \u0027*\u0027 }, new string[] { \u0027*\u0027, \u0027*\u0027, \u0027*\u0027, \u0027*\u0027, \u0027*\u0027, \u0027*\u0027 }, new string[] { \u0027*\u0027, \u0027*\u0027, \u0027*\u0027, \u0027*\u0027, \u0027*\u0027, \u0027*\u0027 } },\n    new string[][] { new string[] { \u0027*\u0027, \u0027*\u0027, \u0027*\u0027, \u0027*\u0027, \u0027*\u0027, \u0027*\u0027 }, new string[] { \u0027*\u0027, \u0027*\u0027, \u0027*\u0027, \u0027*\u0027, \u0027*\u0027, \u0027*\u0027 }, new string[] { \u0027*\u0027, \u0027*\u0027, \u0027*\u0027, \u0027*\u0027, \u0027*\u0027, \u0027*\u0027 }, new string[] { \u0027*\u0027, \u0027*\u0027, \u0027*\u0027, \u0027*\u0027, \u0027*\u0027, \u0027*\u0027 } }\n}));","Debug.Assert(Array3D(5, 3, 4).SequenceEqual(new string[][][]\n{\n    new string[][] { new string[] { \u0022*\u0022, \u0022*\u0022, \u0022*\u0022, \u0022*\u0022, \u0022*\u0022 }, new string[] { \u0022*\u0022, \u0022*\u0022, \u0022*\u0022, \u0022*\u0022, \u0022*\u0022 }, new string[] { \u0022*\u0022, \u0022*\u0022, \u0022*\u0022, \u0022*\u0022, \u0022*\u0022 } },\n    new string[][] { new string[] { \u0022*\u0022, \u0022*\u0022, \u0022*\u0022, \u0022*\u0022, \u0022*\u0022 }, new string[] { \u0022*\u0022, \u0022*\u0022, \u0022*\u0022, \u0022*\u0022, \u0022*\u0022 }, new string[] { \u0022*\u0022, \u0022*\u0022, \u0022*\u0022, \u0022*\u0022, \u0022*\u0022 } },\n    new string[][] { new string[] { \u0022*\u0022, \u0022*\u0022, \u0022*\u0022, \u0022*\u0022, \u0022*\u0022 }, new string[] { \u0022*\u0022, \u0022*\u0022, \u0022*\u0022, \u0022*\u0022, \u0022*\u0022 }, new string[] { \u0022*\u0022, \u0022*\u0022, \u0022*\u0022, \u0022*\u0022, \u0022*\u0022 } },\n    new string[][] { new string[] { \u0022*\u0022, \u0022*\u0022, \u0022*\u0022, \u0022*\u0022, \u0022*\u0022 }, new string[] { \u0022*\u0022, \u0022*\u0022, \u0022*\u0022, \u0022*\u0022, \u0022*\u0022 }, new string[] { \u0022*\u0022, \u0022*\u0022, \u0022*\u0022, \u0022*\u0022, \u0022*\u0022 } }\n}));","Debug.Assert(Array3D(1, 2, 3).SequenceEqual(new List\u003CList\u003CList\u003Cstring\u003E\u003E\u003E { \n    new List\u003CList\u003Cstring\u003E\u003E { new List\u003Cstring\u003E { \u0022*\u0022 }, new List\u003Cstring\u003E { \u0022*\u0022 } }, \n    new List\u003CList\u003Cstring\u003E\u003E { new List\u003Cstring\u003E { \u0022*\u0022 }, new List\u003Cstring\u003E { \u0022*\u0022 } }, \n    new List\u003CList\u003Cstring\u003E\u003E { new List\u003Cstring\u003E { \u0022*\u0022 }, new List\u003Cstring\u003E { \u0022*\u0022 } } }));"],"challenge_test_list":[]}
{"name":"count-chars-string","description":"Count total characters in a given string input","text":"Write a function to count total characters in a string.","code":"public int CountCharac(string str1) {\n    int total = 0;\n    foreach (char i in str1) {\n        total\u002B\u002B;\n    }\n    return total;\n}","task_id":242,"test_setup_code":"","test_list":["Debug.Assert(CountCharac(\u0022python programming\u0022) == 18);","Debug.Assert(CountCharac(\u0022language\u0022) == 8);","Debug.Assert(CountCharac(\u0022words\u0022) == 5);"],"challenge_test_list":[]}
{"name":"sort-by-tuple-freq","description":"Sort list by frequency of first element in tuples","text":"Write a function to sort the given list based on the occurrence of first element of tuples.","code":"public List\u003C(string, int)\u003E SortOnOccurrence(List\u003C(string, int)\u003E lst) \n{\n    var dct = new Dictionary\u003Cstring, List\u003Cint\u003E\u003E();\n    foreach (var (i, j) in lst) \n    {\n        if (!dct.ContainsKey(i))\n        {\n            dct[i] = new List\u003Cint\u003E();\n        }\n        dct[i].Add(j);\n    }\n    return dct.Select(kvp =\u003E (kvp.Key, kvp.Value.Distinct().Count())).ToList();\n}","task_id":243,"test_setup_code":"","test_list":["Debug.Assert(SortOnOccurrence(new List\u003C(int, string)\u003E{ (1, \u0022Jake\u0022), (2, \u0022Bob\u0022), (1, \u0022Cara\u0022) }) == new List\u003C(int, string, string, int)\u003E{ (1, \u0022Jake\u0022, \u0022Cara\u0022, 2), (2, \u0022Bob\u0022, 1) });","Debug.Assert(SortOnOccurrence(new List\u003CTuple\u003Cstring, string\u003E\u003E { Tuple.Create(\u0022b\u0022, \u0022ball\u0022), Tuple.Create(\u0022a\u0022, \u0022arm\u0022), Tuple.Create(\u0022b\u0022, \u0022b\u0022), Tuple.Create(\u0022a\u0022, \u0022ant\u0022) }) == new List\u003CTuple\u003Cstring, string, string, int\u003E\u003E { Tuple.Create(\u0022b\u0022, \u0022ball\u0022, \u0022b\u0022, 2), Tuple.Create(\u0022a\u0022, \u0022arm\u0022, \u0022ant\u0022, 2) });","Debug.Assert(SortOnOccurrence(new Tuple\u003Cint, string\u003E[] { Tuple.Create(2, \u0022Mark\u0022), Tuple.Create(3, \u0022Maze\u0022), Tuple.Create(2, \u0022Sara\u0022) }).SequenceEqual(new object[] { Tuple.Create(2, \u0022Mark\u0022, \u0022Sara\u0022, 2), Tuple.Create(3, \u0022Maze\u0022, 1) }));"],"challenge_test_list":[]}
{"name":"next-perfect-sq","description":"Find the next perfect square after a number","text":"Write a C# function to find the next perfect square greater than a given number.","code":"public static int NextPerfectSquare(int N) \n{ \n    int nextN = (int)Math.Floor(Math.Sqrt(N)) \u002B 1; \n    return nextN * nextN; \n}","task_id":244,"test_setup_code":"","test_list":["Debug.Assert(NextPerfectSquare(35) == 36);","Debug.Assert(NextPerfectSquare(6) == 9);","Debug.Assert(NextPerfectSquare(9) == 16);"],"challenge_test_list":[]}
{"name":"max-bi-tonic-sum","description":"Find max sum of bi-tonic subsequence in array","text":"Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.","code":"public static int MaxSum(int[] arr, int n) \n{\n    int[] MSIBS = (int[])arr.Clone(); \n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    {\n        for (int j = 0; j \u003C i; j\u002B\u002B) \n        {\n            if (arr[i] \u003E arr[j] \u0026\u0026 MSIBS[i] \u003C MSIBS[j] \u002B arr[i]) \n            {\n                MSIBS[i] = MSIBS[j] \u002B arr[i]; \n            }\n        }\n    }\n    \n    int[] MSDBS = (int[])arr.Clone(); \n    for (int i = 1; i \u003C= n; i\u002B\u002B) \n    {\n        for (int j = 1; j \u003C i; j\u002B\u002B) \n        {\n            if (arr[arr.Length - i] \u003E arr[arr.Length - j] \u0026\u0026 MSDBS[arr.Length - i] \u003C MSDBS[arr.Length - j] \u002B arr[arr.Length - i]) \n            {\n                MSDBS[arr.Length - i] = MSDBS[arr.Length - j] \u002B arr[arr.Length - i]; \n            }\n        }\n    }\n    \n    int maxSum = int.MinValue; \n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    {\n        maxSum = Math.Max(maxSum, MSIBS[i] \u002B MSDBS[arr.Length - i - 1] - arr[i]); \n    }\n    \n    return maxSum; \n}","task_id":245,"test_setup_code":"","test_list":["Debug.Assert(MaxSum(new int[] { 1, 15, 51, 45, 33, 100, 12, 18, 9 }, 9) == 194);","Debug.Assert(MaxSum(new int[] { 80, 60, 30, 40, 20, 10 }, 6) == 210);","Debug.Assert(MaxSum(new int[] { 2, 3, 14, 16, 21, 23, 29, 30 }, 8) == 138);"],"challenge_test_list":[]}
{"name":"babylonian-sqrt","description":"Compute square roots with Babylonian method","text":"Write a function for computing square roots using the babylonian method.","code":"public static double BabylonianSquareroot(double number)\n{\n    if (number == 0)\n    {\n        return 0;\n    }\n    double g = number / 2.0;\n    double g2 = g \u002B 1;\n    while (g != g2)\n    {\n        double n = number / g;\n        g2 = g;\n        g = (g \u002B n) / 2;\n    }\n    return g;\n}","task_id":246,"test_setup_code":"","test_list":["Debug.Assert(BabylonianSquareroot(10) == 3.162277660168379);","Debug.Assert(BabylonianSquareroot(2) == 1.414213562373095);","Debug.Assert(BabylonianSquareroot(9) == 3.0);"],"challenge_test_list":[]}
{"name":"longest-palindrome","description":"Find longest palindromic subsequence in string","text":"Write a function to find the longest palindromic subsequence in the given string.","code":"public int Lps(string str) \n{\n    int n = str.Length; \n    int[,] L = new int[n, n]; \n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    {\n        L[i, i] = 1;\n    }\n    for (int cl = 2; cl \u003C= n; cl\u002B\u002B) \n    {\n        for (int i = 0; i \u003C= n - cl; i\u002B\u002B) \n        {\n            int j = i \u002B cl - 1;\n            if (str[i] == str[j] \u0026\u0026 cl == 2) \n            {\n                L[i, j] = 2;\n            }\n            else if (str[i] == str[j]) \n            {\n                L[i, j] = L[i \u002B 1, j - 1] \u002B 2;\n            }\n            else \n            {\n                L[i, j] = Math.Max(L[i, j - 1], L[i \u002B 1, j]);\n            }\n        }\n    }\n    return L[0, n - 1];\n}","task_id":247,"test_setup_code":"","test_list":["Debug.Assert(Lps(\u0022TENS FOR TENS\u0022) == 5);","Debug.Assert(Lps(\u0022CARDIO FOR CARDS\u0022) == 7);","Debug.Assert(Lps(\u0022PART OF THE JOURNEY IS PART\u0022) == 9);"],"challenge_test_list":[]}
{"name":"harmonic-sum-n1","description":"Calculate the harmonic sum of n minus one","text":"Write a function to calculate the harmonic sum of n-1.","code":"public double HarmonicSum(int n) {\n    if (n \u003C 2) {\n        return 1;\n    } else {\n        return 1.0 / n \u002B HarmonicSum(n - 1);\n    }\n}","task_id":248,"test_setup_code":"","test_list":["Debug.Assert(HarmonicSum(7) == 2.5928571428571425);","Debug.Assert(HarmonicSum(4) == 2.083333333333333);","Debug.Assert(HarmonicSum(19) == 3.547739657143682);"],"challenge_test_list":[]}
{"name":"array-intersect","description":"Find intersection of two arrays with lambda function","text":"Write a function to find the intersection of two arrays using lambda function.","code":"public List\u003Cint\u003E IntersectionArray(int[] arrayNums1, int[] arrayNums2) \n{\n    return arrayNums2.Where(x =\u003E arrayNums1.Contains(x)).ToList();\n}","task_id":249,"test_setup_code":"","test_list":["Debug.Assert(IntersectionArray(new int[] { 1, 2, 3, 5, 7, 8, 9, 10 }, new int[] { 1, 2, 4, 8, 9 }).SequenceEqual(new int[] { 1, 2, 8, 9 }));","Debug.Assert(IntersectionArray(new int[] { 1, 2, 3, 5, 7, 8, 9, 10 }, new int[] { 3, 5, 7, 9 }).SequenceEqual(new int[] { 3, 5, 7, 9 }));","Debug.Assert(IntersectionArray(new int[] { 1, 2, 3, 5, 7, 8, 9, 10 }, new int[] { 10, 20, 30, 40 }).SequenceEqual(new int[] { 10 }));"],"challenge_test_list":[]}
{"name":"count-in-tuple","description":"Count occurrences of an element in a tuple","text":"Write a C# function to count the occcurences of an element in a tuple.","code":"public int CountX(Tuple\u003Cint\u003E[] tup, int x) \n{ \n    int count = 0; \n    foreach (var ele in tup) \n    { \n        if (ele.Item1 == x) \n        { \n            count\u002B\u002B; \n        } \n    } \n    return count; \n}","task_id":250,"test_setup_code":"","test_list":["Debug.Assert(CountX(new int[] { 10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2 }, 4) == 0);","Debug.Assert(CountX(new int[] { 10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2 }, 10) == 3);","Debug.Assert(CountX(new int[] { 10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2 }, 8) == 4);"],"challenge_test_list":[]}
{"name":"insert-before-list","description":"Insert an element before each item in a list","text":"Write a function to insert an element before each element of a list.","code":"public List\u003CT\u003E InsertElement\u003CT\u003E(List\u003CT\u003E list, T element)\n{\n    list = list.SelectMany(elt =\u003E new[] { element, elt }).ToList();\n    return list;\n}","task_id":251,"test_setup_code":"","test_list":["Debug.Assert(InsertElement(new List\u003Cstring\u003E { \u0022Red\u0022, \u0022Green\u0022, \u0022Black\u0022 }, \u0027c\u0027).SequenceEqual(new List\u003Cstring\u003E { \u0022c\u0022, \u0022Red\u0022, \u0022c\u0022, \u0022Green\u0022, \u0022c\u0022, \u0022Black\u0022 }));","Debug.Assert(InsertElement(new List\u003Cstring\u003E { \u0022python\u0022, \u0022java\u0022 }, \u0022program\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022program\u0022, \u0022python\u0022, \u0022program\u0022, \u0022java\u0022 }));","Debug.Assert(InsertElement(new string[] { \u0022happy\u0022, \u0022sad\u0022 }, \u0022laugh\u0022).SequenceEqual(new string[] { \u0022laugh\u0022, \u0022happy\u0022, \u0022laugh\u0022, \u0022sad\u0022 }));"],"challenge_test_list":[]}
{"name":"complex-to-polar","description":"Convert complex numbers to polar coordinates in Python","text":"Write a C# function to convert complex numbers to polar coordinates.","code":"using System;\nusing System.Numerics;\n\npublic class Converter\n{\n    public (double, double) Convert(Complex numbers)\n    {\n        double magnitude = Complex.Abs(numbers);\n        double phase = Complex.Phase(numbers);\n        return (magnitude, phase);\n    }\n}","task_id":252,"test_setup_code":"","test_list":["Debug.Assert(Convert(1) == (1.0, 0.0));","Debug.Assert(Convert(4) == (4.0, 0.0));","Debug.Assert(Convert(5) == (5.0, 0.0));"],"challenge_test_list":[]}
{"name":"count-integers","description":"Count integers in a given list using Python","text":"Write a C# function to count integers from a given list.","code":"public int CountInteger(List\u003Cobject\u003E list1) {\n    int ctr = 0;\n    foreach (var i in list1) {\n        if (i is int) {\n            ctr\u002B\u002B;\n        }\n    }\n    return ctr;\n}","task_id":253,"test_setup_code":"","test_list":["Debug.Assert(CountInteger(new object[] { 1, 2, \u0022abc\u0022, 1.2 }) == 2);","Debug.Assert(CountInteger(new int[] { 1, 2, 3 }) == 3);","Debug.Assert(CountInteger(new double[] { 1, 1.2, 4, 5.1 }) == 2);"],"challenge_test_list":[]}
{"name":"find-a-e-words","description":"Find words starting with a or e in a string","text":"Write a function to find all words starting with \u0027a\u0027 or \u0027e\u0027 in a given string.","code":"public List\u003Cstring\u003E WordsAe(string text)\r\n{\r\n    return Regex.Matches(text, @\u0022[ae]\\w\u002B\u0022).Cast\u003CMatch\u003E().Select(m =\u003E m.Value).ToList();\r\n}","task_id":254,"test_setup_code":"","test_list":["Debug.Assert(WordsAe(\u0022python programe\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022ame\u0022 }));","Debug.Assert(WordsAe(\u0022python programe language\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022ame\u0022, \u0022anguage\u0022 }));","Debug.Assert(WordsAe(\u0022assert statement\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022assert\u0022, \u0022atement\u0022 }));"],"challenge_test_list":[]}
{"name":"choose-colours","description":"Generate colour combinations with repetitions allowed","text":"Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.","code":"using System.Collections.Generic;\nusing System.Linq;\n\npublic class CombinationGenerator\n{\n    public static List\u003CList\u003CT\u003E\u003E CombinationsColors\u003CT\u003E(List\u003CT\u003E l, int n)\n    {\n        return combinationsWithReplacement(l, n);\n    }\n\n    private static List\u003CList\u003CT\u003E\u003E combinationsWithReplacement\u003CT\u003E(List\u003CT\u003E l, int n)\n    {\n        List\u003CList\u003CT\u003E\u003E result = new List\u003CList\u003CT\u003E\u003E();\n        CombinationsWithReplacementHelper(l, n, new List\u003CT\u003E(), result);\n        return result;\n    }\n\n    private static void CombinationsWithReplacementHelper\u003CT\u003E(List\u003CT\u003E l, int n, List\u003CT\u003E current, List\u003CList\u003CT\u003E\u003E result)\n    {\n        if (current.Count == n)\n        {\n            result.Add(new List\u003CT\u003E(current));\n            return;\n        }\n\n        for (int i = 0; i \u003C l.Count; i\u002B\u002B)\n        {\n            current.Add(l[i]);\n            CombinationsWithReplacementHelper(l, n, current, result);\n            current.RemoveAt(current.Count - 1);\n        }\n    }\n}","task_id":255,"test_setup_code":"","test_list":["Debug.Assert(CombinationsColors(new string[] { \u0022Red\u0022, \u0022Green\u0022, \u0022Blue\u0022 }, 1).SequenceEqual(new Tuple\u003Cstring\u003E[] { Tuple.Create(\u0022Red\u0022), Tuple.Create(\u0022Green\u0022), Tuple.Create(\u0022Blue\u0022) }));","Debug.Assert(CombinationsColors(new List\u003Cstring\u003E {\u0022Red\u0022, \u0022Green\u0022, \u0022Blue\u0022}, 2).SequenceEqual(new List\u003C(string, string)\u003E { (\u0022Red\u0022, \u0022Red\u0022), (\u0022Red\u0022, \u0022Green\u0022), (\u0022Red\u0022, \u0022Blue\u0022), (\u0022Green\u0022, \u0022Green\u0022), (\u0022Green\u0022, \u0022Blue\u0022), (\u0022Blue\u0022, \u0022Blue\u0022) }));","Debug.Assert(CombinationsColors(new string[] { \u0022Red\u0022, \u0022Green\u0022, \u0022Blue\u0022 }, 3).SequenceEqual(new Tuple\u003Cstring, string, string\u003E[] {\n    Tuple.Create(\u0022Red\u0022, \u0022Red\u0022, \u0022Red\u0022), \n    Tuple.Create(\u0022Red\u0022, \u0022Red\u0022, \u0022Green\u0022), \n    Tuple.Create(\u0022Red\u0022, \u0022Red\u0022, \u0022Blue\u0022), \n    Tuple.Create(\u0022Red\u0022, \u0022Green\u0022, \u0022Green\u0022), \n    Tuple.Create(\u0022Red\u0022, \u0022Green\u0022, \u0022Blue\u0022), \n    Tuple.Create(\u0022Red\u0022, \u0022Blue\u0022, \u0022Blue\u0022), \n    Tuple.Create(\u0022Green\u0022, \u0022Green\u0022, \u0022Green\u0022), \n    Tuple.Create(\u0022Green\u0022, \u0022Green\u0022, \u0022Blue\u0022), \n    Tuple.Create(\u0022Green\u0022, \u0022Blue\u0022, \u0022Blue\u0022), \n    Tuple.Create(\u0022Blue\u0022, \u0022Blue\u0022, \u0022Blue\u0022) \n}));"],"challenge_test_list":[]}
{"name":"count-primes-less","description":"Count primes below a given non-negative number","text":"Write a C# function to count the number of prime numbers less than a given non-negative number.","code":"public int CountPrimesNums(int n) {\n    int ctr = 0;\n    for (int num = 0; num \u003C n; num\u002B\u002B) {\n        if (num \u003C= 1) {\n            continue;\n        }\n        bool isPrime = true;\n        for (int i = 2; i \u003C num; i\u002B\u002B) {\n            if (num % i == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            ctr\u002B\u002B;\n        }\n    }\n    return ctr;\n}","task_id":256,"test_setup_code":"","test_list":["Debug.Assert(CountPrimesNums(5) == 2);","Debug.Assert(CountPrimesNums(10) == 4);","Debug.Assert(CountPrimesNums(100) == 25);"],"challenge_test_list":[]}
{"name":"swap-two-numbers","description":"Swap the values of two given numbers","text":"Write a function to swap two numbers.","code":"public (int, int) SwapNumbers(int a, int b)  \n{  \n    int temp = a;  \n    a = b;  \n    b = temp;  \n    return (a, b);  \n}","task_id":257,"test_setup_code":"","test_list":["Debug.Assert(SwapNumbers(10, 20).Equals((20, 10)));","Debug.Assert(SwapNumbers(15, 17).Equals((17, 15)));","Debug.Assert(SwapNumbers(100, 200).Equals((200, 100)));"],"challenge_test_list":[]}
{"name":"count-odd-elems","description":"Count odd elements in a list using lambda function","text":"Write a function to find number of odd elements in the given list using lambda function.","code":"public int CountOdd(int[] arrayNums) {\n    int countOdd = arrayNums.Count(x =\u003E x % 2 != 0);\n    return countOdd;\n}","task_id":258,"test_setup_code":"","test_list":["Debug.Assert(CountOdd(new int[] { 1, 2, 3, 5, 7, 8, 10 }) == 4);","Debug.Assert(CountOdd(new int[] { 10, 15, 14, 13, -18, 12, -20 }) == 2);","Debug.Assert(CountOdd(new int[] { 1, 2, 4, 8, 9 }) == 2);"],"challenge_test_list":[]}
{"name":"maximize-tuples","description":"Maximize values from two given tuples with a function","text":"Write a function to maximize the given two tuples.","code":"public static ValueTuple\u003Cint[]\u003E MaximizeElements(ValueTuple\u003Cint[]\u003E testTup1, ValueTuple\u003Cint[]\u003E testTup2)\n{\n    var res = testTup1.Item1.Zip(testTup2.Item1, (a, b) =\u003E Math.Max(a, b)).ToArray();\n    return (res);\n}","task_id":259,"test_setup_code":"","test_list":["Debug.Assert(MaximizeElements(new (int, int)[] { (1, 3), (4, 5), (2, 9), (1, 10) }, new (int, int)[] { (6, 7), (3, 9), (1, 1), (7, 3) }).SequenceEqual(new (int, int)[] { (6, 7), (4, 9), (2, 9), (7, 10) }));","Debug.Assert(MaximizeElements(new (int, int)[] { (2, 4), (5, 6), (3, 10), (2, 11) }, new (int, int)[] { (7, 8), (4, 10), (2, 2), (8, 4) }).SequenceEqual(new (int, int)[] { (7, 8), (5, 10), (3, 10), (8, 11) }));","Debug.Assert(MaximizeElements(new (int, int)[] { (3, 5), (6, 7), (4, 11), (3, 12) }, new (int, int)[] { (8, 9), (5, 11), (3, 3), (9, 5) }) == new (int, int)[] { (8, 9), (6, 11), (4, 11), (9, 12) });"],"challenge_test_list":[]}
{"name":"newman-shanks-prime","description":"Find the nth Newman-Shanks-Williams prime","text":"Write a function to find the nth newman\u2013shanks\u2013williams prime number.","code":"public int NewmanPrime(int n) \n{ \n    if (n == 0 || n == 1) \n        return 1; \n    return 2 * NewmanPrime(n - 1) \u002B NewmanPrime(n - 2); \n}","task_id":260,"test_setup_code":"","test_list":["Debug.Assert(NewmanPrime(3) == 7);","Debug.Assert(NewmanPrime(4) == 17);","Debug.Assert(NewmanPrime(5) == 41);"],"challenge_test_list":[]}
{"name":"div-tuple-fn","description":"Divide numbers in tuples using a custom function","text":"Write a function to perform mathematical division operation across the given tuples.","code":"public static Tuple\u003Cint\u003E DivisionElements(Tuple\u003Cint\u003E testTup1, Tuple\u003Cint\u003E testTup2)\n{\n    var res = Tuple.Create(testTup1.Item1 / testTup2.Item1, testTup1.Item2 / testTup2.Item2);\n    return res;\n}","task_id":261,"test_setup_code":"","test_list":["Debug.Assert(DivisionElements((10, 4, 6, 9), (5, 2, 3, 3)).SequenceEqual((2, 2, 2, 3)));","Debug.Assert(DivisionElements(new int[] { 12, 6, 8, 16 }, new int[] { 6, 3, 4, 4 }).SequenceEqual(new int[] { 2, 2, 2, 4 }));","Debug.Assert(DivisionElements(new int[] { 20, 14, 36, 18 }, new int[] { 5, 7, 6, 9 }).SequenceEqual(new int[] { 4, 2, 6, 2 }));"],"challenge_test_list":[]}
{"name":"split-list-part","description":"Split list into two parts by specified length","text":"Write a function to split a given list into two parts where the length of the first part of the list is given.","code":"public (List\u003CT\u003E part1, List\u003CT\u003E part2) SplitTwoParts\u003CT\u003E(List\u003CT\u003E list1, int L)\n{\n    return (list1.Take(L).ToList(), list1.Skip(L).ToList());\n}","task_id":262,"test_setup_code":"","test_list":["Debug.Assert(SplitTwoParts(new int[] { 1, 1, 2, 3, 4, 4, 5, 1 }, 3).Item1.SequenceEqual(new int[] { 1, 1, 2 }) \u0026\u0026 \n               SplitTwoParts(new int[] { 1, 1, 2, 3, 4, 4, 5, 1 }, 3).Item2.SequenceEqual(new int[] { 3, 4, 4, 5, 1 }));","Debug.Assert(SplitTwoParts(new string[] { \u0022a\u0022, \u0022b\u0022, \u0022c\u0022, \u0022d\u0022 }, 2).Item1.SequenceEqual(new string[] { \u0022a\u0022, \u0022b\u0022 }) \u0026\u0026 SplitTwoParts(new string[] { \u0022a\u0022, \u0022b\u0022, \u0022c\u0022, \u0022d\u0022 }, 2).Item2.SequenceEqual(new string[] { \u0022c\u0022, \u0022d\u0022 }));","Debug.Assert(SplitTwoParts(new char[] { \u0027p\u0027, \u0027y\u0027, \u0027t\u0027, \u0027h\u0027, \u0027o\u0027, \u0027n\u0027 }, 4).Equals((new char[] { \u0027p\u0027, \u0027y\u0027, \u0027t\u0027, \u0027h\u0027 }, new char[] { \u0027o\u0027, \u0027n\u0027 })));"],"challenge_test_list":[]}
{"name":"merge-two-dicts","description":"Merge two dictionaries into one unified dictionary","text":"Write a function to merge two dictionaries.","code":"public Dictionary\u003CTKey, TValue\u003E MergeDict\u003CTKey, TValue\u003E(Dictionary\u003CTKey, TValue\u003E d1, Dictionary\u003CTKey, TValue\u003E d2)\n{\n    var d = new Dictionary\u003CTKey, TValue\u003E(d1);\n    foreach (var kvp in d2)\n    {\n        d[kvp.Key] = kvp.Value;\n    }\n    return d;\n}","task_id":263,"test_setup_code":"","test_list":["Debug.Assert(MergeDict(new Dictionary\u003Cstring, int\u003E{{\u0022a\u0022, 100}, {\u0022b\u0022, 200}}, new Dictionary\u003Cstring, int\u003E{{\u0022x\u0022, 300}, {\u0022y\u0022, 200}}).SequenceEqual(new Dictionary\u003Cstring, int\u003E{{\u0022x\u0022, 300}, {\u0022y\u0022, 200}, {\u0022a\u0022, 100}, {\u0022b\u0022, 200}}));","Debug.Assert(MergeDict(new Dictionary\u003Cstring, int\u003E{{\u0022a\u0022, 900}, {\u0022b\u0022, 900}, {\u0022d\u0022, 900}}, new Dictionary\u003Cstring, int\u003E{{\u0022a\u0022, 900}, {\u0022b\u0022, 900}, {\u0022d\u0022, 900}}).SequenceEqual(new Dictionary\u003Cstring, int\u003E{{\u0022a\u0022, 900}, {\u0022b\u0022, 900}, {\u0022d\u0022, 900}, {\u0022a\u0022, 900}, {\u0022b\u0022, 900}, {\u0022d\u0022, 900}}));","Debug.Assert(MergeDict(new Dictionary\u003Cstring, int\u003E { { \u0022a\u0022, 10 }, { \u0022b\u0022, 20 } }, new Dictionary\u003Cstring, int\u003E { { \u0022x\u0022, 30 }, { \u0022y\u0022, 40 } }).SequenceEqual(new Dictionary\u003Cstring, int\u003E { { \u0022x\u0022, 30 }, { \u0022y\u0022, 40 }, { \u0022a\u0022, 10 }, { \u0022b\u0022, 20 } }));"],"challenge_test_list":[]}
{"name":"dog-age-calculator","description":"Calculate a dog\u0027s age in dog years","text":"Write a function to calculate a dog\u0027s age in dog\u0027s years.","code":"public double DogAge(double h_age)\n{\n    if (h_age \u003C 0)\n    {\n        Environment.Exit(0);\n    }\n    else if (h_age \u003C= 2)\n    {\n        return h_age * 10.5;\n    }\n    else\n    {\n        return 21 \u002B (h_age - 2) * 4;\n    }\n}","task_id":264,"test_setup_code":"","test_list":["Debug.Assert(DogAge(12) == 61);","Debug.Assert(DogAge(15) == 73);","Debug.Assert(DogAge(24) == 109);"],"challenge_test_list":[]}
{"name":"split-list-nth","description":"Split a list into chunks of n elements","text":"Write a function to split a list for every nth element.","code":"List\u003Cstring\u003E ListSplit(string S, int step) {\n    List\u003Cstring\u003E result = new List\u003Cstring\u003E();\n    for (int i = 0; i \u003C step; i\u002B\u002B) {\n        result.Add(S.Substring(i, S.Length - i).Split(new[] { S.Substring(0, step) }, StringSplitOptions.None).Skip(i).Select(x =\u003E x[0]).ToString());\n    }\n    return result;\n}","task_id":265,"test_setup_code":"","test_list":["Debug.Assert(ListSplit(new List\u003Cstring\u003E { \u0022a\u0022, \u0022b\u0022, \u0022c\u0022, \u0022d\u0022, \u0022e\u0022, \u0022f\u0022, \u0022g\u0022, \u0022h\u0022, \u0022i\u0022, \u0022j\u0022, \u0022k\u0022, \u0022l\u0022, \u0022m\u0022, \u0022n\u0022}, 3).SequenceEqual(new List\u003CList\u003Cstring\u003E\u003E { new List\u003Cstring\u003E { \u0022a\u0022, \u0022d\u0022, \u0022g\u0022, \u0022j\u0022, \u0022m\u0022 }, new List\u003Cstring\u003E { \u0022b\u0022, \u0022e\u0022, \u0022h\u0022, \u0022k\u0022, \u0022n\u0022 }, new List\u003Cstring\u003E { \u0022c\u0022, \u0022f\u0022, \u0022i\u0022, \u0022l\u0022 } }));","Debug.Assert(ListSplit(new List\u003Cint\u003E{1,2,3,4,5,6,7,8,9,10,11,12,13,14}, 3).SequenceEqual(new List\u003CList\u003Cint\u003E\u003E{ new List\u003Cint\u003E{1,4,7,10,13}, new List\u003Cint\u003E{2,5,8,11,14}, new List\u003Cint\u003E{3,6,9,12} }));","Debug.Assert(ListSplit(new List\u003Cstring\u003E { \u0022python\u0022, \u0022java\u0022, \u0022C\u0022, \u0022C\u002B\u002B\u0022, \u0022DBMS\u0022, \u0022SQL\u0022 }, 2).SequenceEqual(new List\u003CList\u003Cstring\u003E\u003E { new List\u003Cstring\u003E { \u0022python\u0022, \u0022C\u0022, \u0022DBMS\u0022 }, new List\u003Cstring\u003E { \u0022java\u0022, \u0022C\u002B\u002B\u0022, \u0022SQL\u0022 } }));"],"challenge_test_list":[]}
{"name":"lateral-surface","description":"Calculate the lateral surface area of a cube","text":"Write a function to find the lateral surface area of a cube.","code":"public static double LateralSurfaceCube(double l)  \n{  \n    double LSA = 4 * (l * l);  \n    return LSA;  \n}","task_id":266,"test_setup_code":"","test_list":["Debug.Assert(LateralSurfaceCube(5) == 100);","Debug.Assert(LateralSurfaceCube(9) == 324);","Debug.Assert(LateralSurfaceCube(10) == 400);"],"challenge_test_list":[]}
{"name":"sum-of-odd-sqrs","description":"Sum of squares of first n odd natural numbers","text":"Write a C# function to find the sum of squares of first n odd natural numbers.","code":"public int SquareSum(int n)  \n{  \n    return (int)(n * (4 * n * n - 1) / 3);  \n}","task_id":267,"test_setup_code":"","test_list":["Debug.Assert(SquareSum(2) == 10);","Debug.Assert(SquareSum(3) == 35);","Debug.Assert(SquareSum(4) == 84);"],"challenge_test_list":[]}
{"name":"star-number-finder","description":"Calculate the nth star number in a sequence","text":"Write a function to find the n\u0027th star number.","code":"public int FindStarNum(int n)  \n{  \n    return (6 * n * (n - 1) \u002B 1);  \n}","task_id":268,"test_setup_code":"","test_list":["Debug.Assert(FindStarNum(3) == 37);","Debug.Assert(FindStarNum(4) == 73);","Debug.Assert(FindStarNum(5) == 121);"],"challenge_test_list":[]}
{"name":"ascii-value-finder","description":"Find the ASCII value of a given character","text":"Write a function to find the ascii value of a character.","code":"public int AsciiValue(char k) {\n    return (int)k;\n}","task_id":269,"test_setup_code":"","test_list":["Debug.Assert(AsciiValue(\u0027A\u0027) == 65);","Debug.Assert(AsciiValue(\u0027R\u0027) == 82);","Debug.Assert(AsciiValue(\u0027S\u0027) == 83);"],"challenge_test_list":[]}
{"name":"even-sum-at-even","description":"Sum even numbers at even indices in a list","text":"Write a C# function to find the sum of even numbers at even positions.","code":"public int SumEvenAndEvenIndex(int[] arr, int n)  \n{  \n    int sum = 0;  \n    for (int i = 0; i \u003C n; i \u002B= 2)  \n    {  \n        if (arr[i] % 2 == 0)  \n        {  \n            sum \u002B= arr[i];  \n        }  \n    }  \n    return sum;  \n}","task_id":270,"test_setup_code":"","test_list":["Debug.Assert(SumEvenAndEvenIndex(new int[] { 5, 6, 12, 1, 18, 8 }, 6) == 30);","Debug.Assert(SumEvenAndEvenIndex(new int[] { 3, 20, 17, 9, 2, 10, 18, 13, 6, 18 }, 10) == 26);","Debug.Assert(SumEvenAndEvenIndex(new int[] { 5, 6, 12, 1 }, 4) == 12);"],"challenge_test_list":[]}
{"name":"sum-fifth-powers","description":"Sum fifth powers of first n even numbers","text":"Write a C# function to find the sum of fifth power of first n even natural numbers.","code":"public static int EvenPowerSum(int n) \n{ \n    int sum = 0; \n    for (int i = 1; i \u003C= n; i\u002B\u002B) \n    { \n        int j = 2 * i; \n        sum \u002B= (j * j * j * j * j); \n    } \n    return sum; \n}","task_id":271,"test_setup_code":"","test_list":["Debug.Assert(EvenPowerSum(2) == 1056);","Debug.Assert(EvenPowerSum(3) == 8832);","Debug.Assert(EvenPowerSum(1) == 32);"],"challenge_test_list":[]}
{"name":"rear-extract-tuples","description":"Extract rear elements from a list of tuples","text":"Write a function to perfom the rear element extraction from list of tuples records.","code":"public List\u003Cobject\u003E RearExtract(List\u003CList\u003Cobject\u003E\u003E testList) \n{\n    List\u003Cobject\u003E res = new List\u003Cobject\u003E();\n    foreach (var lis in testList)\n    {\n        res.Add(lis[lis.Count - 1]);\n    }\n    return res;\n}","task_id":272,"test_setup_code":"","test_list":["Debug.Assert(RearExtract(new object[] { new Tuple\u003Cint, string, int\u003E(1, \u0022Rash\u0022, 21), new Tuple\u003Cint, string, int\u003E(2, \u0022Varsha\u0022, 20), new Tuple\u003Cint, string, int\u003E(3, \u0022Kil\u0022, 19) }).Equals(new int[] { 21, 20, 19 }));","Debug.Assert(RearExtract(new object[,] { { 1, \u0022Sai\u0022, 36 }, { 2, \u0022Ayesha\u0022, 25 }, { 3, \u0022Salman\u0022, 45 } }) == new int[] { 36, 25, 45 });","Debug.Assert(RearExtract(new (int, string, int)[] { (1, \u0022Sudeep\u0022, 14), (2, \u0022Vandana\u0022, 36), (3, \u0022Dawood\u0022, 56) }).SequenceEqual(new int[] { 14, 36, 56 }));"],"challenge_test_list":[]}
{"name":"tuple-subtraction","description":"Subtract corresponding tuple elements element-wise","text":"Write a function to substract the contents of one tuple with corresponding index of other tuple.","code":"public Tuple\u003Cint, int\u003E SubstractElements(Tuple\u003Cint, int\u003E testTup1, Tuple\u003Cint, int\u003E testTup2)\n{\n    return Tuple.Create(testTup1.Item1 - testTup2.Item1, testTup1.Item2 - testTup2.Item2);\n}","task_id":273,"test_setup_code":"","test_list":["Debug.Assert(SubstractElements(new Tuple\u003Cint, int, int\u003E(10, 4, 5), new Tuple\u003Cint, int, int\u003E(2, 5, 18)).Equals(new Tuple\u003Cint, int, int\u003E(8, -1, -13)));","Debug.Assert(SubstractElements(new Tuple\u003Cint, int, int\u003E(11, 2, 3), new Tuple\u003Cint, int, int\u003E(24, 45, 16)).Equals(new Tuple\u003Cint, int, int\u003E(-13, -43, -13)));","Debug.Assert(SubstractElements(new Tuple\u003Cint, int, int\u003E(7, 18, 9), new Tuple\u003Cint, int, int\u003E(10, 11, 12)).Equals(new Tuple\u003Cint, int, int\u003E(-3, 7, -3)));"],"challenge_test_list":[]}
{"name":"even-index-sum","description":"Find sum of even index binomial coefficients","text":"Write a C# function to find sum of even index binomial coefficients.","code":"public static long EvenBinomialCoeffSum(int n) \n{\n    return (1L \u003C\u003C (n - 1));\n}","task_id":274,"test_setup_code":"","test_list":["Debug.Assert(EvenBinomialCoeffSum(4) == 8);","Debug.Assert(EvenBinomialCoeffSum(6) == 32);","Debug.Assert(EvenBinomialCoeffSum(2) == 2);"],"challenge_test_list":[]}
{"name":"last-removed-pos","description":"Find the position of the last removed array element","text":"Write a C# function to find the position of the last removed element from the given array.","code":"using System;\n\npublic class PositionFinder\n{\n    public static int GetPosition(int[] a, int n, int m)\n    {\n        for (int i = 0; i \u003C n; i\u002B\u002B)\n        {\n            a[i] = (a[i] / m \u002B (a[i] % m != 0 ? 1 : 0));\n        }\n\n        int result = -1, maxx = -1;\n        for (int i = n - 1; i \u003E= 0; i--)\n        {\n            if (maxx \u003C a[i])\n            {\n                maxx = a[i];\n                result = i;\n            }\n        }\n        return result \u002B 1;\n    }\n}","task_id":275,"test_setup_code":"","test_list":["Debug.Assert(GetPosition(new int[] { 2, 5, 4 }, 3, 2) == 2);","Debug.Assert(GetPosition(new int[] { 4, 3 }, 2, 2) == 2);","Debug.Assert(GetPosition(new int[] { 1, 2, 3, 4 }, 4, 1) == 4);"],"challenge_test_list":[]}
{"name":"cylinder-volume","description":"Calculate the volume of a cylinder given dimensions","text":"Write a function to find the volume of a cylinder.","code":"public double VolumeCylinder(double r, double h)\n{\n    double volume = 3.1415 * r * r * h;\n    return volume;\n}","task_id":276,"test_setup_code":"","test_list":["Debug.Assert(VolumeCylinder(10, 5) == 1570.7500000000002);","Debug.Assert(VolumeCylinder(4, 5) == 251.32000000000002);","Debug.Assert(VolumeCylinder(4, 10) == 502.64000000000004);"],"challenge_test_list":[]}
{"name":"filter-dict-by-val","description":"Filter a dictionary by its values using a function","text":"Write a function to filter a dictionary based on values.","code":"public Dictionary\u003CTKey, TValue\u003E DictFilter\u003CTKey, TValue\u003E(Dictionary\u003CTKey, TValue\u003E dict, TValue n) where TValue : IComparable\n{\n    var result = dict.Where(kvp =\u003E kvp.Value.CompareTo(n) \u003E= 0).ToDictionary(kvp =\u003E kvp.Key, kvp =\u003E kvp.Value);\n    return result;\n}","task_id":277,"test_setup_code":"","test_list":["Debug.Assert(DictFilter(new Dictionary\u003Cstring, int\u003E{{\u0022Cierra Vega\u0022, 175}, {\u0022Alden Cantrell\u0022, 180}, {\u0022Kierra Gentry\u0022, 165}, {\u0022Pierre Cox\u0022, 190}}, 170).SequenceEqual(new Dictionary\u003Cstring, int\u003E{{\u0022Cierra Vega\u0022, 175}, {\u0022Alden Cantrell\u0022, 180}, {\u0022Pierre Cox\u0022, 190}}));","Debug.Assert(DictFilter(new Dictionary\u003Cstring, int\u003E { { \u0022Cierra Vega\u0022, 175 }, { \u0022Alden Cantrell\u0022, 180 }, { \u0022Kierra Gentry\u0022, 165 }, { \u0022Pierre Cox\u0022, 190 } }, 180).SequenceEqual(new Dictionary\u003Cstring, int\u003E { { \u0022Alden Cantrell\u0022, 180 }, { \u0022Pierre Cox\u0022, 190 } }));","Debug.Assert(DictFilter(new Dictionary\u003Cstring, int\u003E { {\u0022Cierra Vega\u0022, 175}, {\u0022Alden Cantrell\u0022, 180}, {\u0022Kierra Gentry\u0022, 165}, {\u0022Pierre Cox\u0022, 190} }, 190).SequenceEqual(new Dictionary\u003Cstring, int\u003E { {\u0022Pierre Cox\u0022, 190} }));"],"challenge_test_list":[]}
{"name":"element-count-tup","description":"Count elements before record in a tuple","text":"Write a function to find the element count that occurs before the record in the given tuple.","code":"public static int CountFirstElements(Tuple[] testTup)\n{\n    int count = 0;\n    foreach (var ele in testTup.Select((value, index) =\u003E new { value, index }))\n    {\n        count = ele.index;\n        if (ele.value is Tuple)\n        {\n            break;\n        }\n    }\n    return count;\n}","task_id":278,"test_setup_code":"","test_list":["Debug.Assert(CountFirstElements(new object[] { 1, 5, 7, new object[] { 4, 6 }, 10 }) == 3);","Debug.Assert(CountFirstElements(new object[] { 2, 9, new object[] { 5, 7 }, 11 }) == 2);","Debug.Assert(CountFirstElements(new object[] { 11, 15, 5, 8, new object[] { 2, 3 }, 8 }) == 4);"],"challenge_test_list":[]}
{"name":"decagonal-number","description":"Find the nth decagonal number efficiently","text":"Write a function to find the nth decagonal number.","code":"public int IsNumDecagonal(int n) \n{ \n    return 4 * n * n - 3 * n; \n}","task_id":279,"test_setup_code":"","test_list":["Debug.Assert(IsNumDecagonal(3) == 27);","Debug.Assert(IsNumDecagonal(7) == 175);","Debug.Assert(IsNumDecagonal(10) == 370);"],"challenge_test_list":[]}
{"name":"sequential-search","description":"Sequential search for an element in an array","text":"Write a function to search an element in the given array by using sequential search.","code":"public (bool, int) SequentialSearch(List\u003Cint\u003E dlist, int item) {\n    int pos = 0;\n    bool found = false;\n    while (pos \u003C dlist.Count \u0026\u0026 !found) {\n        if (dlist[pos] == item) {\n            found = true;\n        } else {\n            pos\u002B\u002B;\n        }\n    }\n    return (found, pos);\n}","task_id":280,"test_setup_code":"","test_list":["Debug.Assert(SequentialSearch(new int[] { 11, 23, 58, 31, 56, 77, 43, 12, 65, 19 }, 31).Equals((true, 3)));","Debug.Assert(SequentialSearch(new int[] { 12, 32, 45, 62, 35, 47, 44, 61 }, 61).Equals((true, 7)));","Debug.Assert(SequentialSearch(new int[] { 9, 10, 17, 19, 22, 39, 48, 56 }, 48).Equals((true, 6)));"],"challenge_test_list":[]}
{"name":"check-unique-list","description":"Check if list elements are unique in Python","text":"Write a C# function to check if the elements of a given list are unique or not.","code":"public static bool AllUnique(List\u003Cint\u003E testList) {\n    if (testList.Count \u003E new HashSet\u003Cint\u003E(testList).Count) {\n        return false;\n    }\n    return true;\n}","task_id":281,"test_setup_code":"","test_list":["Debug.Assert(AllUnique(new int[] { 1, 2, 3 }) == true);","Debug.Assert(AllUnique(new List\u003Cint\u003E { 1, 2, 1, 2 }) == false);","Debug.Assert(AllUnique(new int[] { 1, 2, 3, 4, 5 }) == true);"],"challenge_test_list":[]}
{"name":"list-subtract-mp","description":"Subtract two lists using map and lambda functions","text":"Write a function to substaract two lists using map and lambda function.","code":"public List\u003Cint\u003E SubList(List\u003Cint\u003E nums1, List\u003Cint\u003E nums2)\n{\n    return nums1.Zip(nums2, (x, y) =\u003E x - y).ToList();\n}","task_id":282,"test_setup_code":"","test_list":["Debug.Assert(SubList(new int[] { 1, 2, 3 }, new int[] { 4, 5, 6 }).SequenceEqual(new int[] { -3, -3, -3 }));","Debug.Assert(SubList(new List\u003Cint\u003E { 1, 2 }, new List\u003Cint\u003E { 3, 4 }).SequenceEqual(new List\u003Cint\u003E { -2, -2 }));","Debug.Assert(SubList(new int[] { 90, 120 }, new int[] { 50, 70 }).SequenceEqual(new int[] { 40, 50 }));"],"challenge_test_list":[]}
{"name":"digit-frequency-check","description":"Check if digit frequencies do not exceed their values","text":"Write a C# function to check whether the frequency of each digit is less than or equal to the digit itself.","code":"public bool Validate(int n) \n{ \n    for (int i = 0; i \u003C 10; i\u002B\u002B) \n    { \n        int temp = n; \n        int count = 0; \n        while (temp \u003E 0) \n        { \n            if (temp % 10 == i) \n            { \n                count\u002B\u002B; \n            } \n            if (count \u003E i) \n            { \n                return false; \n            } \n            temp /= 10; \n        } \n    } \n    return true; \n}","task_id":283,"test_setup_code":"","test_list":["Debug.Assert(Validate(1234) == true);","Debug.Assert(Validate(51241) == false);","Debug.Assert(Validate(321) == true);"],"challenge_test_list":[]}
{"name":"check-list-equal","description":"Check if all list items match a given string","text":"Write a function to check whether all items of a list are equal to a given string.","code":"public bool CheckElement(List\u003Cobject\u003E list, object element)  \n{  \n    bool checkElement = list.All(v =\u003E v.Equals(element));  \n    return checkElement;  \n}","task_id":284,"test_setup_code":"","test_list":["Debug.Assert(CheckElement(new string[] { \u0022green\u0022, \u0022orange\u0022, \u0022black\u0022, \u0022white\u0022 }, \u0027blue\u0027) == false);","Debug.Assert(CheckElement(new int[] { 1, 2, 3, 4 }, 7) == false);","Debug.Assert(CheckElement(new string[] { \u0022green\u0022, \u0022green\u0022, \u0022green\u0022, \u0022green\u0022 }, \u0027green\u0027) == true);"],"challenge_test_list":[]}
{"name":"a-bb-or-abb","description":"Match string pattern with a followed by two to three b\u0027s","text":"Write a function that matches a string that has an a followed by two to three \u0027b\u0027.","code":"using System.Text.RegularExpressions;\n\npublic class Matcher\n{\n    public string TextMatchTwoThree(string text)\n    {\n        string patterns = \u0022ab{2,3}\u0022;\n        if (Regex.IsMatch(text, patterns))\n        {\n            return \u0022Found a match!\u0022;\n        }\n        else\n        {\n            return \u0022Not matched!\u0022;\n        }\n    }\n}","task_id":285,"test_setup_code":"","test_list":["Debug.Assert(TextMatchTwoThree(\u0022ac\u0022) == \u0022Not matched!\u0022);","Debug.Assert(TextMatchTwoThree(\u0022dc\u0022) == \u0022Not matched!\u0022);","Debug.Assert(TextMatchTwoThree(\u0022abbbba\u0022) == \u0022Found a match!\u0022);"],"challenge_test_list":[]}
{"name":"largest-sum-k-times","description":"Find the largest sum in repeated array segments","text":"Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.","code":"public static int MaxSubArraySumRepeated(int[] a, int n, int k) \n{\n    int maxSoFar = int.MinValue;\n    int maxEndingHere = 0;\n    for (int i = 0; i \u003C n * k; i\u002B\u002B) \n    {\n        maxEndingHere \u002B= a[i % n];\n        if (maxSoFar \u003C maxEndingHere) \n        {\n            maxSoFar = maxEndingHere;\n        }\n        if (maxEndingHere \u003C 0) \n        {\n            maxEndingHere = 0;\n        }\n    }\n    return maxSoFar;\n}","task_id":286,"test_setup_code":"","test_list":["Debug.Assert(MaxSubArraySumRepeated(new int[] { 10, 20, -30, -1 }, 4, 3) == 30);","Debug.Assert(MaxSubArraySumRepeated(new int[] { -1, 10, 20 }, 3, 2) == 59);","Debug.Assert(MaxSubArraySumRepeated(new int[] { -1, -2, -3 }, 3, 3) == -1);"],"challenge_test_list":[]}
{"name":"sum-of-squares-evens","description":"Sum of squares of first n even numbers","text":"Write a C# function to find the sum of squares of first n even natural numbers.","code":"public int SquareSum(int n)  \n{  \n    return (int)(2 * n * (n \u002B 1) * (2 * n \u002B 1) / 3);  \n}","task_id":287,"test_setup_code":"","test_list":["Debug.Assert(SquareSum(2) == 20);","Debug.Assert(SquareSum(3) == 56);","Debug.Assert(SquareSum(4) == 120);"],"challenge_test_list":[]}
{"name":"count-inverses-p","description":"Count elements with modular inverse equal to self","text":"Write a function to count array elements having modular inverse under given prime number p equal to itself.","code":"int ModularInverse(int[] arr, int N, int P) {\n    int currentElement = 0;\n    for (int i = 0; i \u003C N; i\u002B\u002B) {\n        if ((arr[i] * arr[i]) % P == 1) {\n            currentElement\u002B\u002B;\n        }\n    }\n    return currentElement;\n}","task_id":288,"test_setup_code":"","test_list":["Debug.Assert(ModularInverse(new int[] { 1, 6, 4, 5 }, 4, 7) == 2);","Debug.Assert(ModularInverse(new int[] { 1, 3, 8, 12, 12 }, 5, 13) == 3);","Debug.Assert(ModularInverse(new int[] { 2, 3, 4, 5 }, 4, 6) == 1);"],"challenge_test_list":[]}
{"name":"odd-days-calculator","description":"Calculate odd days in a given year using Python","text":"Write a C# function to calculate the number of odd days in a given year.","code":"public int OddDays(int N) \n{ \n    int hund1 = N / 100; \n    int hund4 = N / 400; \n    int leap = N \u003E\u003E 2; \n    int ordd = N - leap; \n    if (hund1 != 0) \n    { \n        ordd \u002B= hund1; \n        leap -= hund1; \n    } \n    if (hund4 != 0) \n    { \n        ordd -= hund4; \n        leap \u002B= hund4; \n    } \n    int days = ordd \u002B leap * 2; \n    int odd = days % 7; \n    return odd; \n}","task_id":289,"test_setup_code":"","test_list":["Debug.Assert(OddDays(100) == 5);","Debug.Assert(OddDays(50) == 6);","Debug.Assert(OddDays(75) == 2);"],"challenge_test_list":[]}
{"name":"max-length-lists","description":"Find lists with the maximum length from input","text":"Write a function to find the list of lists with maximum length.","code":"public (int, string) MaxLength(List\u003Cstring\u003E list1) \n{\n    int maxLength = list1.Max(x =\u003E x.Length);\n    string maxList = list1.Max();\n    return (maxLength, maxList);\n}","task_id":290,"test_setup_code":"","test_list":["Debug.Assert(MaxLength(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 0 }, new List\u003Cint\u003E { 1, 3 }, new List\u003Cint\u003E { 5, 7 }, new List\u003Cint\u003E { 9, 11 }, new List\u003Cint\u003E { 13, 15, 17 } }) == (3, new List\u003Cint\u003E { 13, 15, 17 }));","Debug.Assert(MaxLength(new List\u003CList\u003Cint\u003E\u003E() { new List\u003Cint\u003E() { 1 }, new List\u003Cint\u003E() { 5, 7 }, new List\u003Cint\u003E() { 10, 12, 14, 15 } }) == (4, new List\u003Cint\u003E() { 10, 12, 14, 15 }));","Debug.Assert(MaxLength(new int[][] { new int[] { 5 }, new int[] { 15, 20, 25 } }) == (3, new int[] { 15, 20, 25 }));"],"challenge_test_list":[]}
{"name":"fence-painting-ways","description":"Count ways to paint a fence with constraints","text":"Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.","code":"public static long CountNoOfWays(int n, int k) \n{ \n    long[] dp = new long[n \u002B 1]; \n    long total = k; \n    long mod = 1000000007; \n    dp[1] = k; \n    dp[2] = k * k; \n    for (int i = 3; i \u003C= n; i\u002B\u002B) \n    { \n        dp[i] = ((k - 1) * (dp[i - 1] \u002B dp[i - 2])) % mod; \n    } \n    return dp[n]; \n}","task_id":291,"test_setup_code":"","test_list":["Debug.Assert(CountNoOfWays(2, 4) == 16);","Debug.Assert(CountNoOfWays(3, 2) == 6);","Debug.Assert(CountNoOfWays(4, 4) == 228);"],"challenge_test_list":[]}
{"name":"find-quotient","description":"Calculate the quotient of two numbers in Python","text":"Write a C# function to find quotient of two numbers.","code":"public int Find(int n, int m)  \n{  \n    int q = n / m;  \n    return q;  \n}","task_id":292,"test_setup_code":"","test_list":["Debug.Assert(Find(10, 3) == 3);","Debug.Assert(Find(4, 2) == 2);","Debug.Assert(Find(20, 5) == 4);"],"challenge_test_list":[]}
{"name":"third-side-triangle","description":"Calculate the third side of a right triangle","text":"Write a function to find the third side of a right angled triangle.","code":"public static double OthersideRightangle(double w, double h) {\n    double s = Math.Sqrt((w * w) \u002B (h * h));\n    return s;\n}","task_id":293,"test_setup_code":"","test_list":["Debug.Assert(OthersideRightangle(7, 8) == 10.63014581273465);","Debug.Assert(OthersideRightangle(3, 4) == 5);","Debug.Assert(OthersideRightangle(7, 15) == 16.55294535724685);\n\npublic static double OthersideRightangle(double a, double b)\n{\n    return Math.Sqrt(a * a \u002B b * b);\n}"],"challenge_test_list":[]}
{"name":"max-value-in-list","description":"Find max value in a heterogeneous list","text":"Write a function to find the maximum value in a given heterogeneous list.","code":"public int MaxVal(IEnumerable\u003Cobject\u003E listval)\n{\n    return listval.OfType\u003Cint\u003E().Max();\n}","task_id":294,"test_setup_code":"","test_list":["Debug.Assert(MaxVal(new object[] { \u0022Python\u0022, 3, 2, 4, 5, \u0022version\u0022 }) == 5);","Debug.Assert(MaxVal(new object[] { \u0022Python\u0022, 15, 20, 25 }) == 25);","Debug.Assert(MaxVal(new object[] { \u0022Python\u0022, 30, 20, 40, 50, \u0022version\u0022 }) == 50);"],"challenge_test_list":[]}
{"name":"sum-of-divisors","description":"Sum all divisors of a given number in a function","text":"Write a function to return the sum of all divisors of a number.","code":"public int SumDiv(int number)\n{\n    List\u003Cint\u003E divisors = new List\u003Cint\u003E { 1 };\n    for (int i = 2; i \u003C number; i\u002B\u002B)\n    {\n        if (number % i == 0)\n        {\n            divisors.Add(i);\n        }\n    }\n    return divisors.Sum();\n}","task_id":295,"test_setup_code":"","test_list":["Debug.Assert(SumDiv(8) == 7);","Debug.Assert(SumDiv(12) == 16);","Debug.Assert(SumDiv(7) == 1);"],"challenge_test_list":[]}
{"name":"count-inversions","description":"Count inversions in an array using Python function","text":"Write a C# function to count inversions in an array.","code":"public int GetInvCount(int[] arr, int n) \n{\n    int invCount = 0;\n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    {\n        for (int j = i \u002B 1; j \u003C n; j\u002B\u002B) \n        {\n            if (arr[i] \u003E arr[j]) \n            {\n                invCount\u002B\u002B;\n            }\n        }\n    }\n    return invCount;\n}","task_id":296,"test_setup_code":"","test_list":["Debug.Assert(GetInvCount(new int[] { 1, 20, 6, 4, 5 }, 5) == 5);","Debug.Assert(GetInvCount(new int[] { 1, 2, 1 }, 3) == 1);","Debug.Assert(GetInvCount(new int[] { 1, 2, 5, 6, 1 }, 5) == 3);"],"challenge_test_list":[]}
{"name":"flatten-nested-list","description":"Flatten a nested list into a single list","text":"Write a function to flatten a given nested list structure.","code":"public List\u003Cobject\u003E FlattenList(List\u003Cobject\u003E list1) {\n    List\u003Cobject\u003E resultList = new List\u003Cobject\u003E();\n    if (list1.Count == 0) return resultList;\n    Stack\u003CList\u003Cobject\u003E\u003E stack = new Stack\u003CList\u003Cobject\u003E\u003E();\n    stack.Push(new List\u003Cobject\u003E(list1));\n    while (stack.Count \u003E 0) {\n        List\u003Cobject\u003E cNum = stack.Pop();\n        object next = cNum[cNum.Count - 1];\n        cNum.RemoveAt(cNum.Count - 1);\n        if (cNum.Count \u003E 0) stack.Push(cNum);\n        if (next is List\u003Cobject\u003E nextList) {\n            if (nextList.Count \u003E 0) stack.Push(new List\u003Cobject\u003E(nextList));\n        } else {\n            resultList.Add(next);\n        }\n    }\n    resultList.Reverse();\n    return resultList;\n}","task_id":297,"test_setup_code":"","test_list":["Debug.Assert(FlattenList(new object[] { 0, 10, new object[] { 20, 30 }, 40, 50, new object[] { 60, 70, 80 }, new object[] { 90, 100, 110, 120 } }).SequenceEqual(new List\u003Cint\u003E { 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120 }));","Debug.Assert(FlattenList(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 10, 20 }, new List\u003Cint\u003E { 40 }, new List\u003Cint\u003E { 30, 56, 25 }, new List\u003Cint\u003E { 10, 20 }, new List\u003Cint\u003E { 33 }, new List\u003Cint\u003E { 40 } }).SequenceEqual(new List\u003Cint\u003E { 10, 20, 40, 30, 56, 25, 10, 20, 33, 40 }));","Debug.Assert(FlattenList(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 1, 2, 3 }, new List\u003Cint\u003E { 4, 5, 6 }, new List\u003Cint\u003E { 10, 11, 12 }, new List\u003Cint\u003E { 7, 8, 9 } }) .SequenceEqual(new List\u003Cint\u003E { 1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9 }));"],"challenge_test_list":[]}
{"name":"nested-list-check","description":"Find elements in a nested list present in another list","text":"Write a function to find the nested list elements which are present in another list.","code":"public List\u003CList\u003Cint\u003E\u003E IntersectionNestedLists(List\u003Cint\u003E l1, List\u003CList\u003Cint\u003E\u003E l2) {\n    var result = new List\u003CList\u003Cint\u003E\u003E();\n    foreach (var lst in l2) {\n        var filteredList = new List\u003Cint\u003E();\n        foreach (var n in lst) {\n            if (l1.Contains(n)) {\n                filteredList.Add(n);\n            }\n        }\n        result.Add(filteredList);\n    }\n    return result;\n}","task_id":298,"test_setup_code":"","test_list":["Debug.Assert(IntersectionNestedLists(new List\u003Cint\u003E { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 }, new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 12, 18, 23, 25, 45 }, new List\u003Cint\u003E { 7, 11, 19, 24, 28 }, new List\u003Cint\u003E { 1, 5, 8, 18, 15, 16 } }) == new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 12 }, new List\u003Cint\u003E { 7, 11 }, new List\u003Cint\u003E { 1, 5, 8 } });","Debug.Assert(IntersectionNestedLists(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 2, 3, 1 }, new List\u003Cint\u003E { 4, 5 }, new List\u003Cint\u003E { 6, 8 } }, new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 4, 5 }, new List\u003Cint\u003E { 6, 8 } }) == new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E(), new List\u003Cint\u003E() });","Debug.Assert(IntersectionNestedLists(new List\u003Cstring\u003E { \u0022john\u0022, \u0022amal\u0022, \u0022joel\u0022, \u0022george\u0022 }, new List\u003CList\u003Cstring\u003E\u003E { new List\u003Cstring\u003E { \u0022john\u0022 }, new List\u003Cstring\u003E { \u0022jack\u0022, \u0022john\u0022, \u0022mary\u0022 }, new List\u003Cstring\u003E { \u0022howard\u0022, \u0022john\u0022 }, new List\u003Cstring\u003E { \u0022jude\u0022 } }).SequenceEqual(new List\u003CList\u003Cstring\u003E\u003E { new List\u003Cstring\u003E { \u0022john\u0022 }, new List\u003Cstring\u003E { \u0022john\u0022 }, new List\u003Cstring\u003E { \u0022john\u0022 }, new List\u003Cstring\u003E { } }));"],"challenge_test_list":[]}
{"name":"max-aggregate-tup","description":"Calculate the maximum sum from a list of tuples","text":"Write a function to calculate the maximum aggregate from the list of tuples.","code":"public KeyValuePair\u003Cstring, int\u003E MaxAggregate(List\u003CTuple\u003Cstring, int\u003E\u003E stdata) {\n    var temp = new Dictionary\u003Cstring, int\u003E();\n    foreach (var item in stdata) {\n        temp[item.Item1] = temp.GetValueOrDefault(item.Item1, 0) \u002B item.Item2;\n    }\n    return temp.OrderByDescending(x =\u003E x.Value).First();\n}","task_id":299,"test_setup_code":"","test_list":["Debug.Assert(MaxAggregate(new (string, int)[] { (\u0022Juan Whelan\u0022, 90), (\u0022Sabah Colley\u0022, 88), (\u0022Peter Nichols\u0022, 7), (\u0022Juan Whelan\u0022, 122), (\u0022Sabah Colley\u0022, 84) }) == (\u0022Juan Whelan\u0022, 212));","Debug.Assert(MaxAggregate(new[] { (\u0022Juan Whelan\u0022, 50), (\u0022Sabah Colley\u0022, 48), (\u0022Peter Nichols\u0022, 37), (\u0022Juan Whelan\u0022, 22), (\u0022Sabah Colley\u0022, 14) }) == (\u0022Juan Whelan\u0022, 72));","Debug.Assert(MaxAggregate(new List\u003CTuple\u003Cstring, int\u003E\u003E {\n    Tuple.Create(\u0022Juan Whelan\u0022, 10),\n    Tuple.Create(\u0022Sabah Colley\u0022, 20),\n    Tuple.Create(\u0022Peter Nichols\u0022, 30),\n    Tuple.Create(\u0022Juan Whelan\u0022, 40),\n    Tuple.Create(\u0022Sabah Colley\u0022, 50)\n}) == Tuple.Create(\u0022Sabah Colley\u0022, 70));"],"challenge_test_list":[]}
{"name":"balanced-bits-seq","description":"Count balanced binary sequences of length 2n","text":"Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.","code":"public double CountBinarySeq(int n) \n{ \n    double nCr = 1; \n    double res = 1; \n    for (int r = 1; r \u003C= n; r\u002B\u002B) \n    { \n        nCr = (nCr * (n \u002B 1 - r)) / r; \n        res \u002B= nCr * nCr; \n    } \n    return res; \n}","task_id":300,"test_setup_code":"","test_list":["Debug.Assert(CountBinarySeq(1) == 2.0);","Debug.Assert(CountBinarySeq(2) == 6.0);","Debug.Assert(CountBinarySeq(3) == 20.0);"],"challenge_test_list":[]}
{"name":"dict-depth-finder","description":"Calculate the depth of a nested dictionary structure","text":"Write a function to find the depth of a dictionary.","code":"public int DictDepth(object d) {\n    if (d is Dictionary\u003Cstring, object\u003E) {\n        var dict = (Dictionary\u003Cstring, object\u003E)d;\n        return 1 \u002B (dict.Count \u003E 0 ? dict.Values.Select(DictDepth).Max() : 0);\n    }\n    return 0;\n}","task_id":301,"test_setup_code":"","test_list":["Debug.Assert(DictDepth(new Dictionary\u003Cstring, object\u003E { {\u0022a\u0022, 1}, {\u0022b\u0022, new Dictionary\u003Cstring, object\u003E { {\u0022c\u0022, new Dictionary\u003Cstring, object\u003E { {\u0022d\u0022, new Dictionary\u003Cstring, object\u003E()}}}}}} }) == 4);","Debug.Assert(DictDepth(new Dictionary\u003Cstring, object\u003E { { \u0022a\u0022, 1 }, { \u0022b\u0022, new Dictionary\u003Cstring, object\u003E { { \u0022c\u0022, \u0022python\u0022 } } } }) == 2);","Debug.Assert(DictDepth(new Dictionary\u003Cint, object\u003E { { 1, \u0022Sun\u0022 }, { 2, new Dictionary\u003Cint, object\u003E { { 3, new Dictionary\u003Cint, object\u003E { { 4, \u0022Mon\u0022 } } } } } }) == 3);"],"challenge_test_list":[]}
{"name":"most-significant-bit","description":"Find the highest set bit in a number","text":"Write a C# function to find the most significant bit number which is also a set bit.","code":"public static int SetBitNumber(int n) \n{ \n    if (n == 0) \n    { \n        return 0; \n    } \n    int msb = 0; \n    n /= 2; \n    while (n \u003E 0) \n    { \n        n /= 2; \n        msb\u002B\u002B; \n    } \n    return 1 \u003C\u003C msb; \n}","task_id":302,"test_setup_code":"","test_list":["Debug.Assert(SetBitNumber(6) == 4);","Debug.Assert(SetBitNumber(10) == 8);","Debug.Assert(SetBitNumber(18) == 16);"],"challenge_test_list":[]}
{"name":"inversion-check.py","description":"Check if two inversion counts are equal","text":"Write a C# function to check whether the count of inversion of two types are same or not.","code":"public bool Solve(int[] a, int n)   \n{   \n    int mx = int.MinValue;   \n    for (int j = 1; j \u003C n; j\u002B\u002B)   \n    {  \n        if (mx \u003E a[j])  \n        {  \n            return false;  \n        }  \n        mx = Math.Max(mx, a[j - 1]);    \n    }  \n    return true;  \n}","task_id":303,"test_setup_code":"","test_list":["Debug.Assert(Solve(new int[] { 1, 0, 2 }, 3) == true);","Debug.Assert(Solve(new int[] { 1, 2, 0 }, 3) == false);","Debug.Assert(Solve(new int[] { 1, 2, 1 }, 3) == true);"],"challenge_test_list":[]}
{"name":"element-at-index","description":"Find element at index after rotations in Python","text":"Write a C# function to find element at a given index after number of rotations.","code":"public int FindElement(int[] arr, int[][] ranges, int rotations, int index) \n{ \n    for (int i = rotations - 1; i \u003E= 0; i--) \n    { \n        int left = ranges[i][0]; \n        int right = ranges[i][1]; \n        if (left \u003C= index \u0026\u0026 right \u003E= index) \n        { \n            if (index == left) \n            { \n                index = right; \n            } \n            else \n            { \n                index = index - 1; \n            } \n        } \n    } \n    return arr[index]; \n}","task_id":304,"test_setup_code":"","test_list":["Debug.Assert(FindElement(new int[] { 1, 2, 3, 4, 5 }, new int[][] { new int[] { 0, 2 }, new int[] { 0, 3 } }, 2, 1) == 3);","Debug.Assert(FindElement(new int[] { 1, 2, 3, 4 }, new int[,] { { 0, 1 }, { 0, 2 } }, 1, 2) == 3);","Debug.Assert(FindElement(new int[] { 1, 2, 3, 4, 5, 6 }, new int[][] { new int[] { 0, 1 }, new int[] { 0, 2 } }, 1, 1) == 1);"],"challenge_test_list":[]}
{"name":"match-p-words","description":"Find two words starting with P from a list","text":"Write a function to match two words from a list of words starting with letter \u0027p\u0027.","code":"using System.Text.RegularExpressions;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static (string, string) StartWithP(List\u003Cstring\u003E words)\n    {\n        foreach (var w in words)\n        {\n            var m = Regex.Match(w, @\u0022(P\\w\u002B)\\W(P\\w\u002B)\u0022);\n            if (m.Success)\n            {\n                return (m.Groups[1].Value, m.Groups[2].Value);\n            }\n        }\n        return (null, null);\n    }\n}","task_id":305,"test_setup_code":"","test_list":["Debug.Assert(StartWithP(new string[] { \u0022Python PHP\u0022, \u0022Java JavaScript\u0022, \u0022c c\u002B\u002B\u0022 }) == (\u0022Python\u0022, \u0022PHP\u0022));\n\npublic static (string, string) StartWithP(string[] input)\n{\n    // Method implementation goes here\n}","Debug.Assert(StartWithP(new string[] { \u0022Python Programming\u0022, \u0022Java Programming\u0022 }) == Tuple.Create(\u0022Python\u0022, \u0022Programming\u0022));","Debug.Assert(StartWithP(new string[] { \u0022Pqrst Pqr\u0022, \u0022qrstuv\u0022 }) == ((\u0022Pqrst\u0022, \u0022Pqr\u0022)));"],"challenge_test_list":[]}
{"name":"max-sum-in-subseq","description":"Max sum of increasing subsequence up to i including k","text":"Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k \u003E i .","code":"int MaxSumIncreasingSubseq(int[] a, int n, int index, int k) {\n    int[][] dp = new int[n][];\n    for (int i = 0; i \u003C n; i\u002B\u002B) {\n        dp[i] = new int[n];\n    }\n    for (int i = 0; i \u003C n; i\u002B\u002B) {\n        if (a[i] \u003E a[0]) {\n            dp[0][i] = a[i] \u002B a[0];\n        } else {\n            dp[0][i] = a[i];\n        }\n    }\n    for (int i = 1; i \u003C n; i\u002B\u002B) {\n        for (int j = 0; j \u003C n; j\u002B\u002B) {\n            if (a[j] \u003E a[i] \u0026\u0026 j \u003E i) {\n                if (dp[i - 1][i] \u002B a[j] \u003E dp[i - 1][j]) {\n                    dp[i][j] = dp[i - 1][i] \u002B a[j];\n                } else {\n                    dp[i][j] = dp[i - 1][j];\n                }\n            } else {\n                dp[i][j] = dp[i - 1][j];\n            }\n        }\n    }\n    return dp[index][k];\n}","task_id":306,"test_setup_code":"","test_list":["Debug.Assert(MaxSumIncreasingSubseq(new int[] { 1, 101, 2, 3, 100, 4, 5 }, 7, 4, 6) == 11);","Debug.Assert(MaxSumIncreasingSubseq(new int[] { 1, 101, 2, 3, 100, 4, 5 }, 7, 2, 5) == 7);","Debug.Assert(MaxSumIncreasingSubseq(new int[] { 11, 15, 19, 21, 26, 28, 31 }, 7, 2, 4) == 71);"],"challenge_test_list":[]}
{"name":"get-colon-tuple","description":"Get a colon from a given tuple in a function","text":"Write a function to get a colon of a tuple.","code":"using System.Collections.Generic;\n\npublic List\u003CList\u003Cint\u003E\u003E ColonTuplex(List\u003CList\u003Cint\u003E\u003E tuplex, int m, int n)\n{\n    var tuplexColon = new List\u003CList\u003Cint\u003E\u003E(tuplex.Count);\n    foreach (var innerList in tuplex)\n    {\n        tuplexColon.Add(new List\u003Cint\u003E(innerList));\n    }\n    tuplexColon[m].Add(n);\n    return tuplexColon;\n}","task_id":307,"test_setup_code":"","test_list":["Debug.Assert(ColonTuplex((\u0022HELLO\u0022, 5, new List\u003Cint\u003E(), true), 2, 50).Equals((\u0022HELLO\u0022, 5, new List\u003Cint\u003E { 50 }, true)));","Debug.Assert(ColonTuplex((\u0022HELLO\u0022, 5, new List\u003Cint\u003E(), true), 2, 100).Equals((\u0022HELLO\u0022, 5, new List\u003Cint\u003E { 100 }, true)));","Debug.Assert(ColonTuplex((\u0022HELLO\u0022, 5, new List\u003Cint\u003E(), true), 2, 500).Equals((\u0022HELLO\u0022, 5, new List\u003Cint\u003E { 500 }, true)));"],"challenge_test_list":[]}
{"name":"largest-products","description":"Find largest products from two lists","text":"Write a function to find the specified number of largest products from two given lists.","code":"public List\u003Cint\u003E LargeProduct(List\u003Cint\u003E nums1, List\u003Cint\u003E nums2, int N) {\n    var result = nums1.SelectMany(x =\u003E nums2, (x, y) =\u003E x * y)\n                      .OrderByDescending(x =\u003E x)\n                      .Take(N)\n                      .ToList();\n    return result;\n}","task_id":308,"test_setup_code":"","test_list":["Debug.Assert(LargeProduct(new int[] { 1, 2, 3, 4, 5, 6 }, new int[] { 3, 6, 8, 9, 10, 6 }, 3).SequenceEqual(new int[] { 60, 54, 50 }));","Debug.Assert(LargeProduct(new int[] { 1, 2, 3, 4, 5, 6 }, new int[] { 3, 6, 8, 9, 10, 6 }, 4).SequenceEqual(new int[] { 60, 54, 50, 48 }));","Debug.Assert(LargeProduct(new int[] { 1, 2, 3, 4, 5, 6 }, new int[] { 3, 6, 8, 9, 10, 6 }, 5).SequenceEqual(new int[] { 60, 54, 50, 48, 45 }));"],"challenge_test_list":[]}
{"name":"max-of-two.py","description":"Find the maximum of two numbers in Python","text":"Write a C# function to find the maximum of two numbers.","code":"public static int Maximum(int a, int b)  \n{  \n    if (a \u003E= b)  \n        return a;  \n    else  \n        return b;  \n}","task_id":309,"test_setup_code":"","test_list":["Debug.Assert(Maximum(5, 10) == 10);","Debug.Assert(Maximum(-1, -2) == -1);","Debug.Assert(Maximum(9, 7) == 9);"],"challenge_test_list":[]}
{"name":"string-to-tuple","description":"Convert a string into a tuple format","text":"Write a function to convert a given string to a tuple.","code":"public static ValueTuple\u003Cstring\u003E StringToTuple(string str1)\n{\n    var result = Tuple.Create(str1.Where(x =\u003E !char.IsWhiteSpace(x)).ToArray());\n    return result;\n}","task_id":310,"test_setup_code":"","test_list":["Debug.Assert(StringToTuple(\u0022python 3.0\u0022).Equals(Tuple.Create(\u0027p\u0027, \u0027y\u0027, \u0027t\u0027, \u0027h\u0027, \u0027o\u0027, \u0027n\u0027, \u00273\u0027, \u0027.\u0027, \u00270\u0027)));","Debug.Assert(StringToTuple(\u0022item1\u0022).SequenceEqual(new char[] { \u0027i\u0027, \u0027t\u0027, \u0027e\u0027, \u0027m\u0027, \u00271\u0027 }));","Debug.Assert(StringToTuple(\u002215.10\u0022).Equals(Tuple.Create(\u00221\u0022, \u00225\u0022, \u0022.\u0022, \u00221\u0022, \u00220\u0022)));"],"challenge_test_list":[]}
{"name":"left-most-unset-bit","description":"Set the leftmost unset bit in a binary number","text":"Write a C# function to set the left most unset bit.","code":"public static int SetLeftMostUnsetBit(int n) \n{ \n    if ((n \u0026 (n \u002B 1)) == 0) \n    { \n        return n; \n    } \n    int pos = 0, temp = n, count = 0; \n    while (temp != 0) \n    { \n        if ((temp \u0026 1) == 0) \n        { \n            pos = count; \n        } \n        count\u002B\u002B; \n        temp \u003E\u003E= 1; \n    } \n    return (n | (1 \u003C\u003C pos)); \n}","task_id":311,"test_setup_code":"","test_list":["Debug.Assert(SetLeftMostUnsetBit(10) == 14);","Debug.Assert(SetLeftMostUnsetBit(12) == 14);","Debug.Assert(SetLeftMostUnsetBit(15) == 15);"],"challenge_test_list":[]}
{"name":"cone-volume-calcul","description":"Calculate the volume of a cone using a function","text":"Write a function to find the volume of a cone.","code":"public double VolumeCone(double r, double h)  \n{  \n    double volume = (1.0 / 3) * Math.PI * r * r * h;  \n    return volume;  \n}","task_id":312,"test_setup_code":"","test_list":["Debug.Assert(VolumeCone(5, 12) == 314.15926535897927);","Debug.Assert(VolumeCone(10, 15) == 1570.7963267948965);","Debug.Assert(VolumeCone(19, 17) == 6426.651371693521);"],"challenge_test_list":[]}
{"name":"positive-numbers","description":"Prints positive numbers from a given list","text":"Write a C# function to print positive numbers in a list.","code":"public int PosNos(List\u003Cint\u003E list1) {\n    foreach (int num in list1) {\n        if (num \u003E= 0) {\n            return num;\n        }\n    }\n    return default; // or throw an exception if no positive number is found\n}","task_id":313,"test_setup_code":"","test_list":["Debug.Assert(PosNos(new int[] { -1, -2, 1, 2 }) == new int[] { 1, 2 });","Debug.Assert(PosNos(new int[] { 3, 4, -5 }) == (3, 4));","Debug.Assert(PosNos(new int[] { -2, -3, 1 }) == 1);"],"challenge_test_list":[]}
{"name":"max-sum-2x-n-grid","description":"Max sum of non-adjacent numbers in 2xN grid","text":"Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.","code":"public static int MaxSumRectangularGrid(int[][] grid, int n) \n{\n    int incl = Math.Max(grid[0][0], grid[1][0]);\n    int excl = 0;\n    for (int i = 1; i \u003C n; i\u002B\u002B)\n    {\n        int exclNew = Math.Max(excl, incl);\n        incl = excl \u002B Math.Max(grid[0][i], grid[1][i]);\n        excl = exclNew;\n    }\n    return Math.Max(excl, incl);\n}","task_id":314,"test_setup_code":"","test_list":["Debug.Assert(MaxSumRectangularGrid(new int[,] { { 1, 4, 5 }, { 2, 0, 0 } }, 3) == 7);","Debug.Assert(MaxSumRectangularGrid(new int[][] { new int[] { 1, 2, 3, 4, 5 }, new int[] { 6, 7, 8, 9, 10 } }, 5) == 24);","Debug.Assert(MaxSumRectangularGrid(new int[,] { { 7, 9, 11, 15, 19 }, { 21, 25, 28, 31, 32 } }, 5) == 81);"],"challenge_test_list":[]}
{"name":"first-max-even","description":"Find the longest even-length word in a string","text":"Write a C# function to find the first maximum length of even word.","code":"public string FindMaxLenEven(string str) \n{ \n    int n = str.Length; \n    int i = 0; \n    int currlen = 0; \n    int maxlen = 0; \n    int st = -1; \n\n    while (i \u003C n) \n    { \n        if (str[i] == \u0027 \u0027) \n        { \n            if (currlen % 2 == 0) \n            { \n                if (maxlen \u003C currlen) \n                { \n                    maxlen = currlen; \n                    st = i - currlen; \n                } \n            } \n            currlen = 0; \n        } \n        else \n        { \n            currlen \u002B= 1; \n        } \n        i \u002B= 1; \n    } \n\n    if (currlen % 2 == 0) \n    { \n        if (maxlen \u003C currlen) \n        { \n            maxlen = currlen; \n            st = i - currlen; \n        } \n    } \n\n    if (st == -1) \n    { \n        return \u0022-1\u0022; \n    } \n    return str.Substring(st, maxlen); \n}","task_id":315,"test_setup_code":"","test_list":["Debug.Assert(FindMaxLenEven(\u0022python language\u0022) == \u0022language\u0022);","Debug.Assert(FindMaxLenEven(\u0022maximum even length\u0022) == \u0022length\u0022);","Debug.Assert(FindMaxLenEven(\u0022eve\u0022) == \u0022-1\u0022);"],"challenge_test_list":[]}
{"name":"last-occurrence","description":"Find last index of a number in a sorted array","text":"Write a function to find the index of the last occurrence of a given number in a sorted array.","code":"public int FindLastOccurrence(int[] A, int x) {\n    int left = 0, right = A.Length - 1;\n    int result = -1;\n    while (left \u003C= right) {\n        int mid = (left \u002B right) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            left = mid \u002B 1;\n        } else if (x \u003C A[mid]) {\n            right = mid - 1;\n        } else {\n            left = mid \u002B 1;\n        }\n    }\n    return result;\n}","task_id":316,"test_setup_code":"","test_list":["Debug.Assert(FindLastOccurrence(new int[] { 2, 5, 5, 5, 6, 6, 8, 9, 9, 9 }, 5) == 3);","Debug.Assert(FindLastOccurrence(new int[] { 2, 3, 5, 8, 6, 6, 8, 9, 9, 9 }, 9) == 9);","Debug.Assert(FindLastOccurrence(new int[] { 2, 2, 1, 5, 6, 6, 6, 9, 9, 9 }, 6) == 6);"],"challenge_test_list":[]}
{"name":"modified-rl-encode","description":"Reflect run-length encoding in a list function","text":"Write a function to reflect the modified run-length encoding from a list.","code":"using System.Collections.Generic;\nusing System.Linq;\n\npublic class Encoder\n{\n    public List\u003Cobject\u003E ModifiedEncode(List\u003Cint\u003E alist)\n    {\n        List\u003Cobject\u003E result = new List\u003Cobject\u003E();\n        \n        var grouped = alist.GroupBy(x =\u003E x);\n        foreach (var group in grouped)\n        {\n            result.Add(CtrEle(group.ToList()));\n        }\n        \n        return result;\n    }\n\n    private object CtrEle(List\u003Cint\u003E el)\n    {\n        if (el.Count \u003E 1) \n            return new object[] { el.Count, el[0] };\n        else \n            return el[0];\n    }\n}","task_id":317,"test_setup_code":"","test_list":["Debug.Assert(ModifiedEncode(new List\u003Cint\u003E { 1, 1, 2, 3, 4, 4, 5, 1 }).SequenceEqual(new List\u003Cobject\u003E { new List\u003Cint\u003E { 2, 1 }, 2, 3, new List\u003Cint\u003E { 2, 4 }, 5, 1 }));","Debug.Assert(ModifiedEncode(\u0022automatically\u0022).SequenceEqual(new object[] { \u0027a\u0027, \u0027u\u0027, \u0027t\u0027, \u0027o\u0027, \u0027m\u0027, \u0027a\u0027, \u0027t\u0027, \u0027i\u0027, \u0027c\u0027, \u0027a\u0027, new object[] { 2, \u0027l\u0027 }, \u0027y\u0027 }));","Debug.Assert(ModifiedEncode(\u0022python\u0022).SequenceEqual(new char[] { \u0027p\u0027, \u0027y\u0027, \u0027t\u0027, \u0027h\u0027, \u0027o\u0027, \u0027n\u0027 }));"],"challenge_test_list":[]}
{"name":"max-volume-cuboid","description":"Find maximum cuboid volume from side sums","text":"Write a C# function to find the maximum volume of a cuboid with given sum of sides.","code":"public static int MaxVolume(int s) \n{ \n    int maxvalue = 0; \n    for (int i = 1; i \u003C s - 1; i\u002B\u002B) \n    { \n        for (int j = 1; j \u003C s; j\u002B\u002B) \n        { \n            int k = s - i - j; \n            maxvalue = Math.Max(maxvalue, i * j * k); \n        } \n    } \n    return maxvalue; \n}","task_id":318,"test_setup_code":"","test_list":["Debug.Assert(MaxVolume(8) == 18);","Debug.Assert(MaxVolume(4) == 2);","Debug.Assert(MaxVolume(1) == 0);"],"challenge_test_list":[]}
{"name":"find-five-words","description":"Find five-letter words in a string using regex","text":"Write a function to find all five characters long word in the given string by using regex.","code":"using System.Text.RegularExpressions;\r\nusing System.Collections.Generic;\r\n\r\npublic class WordFinder\r\n{\r\n    public List\u003Cstring\u003E FindLongWord(string text) \r\n    {\r\n        return new List\u003Cstring\u003E(Regex.Matches(text, @\u0022\\b\\w{5}\\b\u0022).Select(m =\u003E m.Value));\r\n    }\r\n}","task_id":319,"test_setup_code":"","test_list":["Debug.Assert(FindLongWord(\u0022Please move back to strem\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022strem\u0022 }));","Debug.Assert(FindLongWord(\u00224K Ultra HD streaming player\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022Ultra\u0022 }));","Debug.Assert(FindLongWord(\u0022Streaming Media Player\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022Media\u0022 }));"],"challenge_test_list":[]}
{"name":"squared-sum-diff","description":"Calculate difference of squared sums and sums squared","text":"Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.","code":"public int SumDifference(int n) {\n    int sumofsquares = 0;\n    int squareofsum = 0;\n    for (int num = 1; num \u003C= n; num\u002B\u002B) {\n        sumofsquares \u002B= num * num;\n        squareofsum \u002B= num;\n    }\n    squareofsum = squareofsum * squareofsum;\n    return squareofsum - sumofsquares;\n}","task_id":320,"test_setup_code":"","test_list":["Debug.Assert(SumDifference(12) == 5434);","Debug.Assert(SumDifference(20) == 41230);","Debug.Assert(SumDifference(54) == 2151270);"],"challenge_test_list":[]}
{"name":"demlo-number-fn","description":"Find the demlo number for a given input","text":"Write a function to find the demlo number for the given number.","code":"public string FindDemlo(string s) \n{\n    int l = s.Length;\n    string res = \u0022\u0022;\n    for (int i = 1; i \u003C= l; i\u002B\u002B) \n    {\n        res \u002B= i.ToString();\n    }\n    for (int i = l - 1; i \u003E 0; i--) \n    {\n        res \u002B= i.ToString();\n    }\n    return res;\n}","task_id":321,"test_setup_code":"","test_list":["Debug.Assert(FindDemlo(\u0022111111\u0022) == \u002212345654321\u0022);","Debug.Assert(FindDemlo(\u00221111\u0022) == \u00221234321\u0022);","Debug.Assert(FindDemlo(\u002213333122222\u0022) == \u0022123456789101110987654321\u0022);"],"challenge_test_list":[]}
{"name":"min-positions-finder","description":"Find all indices of minimum values in a list","text":"Write a function to find all index positions of the minimum values in a given list.","code":"public List\u003Cint\u003E PositionMin(List\u003Cint\u003E list1) \n{\n    int minVal = list1.Min();\n    List\u003Cint\u003E minResult = new List\u003Cint\u003E();\n\n    for (int i = 0; i \u003C list1.Count; i\u002B\u002B)\n    {\n        if (list1[i] == minVal)\n        {\n            minResult.Add(i);\n        }\n    }\n    \n    return minResult;\n}","task_id":322,"test_setup_code":"","test_list":["Debug.Assert(PositionMin(new List\u003Cint\u003E { 12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54 }).SequenceEqual(new List\u003Cint\u003E { 3, 11 }));","Debug.Assert(PositionMin(new List\u003Cint\u003E { 1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5 }).SequenceEqual(new List\u003Cint\u003E { 0 }));","Debug.Assert(PositionMin(new int[] { 2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12 }).SequenceEqual(new int[] { 1 }));"],"challenge_test_list":[]}
{"name":"alt-pos-neg-array","description":"Rearrange array with alternating positive and negative numbers","text":"Write a function to re-arrange the given array in alternating positive and negative items.","code":"public int[] RightRotate(int[] arr, int n, int outOfPlace, int cur) {\n    int temp = arr[cur];\n    for (int i = cur; i \u003E outOfPlace; i--) {\n        arr[i] = arr[i - 1];\n    }\n    arr[outOfPlace] = temp;\n    return arr;\n}\n\npublic int[] ReArranage(int[] arr, int n) {\n    int outOfPlace = -1;\n    for (int index = 0; index \u003C n; index\u002B\u002B) {\n        if (outOfPlace \u003E= 0) {\n            if ((arr[index] \u003E= 0 \u0026\u0026 arr[outOfPlace] \u003C 0) || (arr[index] \u003C 0 \u0026\u0026 arr[outOfPlace] \u003E= 0)) {\n                arr = RightRotate(arr, n, outOfPlace, index);\n                if (index - outOfPlace \u003E 2) {\n                    outOfPlace \u002B= 2;\n                } else {\n                    outOfPlace = -1;\n                }\n            }\n        }\n        if (outOfPlace == -1) {\n            if ((arr[index] \u003E= 0 \u0026\u0026 index % 2 == 0) || (arr[index] \u003C 0 \u0026\u0026 index % 2 == 1)) {\n                outOfPlace = index;\n            }\n        }\n    }\n    return arr;\n}","task_id":323,"test_setup_code":"","test_list":["Debug.Assert(ReArranage(new int[] {-5, -2, 5, 2, 4, 7, 1, 8, 0, -8}, 10).SequenceEqual(new int[] {-5, 5, -2, 2, -8, 4, 7, 1, 8, 0}));","Debug.Assert(ReArranage(new int[] { 1, 2, 3, -4, -1, 4 }, 6).SequenceEqual(new int[] { -4, 1, -1, 2, 3, 4 }));","Debug.Assert(ReArranage(new int[] { 4, 7, 9, 77, -4, 5, -3, -9 }, 8).SequenceEqual(new int[] { -4, 4, -3, 7, -9, 9, 77, 5 }));"],"challenge_test_list":[]}
{"name":"alt-tuple-sum","description":"Sum of alternate tuple chains in a function","text":"Write a function to extract the sum of alternate chains of tuples.","code":"public static (int, int) SumOfAlternates((int, int)[] testTuple) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for (int idx = 0; idx \u003C testTuple.Length; idx\u002B\u002B) {\n        if (idx % 2 == 1) {\n            sum1 \u002B= testTuple[idx].Item1;\n        } else {\n            sum2 \u002B= testTuple[idx].Item1;\n        }\n    }\n    return (sum1, sum2);\n}","task_id":324,"test_setup_code":"","test_list":["Debug.Assert(SumOfAlternates(new int[] { 5, 6, 3, 6, 10, 34 }).Equals((46, 18)));","Debug.Assert(SumOfAlternates(new int[] { 1, 2, 3, 4, 5 }) == (6, 9));","Debug.Assert(SumOfAlternates(new int[] { 6, 7, 8, 9, 4, 5 }) == (21, 18));"],"challenge_test_list":[]}
{"name":"min-squares-sum","description":"Find minimum squares summing to a target number","text":"Write a C# function to find the minimum number of squares whose sum is equal to a given number.","code":"public int GetMinSquares(int n)\n{\n    if (n \u003C= 3)\n    {\n        return n;\n    }\n    int res = n;\n    for (int x = 1; x \u003C= n; x\u002B\u002B)\n    {\n        int temp = x * x;\n        if (temp \u003E n)\n        {\n            break;\n        }\n        else\n        {\n            res = Math.Min(res, 1 \u002B GetMinSquares(n - temp));\n        }\n    }\n    return res;\n}","task_id":325,"test_setup_code":"","test_list":["Debug.Assert(GetMinSquares(6) == 3);","Debug.Assert(GetMinSquares(2) == 2);","Debug.Assert(GetMinSquares(4) == 1);"],"challenge_test_list":[]}
{"name":"most-frequent-word","description":"Find the most frequent word in a list of strings","text":"Write a function to get the word with most number of occurrences in the given strings list.","code":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Example\n{\n    public static string MostOccurrences(List\u003Cstring\u003E testList)\n    {\n        var temp = new Dictionary\u003Cstring, int\u003E();\n        \n        foreach (var sub in testList)\n        {\n            foreach (var wrd in sub.Split(\u0027 \u0027))\n            {\n                if (temp.ContainsKey(wrd))\n                {\n                    temp[wrd]\u002B\u002B;\n                }\n                else\n                {\n                    temp[wrd] = 1;\n                }\n            }\n        }\n        \n        var res = temp.Aggregate((x, y) =\u003E x.Value \u003E y.Value ? x : y).Key;\n        return res.ToString();\n    }\n}","task_id":326,"test_setup_code":"","test_list":["Debug.Assert(MostOccurrences(new string[] { \u0022UTS is best for RTF\u0022, \u0022RTF love UTS\u0022, \u0022UTS is best\u0022 }) == \u0022UTS\u0022);","Debug.Assert(MostOccurrences(new string[] { \u0022Its been a great year\u0022, \u0022this year is so worse\u0022, \u0022this year is okay\u0022 }) == \u0022year\u0022);","Debug.Assert(MostOccurrences(new string[] { \u0022Families can be reunited\u0022, \u0022people can be reunited\u0022, \u0022Tasks can be achieved \u0022 }) == \u0022can\u0022);"],"challenge_test_list":[]}
{"name":"isosceles-tri","description":"Check if a triangle is isosceles or not","text":"Write a function to print check if the triangle is isosceles or not.","code":"public bool CheckIsosceles(int x, int y, int z)\r\n{\r\n    if (x == y || y == z || z == x)\r\n        return true;\r\n    else\r\n        return false;\r\n}","task_id":327,"test_setup_code":"","test_list":["Debug.Assert(CheckIsosceles(6, 8, 12) == false);","Debug.Assert(CheckIsosceles(6, 6, 12) == true);","Debug.Assert(CheckIsosceles(6, 16, 20) == false);"],"challenge_test_list":[]}
{"name":"rotate-list-left","description":"Rotate a list left by a given number of items","text":"Write a function to rotate a given list by specified number of items to the left direction.","code":"public List\u003CT\u003E RotateLeft\u003CT\u003E(List\u003CT\u003E list1, int m, int n)\n{\n    var result = list1.GetRange(m, list1.Count - m).Concat(list1.GetRange(0, n)).ToList();\n    return result;\n}","task_id":328,"test_setup_code":"","test_list":["Debug.Assert(RotateLeft(new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, 3, 4).SequenceEqual(new int[] { 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4 }));","Debug.Assert(RotateLeft(new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, 2, 2).SequenceEqual(new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 1, 2 }));","Debug.Assert(RotateLeft(new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, 5, 2).SequenceEqual(new int[] { 6, 7, 8, 9, 10, 1, 2 }));"],"challenge_test_list":[]}
{"name":"count-negative-numbers","description":"Count negative numbers in a list using Python","text":"Write a C# function to count negative numbers in a list.","code":"public int NegCount(List\u003Cint\u003E list) \n{\n    int negCount = 0;\n    foreach (int num in list) \n    {\n        if (num \u003C= 0) \n        {\n            negCount\u002B\u002B;\n        }\n    }\n    return negCount;\n}","task_id":329,"test_setup_code":"","test_list":["Debug.Assert(NegCount(new int[] { -1, -2, 3, -4, -5 }) == 4);","Debug.Assert(NegCount(new int[] { 1, 2, 3 }) == 0);","Debug.Assert(NegCount(new int[] { 1, 2, -3, -10, 20 }) == 2);"],"challenge_test_list":[]}
{"name":"find-words-regex","description":"Find words of 3 to 5 letters in a string","text":"Write a function to find all three, four, five characters long words in the given string by using regex.","code":"public List\u003Cstring\u003E FindChar(string text) {\n    return Regex.Matches(text, @\u0022\\b\\w{3,5}\\b\u0022)\n                .Cast\u003CMatch\u003E()\n                .Select(m =\u003E m.Value)\n                .ToList();\n}","task_id":330,"test_setup_code":"","test_list":["Debug.Assert(FindChar(\u0022For the four consumer complaints contact manager AKR reddy\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022For\u0022, \u0022the\u0022, \u0022four\u0022, \u0022AKR\u0022, \u0022reddy\u0022 }));","Debug.Assert(FindChar(\u0022Certain service are subject to change MSR\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022are\u0022, \u0022MSR\u0022 }));","Debug.Assert(FindChar(\u0022Third party legal desclaimers\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022Third\u0022, \u0022party\u0022, \u0022legal\u0022 }));"],"challenge_test_list":[]}
{"name":"count-unset-bits","description":"Count unset bits in a given number using Python","text":"Write a C# function to count unset bits of a given number.","code":"public int CountUnsetBits(int n) \n{ \n    int count = 0; \n    int x = 1; \n    while (x \u003C n \u002B 1) \n    { \n        if ((x \u0026 n) == 0) \n        { \n            count \u002B= 1; \n        } \n        x \u003C\u003C= 1; \n    } \n    return count; \n}","task_id":331,"test_setup_code":"","test_list":["Debug.Assert(CountUnsetBits(2) == 1);","Debug.Assert(CountUnsetBits(4) == 2);","Debug.Assert(CountUnsetBits(6) == 1);"],"challenge_test_list":[]}
{"name":"count-char-freq","description":"Count character frequency in a given string","text":"Write a function to count character frequency of a given string.","code":"public Dictionary\u003Cchar, int\u003E CharFrequency(string str1) {\r\n    Dictionary\u003Cchar, int\u003E dict = new Dictionary\u003Cchar, int\u003E();\r\n    foreach (char n in str1) {\r\n        if (dict.ContainsKey(n)) {\r\n            dict[n] \u002B= 1;\r\n        } else {\r\n            dict[n] = 1;\r\n        }\r\n    }\r\n    return dict;\r\n}","task_id":332,"test_setup_code":"","test_list":["Debug.Assert(CharFrequency(\u0022python\u0022).SequenceEqual(new Dictionary\u003Cchar, int\u003E{{\u0027p\u0027, 1}, {\u0027y\u0027, 1}, {\u0027t\u0027, 1}, {\u0027h\u0027, 1}, {\u0027o\u0027, 1}, {\u0027n\u0027, 1}}));","Debug.Assert(CharFrequency(\u0022program\u0022).SequenceEqual(new Dictionary\u003Cchar, int\u003E { { \u0027p\u0027, 1 }, { \u0027r\u0027, 2 }, { \u0027o\u0027, 1 }, { \u0027g\u0027, 1 }, { \u0027a\u0027, 1 }, { \u0027m\u0027, 1 } }));","Debug.Assert(CharFrequency(\u0022language\u0022).SequenceEqual(new Dictionary\u003Cchar, int\u003E{{\u0027l\u0027, 1}, {\u0027a\u0027, 2}, {\u0027n\u0027, 1}, {\u0027g\u0027, 2}, {\u0027u\u0027, 1}, {\u0027e\u0027, 1}}));"],"challenge_test_list":[]}
{"name":"sort-by-second.py","description":"Sort list by second element of each sublist","text":"Write a C# function to sort a list according to the second element in sublist.","code":"public List\u003CList\u003CT\u003E\u003E Sort\u003CT\u003E(List\u003CList\u003CT\u003E\u003E subLi) \n{\n    subLi.Sort((x, y) =\u003E Comparer\u003CT\u003E.Default.Compare(x[1], y[1]));\n    return subLi;\n}","task_id":333,"test_setup_code":"","test_list":["Debug.Assert(Sort(new object[][] { new object[] { \u0022a\u0022, 10 }, new object[] { \u0022b\u0022, 5 }, new object[] { \u0022c\u0022, 20 }, new object[] { \u0022d\u0022, 15 } }) == new object[][] { new object[] { \u0022b\u0022, 5 }, new object[] { \u0022a\u0022, 10 }, new object[] { \u0022d\u0022, 15 }, new object[] { \u0022c\u0022, 20 } });","Debug.Assert(Sort(new object[][] { new object[] { \u0022452\u0022, 10 }, new object[] { \u0022256\u0022, 5 }, new object[] { \u0022100\u0022, 20 }, new object[] { \u0022135\u0022, 15 } }) == new object[][] { new object[] { \u0022256\u0022, 5 }, new object[] { \u0022452\u0022, 10 }, new object[] { \u0022135\u0022, 15 }, new object[] { \u0022100\u0022, 20 } });","Debug.Assert(Sort(new object[,] { { \u0022rishi\u0022, 10 }, { \u0022akhil\u0022, 5 }, { \u0022ramya\u0022, 20 }, { \u0022gaur\u0022, 15 } }) == new object[,] { { \u0022akhil\u0022, 5 }, { \u0022rishi\u0022, 10 }, { \u0022gaur\u0022, 15 }, { \u0022ramya\u0022, 20 } });"],"challenge_test_list":[]}
{"name":"triangle-check.py","description":"Validates a triangle\u0027s existence from its sides","text":"Write a C# function to check whether the triangle is valid or not if sides are given.","code":"bool CheckValidity(int a, int b, int c)  \n{  \n    if ((a \u002B b \u003C= c) || (a \u002B c \u003C= b) || (b \u002B c \u003C= a))  \n    {  \n        return false;  \n    }  \n    else  \n    {  \n        return true;  \n    }  \n}","task_id":334,"test_setup_code":"","test_list":["Debug.Assert(CheckValidity(1, 2, 3) == false);","Debug.Assert(CheckValidity(2, 3, 5) == false);","Debug.Assert(CheckValidity(7, 10, 5) == true);"],"challenge_test_list":[]}
{"name":"sum-arith-prog","description":"Calculate the sum of an arithmetic sequence","text":"Write a function to find the sum of arithmetic progression.","code":"public static double ApSum(double a, int n, double d)  \n{  \n    double total = (n * (2 * a \u002B (n - 1) * d)) / 2;  \n    return total;  \n}","task_id":335,"test_setup_code":"","test_list":["Debug.Assert(ApSum(1, 5, 2) == 25);","Debug.Assert(ApSum(2, 6, 4) == 72);","Debug.Assert(ApSum(1, 4, 5) == 34);"],"challenge_test_list":[]}
{"name":"month-28-checker","description":"Check if month name has 28 days","text":"Write a function to check whether the given month name contains 28 days or not.","code":"public bool CheckMonthNum(string monthName1)  \n{  \n    if (monthName1 == \u0022February\u0022)  \n    {  \n        return true;  \n    }  \n    else  \n    {  \n        return false;  \n    }  \n}","task_id":336,"test_setup_code":"","test_list":["Debug.Assert(CheckMonthNum(\u0022February\u0022) == true);","Debug.Assert(CheckMonthNum(\u0022January\u0022) == false);","Debug.Assert(CheckMonthNum(\u0022March\u0022) == false);"],"challenge_test_list":[]}
{"name":"word-end-matcher","description":"Match a word at the end of a string with punctuation","text":"Write a function that matches a word at the end of a string, with optional punctuation.","code":"public string TextMatchWord(string text)\n{\n    string patterns = @\u0022\\w\u002B\\S*$\u0022;\n    if (Regex.IsMatch(text, patterns))\n    {\n        return \u0022Found a match!\u0022;\n    }\n    else\n    {\n        return \u0022Not matched!\u0022;\n    }\n}","task_id":337,"test_setup_code":"","test_list":["Debug.Assert(TextMatchWord(\u0022python.\u0022) == \u0022Found a match!\u0022);","Debug.Assert(TextMatchWord(\u0022python.\u0022) == \u0022Found a match!\u0022);","Debug.Assert(TextMatchWord(\u0022  lang  .\u0022) == \u0022Not matched!\u0022);"],"challenge_test_list":[]}
{"name":"count-substrings","description":"Count substrings with matching first and last chars","text":"Write a C# function to count the number of substrings with same first and last characters.","code":"public static bool CheckEquality(string s) \n{\n    return (s[0] == s[s.Length - 1]);\n}\n\npublic static int CountSubstringWithEqualEnds(string s) \n{\n    int result = 0; \n    int n = s.Length; \n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    {\n        for (int j = 1; j \u003C= n - i; j\u002B\u002B) \n        {\n            if (CheckEquality(s.Substring(i, j))) \n            {\n                result\u002B\u002B;\n            }\n        }\n    }\n    return result; \n}","task_id":338,"test_setup_code":"","test_list":["Debug.Assert(CountSubstringWithEqualEnds(\u0022aba\u0022) == 4);","Debug.Assert(CountSubstringWithEqualEnds(\u0022abcab\u0022) == 7);","Debug.Assert(CountSubstringWithEqualEnds(\u0022abc\u0022) == 3);"],"challenge_test_list":[]}
{"name":"max-divisor-finder","description":"Find the most frequent divisor in a range","text":"Write a C# function to find the maximum occuring divisor in an interval.","code":"public int FindDivisor(int x, int y)  \n{  \n    if (x == y)  \n    {  \n        return y;  \n    }  \n    return 2;  \n}","task_id":339,"test_setup_code":"","test_list":["Debug.Assert(FindDivisor(2, 2) == 2);","Debug.Assert(FindDivisor(2, 5) == 2);","Debug.Assert(FindDivisor(5, 10) == 2);"],"challenge_test_list":[]}
{"name":"sum-three-lowest","description":"Find the sum of the three smallest positive numbers","text":"Write a C# function to find the sum of the three lowest positive numbers from a given list of numbers.","code":"public int SumThreeSmallestNums(List\u003Cint\u003E lst)\n{\n    return lst.Where(x =\u003E x \u003E 0).OrderBy(x =\u003E x).Take(3).Sum();\n}","task_id":340,"test_setup_code":"","test_list":["Debug.Assert(SumThreeSmallestNums(new int[] { 10, 20, 30, 40, 50, 60, 7 }) == 37);","Debug.Assert(SumThreeSmallestNums(new int[] { 1, 2, 3, 4, 5 }) == 6);","Debug.Assert(SumThreeSmallestNums(new int[] { 0, 1, 2, 3, 4, 5 }) == 6);"],"challenge_test_list":[]}
{"name":"set-to-tuple-ord","description":"Convert a set into ordered tuples format","text":"Write a function to convert the given set into ordered tuples.","code":"public Tuple\u003CT\u003E SetToTuple\u003CT\u003E(HashSet\u003CT\u003E s)\n{\n    var t = s.OrderBy(x =\u003E x).ToArray();\n    return Tuple.Create(t);\n}","task_id":341,"test_setup_code":"","test_list":["Debug.Assert(SetToTuple(new HashSet\u003Cint\u003E { 1, 2, 3, 4, 5 }).Equals(ValueTuple.Create(1, 2, 3, 4, 5)));","Debug.Assert(SetToTuple(new HashSet\u003Cint\u003E { 6, 7, 8, 9, 10, 11 }).SequenceEqual(new ValueTuple\u003Cint, int, int, int, int, int\u003E(6, 7, 8, 9, 10, 11)));","Debug.Assert(SetToTuple(new HashSet\u003Cint\u003E{12, 13, 14, 15, 16}).SequenceEqual(new ValueTuple\u003Cint, int, int, int, int\u003E(12, 13, 14, 15, 16)));"],"challenge_test_list":[]}
{"name":"smallest-range","description":"Find smallest range covering all arrays","text":"Write a function to find the smallest range that includes at-least one element from each of the given arrays.","code":"class Node\r\n{\r\n    public int Value { get; set; }\r\n    public int ListNum { get; set; }\r\n    public int Index { get; set; }\r\n\r\n    public Node(int value, int listNum, int index)\r\n    {\r\n        Value = value;\r\n        ListNum = listNum;\r\n        Index = index;\r\n    }\r\n\r\n    public static bool operator \u003C(Node a, Node b)\r\n    {\r\n        return a.Value \u003C b.Value;\r\n    }\r\n\r\n    public static bool operator \u003E(Node a, Node b)\r\n    {\r\n        return a.Value \u003E b.Value;\r\n    }\r\n}\r\n\r\npublic (int, int) FindMinimumRange(List\u003CList\u003Cint\u003E\u003E list)\r\n{\r\n    int high = int.MinValue;\r\n    (int, int) p = (0, int.MaxValue);\r\n    SortedSet\u003CNode\u003E pq = new SortedSet\u003CNode\u003E();\r\n\r\n    for (int i = 0; i \u003C list.Count; i\u002B\u002B)\r\n    {\r\n        pq.Add(new Node(list[i][0], i, 0));\r\n        high = Math.Max(high, list[i][0]);\r\n    }\r\n\r\n    while (true)\r\n    {\r\n        Node top = pq.Min;\r\n        pq.Remove(top);\r\n        int low = top.Value;\r\n        int i = top.ListNum;\r\n        int j = top.Index;\r\n\r\n        if (high - low \u003C p.Item2 - p.Item1)\r\n        {\r\n            p = (low, high);\r\n        }\r\n\r\n        if (j == list[i].Count - 1)\r\n        {\r\n            return p;\r\n        }\r\n\r\n        Node newNode = new Node(list[i][j \u002B 1], i, j \u002B 1);\r\n        pq.Add(newNode);\r\n        high = Math.Max(high, list[i][j \u002B 1]);\r\n    }\r\n}","task_id":342,"test_setup_code":"","test_list":["Debug.Assert(FindMinimumRange(new int[][] { new int[] { 3, 6, 8, 10, 15 }, new int[] { 1, 5, 12 }, new int[] { 4, 8, 15, 16 }, new int[] { 2, 6 } }) == (4, 6));","Debug.Assert(FindMinimumRange(new int[][] { new int[] { 2, 3, 4, 8, 10, 15 }, new int[] { 1, 5, 12 }, new int[] { 7, 8, 15, 16 }, new int[] { 3, 6 } }) == (4, 7));","Debug.Assert(FindMinimumRange(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 4, 7, 9, 11, 16 }, new List\u003Cint\u003E { 2, 6, 13 }, new List\u003Cint\u003E { 5, 9, 16, 17 }, new List\u003Cint\u003E { 3, 7 } }) == (5, 7));"],"challenge_test_list":[]}
{"name":"count-digits-letters","description":"Count digits and letters in a given string","text":"Write a function to calculate the number of digits and letters in a string.","code":"public (int, int) DigLet(string s) \n{\n    int d = 0, l = 0;\n    foreach (char c in s) \n    {\n        if (char.IsDigit(c)) \n        {\n            d\u002B\u002B;\n        } \n        else if (char.IsLetter(c)) \n        {\n            l\u002B\u002B;\n        } \n    }\n    return (l, d);\n}","task_id":343,"test_setup_code":"","test_list":["Debug.Assert(DigLet(\u0022python\u0022).Equals((6, 0)));","Debug.Assert(DigLet(\u0022program\u0022).Equals((7, 0)));","Debug.Assert(DigLet(\u0022python3.0\u0022).Equals((6, 2)));"],"challenge_test_list":[]}
{"name":"odd-factors-count","description":"Count elements with odd factors in a range","text":"Write a C# function to find number of elements with odd factors in a given range.","code":"public int CountOddSquares(int n, int m) \n{ \n    return (int)Math.Sqrt(m) - (int)Math.Sqrt(n - 1); \n}","task_id":344,"test_setup_code":"","test_list":["Debug.Assert(CountOddSquares(5, 100) == 8);","Debug.Assert(CountOddSquares(8, 65) == 6);","Debug.Assert(CountOddSquares(2, 5) == 1);"],"challenge_test_list":[]}
{"name":"consecutive-diff","description":"Find the difference between consecutive list numbers","text":"Write a function to find the difference between two consecutive numbers in a given list.","code":"public List\u003Cint\u003E DiffConsecutiveNums(List\u003Cint\u003E nums) {\r\n    List\u003Cint\u003E result = new List\u003Cint\u003E();\r\n    for (int i = 0; i \u003C nums.Count - 1; i\u002B\u002B) {\r\n        result.Add(nums[i \u002B 1] - nums[i]);\r\n    }\r\n    return result;\r\n}","task_id":345,"test_setup_code":"","test_list":["Debug.Assert(DiffConsecutiveNums(new List\u003Cint\u003E { 1, 1, 3, 4, 4, 5, 6, 7 }).SequenceEqual(new List\u003Cint\u003E { 0, 2, 1, 0, 1, 1, 1 }));","Debug.Assert(DiffConsecutiveNums(new int[] { 4, 5, 8, 9, 6, 10 }).SequenceEqual(new int[] { 1, 3, 1, -3, 4 }));","Debug.Assert(DiffConsecutiveNums(new int[] { 0, 1, 2, 3, 4, 4, 4, 4, 5, 7 }).SequenceEqual(new int[] { 1, 1, 1, 1, 0, 0, 0, 1, 2 }));"],"challenge_test_list":[]}
{"name":"entringer-num-e-nk","description":"Function to compute entringer number e(n, k)","text":"Write a function to find entringer number e(n, k).","code":"public int Zigzag(int n, int k) \n{ \n    if (n == 0 \u0026\u0026 k == 0) \n        return 1; \n    if (k == 0) \n        return 0; \n    return Zigzag(n, k - 1) \u002B Zigzag(n - 1, n - k); \n}","task_id":346,"test_setup_code":"","test_list":["Debug.Assert(Zigzag(4, 3) == 5);","Debug.Assert(Zigzag(4, 2) == 4);","Debug.Assert(Zigzag(3, 1) == 1);"],"challenge_test_list":[]}
{"name":"count-squares-in-rect","description":"Count squares in a rectangle using a Python function","text":"Write a C# function to count the number of squares in a rectangle.","code":"public static int CountSquares(int m, int n) \n{ \n    if (n \u003C m) \n    { \n        int temp = m; \n        m = n; \n        n = temp; \n    } \n    return n * (n \u002B 1) * (3 * m - n \u002B 1) / 6; \n}","task_id":347,"test_setup_code":"","test_list":["Debug.Assert(CountSquares(4, 3) == 20);","Debug.Assert(CountSquares(1, 2) == 2);","Debug.Assert(CountSquares(2, 2) == 5);"],"challenge_test_list":[]}
{"name":"non-neg-sum-count","description":"Count valid sequences with non-negative prefix sums","text":"Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.","code":"int BinCoff(int n, int r) \n{\n    int val = 1;\n    if (r \u003E (n - r)) \n    {\n        r = (n - r);\n    }\n    for (int i = 0; i \u003C r; i\u002B\u002B) \n    {\n        val *= (n - i);\n        val /= (i \u002B 1);\n    }\n    return val;\n}\n\nint FindWays(int M) \n{\n    int n = M / 2;\n    int a = BinCoff(2 * n, n);\n    int b = a / (n \u002B 1);\n    return b;\n}","task_id":348,"test_setup_code":"","test_list":["Debug.Assert(FindWays(4) == 2);","Debug.Assert(FindWays(6) == 5);","Debug.Assert(FindWays(8) == 14);"],"challenge_test_list":[]}
{"name":"binary-string-check","description":"Check if a string is a valid binary string","text":"Write a C# function to check whether the given string is a binary string or not.","code":"public string Check(string input)\n{\n    var p = new HashSet\u003Cchar\u003E(input);\n    var s = new HashSet\u003Cchar\u003E { \u00270\u0027, \u00271\u0027 };\n    if (s.SetEquals(p) || p.SetEquals(new HashSet\u003Cchar\u003E { \u00270\u0027 }) || p.SetEquals(new HashSet\u003Cchar\u003E { \u00271\u0027 }))\n    {\n        return \u0022Yes\u0022;\n    }\n    else\n    {\n        return \u0022No\u0022;\n    }\n}","task_id":349,"test_setup_code":"","test_list":["Debug.Assert(Check(\u002201010101010\u0022) == \u0022Yes\u0022);","Debug.Assert(Check(\u0022name0\u0022) == \u0022No\u0022);","Debug.Assert(Check(\u0022101\u0022) == \u0022Yes\u0022);"],"challenge_test_list":[]}
{"name":"minimize-string","description":"Minimize string length by removing one character","text":"Write a C# function to minimize the length of the string by removing occurrence of only one character.","code":"public int MinimumLength(string s) \n{ \n    int maxOcc = 0; \n    int n = s.Length; \n    int[] arr = new int[26]; \n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    { \n        arr[s[i] - \u0027a\u0027]\u002B\u002B; \n    } \n    for (int i = 0; i \u003C 26; i\u002B\u002B) \n    { \n        if (arr[i] \u003E maxOcc) \n        { \n            maxOcc = arr[i]; \n        } \n    } \n    return n - maxOcc; \n}","task_id":350,"test_setup_code":"","test_list":["Debug.Assert(MinimumLength(\u0022mnm\u0022) == 1);","Debug.Assert(MinimumLength(\u0022abcda\u0022) == 3);","Debug.Assert(MinimumLength(\u0022abcb\u0022) == 2);"],"challenge_test_list":[]}
{"name":"first-k-times.py","description":"Find the first element occurring k times in array","text":"Write a C# function to find the first element occurring k times in a given array.","code":"public int FirstElement(int[] arr, int n, int k) \n{ \n    Dictionary\u003Cint, int\u003E countMap = new Dictionary\u003Cint, int\u003E(); \n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    { \n        if (countMap.ContainsKey(arr[i])) \n        { \n            countMap[arr[i]] \u002B= 1; \n        } \n        else \n        { \n            countMap[arr[i]] = 1; \n        } \n    } \n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    { \n        if (countMap[arr[i]] == k) \n        { \n            return arr[i]; \n        } \n    } \n    return -1; \n}","task_id":351,"test_setup_code":"","test_list":["Debug.Assert(FirstElement(new int[] { 0, 1, 2, 3, 4, 5 }, 6, 1) == 0);","Debug.Assert(FirstElement(new int[] { 1, 2, 1, 3, 4 }, 5, 2) == 1);","Debug.Assert(FirstElement(new int[] { 2, 3, 4, 3, 5, 7, 1, 2, 3, 5 }, 10, 2) == 2);"],"challenge_test_list":[]}
{"name":"unique-char-check","description":"Check if all characters in a string are unique","text":"Write a C# function to check whether all the characters in a given string are unique.","code":"public bool UniqueCharacters(string str)\n{\n    for (int i = 0; i \u003C str.Length; i\u002B\u002B)\n    {\n        for (int j = i \u002B 1; j \u003C str.Length; j\u002B\u002B)\n        {\n            if (str[i] == str[j])\n            {\n                return false;\n            }\n        }\n    }\n    return true;\n}","task_id":352,"test_setup_code":"","test_list":["Debug.Assert(UniqueCharacters(\u0022aba\u0022) == false);","Debug.Assert(UniqueCharacters(\u0022abc\u0022) == true);","Debug.Assert(UniqueCharacters(\u0022abab\u0022) == false);"],"challenge_test_list":[]}
{"name":"remove-column-nl","description":"Remove a specified column from a nested list","text":"Write a function to remove a specified column from a given nested list.","code":"public List\u003CList\u003CT\u003E\u003E RemoveColumn\u003CT\u003E(List\u003CList\u003CT\u003E\u003E list1, int n) \n{\n    foreach (var i in list1)\n    {\n        i.RemoveAt(n);\n    }\n    return list1;\n}","task_id":353,"test_setup_code":"","test_list":["Debug.Assert(RemoveColumn(new int[][] { new int[] { 1, 2, 3 }, new int[] { 2, 4, 5 }, new int[] { 1, 1, 1 } }, 0).SequenceEqual(new int[][] { new int[] { 2, 3 }, new int[] { 4, 5 }, new int[] { 1, 1 } }));","Debug.Assert(RemoveColumn(new int[][] { new int[] { 1, 2, 3 }, new int[] { -2, 4, -5 }, new int[] { 1, -1, 1 } }, 2).SequenceEqual(new int[][] { new int[] { 1, 2 }, new int[] { -2, 4 }, new int[] { 1, -1 } }));","Debug.Assert(RemoveColumn(new int[][] { new int[] { 1, 3 }, new int[] { 5, 7 }, new int[] { 1, 3 }, new int[] { 13, 15, 17 }, new int[] { 5, 7 }, new int[] { 9, 11 } }, 0).SequenceEqual(new int[][] { new int[] { 3 }, new int[] { 7 }, new int[] { 3 }, new int[] { 15, 17 }, new int[] { 7 }, new int[] { 11 } }));"],"challenge_test_list":[]}
{"name":"nth-term-ap.py","description":"Find t-nth term in arithmetic progression","text":"Write a function to find t-nth term of arithemetic progression.","code":"public static int TnAp(int a, int n, int d) \n{\n    int tn = a \u002B (n - 1) * d;\n    return tn;\n}","task_id":354,"test_setup_code":"","test_list":["Debug.Assert(TnAp(1, 5, 2) == 9);","Debug.Assert(TnAp(2, 6, 4) == 22);","Debug.Assert(TnAp(1, 4, 5) == 16);"],"challenge_test_list":[]}
{"name":"count-rects-in-cir","description":"Count rectangles within a circle of radius r","text":"Write a C# function to count the number of rectangles in a circle of radius r.","code":"public int CountRectangles(int radius)  \n{  \n    int rectangles = 0;  \n    int diameter = 2 * radius;  \n    int diameterSquare = diameter * diameter;  \n    for (int a = 1; a \u003C 2 * radius; a\u002B\u002B)  \n    {  \n        for (int b = 1; b \u003C 2 * radius; b\u002B\u002B)  \n        {  \n            int diagnalLengthSquare = (a * a \u002B b * b);  \n            if (diagnalLengthSquare \u003C= diameterSquare)  \n            {  \n                rectangles \u002B= 1;  \n            }  \n        }  \n    }  \n    return rectangles;  \n}","task_id":355,"test_setup_code":"","test_list":["Debug.Assert(CountRectangles(2) == 8);","Debug.Assert(CountRectangles(1) == 1);","Debug.Assert(CountRectangles(0) == 0);"],"challenge_test_list":[]}
{"name":"third-angle-tri","description":"Find the third angle of a triangle from two angles","text":"Write a function to find the third angle of a triangle using two angles.","code":"public int FindAngle(int a, int b)  \n{  \n    int c = 180 - (a \u002B b);  \n    return c;  \n}","task_id":356,"test_setup_code":"","test_list":["Debug.Assert(FindAngle(47, 89) == 44);","Debug.Assert(FindAngle(45, 95) == 40);","Debug.Assert(FindAngle(50, 40) == 90);"],"challenge_test_list":[]}
{"name":"max-element-tuple","description":"Find the maximum element in given tuples","text":"Write a function to find the maximum element of all the given tuple records.","code":"public int FindMax(List\u003CList\u003Cint\u003E\u003E testList) \n{\n    int res = testList.SelectMany(i =\u003E i).Max();\n    return res;\n}","task_id":357,"test_setup_code":"","test_list":["Debug.Assert(FindMax(new (int, int)[]{(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)}) == 10);","Debug.Assert(FindMax(new (int, int)[] { (3, 5), (7, 8), (6, 2), (7, 11), (9, 8) }) == 11);","Debug.Assert(FindMax(new (int, int)[] { (4, 6), (8, 9), (7, 3), (8, 12), (10, 9) }) == 12);"],"challenge_test_list":[]}
{"name":"list-modulo-map","description":"Compute list modulos with map and lambda function","text":"Write a function to find modulo division of two lists using map and lambda function.","code":"public List\u003Cint\u003E ModDivList(List\u003Cint\u003E nums1, List\u003Cint\u003E nums2) {\n    var result = nums1.Zip(nums2, (x, y) =\u003E x % y);\n    return result.ToList();\n}","task_id":358,"test_setup_code":"","test_list":["Debug.Assert(ModDivList(new List\u003Cint\u003E { 4, 5, 6 }, new List\u003Cint\u003E { 1, 2, 3 }).SequenceEqual(new List\u003Cint\u003E { 0, 1, 0 }));","Debug.Assert(ModDivList(new List\u003Cint\u003E { 3, 2 }, new List\u003Cint\u003E { 1, 4 }).SequenceEqual(new List\u003Cint\u003E { 0, 2 }));","Debug.Assert(ModDivList(new List\u003Cint\u003E { 90, 120 }, new List\u003Cint\u003E { 50, 70 }).SequenceEqual(new List\u003Cint\u003E { 40, 50 }));"],"challenge_test_list":[]}
{"name":"quad-roots-check","description":"Check if one quadratic root is double the other","text":"Write a C# function to check whether one root of the quadratic equation is twice of the other or not.","code":"public string CheckSolution(int a, int b, int c) \n{ \n    if (2 * b * b == 9 * a * c) \n    { \n        return \u0022Yes\u0022; \n    } \n    else \n    { \n        return \u0022No\u0022; \n    } \n}","task_id":359,"test_setup_code":"","test_list":["Debug.Assert(CheckSolution(1, 3, 2) == \u0022Yes\u0022);","Debug.Assert(CheckSolution(1, 2, 3) == \u0022No\u0022);","Debug.Assert(CheckSolution(1, -5, 6) == \u0022No\u0022);"],"challenge_test_list":[]}
{"name":"carol-number-nth","description":"Find the n\u2019th carol number in sequence","text":"Write a function to find the n\u2019th carol number.","code":"public int GetCarol(int n) \n{ \n    int result = (int)Math.Pow(2, n) - 1; \n    return result * result - 2; \n}","task_id":360,"test_setup_code":"","test_list":["Debug.Assert(GetCarol(2) == 7);","Debug.Assert(GetCarol(4) == 223);","Debug.Assert(GetCarol(5) == 959);"],"challenge_test_list":[]}
{"name":"remove-empty-lists","description":"Remove empty lists from a list of lists","text":"Write a function to remove empty lists from a given list of lists.","code":"public List\u003CT\u003E RemoveEmpty\u003CT\u003E(List\u003CT\u003E list1) {\n    List\u003CT\u003E removeEmpty = list1.Where(x =\u003E !EqualityComparer\u003CT\u003E.Default.Equals(x, default(T))).ToList();\n    return removeEmpty;\n}","task_id":361,"test_setup_code":"","test_list":["Debug.Assert(RemoveEmpty(new object[][] { new object[] {}, new object[] {}, new object[] {}, \u0022Red\u0022, \u0022Green\u0022, new object[] { 1, 2 }, \u0022Blue\u0022, new object[] {}, new object[] {} }).SequenceEqual(new object[] { \u0022Red\u0022, \u0022Green\u0022, new object[] { 1, 2 }, \u0022Blue\u0022 }));","Debug.Assert(RemoveEmpty(new object[][] { new object[] { }, new object[] { }, new object[] { }, new object[] { }, new object[] { }, \u0022Green\u0022, new object[] { 1, 2 }, \u0022Blue\u0022, new object[] { }, new object[] { } }).SequenceEqual(new object[] { \u0022Green\u0022, new object[] { 1, 2 }, \u0022Blue\u0022 }));","Debug.Assert(RemoveEmpty(new object[][] { new object[0], new object[0], new object[0], \u0022Python\u0022, new object[0], new object[0], \u0022programming\u0022, \u0022language\u0022, new object[0], new object[0], new object[0], new object[0], new object[0] }).SequenceEqual(new string[] { \u0022Python\u0022, \u0022programming\u0022, \u0022language\u0022 }));"],"challenge_test_list":[]}
{"name":"max-item-count.py","description":"Find the most frequent item in a list","text":"Write a C# function to find the item with maximum occurrences in a given list.","code":"public int MaxOccurrences(int[] nums) {\n    int maxVal = 0;\n    int result = nums[0];\n    foreach (int i in nums) {\n        int occu = nums.Count(x =\u003E x == i);\n        if (occu \u003E maxVal) {\n            maxVal = occu;\n            result = i;\n        }\n    }\n    return result;\n}","task_id":362,"test_setup_code":"","test_list":["Debug.Assert(MaxOccurrences(new int[] { 1, 2, 3, 1, 2, 3, 12, 4, 2 }) == 2);","Debug.Assert(MaxOccurrences(new List\u003Cint\u003E { 1, 2, 6, 7, 0, 1, 0, 1, 0 }) == 1);","Debug.Assert(MaxOccurrences(new int[] { 1, 2, 3, 1, 2, 4, 1 }) == 1);"],"challenge_test_list":[]}
{"name":"add-k-to-tuple","description":"Add k to each element in a tuple","text":"Write a function to add the k elements to each element in the tuple.","code":"public List\u003CTuple\u003Cint, int\u003E\u003E AddKElement(List\u003CList\u003Cint\u003E\u003E testList, int K) \n{\n    var res = testList.Select(sub =\u003E sub.Select(j =\u003E j \u002B K).ToArray()).Select(arr =\u003E Tuple.Create(arr[0], arr[1])).ToList();\n    return res;\n}","task_id":363,"test_setup_code":"","test_list":["Debug.Assert(AddKElement(new List\u003C(int, int, int)\u003E { (1, 3, 4), (2, 4, 6), (3, 8, 1) }, 4).SequenceEqual(new List\u003C(int, int, int)\u003E { (5, 7, 8), (6, 8, 10), (7, 12, 5) }));","Debug.Assert(AddKElement(new List\u003C(int, int, int)\u003E { (1, 2, 3), (4, 5, 6), (7, 8, 9) }, 8).SequenceEqual(new List\u003C(int, int, int)\u003E { (9, 10, 11), (12, 13, 14), (15, 16, 17) }));","Debug.Assert(AddKElement(new Tuple\u003Cint, int, int\u003E[] { Tuple.Create(11, 12, 13), Tuple.Create(14, 15, 16), Tuple.Create(17, 18, 19) }, 9).SequenceEqual(new Tuple\u003Cint, int, int\u003E[] { Tuple.Create(20, 21, 22), Tuple.Create(23, 24, 25), Tuple.Create(26, 27, 28) }));"],"challenge_test_list":[]}
{"name":"alt-binary-flips","description":"Count flips to alternate characters in a binary string","text":"Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.","code":"public string MakeFlip(char ch) \n{\n    return ch == \u00270\u0027 ? \u00221\u0022 : \u00220\u0022;\n}\n\npublic int GetFlipWithStartingCharacter(string str, char expected) \n{\n    int flipCount = 0;\n    for (int i = 0; i \u003C str.Length; i\u002B\u002B) \n    {\n        if (str[i] != expected) \n        {\n            flipCount\u002B\u002B;\n        }\n        expected = MakeFlip(expected);\n    }\n    return flipCount;\n}\n\npublic int MinFlipToMakeStringAlternate(string str) \n{\n    return Math.Min(GetFlipWithStartingCharacter(str, \u00270\u0027), GetFlipWithStartingCharacter(str, \u00271\u0027));\n}","task_id":364,"test_setup_code":"","test_list":["Debug.Assert(MinFlipToMakeStringAlternate(\u00220001010111\u0022) == 2);","Debug.Assert(MinFlipToMakeStringAlternate(\u0022001\u0022) == 1);","Debug.Assert(MinFlipToMakeStringAlternate(\u0022010111011\u0022) == 2);"],"challenge_test_list":[]}
{"name":"count-digits.py","description":"Count the digits in a given number using Python","text":"Write a C# function to count the number of digits of a given number.","code":"public int CountDigit(int n) {\n    int count = 0;\n    while (n != 0) {\n        n /= 10;\n        count \u002B= 1;\n    }\n    return count;\n}","task_id":365,"test_setup_code":"","test_list":["Debug.Assert(CountDigit(12345) == 5);","Debug.Assert(CountDigit(11223305) == 8);","Debug.Assert(CountDigit(4123459) == 7);"],"challenge_test_list":[]}
{"name":"largest-adj-product","description":"Find largest product of adjacent integers in a list","text":"Write a C# function to find the largest product of the pair of adjacent elements from a given list of integers.","code":"public static int AdjacentNumProduct(List\u003Cint\u003E listNums)\n{\n    return listNums.Zip(listNums.Skip(1), (a, b) =\u003E a * b).Max();\n}","task_id":366,"test_setup_code":"","test_list":["Debug.Assert(AdjacentNumProduct(new int[] { 1, 2, 3, 4, 5, 6 }) == 30);","Debug.Assert(AdjacentNumProduct(new int[] { 1, 2, 3, 4, 5 }) == 20);","Debug.Assert(AdjacentNumProduct(new int[] { 2, 3 }) == 6);"],"challenge_test_list":[]}
{"name":"balanced-bt-check","description":"Check if a binary tree is balanced","text":"Write a function to check if a binary tree is balanced or not.","code":"class Node \n{ \n    public int Data; \n    public Node Left; \n    public Node Right; \n\n    public Node(int data) \n    { \n        Data = data; \n        Left = null; \n        Right = null; \n    } \n}\n\npublic int GetHeight(Node root) \n{ \n    if (root == null) \n    { \n        return 0; \n    } \n    return Math.Max(GetHeight(root.Left), GetHeight(root.Right)) \u002B 1; \n}\n\npublic bool IsTreeBalanced(Node root) \n{ \n    if (root == null) \n    { \n        return true; \n    } \n    int lh = GetHeight(root.Left); \n    int rh = GetHeight(root.Right); \n    if (Math.Abs(lh - rh) \u003C= 1 \u0026\u0026 IsTreeBalanced(root.Left) \u0026\u0026 IsTreeBalanced(root.Right)) \n    { \n        return true; \n    } \n    return false; \n}","task_id":367,"test_setup_code":"class Node \n{ \n    public int Data; \n    public Node Left; \n    public Node Right; \n\n    public Node(int data) \n    { \n        Data = data; \n        Left = null; \n        Right = null; \n    } \n} \n\npublic int GetHeight(Node root) \n{ \n    if (root == null) \n    { \n        return 0; \n    } \n    return Math.Max(GetHeight(root.Left), GetHeight(root.Right)) \u002B 1; \n} \n\npublic bool IsTreeBalanced(Node root) \n{ \n    if (root == null) \n    { \n        return true; \n    } \n    int lh = GetHeight(root.Left); \n    int rh = GetHeight(root.Right); \n    if (Math.Abs(lh - rh) \u003C= 1 \u0026\u0026 IsTreeBalanced(root.Left) \u0026\u0026 IsTreeBalanced(root.Right)) \n    { \n        return true; \n    } \n    return false; \n}","test_list":["Debug.Assert(IsTreeBalanced(root) == false);","Debug.Assert(IsTreeBalanced(root1) == true);","Debug.Assert(IsTreeBalanced(root2) == false);"],"challenge_test_list":[]}
{"name":"repeat-tuple-n-times","description":"Repeat a tuple n times with a function","text":"Write a function to repeat the given tuple n times.","code":"public static Tuple\u003CT\u003E[] RepeatTuples\u003CT\u003E(Tuple\u003CT\u003E testTup, int N)\n{\n    var res = Enumerable.Repeat(testTup, N).ToArray();\n    return res;\n}","task_id":368,"test_setup_code":"","test_list":["Debug.Assert(RepeatTuples((1, 3), 4).SequenceEqual(new[] { (1, 3), (1, 3), (1, 3), (1, 3) }));","Debug.Assert(RepeatTuples((1, 2), 3).SequenceEqual(new[] { (1, 2), (1, 2), (1, 2) }));","Debug.Assert(RepeatTuples((3, 4), 5).SequenceEqual(new[] { (3, 4), (3, 4), (3, 4), (3, 4), (3, 4) }));"],"challenge_test_list":[]}
{"name":"lateral-surface-area","description":"Calculate lateral surface area of a cuboid","text":"Write a function to find the lateral surface area of cuboid","code":"public static double LateralsurfaceCuboid(double l, double w, double h) {\n    double LSA = 2 * h * (l \u002B w);\n    return LSA;\n}","task_id":369,"test_setup_code":"","test_list":["Debug.Assert(LateralsurfaceCuboid(8, 5, 6) == 156);","Debug.Assert(LateralsurfaceCuboid(7, 9, 10) == 320);","Debug.Assert(LateralsurfaceCuboid(10, 20, 30) == 1800);"],"challenge_test_list":[]}
{"name":"sort-tuple-float","description":"Sort a tuple based on its float elements","text":"Write a function to sort a tuple by its float element.","code":"public List\u003CList\u003Cstring\u003E\u003E FloatSort(List\u003CList\u003Cstring\u003E\u003E price)\n{\n    var floatSort = price.OrderByDescending(x =\u003E float.Parse(x[1])).ToList();\n    return floatSort;\n}","task_id":370,"test_setup_code":"","test_list":["Debug.Assert(FloatSort(new Tuple\u003Cstring, string\u003E[] { Tuple.Create(\u0022item1\u0022, \u002212.20\u0022), Tuple.Create(\u0022item2\u0022, \u002215.10\u0022), Tuple.Create(\u0022item3\u0022, \u002224.5\u0022) }).SequenceEqual(new Tuple\u003Cstring, string\u003E[] { Tuple.Create(\u0022item3\u0022, \u002224.5\u0022), Tuple.Create(\u0022item2\u0022, \u002215.10\u0022), Tuple.Create(\u0022item1\u0022, \u002212.20\u0022) }));","Debug.Assert(FloatSort(new Tuple\u003Cstring, string\u003E[] { Tuple.Create(\u0022item1\u0022, \u002215\u0022), Tuple.Create(\u0022item2\u0022, \u002210\u0022), Tuple.Create(\u0022item3\u0022, \u002220\u0022) }).SequenceEqual(new Tuple\u003Cstring, string\u003E[] { Tuple.Create(\u0022item3\u0022, \u002220\u0022), Tuple.Create(\u0022item1\u0022, \u002215\u0022), Tuple.Create(\u0022item2\u0022, \u002210\u0022) }));","Debug.Assert(FloatSort(new Tuple\u003Cstring, string\u003E[] { Tuple.Create(\u0022item1\u0022, \u00225\u0022), Tuple.Create(\u0022item2\u0022, \u002210\u0022), Tuple.Create(\u0022item3\u0022, \u002214\u0022) }).SequenceEqual(new Tuple\u003Cstring, string\u003E[] { Tuple.Create(\u0022item3\u0022, \u002214\u0022), Tuple.Create(\u0022item2\u0022, \u002210\u0022), Tuple.Create(\u0022item1\u0022, \u00225\u0022) }));"],"challenge_test_list":[]}
{"name":"smallest-missing","description":"Find smallest missing element in a sorted array","text":"Write a function to find the smallest missing element in a sorted array.","code":"public int SmallestMissing(int[] A, int leftElement, int rightElement) {\n    if (leftElement \u003E rightElement) {\n        return leftElement;\n    }\n    int mid = leftElement \u002B (rightElement - leftElement) / 2;\n    if (A[mid] == mid) {\n        return SmallestMissing(A, mid \u002B 1, rightElement);\n    } else {\n        return SmallestMissing(A, leftElement, mid - 1);\n    }\n}","task_id":371,"test_setup_code":"","test_list":["Debug.Assert(SmallestMissing(new int[] { 0, 1, 2, 3, 4, 5, 6 }, 0, 6) == 7);","Debug.Assert(SmallestMissing(new int[] { 0, 1, 2, 6, 9, 11, 15 }, 0, 6) == 3);","Debug.Assert(SmallestMissing(new int[] { 1, 2, 3, 4, 6, 9, 11, 15 }, 0, 7) == 0);"],"challenge_test_list":[]}
{"name":"heap-sort-list","description":"Sort elements in ascending order using heap queue","text":"Write a function to sort a given list of elements in ascending order using heap queue algorithm.","code":"using System.Collections.Generic;\n\npublic List\u003Cint\u003E HeapAssending(List\u003Cint\u003E nums)\n{\n    // Create a min-heap\n    PriorityQueue\u003Cint, int\u003E minHeap = new();\n    foreach (var num in nums)\n    {\n        minHeap.Enqueue(num, num);\n    }\n\n    List\u003Cint\u003E sResult = new();\n    while (minHeap.Count \u003E 0)\n    {\n        sResult.Add(minHeap.Dequeue());\n    }\n    return sResult;\n}","task_id":372,"test_setup_code":"","test_list":["Debug.Assert(HeapAssending(new int[] { 18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1 }).SequenceEqual(new int[] { 1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18 }));","Debug.Assert(HeapAssending(new List\u003Cint\u003E { 25, 35, 22, 85, 14, 65, 75, 25, 58 }).SequenceEqual(new List\u003Cint\u003E { 14, 22, 25, 25, 35, 58, 65, 75, 85 }));","Debug.Assert(HeapAssending(new List\u003Cint\u003E { 1, 3, 5, 7, 9, 2, 4, 6, 8, 0 }).SequenceEqual(new List\u003Cint\u003E { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }));"],"challenge_test_list":[]}
{"name":"cuboid-volume","description":"Calculate the volume of a cuboid using a function","text":"Write a function to find the volume of a cuboid.","code":"public static int VolumeCuboid(int l, int w, int h)  \n{  \n    int volume = l * w * h;  \n    return volume;  \n}","task_id":373,"test_setup_code":"","test_list":["Debug.Assert(VolumeCuboid(1, 2, 3) == 6);","Debug.Assert(VolumeCuboid(5, 7, 9) == 315);","Debug.Assert(VolumeCuboid(10, 15, 21) == 3150);"],"challenge_test_list":[]}
{"name":"permutations-print","description":"Print all string permutations with duplicates included","text":"Write a function to print all permutations of a given string including duplicates.","code":"public List\u003Cstring\u003E PermuteString(string str)\n{\n    if (str.Length == 0)\n    {\n        return new List\u003Cstring\u003E { \u0022\u0022 };\n    }\n    var prevList = PermuteString(str.Substring(1));\n    var nextList = new List\u003Cstring\u003E();\n    foreach (var prev in prevList)\n    {\n        for (int j = 0; j \u003C= str.Length; j\u002B\u002B)\n        {\n            var newStr = prev.Substring(0, j) \u002B str[0] \u002B prev.Substring(j);\n            if (!nextList.Contains(newStr))\n            {\n                nextList.Add(newStr);\n            }\n        }\n    }\n    return nextList;\n}","task_id":374,"test_setup_code":"","test_list":["Debug.Assert(PermuteString(\u0022ab\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022ab\u0022, \u0022ba\u0022 }));","Debug.Assert(PermuteString(\u0022abc\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022abc\u0022, \u0022bac\u0022, \u0022bca\u0022, \u0022acb\u0022, \u0022cab\u0022, \u0022cba\u0022 }));","Debug.Assert(PermuteString(\u0022abcd\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022abcd\u0022, \u0022bacd\u0022, \u0022bcad\u0022, \u0022bcda\u0022, \u0022acbd\u0022, \u0022cabd\u0022, \u0022cbad\u0022, \u0022cbda\u0022, \u0022acdb\u0022, \u0022cadb\u0022, \u0022cdab\u0022, \u0022cdba\u0022, \u0022abdc\u0022, \u0022badc\u0022, \u0022bdac\u0022, \u0022bdca\u0022, \u0022adbc\u0022, \u0022dabc\u0022, \u0022dbac\u0022, \u0022dbca\u0022, \u0022adcb\u0022, \u0022dacb\u0022, \u0022dcab\u0022, \u0022dcba\u0022 }));"],"challenge_test_list":[]}
{"name":"round-to-multiple","description":"Round a number to the nearest specified multiple","text":"Write a function to round the given number to the nearest multiple of a specific number.","code":"public static int RoundNum(int n, int m)\n{\n    int a = (n / m) * m;\n    int b = a \u002B m;\n    return (n - a \u003E b - n) ? b : a;\n}","task_id":375,"test_setup_code":"","test_list":["Debug.Assert(RoundNum(4722, 10) == 4720);","Debug.Assert(RoundNum(1111, 5) == 1110);","Debug.Assert(RoundNum(219, 2) == 218);"],"challenge_test_list":[]}
{"name":"remove-duplicates","description":"Remove duplicates from a tuple and replace them","text":"Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.","code":"public Tuple\u003Cstring\u003E RemoveReplica(Tuple\u003Cstring\u003E testTup)\n{\n    HashSet\u003Cstring\u003E temp = new HashSet\u003Cstring\u003E();\n    var res = testTup.Select(ele =\u003E !temp.Contains(ele) \u0026\u0026 temp.Add(ele) ? ele : \u0022MSP\u0022).ToArray();\n    return Tuple.Create(res);\n}","task_id":376,"test_setup_code":"","test_list":["Debug.Assert(RemoveReplica(new Tuple\u003Cint, int, int, int, int, int, int, int, int, int\u003E(1, 1, 4, 4, 4, 5, 5, 6, 7, 7)).Equals(new Tuple\u003Cobject, object, int, object, object, int, object, int, int, object\u003E(1, \u0022MSP\u0022, 4, \u0022MSP\u0022, \u0022MSP\u0022, 5, \u0022MSP\u0022, 6, 7, \u0022MSP\u0022)));","Debug.Assert(RemoveReplica(new Tuple\u003Cint, int, int, int, int, int, int, int, int, int, int\u003E(2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == new Tuple\u003Cint, object, int, object, int, object, int, int, int, object\u003E(2, 3, 4, \u0022MSP\u0022, 5, 6, \u0022MSP\u0022, 7, 8, 9, \u0022MSP\u0022));","Debug.Assert(RemoveReplica(new Tuple\u003Cint, int, int, int, int, int, int, int, int, int\u003E(2, 2, 5, 4, 5, 7, 5, 6, 7, 7)).Equals(new Tuple\u003Cint, string, int, int, string, int, string, int, string, string\u003E(2, \u0022MSP\u0022, 5, 4, \u0022MSP\u0022, 7, \u0022MSP\u0022, 6, \u0022MSP\u0022, \u0022MSP\u0022)));"],"challenge_test_list":[]}
{"name":"remove-char.py","description":"Remove all instances of a character from a string","text":"Write a C# function to remove all occurrences of a character in a given string.","code":"public string RemoveChar(string s, char c)  \n{  \n    int counts = s.Count(x =\u003E x == c);  \n    s = s.ToList();  \n    while (counts \u003E 0)  \n    {  \n        s.Remove(c);  \n        counts--;  \n    }  \n    return string.Join(\u0022\u0022, s);  \n}","task_id":377,"test_setup_code":"","test_list":["Debug.Assert(RemoveChar(\u0022aba\u0022, \u0027a\u0027) == \u0022b\u0022);","Debug.Assert(RemoveChar(\u0022toggle\u0022, \u0027g\u0027) == \u0022tole\u0022);","Debug.Assert(RemoveChar(\u0022aabbc\u0022, \u0027b\u0027) == \u0022aac\u0022);"],"challenge_test_list":[]}
{"name":"shift-last-to-first","description":"Shift last element of a list to the front","text":"Write a C# function to shift last element to first position in the given list.","code":"public List\u003CT\u003E MoveFirst\u003CT\u003E(List\u003CT\u003E testList) {\n    testList = new List\u003CT\u003E { testList.Last() };\n    testList.AddRange(testList.Take(testList.Count - 1));\n    return testList;\n}","task_id":378,"test_setup_code":"","test_list":["Debug.Assert(MoveFirst(new int[] { 1, 2, 3, 4 }).SequenceEqual(new int[] { 4, 1, 2, 3 }));","Debug.Assert(MoveFirst(new int[] { 0, 1, 2, 3 }).SequenceEqual(new int[] { 3, 0, 1, 2 }));\n\nint[] MoveFirst(int[] arr) \n{\n    if (arr.Length == 0) return arr;\n    int[] result = new int[arr.Length];\n    result[0] = arr[arr.Length - 1];\n    Array.Copy(arr, 0, result, 1, arr.Length - 1);\n    return result;\n}","Debug.Assert(MoveFirst(new int[] { 9, 8, 7, 1 }).SequenceEqual(new int[] { 1, 9, 8, 7 }));"],"challenge_test_list":[]}
{"name":"cuboid-surface-area","description":"Calculate the surface area of a cuboid","text":"Write a function to find the surface area of a cuboid.","code":"public int SurfaceAreaCuboid(int l, int w, int h)  \n{  \n    int SA = 2 * (l * w \u002B l * h \u002B w * h);  \n    return SA;  \n}","task_id":379,"test_setup_code":"","test_list":["Debug.Assert(SurfaceAreaCuboid(1, 2, 3) == 22);","Debug.Assert(SurfaceAreaCuboid(5, 7, 9) == 286);","Debug.Assert(SurfaceAreaCuboid(10, 15, 21) == 1350);"],"challenge_test_list":[]}
{"name":"array-generator","description":"Generate a two-dimensional array using a function","text":"Write a function to generate a two-dimensional array.","code":"public int[,] MultiList(int rownum, int colnum)\n{\n    int[,] multiList = new int[rownum, colnum];\n    for (int row = 0; row \u003C rownum; row\u002B\u002B)\n    {\n        for (int col = 0; col \u003C colnum; col\u002B\u002B)\n        {\n            multiList[row, col] = row * col;\n        }\n    }\n    return multiList;\n}","task_id":380,"test_setup_code":"","test_list":["Debug.Assert(MultiList(3, 4).SequenceEqual(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 0, 0, 0, 0 }, new List\u003Cint\u003E { 0, 1, 2, 3 }, new List\u003Cint\u003E { 0, 2, 4, 6 } }));","Debug.Assert(MultiList(5, 7).SequenceEqual(new List\u003CList\u003Cint\u003E\u003E {\n    new List\u003Cint\u003E { 0, 0, 0, 0, 0, 0, 0 },\n    new List\u003Cint\u003E { 0, 1, 2, 3, 4, 5, 6 },\n    new List\u003Cint\u003E { 0, 2, 4, 6, 8, 10, 12 },\n    new List\u003Cint\u003E { 0, 3, 6, 9, 12, 15, 18 },\n    new List\u003Cint\u003E { 0, 4, 8, 12, 16, 20, 24 }\n}));","Debug.Assert(MultiList(10, 15).SequenceEqual(new List\u003CList\u003Cint\u003E\u003E {\n    new List\u003Cint\u003E { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },\n    new List\u003Cint\u003E { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 },\n    new List\u003Cint\u003E { 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 },\n    new List\u003Cint\u003E { 0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42 },\n    new List\u003Cint\u003E { 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56 },\n    new List\u003Cint\u003E { 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70 },\n    new List\u003Cint\u003E { 0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84 },\n    new List\u003Cint\u003E { 0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98 },\n    new List\u003Cint\u003E { 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112 },\n    new List\u003Cint\u003E { 0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126 }\n}));"],"challenge_test_list":[]}
{"name":"sort-list-by-index","description":"Sort a list of lists by a specified inner index","text":"Write a function to sort a list of lists by a given index of the inner list.","code":"public List\u003CList\u003CT\u003E\u003E IndexOnInnerList\u003CT\u003E(List\u003CList\u003CT\u003E\u003E listData, int indexNo)\n{\n    return listData.OrderBy(item =\u003E item[indexNo]).ToList();\n}","task_id":381,"test_setup_code":"","test_list":["Debug.Assert(IndexOnInnerList(new List\u003CTuple\u003Cstring, int, int\u003E\u003E { \n    Tuple.Create(\u0022Greyson Fulton\u0022, 98, 99), \n    Tuple.Create(\u0022Brady Kent\u0022, 97, 96), \n    Tuple.Create(\u0022Wyatt Knott\u0022, 91, 94), \n    Tuple.Create(\u0022Beau Turnbull\u0022, 94, 98) }, 0).SequenceEqual(new List\u003CTuple\u003Cstring, int, int\u003E\u003E { \n    Tuple.Create(\u0022Beau Turnbull\u0022, 94, 98), \n    Tuple.Create(\u0022Brady Kent\u0022, 97, 96), \n    Tuple.Create(\u0022Greyson Fulton\u0022, 98, 99), \n    Tuple.Create(\u0022Wyatt Knott\u0022, 91, 94) }));","Debug.Assert(IndexOnInnerList(new (string, int, int)[] { \n    (\u0022Greyson Fulton\u0022, 98, 99), \n    (\u0022Brady Kent\u0022, 97, 96), \n    (\u0022Wyatt Knott\u0022, 91, 94), \n    (\u0022Beau Turnbull\u0022, 94, 98) }, 1).SequenceEqual(new (string, int, int)[] { \n    (\u0022Wyatt Knott\u0022, 91, 94), \n    (\u0022Beau Turnbull\u0022, 94, 98), \n    (\u0022Brady Kent\u0022, 97, 96), \n    (\u0022Greyson Fulton\u0022, 98, 99) }));","Debug.Assert(IndexOnInnerList(new Tuple\u003Cstring, int, int\u003E[] { Tuple.Create(\u0022Greyson Fulton\u0022, 98, 99), Tuple.Create(\u0022Brady Kent\u0022, 97, 96), Tuple.Create(\u0022Wyatt Knott\u0022, 91, 94), Tuple.Create(\u0022Beau Turnbull\u0022, 94, 98) }, 2).SequenceEqual(new Tuple\u003Cstring, int, int\u003E[] { Tuple.Create(\u0022Wyatt Knott\u0022, 91, 94), Tuple.Create(\u0022Brady Kent\u0022, 97, 96), Tuple.Create(\u0022Beau Turnbull\u0022, 94, 98), Tuple.Create(\u0022Greyson Fulton\u0022, 98, 99) }));"],"challenge_test_list":[]}
{"name":"circular-rotations","description":"Count rotations in a circularly sorted array","text":"Write a function to find the number of rotations in a circularly sorted array.","code":"public int FindRotationCount(int[] A) {\n    int left = 0, right = A.Length - 1;\n    while (left \u003C= right) {\n        if (A[left] \u003C= A[right]) {\n            return left;\n        }\n        int mid = (left \u002B right) / 2;\n        int next = (mid \u002B 1) % A.Length;\n        int prev = (mid - 1 \u002B A.Length) % A.Length;\n        if (A[mid] \u003C= A[next] \u0026\u0026 A[mid] \u003C= A[prev]) {\n            return mid;\n        } else if (A[mid] \u003C= A[right]) {\n            right = mid - 1;\n        } else if (A[mid] \u003E= A[left]) {\n            left = mid \u002B 1;\n        }\n    }\n    return -1;\n}","task_id":382,"test_setup_code":"","test_list":["Debug.Assert(FindRotationCount(new int[] { 8, 9, 10, 1, 2, 3, 4, 5, 6, 7 }) == 3);","Debug.Assert(FindRotationCount(new int[] { 8, 9, 10, 2, 5, 6 }) == 3);","Debug.Assert(FindRotationCount(new int[] { 2, 5, 6, 8, 9, 10 }) == 0);"],"challenge_test_list":[]}
{"name":"odd-bits-toggle","description":"Toggle all odd bits in a given number using Python","text":"Write a C# function to toggle all odd bits of a given number.","code":"public static int EvenBitToggleNumber(int n) \n{ \n    int res = 0; \n    int count = 0; \n    int temp = n; \n    while (temp \u003E 0) \n    { \n        if (count % 2 == 0) \n        { \n            res |= (1 \u003C\u003C count); \n        } \n        count\u002B\u002B; \n        temp \u003E\u003E= 1; \n    } \n    return n ^ res; \n}","task_id":383,"test_setup_code":"","test_list":["Debug.Assert(EvenBitToggleNumber(10) == 15);","Debug.Assert(EvenBitToggleNumber(20) == 1);","Debug.Assert(EvenBitToggleNumber(30) == 11);"],"challenge_test_list":[]}
{"name":"smallest-frequency","description":"Find frequency of smallest value in an array","text":"Write a C# function to find the frequency of the smallest value in a given array.","code":"public int FrequencyOfSmallest(int n, int[] arr) \n{ \n    int mn = arr[0]; \n    int freq = 1; \n    for (int i = 1; i \u003C n; i\u002B\u002B) \n    { \n        if (arr[i] \u003C mn) \n        { \n            mn = arr[i]; \n            freq = 1; \n        } \n        else if (arr[i] == mn) \n        { \n            freq\u002B\u002B; \n        } \n    } \n    return freq; \n}","task_id":384,"test_setup_code":"","test_list":["Debug.Assert(FrequencyOfSmallest(5, new int[] { 1, 2, 3, 4, 3 }) == 1);","Debug.Assert(FrequencyOfSmallest(7, new int[] { 3, 1, 2, 5, 6, 2, 3 }) == 1);","Debug.Assert(FrequencyOfSmallest(7, new int[] { 3, 3, 6, 3, 7, 4, 9 }) == 3);"],"challenge_test_list":[]}
{"name":"perrin-number-n","description":"Calculate the nth Perrin number recursively","text":"Write a function to find the n\u0027th perrin number using recursion.","code":"public int GetPerrin(int n) {\n    if (n == 0) {\n        return 3;\n    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    return GetPerrin(n - 2) \u002B GetPerrin(n - 3);\n}","task_id":385,"test_setup_code":"","test_list":["Debug.Assert(GetPerrin(9) == 12);","Debug.Assert(GetPerrin(4) == 2);","Debug.Assert(GetPerrin(6) == 5);"],"challenge_test_list":[]}
{"name":"bracket-swaps","description":"Minimize swaps for bracket balancing in a string","text":"Write a function to find out the minimum no of swaps required for bracket balancing in the given string.","code":"public static int SwapCount(string s) {\n    char[] chars = s.ToCharArray();\n    int countLeft = 0;\n    int countRight = 0;\n    int swap = 0;\n    int imbalance = 0; \n    for (int i = 0; i \u003C chars.Length; i\u002B\u002B) {\n        if (chars[i] == \u0027[\u0027) {\n            countLeft\u002B\u002B;\n            if (imbalance \u003E 0) {\n                swap \u002B= imbalance;\n                imbalance--;\n            }\n        } else if (chars[i] == \u0027]\u0027) {\n            countRight\u002B\u002B;\n            imbalance = (countRight - countLeft);\n        }\n    }\n    return swap;\n}","task_id":386,"test_setup_code":"","test_list":["Debug.Assert(SwapCount(\u0022[]][][\u0022) == 2);","Debug.Assert(SwapCount(\u0022[[][]]\u0022) == 0);","Debug.Assert(SwapCount(\u0022[[][]]][\u0022) == 1);"],"challenge_test_list":[]}
{"name":"hex-even-odd","description":"Check if a hexadecimal number is even or odd","text":"Write a C# function to check whether the hexadecimal number is even or odd.","code":"public string EvenOrOdd(string N) \n{ \n    int l = N.Length; \n    if (N[l - 1] == \u00270\u0027 || N[l - 1] == \u00272\u0027 || \n        N[l - 1] == \u00274\u0027 || N[l - 1] == \u00276\u0027 || \n        N[l - 1] == \u00278\u0027 || N[l - 1] == \u0027A\u0027 || \n        N[l - 1] == \u0027C\u0027 || N[l - 1] == \u0027E\u0027) \n    { \n        return \u0022Even\u0022; \n    } \n    else \n    { \n        return \u0022Odd\u0022; \n    } \n}","task_id":387,"test_setup_code":"","test_list":["Debug.Assert(EvenOrOdd(\u0022AB3454D\u0022) == \u0022Odd\u0022);","Debug.Assert(EvenOrOdd(\u0022ABC\u0022) == \u0022Even\u0022);","Debug.Assert(EvenOrOdd(\u0022AAD\u0022) == \u0022Odd\u0022);"],"challenge_test_list":[]}
{"name":"highest-power-of-2","description":"Find highest power of 2 less than or equal to n","text":"Write a C# function to find the highest power of 2 that is less than or equal to n.","code":"public int HighestPowerOf2(int n) \n{ \n    int res = 0; \n    for (int i = n; i \u003E 0; i--) \n    { \n        if ((i \u0026 (i - 1)) == 0) \n        { \n            res = i; \n            break; \n        } \n    } \n    return res; \n}","task_id":388,"test_setup_code":"","test_list":["Debug.Assert(HighestPowerOf2(10) == 8);","Debug.Assert(HighestPowerOf2(19) == 16);","Debug.Assert(HighestPowerOf2(32) == 32);"],"challenge_test_list":[]}
{"name":"lucas-number-fn","description":"Calculate the nth Lucas number using a function","text":"Write a function to find the n\u0027th lucas number.","code":"public int FindLucas(int n) \n{\n    if (n == 0) \n    {\n        return 2;\n    }\n    if (n == 1) \n    {\n        return 1;\n    }\n    return FindLucas(n - 1) \u002B FindLucas(n - 2);\n}","task_id":389,"test_setup_code":"","test_list":["Debug.Assert(FindLucas(9) == 76);","Debug.Assert(FindLucas(4) == 7);","Debug.Assert(FindLucas(3) == 4);"],"challenge_test_list":[]}
{"name":"insert-at-beginning","description":"Insert a string at the start of list items","text":"Write a function to insert a given string at the beginning of all items in a list.","code":"public List\u003Cstring\u003E AddString(List\u003Cstring\u003E list, string inputString)\n{\n    List\u003Cstring\u003E addString = list.Select(i =\u003E string.Format(inputString, i)).ToList();\n    return addString;\n}","task_id":390,"test_setup_code":"","test_list":["Debug.Assert(AddString(new int[] { 1, 2, 3, 4 }, \u0022temp{0}\u0022) == new string[] { \u0022temp1\u0022, \u0022temp2\u0022, \u0022temp3\u0022, \u0022temp4\u0022 });","Debug.Assert(AddString(new string[] { \u0022a\u0022, \u0022b\u0022, \u0022c\u0022, \u0022d\u0022 }, \u0022python{0}\u0022).SequenceEqual(new string[] { \u0022pythona\u0022, \u0022pythonb\u0022, \u0022pythonc\u0022, \u0022pythond\u0022 }));\n\npublic static List\u003Cstring\u003E AddString(string[] input, string format) {\n    return input.Select(s =\u003E string.Format(format, s)).ToList();\n}","Debug.Assert(AddString(new int[] { 5, 6, 7, 8 }, \u0022string{0}\u0022) == new string[] { \u0022string5\u0022, \u0022string6\u0022, \u0022string7\u0022, \u0022string8\u0022 });"],"challenge_test_list":[]}
{"name":"list-to-dict-nest","description":"Convert multiple lists into a nested dictionary","text":"Write a function to convert more than one list to nested dictionary.","code":"public List\u003CDictionary\u003Cstring, Dictionary\u003Cstring, string\u003E\u003E\u003E ConvertListDictionary(List\u003Cstring\u003E l1, List\u003Cstring\u003E l2, List\u003Cstring\u003E l3) {\n    var result = l1.Zip(l2, (x, y) =\u003E new { x, y })\n                   .Zip(l3, (xy, z) =\u003E new { xy.x, xy.y, z })\n                   .Select(item =\u003E new Dictionary\u003Cstring, Dictionary\u003Cstring, string\u003E\u003E {\n                       { item.x, new Dictionary\u003Cstring, string\u003E { { item.y, item.z } } }\n                   })\n                   .ToList();\n    return result;\n}","task_id":391,"test_setup_code":"","test_list":["Debug.Assert(ConvertListDictionary(new List\u003Cstring\u003E { \u0022S001\u0022, \u0022S002\u0022, \u0022S003\u0022, \u0022S004\u0022 }, new List\u003Cstring\u003E { \u0022Adina Park\u0022, \u0022Leyton Marsh\u0022, \u0022Duncan Boyle\u0022, \u0022Saim Richards\u0022 }, new List\u003Cint\u003E { 85, 98, 89, 92 }).SequenceEqual(new List\u003CDictionary\u003Cstring, Dictionary\u003Cstring, int\u003E\u003E\u003E { \n    new Dictionary\u003Cstring, Dictionary\u003Cstring, int\u003E\u003E { { \u0022S001\u0022, new Dictionary\u003Cstring, int\u003E { { \u0022Adina Park\u0022, 85 } } } }, \n    new Dictionary\u003Cstring, Dictionary\u003Cstring, int\u003E\u003E { { \u0022S002\u0022, new Dictionary\u003Cstring, int\u003E { { \u0022Leyton Marsh\u0022, 98 } } } }, \n    new Dictionary\u003Cstring, Dictionary\u003Cstring, int\u003E\u003E { { \u0022S003\u0022, new Dictionary\u003Cstring, int\u003E { { \u0022Duncan Boyle\u0022, 89 } } } }, \n    new Dictionary\u003Cstring, Dictionary\u003Cstring, int\u003E\u003E { { \u0022S004\u0022, new Dictionary\u003Cstring, int\u003E { { \u0022Saim Richards\u0022, 92 } } } } \n}));","Debug.Assert(ConvertListDictionary(new List\u003Cstring\u003E{\u0022abc\u0022,\u0022def\u0022,\u0022ghi\u0022,\u0022jkl\u0022}, new List\u003Cstring\u003E{\u0022python\u0022,\u0022program\u0022,\u0022language\u0022,\u0022programs\u0022}, new List\u003Cint\u003E{100,200,300,400}).SequenceEqual(new List\u003CDictionary\u003Cstring, Dictionary\u003Cstring, int\u003E\u003E\u003E{ \n    new Dictionary\u003Cstring, Dictionary\u003Cstring, int\u003E\u003E {{\u0022abc\u0022, new Dictionary\u003Cstring, int\u003E{{\u0022python\u0022, 100}}}}, \n    new Dictionary\u003Cstring, Dictionary\u003Cstring, int\u003E\u003E {{\u0022def\u0022, new Dictionary\u003Cstring, int\u003E{{\u0022program\u0022, 200}}}}, \n    new Dictionary\u003Cstring, Dictionary\u003Cstring, int\u003E\u003E {{\u0022ghi\u0022, new Dictionary\u003Cstring, int\u003E{{\u0022language\u0022, 300}}}}, \n    new Dictionary\u003Cstring, Dictionary\u003Cstring, int\u003E\u003E {{\u0022jkl\u0022, new Dictionary\u003Cstring, int\u003E{{\u0022programs\u0022, 400}}}} \n}));","Debug.Assert(ConvertListDictionary(new List\u003Cstring\u003E { \u0022A1\u0022, \u0022A2\u0022, \u0022A3\u0022, \u0022A4\u0022 }, new List\u003Cstring\u003E { \u0022java\u0022, \u0022C\u0022, \u0022C\u002B\u002B\u0022, \u0022DBMS\u0022 }, new List\u003Cint\u003E { 10, 20, 30, 40 }).SequenceEqual(new List\u003CDictionary\u003Cstring, Dictionary\u003Cstring, int\u003E\u003E\u003E { \n    new Dictionary\u003Cstring, Dictionary\u003Cstring, int\u003E\u003E { { \u0022A1\u0022, new Dictionary\u003Cstring, int\u003E { { \u0022java\u0022, 10 } } } },\n    new Dictionary\u003Cstring, Dictionary\u003Cstring, int\u003E\u003E { { \u0022A2\u0022, new Dictionary\u003Cstring, int\u003E { { \u0022C\u0022, 20 } } } },\n    new Dictionary\u003Cstring, Dictionary\u003Cstring, int\u003E\u003E { { \u0022A3\u0022, new Dictionary\u003Cstring, int\u003E { { \u0022C\u002B\u002B\u0022, 30 } } } },\n    new Dictionary\u003Cstring, Dictionary\u003Cstring, int\u003E\u003E { { \u0022A4\u0022, new Dictionary\u003Cstring, int\u003E { { \u0022DBMS\u0022, 40 } } } }\n}));"],"challenge_test_list":[]}
{"name":"max-sum-fn-equation","description":"Find maximum sum using recursive function definition","text":"Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) \u002B f(n/3) \u002B f(n/4) \u002B f(n/5)), n).","code":"public int GetMaxSum(int n)\n{\n    List\u003Cint\u003E res = new List\u003Cint\u003E();\n    res.Add(0);\n    res.Add(1);\n    int i = 2;\n    while (i \u003C n \u002B 1)\n    {\n        res.Add(Math.Max(i, res[i / 2] \u002B res[i / 3] \u002B res[i / 4] \u002B res[i / 5]));\n        i\u002B\u002B;\n    }\n    return res[n];\n}","task_id":392,"test_setup_code":"","test_list":["Debug.Assert(GetMaxSum(60) == 106);","Debug.Assert(GetMaxSum(10) == 12);","Debug.Assert(GetMaxSum(2) == 2);"],"challenge_test_list":[]}
{"name":"max-length-list","description":"Find longest list using a lambda function","text":"Write a function to find the list with maximum length using lambda function.","code":"public (int, string) MaxLengthList(List\u003Cstring\u003E inputList) \n{\n    int maxLength = inputList.Max(x =\u003E x.Length);\n    string maxList = inputList.OrderByDescending(i =\u003E i.Length).First();\n    return (maxLength, maxList);\n}","task_id":393,"test_setup_code":"","test_list":["Debug.Assert(MaxLengthList(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 0 }, new List\u003Cint\u003E { 1, 3 }, new List\u003Cint\u003E { 5, 7 }, new List\u003Cint\u003E { 9, 11 }, new List\u003Cint\u003E { 13, 15, 17 } }) == (3, new List\u003Cint\u003E { 13, 15, 17 }));","Debug.Assert(MaxLengthList(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 1, 2, 3, 4, 5 }, new List\u003Cint\u003E { 1, 2, 3, 4 }, new List\u003Cint\u003E { 1, 2, 3 }, new List\u003Cint\u003E { 1, 2 }, new List\u003Cint\u003E { 1 } }) == (5, new List\u003Cint\u003E { 1, 2, 3, 4, 5 }));","Debug.Assert(MaxLengthList(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 3, 4, 5 }, new List\u003Cint\u003E { 6, 7, 8, 9 }, new List\u003Cint\u003E { 10, 11, 12 } }) == (4, new List\u003Cint\u003E { 6, 7, 8, 9 }));"],"challenge_test_list":[]}
{"name":"distinct-tuple","description":"Check if elements in a tuple are distinct","text":"Write a function to check if given tuple is distinct or not.","code":"public static bool CheckDistinct(Tuple\u003Cint\u003E[] testTup)\n{\n    bool res = true;\n    HashSet\u003Cint\u003E temp = new HashSet\u003Cint\u003E();\n    foreach (var ele in testTup)\n    {\n        if (temp.Contains(ele.Item1))\n        {\n            res = false;\n            break;\n        }\n        temp.Add(ele.Item1);\n    }\n    return res;\n}","task_id":394,"test_setup_code":"","test_list":["Debug.Assert(CheckDistinct(new int[] { 1, 4, 5, 6, 1, 4 }) == false);","Debug.Assert(CheckDistinct(new int[] { 1, 4, 5, 6 }) == true);","Debug.Assert(CheckDistinct(new int[] { 2, 3, 4, 5, 6 }) == true);"],"challenge_test_list":[]}
{"name":"first-non-rep-char","description":"Find the first unique character in a string","text":"Write a C# function to find the first non-repeated character in a given string.","code":"public static char? FirstNonRepeatingCharacter(string str1) {\n    List\u003Cchar\u003E charOrder = new List\u003Cchar\u003E();\n    Dictionary\u003Cchar, int\u003E ctr = new Dictionary\u003Cchar, int\u003E();\n    foreach (char c in str1) {\n        if (ctr.ContainsKey(c)) {\n            ctr[c]\u002B\u002B;\n        } else {\n            ctr[c] = 1;\n            charOrder.Add(c);\n        }\n    }\n    foreach (char c in charOrder) {\n        if (ctr[c] == 1) {\n            return c;\n        }\n    }\n    return null;\n}","task_id":395,"test_setup_code":"","test_list":["Debug.Assert(FirstNonRepeatingCharacter(\u0022abcabc\u0022) == null);","Debug.Assert(FirstNonRepeatingCharacter(\u0022abc\u0022) == \u0022a\u0022);","Debug.Assert(FirstNonRepeatingCharacter(\u0022ababc\u0022) == \u0022c\u0022);"],"challenge_test_list":[]}
{"name":"check-start-end","description":"Check if string starts and ends with same character","text":"Write a function to check whether the given string starts and ends with the same character or not using regex.","code":"using System;\nusing System.Text.RegularExpressions;\n\npublic class Validator\n{\n    private static readonly string regex = @\u0022^[a-z]$|^([a-z]).*\\1$\u0022;\n    \n    public static string CheckChar(string input)\n    {\n        if (Regex.IsMatch(input, regex))\n        {\n            return \u0022Valid\u0022;\n        }\n        else\n        {\n            return \u0022Invalid\u0022;\n        }\n    }\n}","task_id":396,"test_setup_code":"","test_list":["Debug.Assert(CheckChar(\u0022abba\u0022) == \u0022Valid\u0022);","Debug.Assert(CheckChar(\u0022a\u0022) == \u0022Valid\u0022);","Debug.Assert(CheckChar(\u0022abcd\u0022) == \u0022Invalid\u0022);"],"challenge_test_list":[]}
{"name":"median-of-three","description":"Find the median of three given numbers","text":"Write a function to find the median of three specific numbers.","code":"public static int MedianNumbers(int a, int b, int c) {\n    int median;\n    if (a \u003E b) {\n        if (a \u003C c) {\n            median = a;\n        } else if (b \u003E c) {\n            median = b;\n        } else {\n            median = c;\n        }\n    } else {\n        if (a \u003E c) {\n            median = a;\n        } else if (b \u003C c) {\n            median = b;\n        } else {\n            median = c;\n        }\n    }\n    return median;\n}","task_id":397,"test_setup_code":"","test_list":["Debug.Assert(MedianNumbers(25, 55, 65) == 55.0);","Debug.Assert(MedianNumbers(20, 10, 30) == 20.0);","Debug.Assert(MedianNumbers(15, 45, 75) == 45.0);"],"challenge_test_list":[]}
{"name":"sum-of-digits","description":"Sum the digits of each number in a list","text":"Write a function to compute the sum of digits of each number of a given list.","code":"public int SumOfDigits(IEnumerable\u003Cint\u003E nums)\n{\n    return nums.Sum(n =\u003E n.ToString().Sum(el =\u003E char.IsDigit(el) ? int.Parse(el.ToString()) : 0));\n}","task_id":398,"test_setup_code":"","test_list":["Debug.Assert(SumOfDigits(new int[] { 10, 2, 56 }) == 14);","Debug.Assert(SumOfDigits(new object[][] { new object[] { 10, 20, 4, 5, \u0027b\u0027, 70, \u0027a\u0027 } }) == 19);","Debug.Assert(SumOfDigits(new int[] { 10, 20, -4, 5, -70 }) == 19);"],"challenge_test_list":[]}
{"name":"bitwise-xor-tuples","description":"Bitwise xor operation for given tuples","text":"Write a function to perform the mathematical bitwise xor operation across the given tuples.","code":"public static Tuple\u003Cint\u003E BitwiseXor(Tuple\u003Cint\u003E testTup1, Tuple\u003Cint\u003E testTup2) {\n    var res = new int[testTup1.Item1.Length];\n    for (int i = 0; i \u003C testTup1.Item1.Length; i\u002B\u002B) {\n        res[i] = testTup1.Item1[i] ^ testTup2.Item1[i];\n    }\n    return Tuple.Create(res);\n}","task_id":399,"test_setup_code":"","test_list":["Debug.Assert(BitwiseXor(new int[] { 10, 4, 6, 9 }, new int[] { 5, 2, 3, 3 }).SequenceEqual(new int[] { 15, 6, 5, 10 }));","Debug.Assert(BitwiseXor(new int[] { 11, 5, 7, 10 }, new int[] { 6, 3, 4, 4 }).SequenceEqual(new int[] { 13, 6, 3, 14 }));","Debug.Assert(BitwiseXor(new int[] { 12, 6, 8, 11 }, new int[] { 7, 4, 5, 6 }).SequenceEqual(new int[] { 11, 2, 13, 13 }));"],"challenge_test_list":[]}
{"name":"extract-tuple-freq","description":"Count unique tuple frequencies in a given list","text":"Write a function to extract the frequency of unique tuples in the given list order irrespective.","code":"public int ExtractFreq(List\u003CList\u003Cint\u003E\u003E testList) {\n    var res = testList.Select(sub =\u003E sub.OrderBy(x =\u003E x).ToArray()).Distinct().Count();\n    return res;\n}","task_id":400,"test_setup_code":"","test_list":["Debug.Assert(ExtractFreq(new (int, int)[] { (3, 4), (1, 2), (4, 3), (5, 6) }) == 3);","Debug.Assert(ExtractFreq(new (int, int)[] { (4, 15), (2, 3), (5, 4), (6, 7) }) == 4);","Debug.Assert(ExtractFreq(new Tuple\u003Cint, int\u003E[] { Tuple.Create(5, 16), Tuple.Create(2, 3), Tuple.Create(6, 5), Tuple.Create(6, 9) }) == 4);"],"challenge_test_list":[]}
{"name":"index-wise-addition","description":"Add elements of two nested tuples index wise","text":"Write a function to perform index wise addition of tuple elements in the given two nested tuples.","code":"Tuple\u003CTuple\u003Cint, int\u003E\u003E AddNestedTuples(Tuple\u003Cint, int\u003E[] testTup1, Tuple\u003Cint, int\u003E[] testTup2)  \n{  \n    var res = Tuple.Create(testTup1.Select((tup1, i) =\u003E Tuple.Create(tup1.Item1 \u002B testTup2[i].Item1, tup1.Item2 \u002B testTup2[i].Item2)).ToArray());  \n    return res;  \n}","task_id":401,"test_setup_code":"","test_list":["Debug.Assert(AddNestedTuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13)));","Debug.Assert(AddNestedTuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15)));","Debug.Assert(AddNestedTuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17)));"],"challenge_test_list":[]}
{"name":"ncr-mod-p","description":"Compute n choose r modulo p","text":"Write a function to compute the value of ncr%p.","code":"public static int NcrModp(int n, int r, int p) \n{ \n    int[] C = new int[r \u002B 1]; \n    C[0] = 1; \n    for (int i = 1; i \u003C= n; i\u002B\u002B) \n    { \n        for (int j = Math.Min(i, r); j \u003E 0; j--) \n        { \n            C[j] = (C[j] \u002B C[j - 1]) % p; \n        } \n    } \n    return C[r]; \n}","task_id":402,"test_setup_code":"","test_list":["Debug.Assert(NcrModp(10, 2, 13) == 6);","Debug.Assert(NcrModp(15, 12, 43) == 25);","Debug.Assert(NcrModp(17, 9, 18) == 10);"],"challenge_test_list":[]}
{"name":"url-validation-1","description":"Validate a URL using regex in a function","text":"Write a function to check if a url is valid or not using regex.","code":"public static bool IsValidURL(string str) \n{\n    string regex = @\u0022((http|https)://)(www\\.)?[a-zA-Z0-9@:%._\\\u002B~#?\u0026//=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%._\\\u002B~#?\u0026//=]*)\u0022;\n    Regex p = new Regex(regex);\n    if (str == null) \n    {\n        return false;\n    }\n    return p.IsMatch(str);\n}","task_id":403,"test_setup_code":"","test_list":["Debug.Assert(IsValidURL(\u0022https://www.google.com\u0022) == true);","Debug.Assert(IsValidURL(\u0022https:/www.gmail.com\u0022) == false);","Debug.Assert(IsValidURL(\u0022https:// www.redit.com\u0022) == false);"],"challenge_test_list":[]}
{"name":"min-of-two.py","description":"Find the minimum of two numbers in Python","text":"Write a C# function to find the minimum of two numbers.","code":"public int Minimum(int a, int b)   \n{   \n    if (a \u003C= b)   \n    {   \n        return a;   \n    }   \n    else   \n    {   \n        return b;   \n    }   \n}","task_id":404,"test_setup_code":"","test_list":["Debug.Assert(Minimum(1, 2) == 1);","Debug.Assert(Minimum(-5, -4) == -5);","Debug.Assert(Minimum(0, 0) == 0);"],"challenge_test_list":[]}
{"name":"check-element-in-tuple","description":"Check if an element is in a given tuple","text":"Write a function to check whether an element exists within a tuple.","code":"public bool CheckTuplex(Tuple[] tuplex, Tuple tuple1) \n{ \n    if (tuplex.Contains(tuple1)) \n    { \n        return true; \n    } \n    else \n    { \n        return false; \n    } \n}","task_id":405,"test_setup_code":"","test_list":["Debug.Assert(CheckTuplex((\u0022w\u0022, 3, \u0022r\u0022, \u0022e\u0022, \u0022s\u0022, \u0022o\u0022, \u0022u\u0022, \u0022r\u0022, \u0022c\u0022, \u0022e\u0022), \u0027r\u0027) == true);","Debug.Assert(CheckTuplex((\u0022w\u0022, 3, \u0022r\u0022, \u0022e\u0022, \u0022s\u0022, \u0022o\u0022, \u0022u\u0022, \u0022r\u0022, \u0022c\u0022, \u0022e\u0022), \u00275\u0027) == false);","Debug.Assert(CheckTuplex((\u0022w\u0022, 3, \u0022r\u0022, \u0022e\u0022, \u0022s\u0022, \u0022o\u0022, \u0022u\u0022, \u0022r\u0022, \u0022c\u0022, \u0022e\u0022), 3) == true);"],"challenge_test_list":[]}
{"name":"parity-finder","description":"Determine if a number is odd or even","text":"Write a C# function to find the parity of a given number.","code":"public string FindParity(int x) \n{ \n    int y = x ^ (x \u003E\u003E 1); \n    y = y ^ (y \u003E\u003E 2); \n    y = y ^ (y \u003E\u003E 4); \n    y = y ^ (y \u003E\u003E 8); \n    y = y ^ (y \u003E\u003E 16); \n    if ((y \u0026 1) != 0) \n    { \n        return \u0022Odd Parity\u0022; \n    } \n    return \u0022Even Parity\u0022; \n}","task_id":406,"test_setup_code":"","test_list":["Debug.Assert(FindParity(12) == \u0022Even Parity\u0022);","Debug.Assert(FindParity(7) == \u0022Odd Parity\u0022);","Debug.Assert(FindParity(10) == \u0022Even Parity\u0022);"],"challenge_test_list":[]}
{"name":"next-bigger-num","description":"Create next bigger number from digits rearrangement","text":"Write a function to create the next bigger number by rearranging the digits of a given number.","code":"public int? RearrangeBigger(int n) \n{\n    char[] nums = n.ToString().ToCharArray();\n    for (int i = nums.Length - 2; i \u003E= 0; i--)\n    {\n        if (nums[i] \u003C nums[i \u002B 1])\n        {\n            char[] z = nums.Skip(i).ToArray();\n            char y = z.Where(x =\u003E x \u003E z[0]).Min();\n            List\u003Cchar\u003E zList = z.ToList();\n            zList.Remove(y);\n            zList.Sort();\n            List\u003Cchar\u003E result = new List\u003Cchar\u003E(nums.Take(i));\n            result.Add(y);\n            result.AddRange(zList);\n            return int.Parse(new string(result.ToArray()));\n        }\n    }\n    return null;\n}","task_id":407,"test_setup_code":"","test_list":["Debug.Assert(RearrangeBigger(12) == 21);","Debug.Assert(RearrangeBigger(10) == false);","Debug.Assert(RearrangeBigger(102) == 120);"],"challenge_test_list":[]}
{"name":"find-k-pairs","description":"Find k pairs from two arrays of elements","text":"Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.","code":"using System;\nusing System.Collections.Generic;\n\npublic class Solution {\n    public IList\u003CIList\u003Cint\u003E\u003E KSmallestPairs(int[] nums1, int[] nums2, int k) {\n        var queue = new SortedSet\u003C(int sum, int i, int j)\u003E();\n        void Push(int i, int j) {\n            if (i \u003C nums1.Length \u0026\u0026 j \u003C nums2.Length) {\n                queue.Add((nums1[i] \u002B nums2[j], i, j));\n            }\n        }\n        \n        Push(0, 0);\n        var pairs = new List\u003CIList\u003Cint\u003E\u003E();\n        \n        while (queue.Count \u003E 0 \u0026\u0026 pairs.Count \u003C k) {\n            var (sum, i, j) = queue.Min;\n            queue.Remove(queue.Min);\n            pairs.Add(new List\u003Cint\u003E { nums1[i], nums2[j] });\n            Push(i, j \u002B 1);\n            if (j == 0) {\n                Push(i \u002B 1, 0);\n            }\n        }\n        \n        return pairs;\n    }\n}","task_id":408,"test_setup_code":"","test_list":["Debug.Assert(Push(new int[] { 1, 3, 7 }, new int[] { 2, 4, 6 }, 2).SequenceEqual(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 1, 2 }, new List\u003Cint\u003E { 1, 4 } }));","Debug.Assert(Push(new int[] { 1, 3, 7 }, new int[] { 2, 4, 6 }, 1).SequenceEqual(new int[][] { new int[] { 1, 2 } }));","Debug.Assert(Push(new int[] { 1, 3, 7 }, new int[] { 2, 4, 6 }, 7).SequenceEqual(new List\u003Cint[]\u003E { new int[] { 1, 2 }, new int[] { 1, 4 }, new int[] { 3, 2 }, new int[] { 1, 6 }, new int[] { 3, 4 }, new int[] { 3, 6 }, new int[] { 7, 2 } }));"],"challenge_test_list":[]}
{"name":"min-product-tuples","description":"Find minimum product from tuple pairs in a list","text":"Write a function to find the minimum product from the pairs of tuples within a given list.","code":"public static int MinProductTuple(List\u003CTuple\u003Cint, int\u003E\u003E list1) {\n    int resultMin = list1.Select(tuple =\u003E Math.Abs(tuple.Item1 * tuple.Item2)).Min();\n    return resultMin;\n}","task_id":409,"test_setup_code":"","test_list":["Debug.Assert(MinProductTuple(new (int, int)[] { (2, 7), (2, 6), (1, 8), (4, 9) }) == 8);","Debug.Assert(MinProductTuple(new Tuple\u003Cint, int\u003E[] { Tuple.Create(10, 20), Tuple.Create(15, 2), Tuple.Create(5, 10) }) == 30);","Debug.Assert(MinProductTuple(new (int, int)[] { (11, 44), (10, 15), (20, 5), (12, 9) }) == 100);"],"challenge_test_list":[]}
{"name":"find-min-value","description":"Find the minimum in a heterogeneous list","text":"Write a function to find the minimum value in a given heterogeneous list.","code":"public int MinVal(IEnumerable\u003Cobject\u003E listval)  \n{  \n    int minVal = listval.OfType\u003Cint\u003E().Min();  \n    return minVal;  \n}","task_id":410,"test_setup_code":"","test_list":["Debug.Assert(MinVal(new object[] { \u0022Python\u0022, 3, 2, 4, 5, \u0022version\u0022 }) == 2);","Debug.Assert(MinVal(new object[] { \u0022Python\u0022, 15, 20, 25 }) == 15);","Debug.Assert(MinVal(new object[] { \u0022Python\u0022, 30, 20, 40, 50, \u0022version\u0022 }) == 20);"],"challenge_test_list":[]}
{"name":"snake-to-camel","description":"Convert snake case to camel case using regex","text":"Write a function to convert the given snake case string to camel case string by using regex.","code":"public string SnakeToCamel(string word) {\n    return string.Concat(word.Split(\u0027_\u0027).Select(x =\u003E char.ToUpper(x[0]) \u002B x.Substring(1)));\n}","task_id":411,"test_setup_code":"","test_list":["Debug.Assert(SnakeToCamel(\u0022android_tv\u0022) == \u0022AndroidTv\u0022);","Debug.Assert(SnakeToCamel(\u0022google_pixel\u0022) == \u0022GooglePixel\u0022);","Debug.Assert(SnakeToCamel(\u0022apple_watch\u0022) == \u0022AppleWatch\u0022);"],"challenge_test_list":[]}
{"name":"remove-odd-numbers","description":"Remove odd numbers from a list in Python","text":"Write a C# function to remove odd numbers from a given list.","code":"public List\u003Cint\u003E RemoveOdd(List\u003Cint\u003E l) {\n    for (int i = l.Count - 1; i \u003E= 0; i--) {\n        if (l[i] % 2 != 0) {\n            l.RemoveAt(i);\n        }\n    }\n    return l;\n}","task_id":412,"test_setup_code":"","test_list":["Debug.Assert(RemoveOdd(new int[] { 1, 2, 3 }).SequenceEqual(new int[] { 2 }));","Debug.Assert(RemoveOdd(new List\u003Cint\u003E { 2, 4, 6 }).SequenceEqual(new List\u003Cint\u003E { 2, 4, 6 }));","Debug.Assert(RemoveOdd(new List\u003Cint\u003E { 10, 20, 3 }).SequenceEqual(new List\u003Cint\u003E { 10, 20 }));"],"challenge_test_list":[]}
{"name":"extract-nth-tuple","description":"Extract nth element from a list of tuples","text":"Write a function to extract the nth element from a given list of tuples.","code":"public List\u003CT\u003E ExtractNthElement\u003CT\u003E(List\u003CList\u003CT\u003E\u003E list1, int n)\r\n{\r\n    return list1.Select(x =\u003E x[n]).ToList();\r\n}","task_id":413,"test_setup_code":"","test_list":["Debug.Assert(ExtractNthElement(new Tuple\u003Cstring, int, int\u003E[] { Tuple.Create(\u0022Greyson Fulton\u0022, 98, 99), Tuple.Create(\u0022Brady Kent\u0022, 97, 96), Tuple.Create(\u0022Wyatt Knott\u0022, 91, 94), Tuple.Create(\u0022Beau Turnbull\u0022, 94, 98) }, 0).SequenceEqual(new List\u003Cstring\u003E { \u0022Greyson Fulton\u0022, \u0022Brady Kent\u0022, \u0022Wyatt Knott\u0022, \u0022Beau Turnbull\u0022 }));","Debug.Assert(ExtractNthElement(new[] { (\u0022Greyson Fulton\u0022, 98, 99), (\u0022Brady Kent\u0022, 97, 96), (\u0022Wyatt Knott\u0022, 91, 94), (\u0022Beau Turnbull\u0022, 94, 98) }, 2).SequenceEqual(new[] { 99, 96, 94, 98 }));","Debug.Assert(ExtractNthElement(new Tuple\u003Cstring, int, int\u003E[] { \n    Tuple.Create(\u0022Greyson Fulton\u0022, 98, 99), \n    Tuple.Create(\u0022Brady Kent\u0022, 97, 96), \n    Tuple.Create(\u0022Wyatt Knott\u0022, 91, 94), \n    Tuple.Create(\u0022Beau Turnbull\u0022, 94, 98) }, 1).SequenceEqual(new int[] { 98, 97, 91, 94 }));"],"challenge_test_list":[]}
{"name":"check-value-in-seq","description":"Check if a value exists in a sequence","text":"Write a C# function to check whether the value exists in a sequence or not.","code":"public int Overlapping(List\u003Cint\u003E list1, List\u003Cint\u003E list2)  \n{  \n    int c = 0;  \n    int d = 0;  \n    foreach (var i in list1)  \n    {  \n        c\u002B\u002B;  \n    }  \n    foreach (var i in list2)  \n    {  \n        d\u002B\u002B;  \n    }  \n    for (int i = 0; i \u003C c; i\u002B\u002B)  \n    {  \n        for (int j = 0; j \u003C d; j\u002B\u002B)  \n        {  \n            if (list1[i] == list2[j])  \n            {  \n                return 1;  \n            }  \n        }  \n    }  \n    return 0;  \n}","task_id":414,"test_setup_code":"","test_list":["Debug.Assert(Overlapping(new int[] { 1, 2, 3, 4, 5 }, new int[] { 6, 7, 8, 9 }) == false);","Debug.Assert(Overlapping(new int[] { 1, 2, 3 }, new int[] { 4, 5, 6 }) == false);","Debug.Assert(Overlapping(new int[] { 1, 4, 5 }, new int[] { 1, 4, 5 }) == true);"],"challenge_test_list":[]}
{"name":"highest-product-pair","description":"Find the pair with the highest product in an array","text":"Write a C# function to find a pair with highest product from a given array of integers.","code":"public (int, int) Max_Product(int[] arr) \n{ \n    int arr_len = arr.Length; \n    if (arr_len \u003C 2) \n    { \n        throw new InvalidOperationException(\u0022No pairs exist\u0022); \n    } \n    int x = arr[0]; \n    int y = arr[1]; \n    for (int i = 0; i \u003C arr_len; i\u002B\u002B) \n    { \n        for (int j = i \u002B 1; j \u003C arr_len; j\u002B\u002B) \n        { \n            if (arr[i] * arr[j] \u003E x * y) \n            { \n                x = arr[i]; \n                y = arr[j]; \n            } \n        } \n    } \n    return (x, y); \n}","task_id":415,"test_setup_code":"","test_list":["Debug.Assert(Max_Product(new int[] { 1, 2, 3, 4, 7, 0, 8, 4 }) == (7, 8));","Debug.Assert(Max_Product(new int[] { 0, -1, -2, -4, 5, 0, -6 }) == (-4, -6));","Debug.Assert(Max_Product(new int[] { 1, 2, 3 }).Equals((2, 3)));"],"challenge_test_list":[]}
{"name":"max-sum-parts","description":"Maximize sum by recursively dividing a number","text":"Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.","code":"const int MAX = 1000000;\n\npublic int BreakSum(int n) \n{ \n    int[] dp = new int[n \u002B 1]; \n    dp[0] = 0;\n    dp[1] = 1;\n    \n    for (int i = 2; i \u003C= n; i\u002B\u002B) \n    { \n        dp[i] = Math.Max(dp[i / 2] \u002B dp[i / 3] \u002B dp[i / 4], i); \n    } \n    \n    return dp[n];\n}","task_id":416,"test_setup_code":"","test_list":["Debug.Assert(BreakSum(12) == 13);","Debug.Assert(BreakSum(24) == 27);","Debug.Assert(BreakSum(23) == 23);"],"challenge_test_list":[]}
{"name":"find-first-element","description":"Find common first element in list of tuples","text":"Write a function to find common first element in given list of tuple.","code":"public List\u003CTuple\u003E GroupTuples(List\u003CTuple\u003E input)\n{\n    Dictionary\u003Cobject, List\u003Cobject\u003E\u003E outDict = new Dictionary\u003Cobject, List\u003Cobject\u003E\u003E();\n    foreach (var elem in input)\n    {\n        try\n        {\n            outDict[elem.Item1].AddRange(elem.Item2.ToList());\n        }\n        catch (KeyNotFoundException)\n        {\n            outDict[elem.Item1] = new List\u003Cobject\u003E(elem.ToList());\n        }\n    }\n    return outDict.Values.Select(values =\u003E Tuple.Create(values.ToArray())).ToList();\n}","task_id":417,"test_setup_code":"","test_list":["Debug.Assert(GroupTuples(new List\u003CTuple\u003Cstring, string\u003E\u003E { Tuple.Create(\u0022x\u0022, \u0022y\u0022), Tuple.Create(\u0022x\u0022, \u0022z\u0022), Tuple.Create(\u0022w\u0022, \u0022t\u0022) }).SequenceEqual(new List\u003CTuple\u003Cstring, string, string\u003E\u003E { Tuple.Create(\u0022x\u0022, \u0022y\u0022, \u0022z\u0022), Tuple.Create(\u0022w\u0022, \u0022t\u0022) }));","Debug.Assert(GroupTuples(new List\u003CValueTuple\u003Cstring, string\u003E\u003E { (\u0022a\u0022, \u0022b\u0022), (\u0022a\u0022, \u0022c\u0022), (\u0022d\u0022, \u0022e\u0022) }).SequenceEqual(new List\u003CValueTuple\u003Cstring, string\u003E\u003E { (\u0022a\u0022, \u0022b\u0022, \u0022c\u0022), (\u0022d\u0022, \u0022e\u0022) }));","Debug.Assert(GroupTuples(new (string, string)[] { (\u0022f\u0022, \u0022g\u0022), (\u0022f\u0022, \u0022g\u0022), (\u0022h\u0022, \u0022i\u0022) }).SequenceEqual(new (string, string, string)[] { (\u0022f\u0022, \u0022g\u0022, \u0022g\u0022), (\u0022h\u0022, \u0022i\u0022) }));"],"challenge_test_list":[]}
{"name":"max-length-sublist","description":"Find the longest sublist in a Python list","text":"Write a C# function to find the sublist having maximum length.","code":"public int Find_Max(List\u003Cint\u003E lst) \n{ \n    int maxList = lst.Max(); \n    return maxList; \n}","task_id":418,"test_setup_code":"","test_list":["Debug.Assert(Find_Max(new string[][] { new string[] { \u0022A\u0022 }, new string[] { \u0022A\u0022, \u0022B\u0022 }, new string[] { \u0022A\u0022, \u0022B\u0022, \u0022C\u0022 } }).SequenceEqual(new string[] { \u0022A\u0022, \u0022B\u0022, \u0022C\u0022 }));","Debug.Assert(Find_Max(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 1 }, new List\u003Cint\u003E { 1, 2 }, new List\u003Cint\u003E { 1, 2, 3 } }).SequenceEqual(new List\u003Cint\u003E { 1, 2, 3 }));","Debug.Assert(Find_Max(new int[][] { new int[] { 1, 1 }, new int[] { 1, 2, 3 }, new int[] { 1, 5, 6, 1 } }).SequenceEqual(new int[] { 1, 5, 6, 1 }));"],"challenge_test_list":[]}
{"name":"round-and-multiply","description":"Round list numbers and print total times length","text":"Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.","code":"public static double RoundAndSum(List\u003Cdouble\u003E list1)\n{\n    int length = list1.Count;\n    double roundAndSum = list1.Sum(x =\u003E Math.Round(x)) * length;\n    return roundAndSum;\n}","task_id":419,"test_setup_code":"","test_list":["Debug.Assert(RoundAndSum(new double[] { 22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50 }) == 243);","Debug.Assert(RoundAndSum(new double[] { 5, 2, 9, 24.3, 29 }) == 345);","Debug.Assert(RoundAndSum(new double[] { 25.0, 56.7, 89.2 }) == 513);"],"challenge_test_list":[]}
{"name":"cube-sum-even-n","description":"Cube sum of first n even natural numbers","text":"Write a C# function to find the cube sum of first n even natural numbers.","code":"public int CubeSum(int n) \n{ \n    int sum = 0; \n    for (int i = 1; i \u003C= n; i\u002B\u002B) \n    { \n        sum \u002B= (2 * i) * (2 * i) * (2 * i); \n    } \n    return sum; \n}","task_id":420,"test_setup_code":"","test_list":["Debug.Assert(CubeSum(2) == 72);","Debug.Assert(CubeSum(3) == 288);","Debug.Assert(CubeSum(4) == 800);"],"challenge_test_list":[]}
{"name":"tuple-concat-func","description":"Concatenate tuple elements using a specified delimiter","text":"Write a function to concatenate each element of tuple by the delimiter.","code":"public static string ConcatenateTuple(Tuple\u003Cstring, string\u003E testTup)\n{\n    string delim = \u0022-\u0022;\n    string res = string.Join(delim, testTup);\n    res = res.Substring(0, res.Length - delim.Length);\n    return res;\n}","task_id":421,"test_setup_code":"","test_list":["Debug.Assert(ConcatenateTuple((\u0022ID\u0022, \u0022is\u0022, 4, \u0022UTS\u0022)) == \u0022ID-is-4-UTS\u0022);","Debug.Assert(ConcatenateTuple((\u0022QWE\u0022, \u0022is\u0022, 4, \u0022RTY\u0022)) == \u0022QWE-is-4-RTY\u0022);","Debug.Assert(ConcatenateTuple((\u0022ZEN\u0022, \u0022is\u0022, 4, \u0022OP\u0022)) == \u0022ZEN-is-4-OP\u0022);\n\npublic string ConcatenateTuple((string, string, int, string) tuple)\n{\n    return string.Join(\u0022-\u0022, tuple.Item1, tuple.Item2, tuple.Item3.ToString(), tuple.Item4);\n}"],"challenge_test_list":[]}
{"name":"avg-cubes-nat-numbers","description":"Calculate the average of cubes of first n numbers","text":"Write a C# function to find the average of cubes of first n natural numbers.","code":"public double FindAverageOfCube(int n)  \n{  \n    double sum = 0;  \n    for (int i = 1; i \u003C= n; i\u002B\u002B)  \n    {  \n        sum \u002B= i * i * i;  \n    }  \n    return Math.Round(sum / n, 6);  \n}","task_id":422,"test_setup_code":"","test_list":["Debug.Assert(FindAverageOfCube(2) == 4.5);","Debug.Assert(FindAverageOfCube(3) == 12);","Debug.Assert(FindAverageOfCube(1) == 1);"],"challenge_test_list":[]}
{"name":"gold-mine-solver","description":"Function to find max gold in mine path","text":"Write a function to solve gold mine problem.","code":"public int GetMaxGold(int[][] gold, int m, int n) \n{\n    int[][] goldTable = new int[m][];\n    for (int j = 0; j \u003C m; j\u002B\u002B)\n    {\n        goldTable[j] = new int[n];\n    }\n\n    for (int col = n - 1; col \u003E= 0; col--)\n    {\n        for (int row = 0; row \u003C m; row\u002B\u002B)\n        {\n            int right = (col == n - 1) ? 0 : goldTable[row][col \u002B 1];\n            int right_up = (row == 0 || col == n - 1) ? 0 : goldTable[row - 1][col \u002B 1];\n            int right_down = (row == m - 1 || col == n - 1) ? 0 : goldTable[row \u002B 1][col \u002B 1];\n            goldTable[row][col] = gold[row][col] \u002B Math.Max(right, Math.Max(right_up, right_down));\n        }\n    }\n\n    int res = goldTable[0][0];\n    for (int i = 1; i \u003C m; i\u002B\u002B)\n    {\n        res = Math.Max(res, goldTable[i][0]);\n    }\n    return res;\n}","task_id":423,"test_setup_code":"","test_list":["Debug.Assert(GetMaxGold(new int[][] { new int[] { 1, 3, 1, 5 }, new int[] { 2, 2, 4, 1 }, new int[] { 5, 0, 2, 3 }, new int[] { 0, 6, 1, 2 } }, 4, 4) == 16);","Debug.Assert(GetMaxGold(new int[,] {{10,20},{30,40}}, 2, 2) == 70);","Debug.Assert(GetMaxGold(new int[,] {{4,9},{3,7}}, 2, 2) == 13);"],"challenge_test_list":[]}
{"name":"rear-index-tuple","description":"Extract last character from each string in a tuple","text":"Write a function to extract only the rear index element of each string in the given tuple.","code":"public List\u003Cdynamic\u003E ExtractRear(Tuple\u003Cdynamic, dynamic\u003E[] testTuple) \n{\n    var res = new List\u003Cdynamic\u003E();\n    foreach (var sub in testTuple)\n    {\n        res.Add(sub.Item2);\n    }\n    return res;\n}","task_id":424,"test_setup_code":"","test_list":["Debug.Assert(ExtractRear((\u0022Mers\u0022, \u0022for\u0022, \u0022Vers\u0022)).SequenceEqual(new List\u003Cstring\u003E { \u0022s\u0022, \u0022r\u0022, \u0022s\u0022 }));","Debug.Assert(ExtractRear((\u0022Avenge\u0022, \u0022for\u0022, \u0022People\u0022)).SequenceEqual(new List\u003Cchar\u003E { \u0027e\u0027, \u0027r\u0027, \u0027e\u0027 }));","Debug.Assert(ExtractRear(new Tuple\u003Cstring, string, string\u003E(\u0022Gotta\u0022, \u0022get\u0022, \u0022go\u0022)).SequenceEqual(new List\u003Cchar\u003E { \u0027a\u0027, \u0027t\u0027, \u0027o\u0027 }));"],"challenge_test_list":[]}
{"name":"count-sublists","description":"Count sublists with a specified element present","text":"Write a function to count the number of sublists containing a particular element.","code":"public int CountElementInList(List\u003Cstring\u003E list1, string x) \n{ \n    int ctr = 0; \n    for (int i = 0; i \u003C list1.Count; i\u002B\u002B) \n    { \n        if (list1[i].Contains(x)) \n        { \n            ctr\u002B\u002B; \n        } \n    } \n    return ctr; \n}","task_id":425,"test_setup_code":"","test_list":["Debug.Assert(CountElementInList(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 1, 3 }, new List\u003Cint\u003E { 5, 7 }, new List\u003Cint\u003E { 1, 11 }, new List\u003Cint\u003E { 1, 15, 7 } }, 1) == 3);","Debug.Assert(CountElementInList(new List\u003CList\u003Cstring\u003E\u003E { new List\u003Cstring\u003E { \u0022A\u0022, \u0022B\u0022 }, new List\u003Cstring\u003E { \u0022A\u0022, \u0022C\u0022 }, new List\u003Cstring\u003E { \u0022A\u0022, \u0022D\u0022, \u0022E\u0022 }, new List\u003Cstring\u003E { \u0022B\u0022, \u0022C\u0022, \u0022D\u0022 } }, \u0022A\u0022) == 3);","Debug.Assert(CountElementInList(new List\u003CList\u003Cstring\u003E\u003E { new List\u003Cstring\u003E { \u0022A\u0022, \u0022B\u0022 }, new List\u003Cstring\u003E { \u0022A\u0022, \u0022C\u0022 }, new List\u003Cstring\u003E { \u0022A\u0022, \u0022D\u0022, \u0022E\u0022 }, new List\u003Cstring\u003E { \u0022B\u0022, \u0022C\u0022, \u0022D\u0022 } }, \u0022E\u0022) == 1);"],"challenge_test_list":[]}
{"name":"filter-odd-numbers","description":"Filter odd numbers with a lambda function","text":"Write a function to filter odd numbers using lambda function.","code":"public List\u003Cint\u003E FilterOddNumbers(List\u003Cint\u003E nums)\n{\n    var oddNums = nums.Where(x =\u003E x % 2 != 0).ToList();\n    return oddNums;\n}","task_id":426,"test_setup_code":"","test_list":["Debug.Assert(FilterOddNumbers(new List\u003Cint\u003E { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }).SequenceEqual(new List\u003Cint\u003E { 1, 3, 5, 7, 9 }));","Debug.Assert(FilterOddNumbers(new List\u003Cint\u003E { 10, 20, 45, 67, 84, 93 }).SequenceEqual(new List\u003Cint\u003E { 45, 67, 93 }));","Debug.Assert(FilterOddNumbers(new int[] { 5, 7, 9, 8, 6, 4, 3 }).SequenceEqual(new int[] { 5, 7, 9, 3 }));"],"challenge_test_list":[]}
{"name":"date-converter","description":"Convert date format from yyyy-mm-dd to dd-mm-yyyy","text":"Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.","code":"using System.Text.RegularExpressions;\n\npublic string ChangeDateFormat(string dt)\n{\n    return Regex.Replace(dt, @\u0022(\\d{4})-(\\d{1,2})-(\\d{1,2})\u0022, \u0022$3-$2-$1\u0022);\n}","task_id":427,"test_setup_code":"","test_list":["Debug.Assert(ChangeDateFormat(\u00222026-01-02\u0022) == \u002202-01-2026\u0022);","Debug.Assert(ChangeDateFormat(\u00222020-11-13\u0022) == \u002213-11-2020\u0022);","Debug.Assert(ChangeDateFormat(\u00222021-04-26\u0022) == \u002226-04-2021\u0022);"],"challenge_test_list":[]}
{"name":"shell-sort-array","description":"Sort an array using the shell sort algorithm","text":"Write a function to sort the given array by using shell sort.","code":"public List\u003Cint\u003E ShellSort(List\u003Cint\u003E myList)\n{\n    int gap = myList.Count / 2;\n    while (gap \u003E 0)\n    {\n        for (int i = gap; i \u003C myList.Count; i\u002B\u002B)\n        {\n            int currentItem = myList[i];\n            int j = i;\n            while (j \u003E= gap \u0026\u0026 myList[j - gap] \u003E currentItem)\n            {\n                myList[j] = myList[j - gap];\n                j -= gap;\n            }\n            myList[j] = currentItem;\n        }\n        gap /= 2;\n    }\n\n    return myList;\n}","task_id":428,"test_setup_code":"","test_list":["Debug.Assert(ShellSort(new int[] { 12, 23, 4, 5, 3, 2, 12, 81, 56, 95 }).SequenceEqual(new int[] { 2, 3, 4, 5, 12, 12, 23, 56, 81, 95 }));","Debug.Assert(ShellSort(new int[] { 24, 22, 39, 34, 87, 73, 68 }).SequenceEqual(new int[] { 22, 24, 34, 39, 68, 73, 87 }));\n\npublic static int[] ShellSort(int[] array) {\n    int n = array.Length;\n    int gap = n / 2;\n\n    while (gap \u003E 0) {\n        for (int i = gap; i \u003C n; i\u002B\u002B) {\n            int temp = array[i];\n            int j = i;\n\n            while (j \u003E= gap \u0026\u0026 array[j - gap] \u003E temp) {\n                array[j] = array[j - gap];\n                j -= gap;\n            }\n            array[j] = temp;\n        }\n        gap /= 2;\n    }\n    return array;\n}","Debug.Assert(ShellSort(new int[] { 32, 30, 16, 96, 82, 83, 74 }).SequenceEqual(new int[] { 16, 30, 32, 74, 82, 83, 96 }));"],"challenge_test_list":[]}
{"name":"extract-elems","description":"Extract elementwise tuples from two given tuples","text":"Write a function to extract the elementwise and tuples from the given two tuples.","code":"public static Tuple\u003Cint, int\u003E AndTuples(Tuple\u003Cint, int\u003E testTup1, Tuple\u003Cint, int\u003E testTup2)\n{\n    var res = Tuple.Create(testTup1.Item1 \u0026 testTup2.Item1, testTup1.Item2 \u0026 testTup2.Item2);\n    return res;\n}","task_id":429,"test_setup_code":"","test_list":["Debug.Assert(AndTuples((10, 4, 6, 9), (5, 2, 3, 3)).Equals((0, 0, 2, 1)));","Debug.Assert(AndTuples(new Tuple\u003Cint, int, int, int\u003E(1, 2, 3, 4), new Tuple\u003Cint, int, int, int\u003E(5, 6, 7, 8)).Equals(new Tuple\u003Cint, int, int, int\u003E(1, 2, 3, 0)));","Debug.Assert(AndTuples((8, 9, 11, 12), (7, 13, 14, 17)).Equals((0, 9, 10, 0)));"],"challenge_test_list":[]}
{"name":"directrix-parabola","description":"Find the directrix of a given parabola","text":"Write a function to find the directrix of a parabola.","code":"public int ParabolaDirectrix(int a, int b, int c) \n{ \n    int directrix = c - ((b * b) \u002B 1) * 4 * a; \n    return directrix; \n}","task_id":430,"test_setup_code":"","test_list":["Debug.Assert(ParabolaDirectrix(5, 3, 2) == -198);","Debug.Assert(ParabolaDirectrix(9, 8, 4) == -2336);","Debug.Assert(ParabolaDirectrix(2, 4, 6) == -130);"],"challenge_test_list":[]}
{"name":"common-elements","description":"Check for common elements in two lists","text":"Write a function that takes two lists and returns true if they have at least one common element.","code":"bool CommonElement(List\u003Cint\u003E list1, List\u003Cint\u003E list2) {\n    bool result = false;\n    foreach (int x in list1) {\n        foreach (int y in list2) {\n            if (x == y) {\n                result = true;\n                return result;\n            }\n        }\n    }\n    return result;\n}","task_id":431,"test_setup_code":"","test_list":["Debug.Assert(CommonElement(new int[] { 1, 2, 3, 4, 5 }, new int[] { 5, 6, 7, 8, 9 }) == true);","Debug.Assert(CommonElement(new int[] { 1, 2, 3, 4, 5 }, new int[] { 6, 7, 8, 9 }) == null);","Debug.Assert(CommonElement(new string[] { \u0022a\u0022, \u0022b\u0022, \u0022c\u0022 }, new string[] { \u0022d\u0022, \u0022b\u0022, \u0022e\u0022}) == true);"],"challenge_test_list":[]}
{"name":"find-median-trap","description":"Calculate the median of a trapezium shape","text":"Write a function to find the median of a trapezium.","code":"public double MedianTrapezium(double base1, double base2, double height)  \n{  \n    double median = 0.5 * (base1 \u002B base2);  \n    return median;  \n}","task_id":432,"test_setup_code":"","test_list":["Debug.Assert(MedianTrapezium(15, 25, 35) == 20);","Debug.Assert(MedianTrapezium(10, 20, 30) == 15);","Debug.Assert(MedianTrapezium(6, 9, 4) == 7.5);"],"challenge_test_list":[]}
{"name":"check-number-against-array","description":"Check if a number exceeds array elements","text":"Write a function to check whether the entered number is greater than the elements of the given array.","code":"public string CheckGreater(List\u003Cint\u003E arr, int number)\n{\n    arr.Sort();\n    if (number \u003E arr[arr.Count - 1])\n    {\n        return \u0022Yes, the entered number is greater than those in the array\u0022;\n    }\n    else\n    {\n        return \u0022No, entered number is less than those in the array\u0022;\n    }\n}","task_id":433,"test_setup_code":"","test_list":["Debug.Assert(CheckGreater(new int[] { 1, 2, 3, 4, 5 }, 4) == \u0022No, entered number is less than those in the array\u0022);","CheckGreater(new int[] { 2, 3, 4, 5, 6 }, 8);  \nDebug.Assert(CheckGreater(new int[] { 2, 3, 4, 5, 6 }, 8) == \u0022Yes, the entered number is greater than those in the array\u0022);","Debug.Assert(CheckGreater(new int[] { 9, 7, 4, 8, 6, 1 }, 11) == \u0022Yes, the entered number is greater than those in the array\u0022);\n\npublic static string CheckGreater(int[] numbers, int numberToCheck)\n{\n    foreach (var number in numbers)\n    {\n        if (number \u003E= numberToCheck)\n        {\n            return \u0022No, the entered number is not greater than those in the array\u0022;\n        }\n    }\n    return \u0022Yes, the entered number is greater than those in the array\u0022;\n}"],"challenge_test_list":[]}
{"name":"a-bb-matcher","description":"Function to match \u0027a\u0027 followed by one or more \u0027b\u0027s","text":"Write a function that matches a string that has an a followed by one or more b\u0027s.","code":"using System.Text.RegularExpressions;\n\npublic class Matcher\n{\n    public string TextMatchOne(string text)\n    {\n        string patterns = \u0022ab\u002B?\u0022;\n        if (Regex.IsMatch(text, patterns))\n        {\n            return \u0022Found a match!\u0022;\n        }\n        else\n        {\n            return \u0022Not matched!\u0022;\n        }\n    }\n}","task_id":434,"test_setup_code":"","test_list":["Debug.Assert(TextMatchOne(\u0022ac\u0022) == \u0022Not matched!\u0022);","Debug.Assert(TextMatchOne(\u0022dc\u0022) == \u0022Not matched!\u0022);","Debug.Assert(TextMatchOne(\u0022abba\u0022) == \u0022Found a match!\u0022);"],"challenge_test_list":[]}
{"name":"last-digit-finder","description":"Find the last digit of a given number in Python","text":"Write a C# function to find the last digit of a given number.","code":"public int Last_Digit(int n) \n{\n    return n % 10; \n}","task_id":435,"test_setup_code":"","test_list":["Debug.Assert(Last_Digit(123) == 3);","Debug.Assert(Last_Digit(25) == 5);","Debug.Assert(Last_Digit(30) == 0);"],"challenge_test_list":[]}
{"name":"print-negative-nums","description":"Print negative numbers from a list in Python","text":"Write a C# function to print negative numbers in a list.","code":"public int NegNos(List\u003Cint\u003E list1) {\n    foreach (int num in list1) {\n        if (num \u003C 0) {\n            return num;\n        }\n    }\n    return 0; // or throw an exception if no negative numbers are found\n}","task_id":436,"test_setup_code":"","test_list":["Debug.Assert(NegNos(new int[] { -1, 4, 5, -6 }) == new int[] { -1, -6 });\n\npublic int[] NegNos(int[] numbers) {\n    return numbers.Where(n =\u003E n \u003C 0).ToArray();\n}","Debug.Assert(NegNos(new int[] { -1, -2, 3, 4 }).SequenceEqual(new int[] { -1, -2 }));\n\npublic static IEnumerable\u003Cint\u003E NegNos(int[] numbers)\n{\n    return numbers.Where(n =\u003E n \u003C 0);\n}","Debug.Assert(NegNos(new int[] {-7, -6, 8, 9}).SequenceEqual(new int[] {-7, -6}));"],"challenge_test_list":[]}
{"name":"remove-odd-chars","description":"Remove odd-indexed characters from a string","text":"Write a function to remove odd characters in a string.","code":"public string RemoveOdd(string str1)\n{\n    string str2 = \u0022\u0022;\n    for (int i = 1; i \u003C= str1.Length; i\u002B\u002B)\n    {\n        if (i % 2 == 0)\n        {\n            str2 \u002B= str1[i - 1];\n        }\n    }\n    return str2;\n}","task_id":437,"test_setup_code":"","test_list":["Debug.Assert(RemoveOdd(\u0022python\u0022) == \u0022yhn\u0022);","Debug.Assert(RemoveOdd(\u0022program\u0022) == \u0022rga\u0022);","Debug.Assert(RemoveOdd(\u0022language\u0022) == \u0022agae\u0022);"],"challenge_test_list":[]}
{"name":"bidirectional-tuple","description":"Count unique bidirectional tuple pairs in a function","text":"Write a function to count bidirectional tuple pairs.","code":"public string CountBidirectional(List\u003CTuple\u003Cint, int\u003E\u003E testList) {\n    int res = 0;\n    for (int idx = 0; idx \u003C testList.Count; idx\u002B\u002B) {\n        for (int iidx = idx \u002B 1; iidx \u003C testList.Count; iidx\u002B\u002B) {\n            if (testList[iidx].Item1 == testList[idx].Item2 \u0026\u0026 testList[idx].Item2 == testList[iidx].Item1) {\n                res\u002B\u002B;\n            }\n        }\n    }\n    return res.ToString();\n}","task_id":438,"test_setup_code":"","test_list":["Debug.Assert(CountBidirectional(new Tuple\u003Cint, int\u003E[] { Tuple.Create(5, 6), Tuple.Create(1, 2), Tuple.Create(6, 5), Tuple.Create(9, 1), Tuple.Create(6, 5), Tuple.Create(2, 1) }) == \u00223\u0022);","Debug.Assert(CountBidirectional(new Tuple\u003Cint, int\u003E[] { Tuple.Create(5, 6), Tuple.Create(1, 3), Tuple.Create(6, 5), Tuple.Create(9, 1), Tuple.Create(6, 5), Tuple.Create(2, 1) }) == \u00222\u0022);","Debug.Assert(CountBidirectional(new (int, int)[] { (5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1) }) == \u00274\u0027);"],"challenge_test_list":[]}
{"name":"list-to-integer","description":"Convert a list of integers into a single integer","text":"Write a function to convert a list of multiple integers into a single integer.","code":"public int MultipleToSingle(List\u003Cint\u003E L)\n{\n    string x = string.Join(\u0022\u0022, L.Select(i =\u003E i.ToString()));\n    return int.Parse(x);\n}","task_id":439,"test_setup_code":"","test_list":["Debug.Assert(MultipleToSingle(new int[] { 11, 33, 50 }) == 113350);","Debug.Assert(MultipleToSingle(new int[] { -1, 2, 3, 4, 5, 6 }) == -123456);","Debug.Assert(MultipleToSingle(new int[] { 10, 15, 20, 25 }) == 10152025);"],"challenge_test_list":[]}
{"name":"adverb-finder","description":"Find adverbs and their positions in a sentence","text":"Write a function to find all adverbs and their positions in a given sentence.","code":"using System.Text.RegularExpressions;\n\npublic static (int, int, string) FindAdverbPosition(string text)\n{\n    var match = Regex.Match(text, @\u0022\\w\u002Bly\u0022);\n    if (match.Success)\n    {\n        return (match.Index, match.Index \u002B match.Length, match.Value);\n    }\n    return (-1, -1, null);\n}","task_id":440,"test_setup_code":"","test_list":["Debug.Assert(FindAdverbPosition(\u0022clearly!! we can see the sky\u0022).Equals((0, 7, \u0027clearly\u0027)));","Debug.Assert(FindAdverbPosition(\u0022seriously!! there are many roses\u0022).Equals((0, 9, \u0027seriously\u0027)));","Debug.Assert(FindAdverbPosition(\u0022unfortunately!! sita is going to home\u0022).Equals((0, 13, \u0027unfortunately\u0027)));"],"challenge_test_list":[]}
{"name":"surface-area-cube","description":"Calculate the surface area of a cube","text":"Write a function to find the surface area of a cube.","code":"public static double SurfaceAreaCube(double l)\n{\n    double surfaceArea = 6 * l * l;\n    return surfaceArea;\n}","task_id":441,"test_setup_code":"","test_list":["Debug.Assert(SurfaceAreaCube(5) == 150);","Debug.Assert(SurfaceAreaCube(3) == 54);","Debug.Assert(SurfaceAreaCube(10) == 600);"],"challenge_test_list":[]}
{"name":"positive-ratio","description":"Calculate positive numbers ratio in an integer array","text":"Write a function to find the ration of positive numbers in an array of integers.","code":"using System;\n\npublic class ArrayUtils\n{\n    public static double PositiveCount(int[] nums)\n    {\n        int n = nums.Length;\n        int n1 = 0;\n        foreach (var x in nums)\n        {\n            if (x \u003E 0)\n            {\n                n1 \u002B= 1;\n            }\n        }\n        return Math.Round((double)n1 / n, 2);\n    }\n}","task_id":442,"test_setup_code":"","test_list":["Debug.Assert(PositiveCount(new int[] { 0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8 }) == 0.54);","Debug.Assert(PositiveCount(new int[] { 2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8 }) == 0.69);","Debug.Assert(PositiveCount(new int[] { 2, 4, -6, -9, 11, -12, 14, -5, 17 }) == 0.56);"],"challenge_test_list":[]}
{"name":"largest-negative.py","description":"Find the largest negative number in a list","text":"Write a C# function to find the largest negative number from the given list.","code":"public static int LargestNeg(List\u003Cint\u003E list1) \n{ \n    int max = list1[0]; \n    foreach (int x in list1) \n    { \n        if (x \u003C max) \n        { \n            max = x; \n        } \n    } \n    return max; \n}","task_id":443,"test_setup_code":"","test_list":["Debug.Assert(LargestNeg(new int[] { 1, 2, 3, -4, -6 }) == -6);","Debug.Assert(LargestNeg(new int[] { 1, 2, 3, -8, -9 }) == -9);","Debug.Assert(LargestNeg(new int[] { 1, 2, 3, 4, -1 }) == -1);"],"challenge_test_list":[]}
{"name":"trim-tuples-by-k","description":"Trim tuples by k in a list of tuples","text":"Write a function to trim each tuple by k in the given tuple list.","code":"public string TrimTuple(List\u003CTuple\u003Cobject\u003E\u003E testList, int K)\n{\n    List\u003CTuple\u003Cobject\u003E\u003E res = new List\u003CTuple\u003Cobject\u003E\u003E();\n    foreach (var ele in testList)\n    {\n        int N = ele.Item1.ToString().Length; // Assuming tuple\u0027s first item is the one we want to check\n        var newTuple = new Tuple\u003Cobject\u003E(ele.Item1.ToString().Substring(K, N - 2 * K));\n        res.Add(newTuple);\n    }\n    return res.ToString();\n}","task_id":444,"test_setup_code":"","test_list":["Debug.Assert(TrimTuple(new List\u003CTuple\u003Cint, int, int, int, int\u003E\u003E { \n    Tuple.Create(5, 3, 2, 1, 4), \n    Tuple.Create(3, 4, 9, 2, 1),\n    Tuple.Create(9, 1, 2, 3, 5), \n    Tuple.Create(4, 8, 2, 1, 7) \n}, 2).ToString() == \u0022[(2,), (9,), (2,), (2,)]\u0022);","Debug.Assert(TrimTuple(new List\u003CTuple\u003Cint, int, int, int, int\u003E\u003E { \n    Tuple.Create(5, 3, 2, 1, 4), \n    Tuple.Create(3, 4, 9, 2, 1), \n    Tuple.Create(9, 1, 2, 3, 5), \n    Tuple.Create(4, 8, 2, 1, 7) \n}, 1) == \u0022[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\u0022);","Debug.Assert(TrimTuple(new (int, int, int, int)[] { (7, 8, 4, 9), (11, 8, 12, 4), (4, 1, 7, 8), (3, 6, 9, 7) }, 1) == \u0022[(8, 4), (8, 12), (1, 7), (6, 9)]\u0022);"],"challenge_test_list":[]}
{"name":"index-wise-mult","description":"Multiply elements of two tuples index by index","text":"Write a function to perform index wise multiplication of tuple elements in the given two tuples.","code":"public static Tuple\u003CTuple\u003Cint, int\u003E[]\u003E IndexMultiplication(Tuple\u003Cint, int\u003E[] testTup1, Tuple\u003Cint, int\u003E[] testTup2)\n{\n    var res = testTup1.Zip(testTup2, (tup1, tup2) =\u003E \n        Tuple.Create(tup1.Item1 * tup2.Item1, tup1.Item2 * tup2.Item2)).ToArray();\n    return Tuple.Create(res);\n}","task_id":445,"test_setup_code":"","test_list":["Debug.Assert(IndexMultiplication(new Tuple\u003Cint, int\u003E[] { new Tuple\u003Cint, int\u003E(1, 3), new Tuple\u003Cint, int\u003E(4, 5), new Tuple\u003Cint, int\u003E(2, 9), new Tuple\u003Cint, int\u003E(1, 10) }, \n                                   new Tuple\u003Cint, int\u003E[] { new Tuple\u003Cint, int\u003E(6, 7), new Tuple\u003Cint, int\u003E(3, 9), new Tuple\u003Cint, int\u003E(1, 1), new Tuple\u003Cint, int\u003E(7, 3) }) \n                  .SequenceEqual(new Tuple\u003Cint, int\u003E[] { new Tuple\u003Cint, int\u003E(6, 21), new Tuple\u003Cint, int\u003E(12, 45), new Tuple\u003Cint, int\u003E(2, 9), new Tuple\u003Cint, int\u003E(7, 30) }));","Debug.Assert(IndexMultiplication(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((14, 32), (20, 60), (6, 20), (16, 44)));","Debug.Assert(IndexMultiplication(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((24, 45), (30, 77), (12, 33), (27, 60)));"],"challenge_test_list":[]}
{"name":"count-list-in-tuple","description":"Count list elements occurring in a tuple","text":"Write a C# function to count the occurence of all elements of list in a tuple.","code":"using System.Collections.Generic;\n\npublic class Solution\n{\n    public int CountOccurrence(Tuple\u003Cint, int\u003E[] tup, List\u003Cint\u003E lst)\n    {\n        int count = 0;\n        foreach (var item in tup)\n        {\n            if (lst.Contains(item.Item1) || lst.Contains(item.Item2))\n            {\n                count\u002B\u002B;\n            }\n        }\n        return count;\n    }\n}","task_id":446,"test_setup_code":"","test_list":["Debug.Assert(CountOccurrence(new[] { \u0027a\u0027, \u0027a\u0027, \u0027c\u0027, \u0027b\u0027, \u0027d\u0027 }, new[] { \u0027a\u0027, \u0027b\u0027 }) == 3);","Debug.Assert(CountOccurrence(new int[] { 1, 2, 3, 1, 4, 6, 7, 1, 4 }, new int[] { 1, 4, 7 }) == 6);","Debug.Assert(CountOccurrence(new int[] { 1, 2, 3, 4, 5, 6 }, new List\u003Cint\u003E { 1, 2 }) == 2);"],"challenge_test_list":[]}
{"name":"cubes-with-lambda","description":"Find cubes of list elements with a lambda function","text":"Write a function to find cubes of individual elements in a list using lambda function.","code":"public List\u003Cint\u003E CubeNums(List\u003Cint\u003E nums)  \n{  \n    List\u003Cint\u003E cubeNums = nums.Select(x =\u003E x * x * x).ToList();  \n    return cubeNums;  \n}","task_id":447,"test_setup_code":"","test_list":["Debug.Assert(CubeNums(new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }).SequenceEqual(new int[] { 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000 }));","Debug.Assert(CubeNums(new int[] { 10, 20, 30 }).SequenceEqual(new int[] { 1000, 8000, 27000 }));","Debug.Assert(CubeNums(new int[] { 12, 15 }).SequenceEqual(new int[] { 1728, 3375 }));"],"challenge_test_list":[]}
{"name":"perrin-sum-calc","description":"Calculate the sum of Perrin numbers in a function","text":"Write a function to calculate the sum of perrin numbers.","code":"public int CalSum(int n) \n{ \n    int a = 3; \n    int b = 0; \n    int c = 2; \n    if (n == 0) \n        return 3; \n    if (n == 1) \n        return 3; \n    if (n == 2) \n        return 5; \n    int sum = 5; \n    while (n \u003E 2) \n    { \n        int d = a \u002B b; \n        sum \u002B= d; \n        a = b; \n        b = c; \n        c = d; \n        n--; \n    } \n    return sum; \n}","task_id":448,"test_setup_code":"","test_list":["Debug.Assert(CalSum(9) == 49);","Debug.Assert(CalSum(10) == 66);","Debug.Assert(CalSum(11) == 88);"],"challenge_test_list":[]}
{"name":"triangle-check.py","description":"Validate triangle formation from three points","text":"Write a C# function to check whether the triangle is valid or not if 3 points are given.","code":"public string CheckTriangle(double x1, double y1, double x2, double y2, double x3, double y3) \n{ \n    double a = (x1 * (y2 - y3) \u002B x2 * (y3 - y1) \u002B x3 * (y1 - y2)); \n    if (a == 0) \n    { \n        return \u0022No\u0022; \n    } \n    else \n    { \n        return \u0022Yes\u0022; \n    } \n}","task_id":449,"test_setup_code":"","test_list":["Debug.Assert(CheckTriangle(1, 5, 2, 5, 4, 6) == \u0022Yes\u0022);","Debug.Assert(CheckTriangle(1, 1, 1, 4, 1, 5) == \u0022No\u0022);","Debug.Assert(CheckTriangle(1, 1, 1, 1, 1, 1) == \u0022No\u0022);"],"challenge_test_list":[]}
{"name":"extract-str-size","description":"Extract strings of specified size from a list","text":"Write a function to extract specified size of strings from a give list of string values.","code":"public List\u003Cstring\u003E ExtractString(string str, int l) \n{\n    return str.Where(e =\u003E e.Length == l).ToList();\n}","task_id":450,"test_setup_code":"","test_list":["Debug.Assert(ExtractString(new List\u003Cstring\u003E { \u0022Python\u0022, \u0022list\u0022, \u0022exercises\u0022, \u0022practice\u0022, \u0022solution\u0022 }, 8).SequenceEqual(new List\u003Cstring\u003E { \u0022practice\u0022, \u0022solution\u0022 }));","Debug.Assert(ExtractString(new List\u003Cstring\u003E { \u0022Python\u0022, \u0022list\u0022, \u0022exercises\u0022, \u0022practice\u0022, \u0022solution\u0022 }, 6).SequenceEqual(new List\u003Cstring\u003E { \u0022Python\u0022 }));","Debug.Assert(ExtractString(new List\u003Cstring\u003E { \u0022Python\u0022, \u0022list\u0022, \u0022exercises\u0022, \u0022practice\u0022, \u0022solution\u0022 }, 9).SequenceEqual(new List\u003Cstring\u003E { \u0022exercises\u0022 }));"],"challenge_test_list":[]}
{"name":"remove-whitespaces","description":"Remove all whitespaces from a string using regex","text":"Write a function to remove all whitespaces from the given string using regex.","code":"public string RemoveWhitespaces(string text1) \n{\n    return Regex.Replace(text1, @\u0022\\s\u002B\u0022, \u0022\u0022);\n}","task_id":451,"test_setup_code":"","test_list":["Debug.Assert(RemoveWhitespaces(\u0022 Google    Flutter \u0022) == \u0022GoogleFlutter\u0022);","Debug.Assert(RemoveWhitespaces(\u0022 Google    Dart \u0022) == \u0022GoogleDart\u0022);","Debug.Assert(RemoveWhitespaces(\u0022 iOS    Swift \u0022) == \u0022iOSSwift\u0022);"],"challenge_test_list":[]}
{"name":"loss-calculator","description":"Calculate loss amount or return none if no loss","text":"Write a function that gives loss amount if the given amount has loss else return none.","code":"public static double? LossAmount(double actualCost, double saleAmount) \n{ \n    if (saleAmount \u003E actualCost) \n    { \n        double amount = saleAmount - actualCost; \n        return amount; \n    } \n    else \n    { \n        return null; \n    } \n}","task_id":452,"test_setup_code":"","test_list":["Debug.Assert(LossAmount(1500, 1200) == null);","Debug.Assert(LossAmount(100, 200) == 100);","Debug.Assert(LossAmount(2000, 5000) == 3000);"],"challenge_test_list":[]}
{"name":"even-factors-sum","description":"Sum even factors of a number using Python function","text":"Write a C# function to find the sum of even factors of a number.","code":"import System;\n\npublic class FactorCalculator\n{\n    public static int SumOfFactors(int n)\n    {\n        if (n % 2 != 0)\n        {\n            return 0;\n        }\n        int res = 1;\n        for (int i = 2; i \u003C= (int)Math.Sqrt(n); i\u002B\u002B)\n        {\n            int count = 0;\n            int currSum = 1;\n            int currTerm = 1;\n            while (n % i == 0)\n            {\n                count\u002B\u002B;\n                n /= i;\n                if (i == 2 \u0026\u0026 count == 1)\n                {\n                    currSum = 0;\n                }\n                currTerm *= i;\n                currSum \u002B= currTerm;\n            }\n            res *= currSum;\n        }\n        if (n \u003E= 2)\n        {\n            res *= (1 \u002B n);\n        }\n        return res;\n    }\n}","task_id":453,"test_setup_code":"","test_list":["Debug.Assert(SumOfFactors(18) == 26);","Debug.Assert(SumOfFactors(30) == 48);","Debug.Assert(SumOfFactors(6) == 8);"],"challenge_test_list":[]}
{"name":"word-with-z","description":"Function to find words with the letter z","text":"Write a function that matches a word containing \u0027z\u0027.","code":"public string TextMatchWordz(string text)  \n{  \n    string patterns = @\u0022\\w*z.\\w*\u0022;  \n    if (Regex.IsMatch(text, patterns))  \n    {  \n        return \u0022Found a match!\u0022;  \n    }  \n    else  \n    {  \n        return \u0022Not matched!\u0022;  \n    }  \n}","task_id":454,"test_setup_code":"","test_list":["Debug.Assert(TextMatchWordz(\u0022pythonz.\u0022) == \u0022Found a match!\u0022);","Debug.Assert(TextMatchWordz(\u0022xyz.\u0022) == \u0022Found a match!\u0022);","Debug.Assert(TextMatchWordz(\u0022  lang  .\u0022) == \u0022Not matched!\u0022);"],"challenge_test_list":[]}
{"name":"check-31-days","description":"Check if a month has 31 days or not","text":"Write a function to check whether the given month number contains 31 days or not.","code":"public bool CheckMonthNumbNumber(int monthnum2) {\n    if (monthnum2 == 1 || monthnum2 == 3 || monthnum2 == 5 || monthnum2 == 7 || monthnum2 == 8 || monthnum2 == 10 || monthnum2 == 12) {\n        return true;\n    } else {\n        return false;\n    }\n}","task_id":455,"test_setup_code":"","test_list":["Debug.Assert(CheckMonthNumbNumber(5) == true);","Debug.Assert(CheckMonthNumbNumber(2) == false);","Debug.Assert(CheckMonthNumbNumber(6) == false);"],"challenge_test_list":[]}
{"name":"reverse-string-list","description":"Reverse strings in a list of string values","text":"Write a function to reverse strings in a given list of string values.","code":"public List\u003Cstring\u003E ReverseStringList(List\u003Cstring\u003E stringlist) {\n    List\u003Cstring\u003E result = stringlist.Select(x =\u003E new string(x.Reverse().ToArray())).ToList();\n    return result;\n}","task_id":456,"test_setup_code":"","test_list":["Debug.Assert(ReverseStringList(new List\u003Cstring\u003E { \u0022Red\u0022, \u0022Green\u0022, \u0022Blue\u0022, \u0022White\u0022, \u0022Black\u0022 }).SequenceEqual(new List\u003Cstring\u003E { \u0022deR\u0022, \u0022neerG\u0022, \u0022eulB\u0022, \u0022etihW\u0022, \u0022kcalB\u0022 }));","Debug.Assert(ReverseStringList(new List\u003Cstring\u003E { \u0022john\u0022, \u0022amal\u0022, \u0022joel\u0022, \u0022george\u0022 }).SequenceEqual(new List\u003Cstring\u003E { \u0022nhoj\u0022, \u0022lama\u0022, \u0022leoj\u0022, \u0022egroeg\u0022 }));","Debug.Assert(ReverseStringList(new List\u003Cstring\u003E { \u0022jack\u0022, \u0022john\u0022, \u0022mary\u0022 }).SequenceEqual(new List\u003Cstring\u003E { \u0022kcaj\u0022, \u0022nhoj\u0022, \u0022yram\u0022 }));"],"challenge_test_list":[]}
{"name":"min-length-sublist","description":"Find the shortest sublist in a given list","text":"Write a C# function to find the sublist having minimum length.","code":"public int FindMin(List\u003Cint\u003E lst) \n{ \n    int minList = lst.Min(); \n    return minList; \n}","task_id":457,"test_setup_code":"","test_list":["Debug.Assert(FindMin(new int[][] { new int[] { 1 }, new int[] { 1, 2 }, new int[] { 1, 2, 3 } }).SequenceEqual(new int[] { 1 }));","Debug.Assert(FindMin(new int[][] { new int[] { 1, 1 }, new int[] { 1, 1, 1 }, new int[] { 1, 2, 7, 8 } }).SequenceEqual(new int[] { 1, 1 }));","Debug.Assert(Enumerable.SequenceEqual(FindMin(new List\u003CList\u003Cstring\u003E\u003E { new List\u003Cstring\u003E { \u0022x\u0022 }, new List\u003Cstring\u003E { \u0022x\u0022, \u0022y\u0022 }, new List\u003Cstring\u003E { \u0022x\u0022, \u0022y\u0022, \u0022z\u0022 } }), new List\u003Cstring\u003E { \u0022x\u0022 }));"],"challenge_test_list":[]}
{"name":"area-of-rectangle","description":"Calculate area of a rectangle using a function","text":"Write a function to find the area of a rectangle.","code":"public int RectangleArea(int l, int b)\n{\n    int area = l * b;\n    return area;\n}","task_id":458,"test_setup_code":"","test_list":["Debug.Assert(RectangleArea(10, 20) == 200);","Debug.Assert(RectangleArea(10, 5) == 50);","Debug.Assert(RectangleArea(4, 2) == 8);"],"challenge_test_list":[]}
{"name":"remove-upcase-sub","description":"Remove uppercase substrings from a string using regex","text":"Write a function to remove uppercase substrings from a given string by using regex.","code":"using System.Text.RegularExpressions;\n\npublic string RemoveUppercase(string str1)\n{\n    Func\u003Cstring, string\u003E removeUpper = text =\u003E Regex.Replace(text, \u0022[A-Z]\u0022, \u0022\u0022);\n    string result = removeUpper(str1);\n    return result;\n}","task_id":459,"test_setup_code":"","test_list":["Debug.Assert(RemoveUppercase(\u0022cAstyoUrFavoRitETVshoWs\u0022) == \u0022cstyoravoitshos\u0022);\n\npublic string RemoveUppercase(string input)\n{\n    return new string(input.Where(c =\u003E !char.IsUpper(c)).ToArray());\n}","Debug.Assert(RemoveUppercase(\u0022wAtchTheinTernEtrAdIo\u0022) == \u0022wtchheinerntrdo\u0022);","Debug.Assert(RemoveUppercase(\u0022VoicESeaRchAndreComMendaTionS\u0022) == \u0022oiceachndreomendaion\u0022);"],"challenge_test_list":[]}
{"name":"first-of-sublists","description":"Get first elements from each sublist in Python","text":"Write a C# function to get the first element of each sublist.","code":"public List\u003CT\u003E Extract\u003CT\u003E(List\u003CList\u003CT\u003E\u003E lst) \n{ \n    return lst.Select(item =\u003E item[0]).ToList(); \n}","task_id":460,"test_setup_code":"","test_list":["Debug.Assert(Extract(new int[][] { new int[] { 1, 2 }, new int[] { 3, 4, 5 }, new int[] { 6, 7, 8, 9 } }) == new List\u003Cint\u003E { 1, 3, 6 });","Debug.Assert(Extract(new int[][] { new int[] { 1, 2, 3 }, new int[] { 4, 5 } }) == new int[] { 1, 4 });","Debug.Assert(Extract(new int[][] { new int[] { 9, 8, 1 }, new int[] { 1, 2 } }).SequenceEqual(new int[] { 9, 1 }));"],"challenge_test_list":[]}
{"name":"count-uppercase","description":"Count upper case letters in a string with Python","text":"Write a C# function to count the upper case characters in a given string.","code":"public static int UpperCtr(string str)\n{\n    int upperCtr = 0;\n    for (int i = 0; i \u003C str.Length; i\u002B\u002B)\n    {\n        if (str[i] \u003E= \u0027A\u0027 \u0026\u0026 str[i] \u003C= \u0027Z\u0027) upperCtr\u002B\u002B;\n    }\n    return upperCtr;\n}","task_id":461,"test_setup_code":"","test_list":["Debug.Assert(UpperCtr(\u0022PYthon\u0022) == 1);","Debug.Assert(UpperCtr(\u0022BigData\u0022) == 1);","Debug.Assert(UpperCtr(\u0022program\u0022) == 0);"],"challenge_test_list":[]}
{"name":"combos-of-list","description":"Find all combinations of list elements","text":"Write a function to find all possible combinations of the elements of a given list.","code":"public List\u003CList\u003CT\u003E\u003E CombinationsList\u003CT\u003E(List\u003CT\u003E list1)\n{\n    if (list1.Count == 0)\n    {\n        return new List\u003CList\u003CT\u003E\u003E { new List\u003CT\u003E() };\n    }\n    \n    var result = new List\u003CList\u003CT\u003E\u003E();\n    foreach (var el in CombinationsList(list1.GetRange(1, list1.Count - 1)))\n    {\n        result.Add(el);\n        var newCombination = new List\u003CT\u003E(el) { list1[0] };\n        result.Add(newCombination);\n    }\n    \n    return result;\n}","task_id":462,"test_setup_code":"","test_list":["Debug.Assert(CombinationsList(new List\u003Cstring\u003E { \u0022orange\u0022, \u0022red\u0022, \u0022green\u0022, \u0022blue\u0022 }).SequenceEqual(new List\u003CList\u003Cstring\u003E\u003E {\n    new List\u003Cstring\u003E(),\n    new List\u003Cstring\u003E { \u0022orange\u0022 },\n    new List\u003Cstring\u003E { \u0022red\u0022 },\n    new List\u003Cstring\u003E { \u0022red\u0022, \u0022orange\u0022 },\n    new List\u003Cstring\u003E { \u0022green\u0022 },\n    new List\u003Cstring\u003E { \u0022green\u0022, \u0022orange\u0022 },\n    new List\u003Cstring\u003E { \u0022green\u0022, \u0022red\u0022 },\n    new List\u003Cstring\u003E { \u0022green\u0022, \u0022red\u0022, \u0022orange\u0022 },\n    new List\u003Cstring\u003E { \u0022blue\u0022 },\n    new List\u003Cstring\u003E { \u0022blue\u0022, \u0022orange\u0022 },\n    new List\u003Cstring\u003E { \u0022blue\u0022, \u0022red\u0022 },\n    new List\u003Cstring\u003E { \u0022blue\u0022, \u0022red\u0022, \u0022orange\u0022 },\n    new List\u003Cstring\u003E { \u0022blue\u0022, \u0022green\u0022 },\n    new List\u003Cstring\u003E { \u0022blue\u0022, \u0022green\u0022, \u0022orange\u0022 },\n    new List\u003Cstring\u003E { \u0022blue\u0022, \u0022green\u0022, \u0022red\u0022 },\n    new List\u003Cstring\u003E { \u0022blue\u0022, \u0022green\u0022, \u0022red\u0022, \u0022orange\u0022 }\n}));","Debug.Assert(CombinationsList(new List\u003Cstring\u003E { \u0022red\u0022, \u0022green\u0022, \u0022blue\u0022, \u0022white\u0022, \u0022black\u0022, \u0022orange\u0022 }).SequenceEqual(new List\u003CList\u003Cstring\u003E\u003E {\n    new List\u003Cstring\u003E(),\n    new List\u003Cstring\u003E { \u0022red\u0022 },\n    new List\u003Cstring\u003E { \u0022green\u0022 },\n    new List\u003Cstring\u003E { \u0022green\u0022, \u0022red\u0022 },\n    new List\u003Cstring\u003E { \u0022blue\u0022 },\n    new List\u003Cstring\u003E { \u0022blue\u0022, \u0022red\u0022 },\n    new List\u003Cstring\u003E { \u0022blue\u0022, \u0022green\u0022 },\n    new List\u003Cstring\u003E { \u0022blue\u0022, \u0022green\u0022, \u0022red\u0022 },\n    new List\u003Cstring\u003E { \u0022white\u0022 },\n    new List\u003Cstring\u003E { \u0022white\u0022, \u0022red\u0022 },\n    new List\u003Cstring\u003E { \u0022white\u0022, \u0022green\u0022 },\n    new List\u003Cstring\u003E { \u0022white\u0022, \u0022green\u0022, \u0022red\u0022 },\n    new List\u003Cstring\u003E { \u0022white\u0022, \u0022blue\u0022 },\n    new List\u003Cstring\u003E { \u0022white\u0022, \u0022blue\u0022, \u0022red\u0022 },\n    new List\u003Cstring\u003E { \u0022white\u0022, \u0022blue\u0022, \u0022green\u0022 },\n    new List\u003Cstring\u003E { \u0022white\u0022, \u0022blue\u0022, \u0022green\u0022, \u0022red\u0022 },\n    new List\u003Cstring\u003E { \u0022black\u0022 },\n    new List\u003Cstring\u003E { \u0022black\u0022, \u0022red\u0022 },\n    new List\u003Cstring\u003E { \u0022black\u0022, \u0022green\u0022 },\n    new List\u003Cstring\u003E { \u0022black\u0022, \u0022green\u0022, \u0022red\u0022 },\n    new List\u003Cstring\u003E { \u0022black\u0022, \u0022blue\u0022 },\n    new List\u003Cstring\u003E { \u0022black\u0022, \u0022blue\u0022, \u0022red\u0022 },\n    new List\u003Cstring\u003E { \u0022black\u0022, \u0022blue\u0022, \u0022green\u0022 },\n    new List\u003Cstring\u003E { \u0022black\u0022, \u0022blue\u0022, \u0022green\u0022, \u0022red\u0022 },\n    new List\u003Cstring\u003E { \u0022black\u0022, \u0022white\u0022 },\n    new List\u003Cstring\u003E { \u0022black\u0022, \u0022white\u0022, \u0022red\u0022 },\n    new List\u003Cstring\u003E { \u0022black\u0022, \u0022white\u0022, \u0022green\u0022 },\n    new List\u003Cstring\u003E { \u0022black\u0022, \u0022white\u0022, \u0022green\u0022, \u0022red\u0022 },\n    new List\u003Cstring\u003E { \u0022black\u0022, \u0022white\u0022, \u0022blue\u0022 },\n    new List\u003Cstring\u003E { \u0022black\u0022, \u0022white\u0022, \u0022blue\u0022, \u0022red\u0022 },\n    new List\u003Cstring\u003E { \u0022black\u0022, \u0022white\u0022, \u0022blue\u0022, \u0022green\u0022 },\n    new List\u003Cstring\u003E { \u0022black\u0022, \u0022white\u0022, \u0022blue\u0022, \u0022green\u0022, \u0022red\u0022 },\n    new List\u003Cstring\u003E { \u0022orange\u0022 },\n    new List\u003Cstring\u003E { \u0022orange\u0022, \u0022red\u0022 },\n    new List\u003Cstring\u003E { \u0022orange\u0022, \u0022green\u0022 },\n    new List\u003Cstring\u003E { \u0022orange\u0022, \u0022green\u0022, \u0022red\u0022 },\n    new List\u003Cstring\u003E { \u0022orange\u0022, \u0022blue\u0022 },\n    new List\u003Cstring\u003E { \u0022orange\u0022, \u0022blue\u0022, \u0022red\u0022 },\n    new List\u003Cstring\u003E { \u0022orange\u0022, \u0022blue\u0022, \u0022green\u0022 },\n    new List\u003Cstring\u003E { \u0022orange\u0022, \u0022blue\u0022, \u0022green\u0022, \u0022red\u0022 },\n    new List\u003Cstring\u003E { \u0022orange\u0022, \u0022white\u0022 },\n    new List\u003Cstring\u003E { \u0022orange\u0022, \u0022white\u0022, \u0022red\u0022 },\n    new List\u003Cstring\u003E { \u0022orange\u0022, \u0022white\u0022, \u0022green\u0022 },\n    new List\u003Cstring\u003E { \u0022orange\u0022, \u0022white\u0022, \u0022green\u0022, \u0022red\u0022 },\n    new List\u003Cstring\u003E { \u0022orange\u0022, \u0022white\u0022, \u0022blue\u0022 },\n    new List\u003Cstring\u003E { \u0022orange\u0022, \u0022white\u0022, \u0022blue\u0022, \u0022red\u0022 },\n    new List\u003Cstring\u003E { \u0022orange\u0022, \u0022white\u0022, \u0022blue\u0022, \u0022green\u0022 },\n    new List\u003Cstring\u003E { \u0022orange\u0022, \u0022white\u0022, \u0022blue\u0022, \u0022green\u0022, \u0022red\u0022 },\n    new List\u003Cstring\u003E { \u0022orange\u0022, \u0022black\u0022 },\n    new List\u003Cstring\u003E { \u0022orange\u0022, \u0022black\u0022, \u0022red\u0022 },\n    new List\u003Cstring\u003E { \u0022orange\u0022, \u0022black\u0022, \u0022green\u0022 },\n    new List\u003Cstring\u003E { \u0022orange\u0022, \u0022black\u0022, \u0022green\u0022, \u0022red\u0022 },\n    new List\u003Cstring\u003E { \u0022orange\u0022, \u0022black\u0022, \u0022blue\u0022 },\n    new List\u003Cstring\u003E { \u0022orange\u0022, \u0022black\u0022, \u0022blue\u0022, \u0022red\u0022 },\n    new List\u003Cstring\u003E { \u0022orange\u0022, \u0022black\u0022, \u0022blue\u0022, \u0022green\u0022 },\n    new List\u003Cstring\u003E { \u0022orange\u0022, \u0022black\u0022, \u0022blue\u0022, \u0022green\u0022, \u0022red\u0022 },\n    new List\u003Cstring\u003E { \u0022orange\u0022, \u0022black\u0022, \u0022white\u0022 },\n    new List\u003Cstring\u003E { \u0022orange\u0022, \u0022black\u0022, \u0022white\u0022, \u0022red\u0022 },\n    new List\u003Cstring\u003E { \u0022orange\u0022, \u0022black\u0022, \u0022white\u0022, \u0022green\u0022 },\n    new List\u003Cstring\u003E { \u0022orange\u0022, \u0022black\u0022, \u0022white\u0022, \u0022green\u0022, \u0022red\u0022 },\n    new List\u003Cstring\u003E { \u0022orange\u0022, \u0022black\u0022, \u0022white\u0022, \u0022blue\u0022 },\n    new List\u003Cstring\u003E { \u0022orange\u0022, \u0022black\u0022, \u0022white\u0022, \u0022blue\u0022, \u0022red\u0022 },\n    new List\u003Cstring\u003E { \u0022orange\u0022, \u0022black\u0022, \u0022white\u0022, \u0022blue\u0022, \u0022green\u0022 },\n    new List\u003Cstring\u003E { \u0022orange\u0022, \u0022black\u0022, \u0022white\u0022, \u0022blue\u0022, \u0022green\u0022, \u0022red\u0022 }\n}));","Debug.Assert(CombinationsList(new List\u003Cstring\u003E { \u0022red\u0022, \u0022green\u0022, \u0022black\u0022, \u0022orange\u0022 }).SequenceEqual(new List\u003CList\u003Cstring\u003E\u003E \n{ \n    new List\u003Cstring\u003E(), \n    new List\u003Cstring\u003E { \u0022red\u0022 }, \n    new List\u003Cstring\u003E { \u0022green\u0022 }, \n    new List\u003Cstring\u003E { \u0022green\u0022, \u0022red\u0022 }, \n    new List\u003Cstring\u003E { \u0022black\u0022 }, \n    new List\u003Cstring\u003E { \u0022black\u0022, \u0022red\u0022 }, \n    new List\u003Cstring\u003E { \u0022black\u0022, \u0022green\u0022 }, \n    new List\u003Cstring\u003E { \u0022black\u0022, \u0022green\u0022, \u0022red\u0022 }, \n    new List\u003Cstring\u003E { \u0022orange\u0022 }, \n    new List\u003Cstring\u003E { \u0022orange\u0022, \u0022red\u0022 }, \n    new List\u003Cstring\u003E { \u0022orange\u0022, \u0022green\u0022 }, \n    new List\u003Cstring\u003E { \u0022orange\u0022, \u0022green\u0022, \u0022red\u0022 }, \n    new List\u003Cstring\u003E { \u0022orange\u0022, \u0022black\u0022 }, \n    new List\u003Cstring\u003E { \u0022orange\u0022, \u0022black\u0022, \u0022red\u0022 }, \n    new List\u003Cstring\u003E { \u0022orange\u0022, \u0022black\u0022, \u0022green\u0022 }, \n    new List\u003Cstring\u003E { \u0022orange\u0022, \u0022black\u0022, \u0022green\u0022, \u0022red\u0022 } \n}));"],"challenge_test_list":[]}
{"name":"max-prod-subarr","description":"Find maximum product of a subarray in an array","text":"Write a function to find the maximum product subarray of the given array.","code":"public int MaxSubarrayProduct(int[] arr) {\n    int n = arr.Length;\n    int maxEndingHere = 1;\n    int minEndingHere = 1;\n    int maxSoFar = 0;\n    int flag = 0;\n    \n    for (int i = 0; i \u003C n; i\u002B\u002B) {\n        if (arr[i] \u003E 0) {\n            maxEndingHere = maxEndingHere * arr[i];\n            minEndingHere = Math.Min(minEndingHere * arr[i], 1);\n            flag = 1;\n        } else if (arr[i] == 0) {\n            maxEndingHere = 1;\n            minEndingHere = 1;\n        } else {\n            int temp = maxEndingHere;\n            maxEndingHere = Math.Max(minEndingHere * arr[i], 1);\n            minEndingHere = temp * arr[i];\n        }\n        if (maxSoFar \u003C maxEndingHere) {\n            maxSoFar = maxEndingHere;\n        }\n    }\n    \n    if (flag == 0 \u0026\u0026 maxSoFar == 0) {\n        return 0;\n    }\n    return maxSoFar;\n}","task_id":463,"test_setup_code":"","test_list":["Debug.Assert(MaxSubarrayProduct(new int[] { 1, -2, -3, 0, 7, -8, -2 }) == 112);","Debug.Assert(MaxSubarrayProduct(new int[] { 6, -3, -10, 0, 2 }) == 180);","Debug.Assert(MaxSubarrayProduct(new int[] {-2, -40, 0, -2, -3}) == 80);"],"challenge_test_list":[]}
{"name":"check-same-values","description":"Check if all dictionary values are identical","text":"Write a function to check if all values are same in a dictionary.","code":"public bool CheckValue(Dictionary\u003Cstring, int\u003E dict, int n)  \n{  \n    bool result = dict.Values.All(x =\u003E x == n);  \n    return result;  \n}","task_id":464,"test_setup_code":"","test_list":["Debug.Assert(CheckValue(new Dictionary\u003Cstring, int\u003E { {\u0022Cierra Vega\u0022, 12}, {\u0022Alden Cantrell\u0022, 12}, {\u0022Kierra Gentry\u0022, 12}, {\u0022Pierre Cox\u0022, 12} }, 10) == false);","Debug.Assert(CheckValue(new Dictionary\u003Cstring, int\u003E{{\u0022Cierra Vega\u0022, 12}, {\u0022Alden Cantrell\u0022, 12}, {\u0022Kierra Gentry\u0022, 12}, {\u0022Pierre Cox\u0022, 12}}, 12) == true);","Debug.Assert(CheckValue(new Dictionary\u003Cstring, int\u003E { {\u0022Cierra Vega\u0022, 12}, {\u0022Alden Cantrell\u0022, 12}, {\u0022Kierra Gentry\u0022, 12}, {\u0022Pierre Cox\u0022, 12} }, 5) == false);"],"challenge_test_list":[]}
{"name":"drop-empty-items","description":"Remove empty items from a dictionary function","text":"Write a function to drop empty items from a given dictionary.","code":"public Dictionary\u003Cstring, object\u003E DropEmpty(Dictionary\u003Cstring, object\u003E dict1)\n{\n    dict1 = dict1.Where(pair =\u003E pair.Value != null).ToDictionary(pair =\u003E pair.Key, pair =\u003E pair.Value);\n    return dict1;\n}","task_id":465,"test_setup_code":"","test_list":["Debug.Assert(DropEmpty(new Dictionary\u003Cstring, string\u003E { { \u0022c1\u0022, \u0022Red\u0022 }, { \u0022c2\u0022, \u0022Green\u0022 }, { \u0022c3\u0022, null } }).SequenceEqual(new Dictionary\u003Cstring, string\u003E { { \u0022c1\u0022, \u0022Red\u0022 }, { \u0022c2\u0022, \u0022Green\u0022 } }));","Debug.Assert(DropEmpty(new Dictionary\u003Cstring, string\u003E { {\u0022c1\u0022, \u0022Red\u0022}, {\u0022c2\u0022, null}, {\u0022c3\u0022, null} }).SequenceEqual(new Dictionary\u003Cstring, string\u003E { {\u0022c1\u0022, \u0022Red\u0022} }));","Debug.Assert(DropEmpty(new Dictionary\u003Cstring, string\u003E { { \u0022c1\u0022, null }, { \u0022c2\u0022, \u0022Green\u0022 }, { \u0022c3\u0022, null } }).SequenceEqual(new Dictionary\u003Cstring, string\u003E { { \u0022c2\u0022, \u0022Green\u0022 } }));"],"challenge_test_list":[]}
{"name":"peak-element-finder","description":"Find the peak element in an array efficiently","text":"Write a function to find the peak element in the given array.","code":"public static int FindPeakUtil(int[] arr, int low, int high, int n) \n{\n    int mid = low \u002B (high - low) / 2;\n    if ((mid == 0 || arr[mid - 1] \u003C= arr[mid]) \u0026\u0026 \n        (mid == n - 1 || arr[mid \u002B 1] \u003C= arr[mid]))\n    {\n        return mid;\n    }\n    else if (mid \u003E 0 \u0026\u0026 arr[mid - 1] \u003E arr[mid])\n    {\n        return FindPeakUtil(arr, low, mid - 1, n);\n    }\n    else\n    {\n        return FindPeakUtil(arr, mid \u002B 1, high, n);\n    }\n}\n\npublic static int FindPeak(int[] arr, int n) \n{\n    return FindPeakUtil(arr, 0, n - 1, n);\n}","task_id":466,"test_setup_code":"","test_list":["Debug.Assert(FindPeakUtil(new int[] { 1, 3, 20, 4, 1, 0 }, 6) == 2);","Debug.Assert(FindPeakUtil(new int[] { 2, 3, 4, 5, 6 }, 5) == 4);","Debug.Assert(FindPeakUtil(new int[] { 8, 9, 11, 12, 14, 15 }, 6) == 5);"],"challenge_test_list":[]}
{"name":"decimal-to-octal","description":"Convert decimal to octal using a Python function","text":"Write a C# function to convert decimal number to octal number.","code":"public int DecimalToOctal(int deciNum) {\n    int octalNum = 0;\n    int countval = 1;\n    int dNo = deciNum;\n    while (deciNum != 0) {\n        int remainder = deciNum % 8;\n        octalNum \u002B= remainder * countval;\n        countval *= 10;\n        deciNum /= 8;\n    }\n    return octalNum;\n}","task_id":467,"test_setup_code":"","test_list":["Debug.Assert(DecimalToOctal(10) == 12);","Debug.Assert(DecimalToOctal(2) == 2);","Debug.Assert(DecimalToOctal(33) == 41);"],"challenge_test_list":[]}
{"name":"max-prod-incre-subseq","description":"Max product of increasing subsequence in array","text":"Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.","code":"public static int MaxProduct(int[] arr, int n) \n{ \n    int[] mpis = new int[n]; \n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    { \n        mpis[i] = arr[i]; \n    } \n    for (int i = 1; i \u003C n; i\u002B\u002B) \n    { \n        for (int j = 0; j \u003C i; j\u002B\u002B) \n        { \n            if (arr[i] \u003E arr[j] \u0026\u0026 mpis[i] \u003C (mpis[j] * arr[i])) \n            { \n                mpis[i] = mpis[j] * arr[i]; \n            } \n        } \n    } \n    return mpis.Max(); \n}","task_id":468,"test_setup_code":"","test_list":["Debug.Assert(MaxProduct(new int[] { 3, 100, 4, 5, 150, 6 }, 6) == 45000);","Debug.Assert(MaxProduct(new int[] { 4, 42, 55, 68, 80 }) == 50265600);\n\npublic static int MaxProduct(int[] numbers)\n{\n    // Method implementation here\n}","Debug.Assert(MaxProduct(new int[] { 10, 22, 9, 33, 21, 50, 41, 60 }, 8) == 21780000);"],"challenge_test_list":[]}
{"name":"max-profit-k-trans","description":"Max profit from k stock transactions function","text":"Write a function to find the maximum profit earned from a maximum of k stock transactions","code":"public int MaxProfit(int[] price, int k) {\n    int n = price.Length;\n    int[,] finalProfit = new int[k \u002B 1, n];\n    \n    for (int i = 0; i \u003C= k; i\u002B\u002B) {\n        for (int j = 0; j \u003C n; j\u002B\u002B) {\n            if (i == 0 || j == 0) {\n                finalProfit[i, j] = 0;\n            } else {\n                int maxSoFar = 0;\n                for (int x = 0; x \u003C j; x\u002B\u002B) {\n                    int currPrice = price[j] - price[x] \u002B finalProfit[i - 1, x];\n                    if (maxSoFar \u003C currPrice) {\n                        maxSoFar = currPrice;\n                    }\n                }\n                finalProfit[i, j] = Math.Max(finalProfit[i, j - 1], maxSoFar);\n            }\n        }\n    }\n    return finalProfit[k, n - 1];\n}","task_id":469,"test_setup_code":"","test_list":["Debug.Assert(MaxProfit(new int[] { 1, 5, 2, 3, 7, 6, 4, 5 }, 3) == 10);","Debug.Assert(MaxProfit(new int[] { 2, 4, 7, 5, 4, 3, 5 }, 2) == 7);","Debug.Assert(MaxProfit(new int[] { 10, 6, 8, 4, 2 }, 2) == 2);"],"challenge_test_list":[]}
{"name":"pairwise-addition","description":"Compute pairwise sums of tuple elements","text":"Write a function to find the pairwise addition of the elements of the given tuples.","code":"public static Tuple\u003Cint,int\u003E[] AddPairwise(Tuple\u003Cint,int\u003E[] testTup)\n{\n    var res = testTup.Zip(testTup.Skip(1), (i, j) =\u003E new Tuple\u003Cint,int\u003E(i.Item1 \u002B j.Item1, i.Item2 \u002B j.Item2)).ToArray();\n    return res;\n}","task_id":470,"test_setup_code":"","test_list":["Debug.Assert(AddPairwise(new int[] { 1, 5, 7, 8, 10 }).SequenceEqual(new int[] { 6, 12, 15, 18 }));","Debug.Assert(AddPairwise(new int[] { 2, 6, 8, 9, 11 }).SequenceEqual(new int[] { 8, 14, 17, 20 }));","Debug.Assert(AddPairwise(new int[] { 3, 7, 9, 10, 12 }).SequenceEqual(new int[] { 10, 16, 19, 22 }));"],"challenge_test_list":[]}
{"name":"array-mul-remaind","description":"Find array multiplication remainder by n","text":"Write a C# function to find remainder of array multiplication divided by n.","code":"public static int FindRemainder(int[] arr, int lens, int n) \n{ \n    int mul = 1; \n    for (int i = 0; i \u003C lens; i\u002B\u002B) \n    { \n        mul = (mul * (arr[i] % n)) % n; \n    } \n    return mul % n; \n}","task_id":471,"test_setup_code":"","test_list":["Debug.Assert(FindRemainder(new int[] { 100, 10, 5, 25, 35, 14 }, 6, 11) == 9);","Debug.Assert(FindRemainder(new int[] { 1, 1, 1 }, 3, 1) == 0);","Debug.Assert(FindRemainder(new int[] { 1, 2, 1 }, 3, 2) == 0);"],"challenge_test_list":[]}
{"name":"consecutive-check","description":"Check if a list contains consecutive numbers","text":"Write a C# function to check whether the given list contains consecutive numbers or not.","code":"public bool CheckConsecutive(List\u003Cint\u003E l) \n{ \n    return l.OrderBy(x =\u003E x).SequenceEqual(Enumerable.Range(l.Min(), l.Max() - l.Min() \u002B 1)); \n}","task_id":472,"test_setup_code":"","test_list":["Debug.Assert(CheckConsecutive(new int[] { 1, 2, 3, 4, 5 }) == true);","Debug.Assert(CheckConsecutive(new int[] { 1, 2, 3, 5, 6 }) == false);","Debug.Assert(CheckConsecutive(new int[] { 1, 2, 1 }) == false);"],"challenge_test_list":[]}
{"name":"tuple-intersect","description":"Find intersection of elements in tuple list","text":"Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.","code":"public static HashSet\u003CTuple\u003Cint, int\u003E\u003E TupleIntersection(List\u003CTuple\u003Cint, int\u003E\u003E testList1, List\u003CTuple\u003Cint, int\u003E\u003E testList2) {\n    var res = new HashSet\u003CTuple\u003Cint, int\u003E\u003E(testList1.Select(ele =\u003E Tuple.Create(Math.Min(ele.Item1, ele.Item2), Math.Max(ele.Item1, ele.Item2))))\n        .Intersect(new HashSet\u003CTuple\u003Cint, int\u003E\u003E(testList2.Select(ele =\u003E Tuple.Create(Math.Min(ele.Item1, ele.Item2), Math.Max(ele.Item1, ele.Item2)))));\n    return res;\n}","task_id":473,"test_setup_code":"","test_list":["Debug.Assert(TupleIntersection(new List\u003C(int, int)\u003E { (3, 4), (5, 6), (9, 10), (4, 5) }, new List\u003C(int, int)\u003E { (5, 4), (3, 4), (6, 5), (9, 11) }).SetEquals(new HashSet\u003C(int, int)\u003E { (4, 5), (3, 4), (5, 6) }));","Debug.Assert(TupleIntersection(new List\u003C(int, int)\u003E { (4, 1), (7, 4), (11, 13), (17, 14) }, new List\u003C(int, int)\u003E { (1, 4), (7, 4), (16, 12), (10, 13) }).SetEquals(new HashSet\u003C(int, int)\u003E { (4, 7), (1, 4) }));","Debug.Assert(TupleIntersection(new List\u003CTuple\u003Cint, int\u003E\u003E { Tuple.Create(2, 1), Tuple.Create(3, 2), Tuple.Create(1, 3), Tuple.Create(1, 4) }, new List\u003CTuple\u003Cint, int\u003E\u003E { Tuple.Create(11, 2), Tuple.Create(2, 3), Tuple.Create(6, 2), Tuple.Create(1, 3) }).SetEquals(new HashSet\u003CTuple\u003Cint, int\u003E\u003E { Tuple.Create(1, 3), Tuple.Create(2, 3) }));"],"challenge_test_list":[]}
{"name":"replace-chars","description":"Replace characters in a string with a function","text":"Write a function to replace characters in a string.","code":"public string ReplaceChar(string str1, char ch, char newch)  \n{  \n    string str2 = str1.Replace(ch, newch);  \n    return str2;  \n}","task_id":474,"test_setup_code":"","test_list":["Debug.Assert(ReplaceChar(\u0022polygon\u0022, \u0027y\u0027, \u0027l\u0027) == \u0022pollgon\u0022);","Debug.Assert(ReplaceChar(\u0022character\u0022, \u0027c\u0027, \u0027a\u0027) == \u0022aharaater\u0022);","Debug.Assert(ReplaceChar(\u0022python\u0022, \u0027l\u0027, \u0027a\u0027) == \u0022python\u0022);"],"challenge_test_list":[]}
{"name":"sort-counter-by-value","description":"Sort counter values in ascending order","text":"Write a function to sort counter by value.","code":"using System.Collections.Generic;\nusing System.Linq;\n\npublic class Example\n{\n    public List\u003CKeyValuePair\u003Cstring, int\u003E\u003E SortCounter(Dictionary\u003Cstring, int\u003E dict1)\n    {\n        var sortedCounter = dict1.OrderByDescending(x =\u003E x.Value).ToList();\n        return sortedCounter;\n    }\n}","task_id":475,"test_setup_code":"","test_list":["Debug.Assert(SortCounter(new Dictionary\u003Cstring, int\u003E { {\u0022Math\u0022, 81}, {\u0022Physics\u0022, 83}, {\u0022Chemistry\u0022, 87} }).SequenceEqual(new List\u003CKeyValuePair\u003Cstring, int\u003E\u003E { new KeyValuePair\u003Cstring, int\u003E(\u0022Chemistry\u0022, 87), new KeyValuePair\u003Cstring, int\u003E(\u0022Physics\u0022, 83), new KeyValuePair\u003Cstring, int\u003E(\u0022Math\u0022, 81) }));","Debug.Assert(SortCounter(new Dictionary\u003Cstring, int\u003E{{\u0022Math\u0022, 400}, {\u0022Physics\u0022, 300}, {\u0022Chemistry\u0022, 250}}).SequenceEqual(new List\u003CTuple\u003Cstring, int\u003E\u003E{Tuple.Create(\u0022Math\u0022, 400), Tuple.Create(\u0022Physics\u0022, 300), Tuple.Create(\u0022Chemistry\u0022, 250)}));","Debug.Assert(SortCounter(new Dictionary\u003Cstring, int\u003E{{\u0022Math\u0022, 900}, {\u0022Physics\u0022, 1000}, {\u0022Chemistry\u0022, 1250}}).SequenceEqual(new List\u003CKeyValuePair\u003Cstring, int\u003E\u003E { new KeyValuePair\u003Cstring, int\u003E(\u0022Chemistry\u0022, 1250), new KeyValuePair\u003Cstring, int\u003E(\u0022Physics\u0022, 1000), new KeyValuePair\u003Cstring, int\u003E(\u0022Math\u0022, 900) }));"],"challenge_test_list":[]}
{"name":"sum-largest-smallest","description":"Sum the largest and smallest values in an array","text":"Write a C# function to find the sum of the largest and smallest value in a given array.","code":"public int BigSum(List\u003Cint\u003E nums)\n{\n    int sum = nums.Max() \u002B nums.Min();\n    return sum;\n}","task_id":476,"test_setup_code":"","test_list":["Debug.Assert(BigSum(new int[] { 1, 2, 3 }) == 4);","Debug.Assert(BigSum(new int[] { -1, 2, 3, 4 }) == 3);","Debug.Assert(BigSum(new int[] { 2, 3, 6 }) == 8);"],"challenge_test_list":[]}
{"name":"convert-to-lower","description":"Convert a string to lower case in Python","text":"Write a C# function to convert the given string to lower case.","code":"public string IsLower(string input)\n{\n    return input.ToLower();\n}","task_id":477,"test_setup_code":"","test_list":["Debug.Assert(IsLower(\u0022InValid\u0022) == \u0022invalid\u0022);","Debug.Assert(IsLower(\u0022TruE\u0022) == \u0022true\u0022);","Debug.Assert(IsLower(\u0022SenTenCE\u0022) == \u0022sentence\u0022);"],"challenge_test_list":[]}
{"name":"remove-lower-sub","description":"Remove lowercase substrings from a string","text":"Write a function to remove lowercase substrings from a given string.","code":"using System.Text.RegularExpressions;\n\npublic class StringManipulator\n{\n    public string RemoveLowercase(string str1)\n    {\n        return Regex.Replace(str1, \u0022[a-z]\u0022, \u0022\u0022);\n    }\n}","task_id":478,"test_setup_code":"","test_list":["Debug.Assert(RemoveLowercase(\u0022PYTHon\u0022) == \u0022PYTH\u0022);","Debug.Assert(RemoveLowercase(\u0022FInD\u0022) == \u0022FID\u0022);","Debug.Assert(RemoveLowercase(\u0022STRinG\u0022) == \u0022STRG\u0022);"],"challenge_test_list":[]}
{"name":"first-digit-finder","description":"Find the first digit of a given number in Python","text":"Write a C# function to find the first digit of a given number.","code":"public int FirstDigit(int n)  \n{  \n    while (n \u003E= 10)  \n    {  \n        n = n / 10;  \n    }  \n    return n;  \n}","task_id":479,"test_setup_code":"","test_list":["Debug.Assert(FirstDigit(123) == 1);","Debug.Assert(FirstDigit(456) == 4);","Debug.Assert(FirstDigit(12) == 1);"],"challenge_test_list":[]}
{"name":"max-occ-char.py","description":"Find the most frequent character in a string","text":"Write a C# function to find the maximum occurring character in a given string.","code":"public static char GetMaxOccuringChar(string str1)\n{\n    const int ASCII_SIZE = 256;\n    int[] ctr = new int[ASCII_SIZE];\n    int max = -1;\n    char ch = \u0027\\0\u0027;\n\n    foreach (char i in str1)\n    {\n        ctr[i]\u002B\u002B;\n    }\n\n    foreach (char i in str1)\n    {\n        if (max \u003C ctr[i])\n        {\n            max = ctr[i];\n            ch = i;\n        }\n    }\n\n    return ch;\n}","task_id":480,"test_setup_code":"","test_list":["Debug.Assert(GetMaxOccuringChar(\u0022data\u0022) == \u0022a\u0022);","Debug.Assert(GetMaxOccuringChar(\u0022create\u0022) == \u0022e\u0022);","Debug.Assert(GetMaxOccuringChar(\u0022brilliant girl\u0022) == \u0022i\u0022);"],"challenge_test_list":[]}
{"name":"subset-sum-check","description":"Subset sum problem: find if subset matches sum","text":"Write a function to determine if there is a subset of the given set with sum equal to the given sum.","code":"bool IsSubsetSum(int[] set, int n, int sum) {\n    if (sum == 0) {\n        return true;\n    }\n    if (n == 0) {\n        return false;\n    }\n    if (set[n - 1] \u003E sum) {\n        return IsSubsetSum(set, n - 1, sum);\n    }\n    return IsSubsetSum(set, n - 1, sum) || IsSubsetSum(set, n - 1, sum - set[n - 1]);\n}","task_id":481,"test_setup_code":"","test_list":["Debug.Assert(IsSubsetSum(new int[] { 3, 34, 4, 12, 5, 2 }, 6, 9) == true);","Debug.Assert(IsSubsetSum(new int[] { 3, 34, 4, 12, 5, 2 }, 6, 30) == false);","Debug.Assert(IsSubsetSum(new int[] { 3, 34, 4, 12, 5, 2 }, 6, 15) == true);"],"challenge_test_list":[]}
{"name":"upper-lower-seq","description":"Find sequences of uppercase followed by lowercase letters","text":"Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.","code":"using System.Text.RegularExpressions;\n\npublic class Matcher\n{\n    public string Match(string text)\n    {\n        string pattern = \u0022[A-Z]\u002B[a-z]\u002B$\u0022;\n        if (Regex.IsMatch(text, pattern))\n        {\n            return \u0022Yes\u0022;\n        }\n        else\n        {\n            return \u0022No\u0022;\n        }\n    }\n}","task_id":482,"test_setup_code":"","test_list":["Debug.Assert(Match(\u0022Geeks\u0022) == \u0022Yes\u0022);","Debug.Assert(Match(\u0022geeksforGeeks\u0022) == \u0022Yes\u0022);","Debug.Assert(Match(\u0022geeks\u0022) == \u0022No\u0022);"],"challenge_test_list":[]}
{"name":"first-factorial","description":"Find first natural number with divisible factorial","text":"Write a C# function to find the first natural number whose factorial is divisible by x.","code":"public int FirstFactorialDivisibleNumber(int x) \n{ \n    int i = 1; \n    int fact = 1; \n    for (i = 1; i \u003C x; i\u002B\u002B) \n    { \n        fact *= i; \n        if (fact % x == 0) \n        { \n            break; \n        } \n    } \n    return i; \n}","task_id":483,"test_setup_code":"","test_list":["Debug.Assert(FirstFactorialDivisibleNumber(10) == 5);","Debug.Assert(FirstFactorialDivisibleNumber(15) == 5);","Debug.Assert(FirstFactorialDivisibleNumber(5) == 4);"],"challenge_test_list":[]}
{"name":"remove-matching-tup","description":"Remove matching tuples from two provided tuples","text":"Write a function to remove the matching tuples from the given two tuples.","code":"public List\u003CTuple\u003E RemoveMatchingTuple(List\u003CTuple\u003E testList1, List\u003CTuple\u003E testList2) {\n    var res = testList1.Where(sub =\u003E !testList2.Contains(sub)).ToList();\n    return res;\n}","task_id":484,"test_setup_code":"","test_list":["Debug.Assert(RemoveMatchingTuple(new List\u003CTuple\u003Cstring, string\u003E\u003E { Tuple.Create(\u0022Hello\u0022, \u0022dude\u0022), Tuple.Create(\u0022How\u0022, \u0022are\u0022), Tuple.Create(\u0022you\u0022, \u0022?\u0022) }, new List\u003CTuple\u003Cstring, string\u003E\u003E { Tuple.Create(\u0022Hello\u0022, \u0022dude\u0022), Tuple.Create(\u0022How\u0022, \u0022are\u0022) }).SequenceEqual(new List\u003CTuple\u003Cstring, string\u003E\u003E { Tuple.Create(\u0022you\u0022, \u0022?\u0022) }));","Debug.Assert(RemoveMatchingTuple(new List\u003CTuple\u003Cstring, string\u003E\u003E { Tuple.Create(\u0022Part\u0022, \u0022of\u0022), Tuple.Create(\u0022the\u0022, \u0022journey\u0022), Tuple.Create(\u0022is \u0022, \u0022end\u0022) }, new List\u003CTuple\u003Cstring, string\u003E\u003E { Tuple.Create(\u0022Journey\u0022, \u0022the\u0022), Tuple.Create(\u0022is\u0022, \u0022end\u0022) }).SequenceEqual(new List\u003CTuple\u003Cstring, string\u003E\u003E { Tuple.Create(\u0022Part\u0022, \u0022of\u0022), Tuple.Create(\u0022the\u0022, \u0022journey\u0022), Tuple.Create(\u0022is \u0022, \u0022end\u0022) }));","Debug.Assert(RemoveMatchingTuple(new[] { Tuple.Create(\u0022Its\u0022, \u0022been\u0022), Tuple.Create(\u0022a\u0022, \u0022long\u0022), Tuple.Create(\u0022day\u0022, \u0022without\u0022) }, new[] { Tuple.Create(\u0022a\u0022, \u0022long\u0022), Tuple.Create(\u0022my\u0022, \u0022friend\u0022) }).SequenceEqual(new[] { Tuple.Create(\u0022Its\u0022, \u0022been\u0022), Tuple.Create(\u0022day\u0022, \u0022without\u0022) }));"],"challenge_test_list":[]}
{"name":"largest-palindrome","description":"Find the largest palindromic number in an array","text":"Write a function to find the largest palindromic number in the given array.","code":"bool IsPalindrome(int n) \n{\n    int divisor = 1;\n    while (n / divisor \u003E= 10) \n    {\n        divisor *= 10;\n    }\n    while (n != 0) \n    {\n        int leading = n / divisor;\n        int trailing = n % 10;\n        if (leading != trailing) \n        {\n            return false;\n        }\n        n = (n % divisor) / 10;\n        divisor /= 100;\n    }\n    return true;\n}\n\nint LargestPalindrome(int[] A, int n) \n{\n    Array.Sort(A);\n    for (int i = n - 1; i \u003E= 0; i--) \n    {\n        if (IsPalindrome(A[i])) \n        {\n            return A[i];\n        }\n    }\n    return -1;\n}","task_id":485,"test_setup_code":"","test_list":["Debug.Assert(LargestPalindrome(new int[] { 1, 232, 54545, 999991 }, 4) == 54545);","Debug.Assert(LargestPalindrome(new int[] { 1, 2, 3, 4, 5, 50 }, 6) == 5);","Debug.Assert(LargestPalindrome(new int[] { 1, 3, 7, 9, 45 }, 5) == 9);"],"challenge_test_list":[]}
{"name":"binomial-probability","description":"Compute binomial probability for a given number","text":"Write a function to compute binomial probability for the given number.","code":"int NCr(int n, int r) \n{\n    if (r \u003E n / 2) \n    {\n        r = n - r;\n    }\n    int answer = 1;\n    for (int i = 1; i \u003C= r; i\u002B\u002B) \n    {\n        answer *= (n - r \u002B i);\n        answer /= i;\n    }\n    return answer;\n}\n\ndouble BinomialProbability(int n, int k, double p) \n{\n    return (NCr(n, k) * Math.Pow(p, k) * Math.Pow(1 - p, n - k));\n}","task_id":486,"test_setup_code":"","test_list":["Debug.Assert(BinomialProbability(10, 5, 1.0 / 3) == 0.13656454808718185);","Debug.Assert(BinomialProbability(11, 6, 2.0 / 4) == 0.2255859375);","Debug.Assert(BinomialProbability(12, 7, 3.0 / 5) == 0.227030335488);"],"challenge_test_list":[]}
{"name":"sort-tuple-list","description":"Sort tuples by the last element in each tuple","text":"Write a function to sort a list of tuples in increasing order by the last element in each tuple.","code":"public static Tuple\u003Cint, int\u003E[] SortTuple(Tuple\u003Cint, int\u003E[] tup) \n{\n    int lst = tup.Length; \n    for (int i = 0; i \u003C lst; i\u002B\u002B) \n    {\n        for (int j = 0; j \u003C lst - i - 1; j\u002B\u002B) \n        {\n            if (tup[j].Item2 \u003E tup[j \u002B 1].Item2) \n            {\n                var temp = tup[j]; \n                tup[j] = tup[j \u002B 1]; \n                tup[j \u002B 1] = temp; \n            } \n        } \n    } \n    return tup; \n}","task_id":487,"test_setup_code":"","test_list":["Debug.Assert(SortTuple(new List\u003C(int, int)\u003E { (1, 3), (3, 2), (2, 1) }).SequenceEqual(new List\u003C(int, int)\u003E { (2, 1), (3, 2), (1, 3) }));","Debug.Assert(SortTuple(new List\u003C(int, int)\u003E { (2, 4), (3, 3), (1, 1) }).SequenceEqual(new List\u003C(int, int)\u003E { (1, 1), (3, 3), (2, 4) }));","Debug.Assert(SortTuple(new List\u003C(int, int)\u003E { (3, 9), (6, 7), (4, 3) }).SequenceEqual(new List\u003C(int, int)\u003E { (4, 3), (6, 7), (3, 9) }));"],"challenge_test_list":[]}
{"name":"area-of-pentagon","description":"Calculate the area of a pentagon using a function","text":"Write a function to find the area of a pentagon.","code":"public static double AreaPentagon(double a)\n{\n    double area = (Math.Sqrt(5 * (5 \u002B 2 * Math.Sqrt(5))) * Math.Pow(a, 2)) / 4.0;\n    return area;\n}","task_id":488,"test_setup_code":"","test_list":["Debug.Assert(AreaPentagon(5) == 43.01193501472417);","Debug.Assert(AreaPentagon(10) == 172.0477400588967);","Debug.Assert(AreaPentagon(15) == 387.10741513251753);"],"challenge_test_list":[]}
{"name":"largest-value-freq","description":"Find frequency of largest value in an array","text":"Write a C# function to find the frequency of the largest value in a given array.","code":"public int FrequencyOfLargest(int n, int[] arr) \n{ \n    int mn = arr[0]; \n    int freq = 1; \n    for (int i = 1; i \u003C n; i\u002B\u002B) \n    { \n        if (arr[i] \u003E mn) \n        { \n            mn = arr[i]; \n            freq = 1; \n        } \n        else if (arr[i] == mn) \n        { \n            freq\u002B\u002B; \n        } \n    } \n    return freq; \n}","task_id":489,"test_setup_code":"","test_list":["Debug.Assert(FrequencyOfLargest(5, new int[] { 1, 2, 3, 4, 4 }) == 2);","Debug.Assert(FrequencyOfLargest(3, new int[] { 5, 6, 5 }) == 1);","Debug.Assert(FrequencyOfLargest(4, new int[] { 2, 7, 7, 7 }) == 3);"],"challenge_test_list":[]}
{"name":"symmetric-pairs","description":"Extract symmetric pairs from a list of tuples","text":"Write a function to extract all the pairs which are symmetric in the given tuple list.","code":"public static HashSet\u003C(int, int)\u003E ExtractSymmetric(List\u003C(int, int)\u003E testList) \n{\n    var temp = new HashSet\u003C(int, int)\u003E(testList);\n    temp.IntersectWith(testList.Select(x =\u003E (x.Item2, x.Item1)));\n    var res = new HashSet\u003C(int, int)\u003E(temp.Where(x =\u003E x.Item1 \u003C x.Item2));\n    return res;\n}","task_id":490,"test_setup_code":"","test_list":["Debug.Assert(ExtractSymmetric(new (int, int)[] { (6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9) }).SetEquals(new HashSet\u003C(int, int)\u003E { (8, 9), (6, 7) }));","Debug.Assert(ExtractSymmetric(new List\u003C(int, int)\u003E{(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)}) .SetEquals(new HashSet\u003C(int, int)\u003E{(9, 10), (7, 8)}));","Debug.Assert(ExtractSymmetric(new List\u003C(int, int)\u003E{(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)}) .SetEquals(new HashSet\u003C(int, int)\u003E{(8, 9), (10, 11)}));"],"challenge_test_list":[]}
{"name":"geo-prog-sum","description":"Calculate the sum of a geometric series","text":"Write a function to find the sum of geometric progression series.","code":"public static double SumGp(double a, int n, double r)\n{\n    double total = (a * (1 - Math.Pow(r, n))) / (1 - r);\n    return total;\n}","task_id":491,"test_setup_code":"","test_list":["Debug.Assert(SumGp(1, 5, 2) == 31);","Debug.Assert(SumGp(1, 5, 4) == 341);","Debug.Assert(SumGp(2, 6, 3) == 728);"],"challenge_test_list":[]}
{"name":"binary-search.py","description":"Binary search for an element in an array","text":"Write a function to search an element in the given array by using binary search.","code":"bool BinarySearch(List\u003Cint\u003E itemList, int item)\r\n{\r\n    int first = 0;\r\n    int last = itemList.Count - 1;\r\n    bool found = false;\r\n    while (first \u003C= last \u0026\u0026 !found)\r\n    {\r\n        int mid = (first \u002B last) / 2;\r\n        if (itemList[mid] == item)\r\n        {\r\n            found = true;\r\n        }\r\n        else\r\n        {\r\n            if (item \u003C itemList[mid])\r\n            {\r\n                last = mid - 1;\r\n            }\r\n            else\r\n            {\r\n                first = mid \u002B 1;\r\n            }\r\n        }\r\n    }\r\n    return found;\r\n}","task_id":492,"test_setup_code":"","test_list":["Debug.Assert(BinarySearch(new int[] { 1, 2, 3, 5, 8 }, 6) == false);","Debug.Assert(BinarySearch(new int[] { 7, 8, 9, 10, 13 }, 10) == true);","Debug.Assert(BinarySearch(new int[] { 11, 13, 14, 19, 22, 36 }, 23) == false);"],"challenge_test_list":[]}
{"name":"hexagon-coords","description":"Generate hexagon coordinates as a list of tuples","text":"Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.","code":"public List\u003CTuple\u003Cdouble, double\u003E[]\u003E CalculatePolygons(double startx, double starty, double endx, double endy, double radius)\n{\n    double sl = (2 * radius) * Math.Tan(Math.PI / 6);\n    double p = sl * 0.5;\n    double b = sl * Math.Cos(Math.PI / 6);\n    double w = b * 2;\n    double h = 2 * sl;   \n    startx = startx - w;\n    starty = starty - h;\n    endx = endx \u002B w;\n    endy = endy \u002B h;\n    double origx = startx;\n    double origy = starty;\n    double xoffset = b;\n    double yoffset = 3 * p;\n    List\u003CTuple\u003Cdouble, double\u003E[]\u003E polygons = new List\u003CTuple\u003Cdouble, double\u003E[]\u003E();\n    int row = 1;\n    int counter = 0;\n\n    while (starty \u003C endy)\n    {\n        if (row % 2 == 0)\n        {\n            startx = origx \u002B xoffset;\n        }\n        else\n        {\n            startx = origx;\n        }\n\n        while (startx \u003C endx)\n        {\n            double p1x = startx;\n            double p1y = starty \u002B p;\n            double p2x = startx;\n            double p2y = starty \u002B (3 * p);\n            double p3x = startx \u002B b;\n            double p3y = starty \u002B h;\n            double p4x = startx \u002B w;\n            double p4y = starty \u002B (3 * p);\n            double p5x = startx \u002B w;\n            double p5y = starty \u002B p;\n            double p6x = startx \u002B b;\n            double p6y = starty;\n\n            Tuple\u003Cdouble, double\u003E[] poly = new Tuple\u003Cdouble, double\u003E[]\n            {\n                Tuple.Create(p1x, p1y),\n                Tuple.Create(p2x, p2y),\n                Tuple.Create(p3x, p3y),\n                Tuple.Create(p4x, p4y),\n                Tuple.Create(p5x, p5y),\n                Tuple.Create(p6x, p6y),\n                Tuple.Create(p1x, p1y)\n            };\n\n            polygons.Add(poly);\n            counter\u002B\u002B;\n            startx \u002B= w;\n        }\n\n        starty \u002B= yoffset;\n        row\u002B\u002B;\n    }\n    return polygons;\n}","task_id":493,"test_setup_code":"","test_list":["Debug.Assert(CalculatePolygons(1, 1, 4, 4, 3).SequenceEqual(new List\u003CList\u003C(double, double)\u003E\u003E()\n{\n    new List\u003C(double, double)\u003E() { (-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632) },\n    new List\u003C(double, double)\u003E() { (1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632) },\n    new List\u003C(double, double)\u003E() { (7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632) },\n    new List\u003C(double, double)\u003E() { (-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004) },\n    new List\u003C(double, double)\u003E() { (4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004) },\n    new List\u003C(double, double)\u003E() { (-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632) },\n    new List\u003C(double, double)\u003E() { (1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632) },\n    new List\u003C(double, double)\u003E() { (7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632) },\n    new List\u003C(double, double)\u003E() { (-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264) },\n    new List\u003C(double, double)\u003E() { (4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264) }\n}));","Debug.Assert(CalculatePolygons(5, 4, 7, 9, 8).SequenceEqual(new List\u003CList\u003C(double, double)\u003E\u003E()\n{\n    new List\u003C(double, double)\u003E() { (-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018) },\n    new List\u003C(double, double)\u003E() { (5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018) },\n    new List\u003C(double, double)\u003E() { (21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018) },\n    new List\u003C(double, double)\u003E() { (-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0) },\n    new List\u003C(double, double)\u003E() { (13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0) },\n    new List\u003C(double, double)\u003E() { (-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018) },\n    new List\u003C(double, double)\u003E() { (5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018) },\n    new List\u003C(double, double)\u003E() { (21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018) },\n    new List\u003C(double, double)\u003E() { (-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035) },\n    new List\u003C(double, double)\u003E() { (13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035) }\n}));","Debug.Assert(CalculatePolygons(9, 6, 4, 3, 2).SequenceEqual(new List\u003CList\u003C(double, double)\u003E\u003E { \n    new List\u003C(double, double)\u003E { (5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456) }, \n    new List\u003C(double, double)\u003E { (7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0) } \n}));"],"challenge_test_list":[]}
{"name":"binary-tuple-to-int","description":"Convert a binary tuple to its integer value","text":"Write a function to convert the given binary tuple to integer.","code":"public string BinaryToInteger(Tuple\u003Cint\u003E[] testTup) {\r\n    string res = Convert.ToInt32(string.Join(\u0022\u0022, testTup.Select(ele =\u003E ele.ToString())), 2).ToString();\r\n    return res;\r\n}","task_id":494,"test_setup_code":"","test_list":["Debug.Assert(BinaryToInteger(new int[] { 1, 1, 0, 1, 0, 0, 1 }) == \u0022105\u0022);","Debug.Assert(BinaryToInteger(new int[] { 0, 1, 1, 0, 0, 1, 0, 1 }) == \u0022101\u0022);","Debug.Assert(BinaryToInteger(new int[] { 1, 1, 0, 1, 0, 1 }) == \u002253\u0022);"],"challenge_test_list":[]}
{"name":"remove-lowercase","description":"Remove lowercase substrings using regex function","text":"Write a function to remove lowercase substrings from a given string by using regex.","code":"public string RemoveLowercase(string str1) {\n    Func\u003Cstring, string\u003E removeLower = text =\u003E Regex.Replace(text, \u0022[a-z]\u0022, \u0022\u0022);\n    string result = removeLower(str1);\n    return result;\n}","task_id":495,"test_setup_code":"","test_list":["Debug.Assert(RemoveLowercase(\u0022KDeoALOklOOHserfLoAJSIskdsf\u0022) == \u0022KDALOOOHLAJSI\u0022);","Debug.Assert(RemoveLowercase(\u0022ProducTnamEstreAmIngMediAplAYer\u0022) == \u0022PTEAIMAAY\u0022);","Debug.Assert(RemoveLowercase(\u0022maNufacTuredbYSheZenTechNolOGIes\u0022) == \u0022NTYSZTNOGI\u0022);"],"challenge_test_list":[]}
{"name":"smallest-int-heap","description":"Find smallest integers using heap queue method","text":"Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.","code":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class HeapQueue\n{\n    public List\u003Cint\u003E HeapQueueSmallest(List\u003Cint\u003E nums, int n)\n    {\n        return nums.OrderBy(x =\u003E x).Take(n).ToList();\n    }\n}","task_id":496,"test_setup_code":"","test_list":["Debug.Assert(HeapQueueSmallest(new int[] { 25, 35, 22, 85, 14, 65, 75, 25, 58 }, 3).SequenceEqual(new int[] { 14, 22, 25 }));","Debug.Assert(HeapQueueSmallest(new List\u003Cint\u003E { 25, 35, 22, 85, 14, 65, 75, 25, 58 }, 2).SequenceEqual(new List\u003Cint\u003E { 14, 22 }));","Debug.Assert(HeapQueueSmallest(new int[] { 25, 35, 22, 85, 14, 65, 75, 22, 58 }, 5).SequenceEqual(new int[] { 14, 22, 22, 25, 35 }));"],"challenge_test_list":[]}
{"name":"cone-surface-area","description":"Calculate the surface area of a cone function","text":"Write a function to find the surface area of a cone.","code":"public static double SurfaceAreaCone(double r, double h)  \n{  \n    double l = Math.Sqrt(r * r \u002B h * h);  \n    double SA = Math.PI * r * (r \u002B l);  \n    return SA;  \n}","task_id":497,"test_setup_code":"","test_list":["Debug.Assert(SurfaceAreaCone(5, 12) == 282.7433388230814);","Debug.Assert(SurfaceAreaCone(10, 15) == 880.5179353159282);","Debug.Assert(SurfaceAreaCone(19, 17) == 2655.923961165254);"],"challenge_test_list":[]}
{"name":"gcd-of-two-numbers","description":"Calculate the greatest common divisor of two numbers","text":"Write a C# function to find gcd of two positive integers.","code":"public int Gcd(int x, int y) \n{\n    int gcd = 1;\n    if (x % y == 0)\n    {\n        return y;\n    }\n    for (int k = y / 2; k \u003E 0; k--)\n    {\n        if (x % k == 0 \u0026\u0026 y % k == 0)\n        {\n            gcd = k;\n            break;\n        }\n    }\n    return gcd;\n}","task_id":498,"test_setup_code":"","test_list":["Debug.Assert(Gcd(12, 17) == 1);","Debug.Assert(Gcd(4, 6) == 2);","Debug.Assert(Gcd(2, 9) == 1);"],"challenge_test_list":[]}
{"name":"circle-diameter","description":"Calculate the diameter of a circle from its radius","text":"Write a function to find the diameter of a circle.","code":"public double DiameterCircle(double r)  \n{  \n    double diameter = 2 * r;  \n    return diameter;  \n}","task_id":499,"test_setup_code":"","test_list":["Debug.Assert(DiameterCircle(10) == 20);","Debug.Assert(DiameterCircle(40) == 80);","Debug.Assert(DiameterCircle(15) == 30);"],"challenge_test_list":[]}
{"name":"concat-list-to-str","description":"Concatenate list elements into a single string","text":"Write a function to concatenate all elements of the given list into a string.","code":"public string ConcatenateElements(List\u003Cstring\u003E list) \n{\n    string ans = \u0022 \u0022;\n    foreach (string i in list) \n    {\n        ans \u002B= \u0022 \u0022 \u002B i;\n    }\n    return ans;\n}","task_id":500,"test_setup_code":"","test_list":["Debug.Assert(ConcatenateElements(new string[] { \u0022hello\u0022, \u0022there\u0022, \u0022have\u0022, \u0022a\u0022, \u0022rocky\u0022, \u0022day\u0022 }) == \u0022  hello there have a rocky day\u0022);","Debug.Assert(ConcatenateElements(new string[] { \u0022Hi\u0022, \u0022there\u0022, \u0022How\u0022, \u0022are\u0022, \u0022you\u0022 }) == \u0022  Hi there How are you\u0022);","Debug.Assert(ConcatenateElements(new string[] { \u0022Part\u0022, \u0022of\u0022, \u0022the\u0022, \u0022journey\u0022, \u0022is\u0022, \u0022end\u0022 }) == \u0022  Part of the journey is end\u0022);"],"challenge_test_list":[]}
{"name":"common-divisor","description":"Find common divisor of two numbers in a pair","text":"Write a C# function to find common divisor between two numbers in a given pair.","code":"int Ngcd(int x, int y) {\n    int i = 1;\n    int gcd = 1;\n    while (i \u003C= x \u0026\u0026 i \u003C= y) {\n        if (x % i == 0 \u0026\u0026 y % i == 0) {\n            gcd = i;\n        }\n        i\u002B\u002B;\n    }\n    return gcd;\n}\n\nint NumCommDiv(int x, int y) {\n    int n = Ngcd(x, y);\n    int result = 0;\n    int z = (int)Math.Sqrt(n);\n    int i = 1;\n    while (i \u003C= z) {\n        if (n % i == 0) {\n            result \u002B= 2;\n            if (i == n / i) {\n                result--;\n            }\n        }\n        i\u002B\u002B;\n    }\n    return result;\n}","task_id":501,"test_setup_code":"","test_list":["Debug.Assert(NumCommDiv(2, 4) == 2);","Debug.Assert(NumCommDiv(2, 8) == 2);","Debug.Assert(NumCommDiv(12, 24) == 6);"],"challenge_test_list":[]}
{"name":"remainder-of-two","description":"Function to calculate the remainder of two numbers","text":"Write a C# function to find remainder of two numbers.","code":"public int Find(int n, int m)  \n{  \n    int r = n % m;  \n    return r;  \n}","task_id":502,"test_setup_code":"","test_list":["Debug.Assert(Find(3, 3) == 0);","Debug.Assert(Find(10, 3) == 1);","Debug.Assert(Find(16, 5) == 1);"],"challenge_test_list":[]}
{"name":"consecutive-sum","description":"Function to sum consecutive numbers in a list","text":"Write a function to add consecutive numbers of a given list.","code":"public List\u003Cint\u003E AddConsecutiveNums(List\u003Cint\u003E nums) \n{\n    List\u003Cint\u003E result = new List\u003Cint\u003E();\n    for (int i = 0; i \u003C nums.Count - 1; i\u002B\u002B)\n    {\n        result.Add(nums[i] \u002B nums[i \u002B 1]);\n    }\n    return result;\n}","task_id":503,"test_setup_code":"","test_list":["Debug.Assert(AddConsecutiveNums(new List\u003Cint\u003E { 1, 1, 3, 4, 4, 5, 6, 7 }).SequenceEqual(new List\u003Cint\u003E { 2, 4, 7, 8, 9, 11, 13 }));","Debug.Assert(AddConsecutiveNums(new int[] { 4, 5, 8, 9, 6, 10 }).SequenceEqual(new int[] { 9, 13, 17, 15, 16 }));","Debug.Assert(AddConsecutiveNums(new List\u003Cint\u003E { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }).SequenceEqual(new List\u003Cint\u003E { 3, 5, 7, 9, 11, 13, 15, 17, 19 }));"],"challenge_test_list":[]}
{"name":"cube-sum-nat-nrs","description":"Calculate the cube sum of first n natural numbers","text":"Write a C# function to find the cube sum of first n natural numbers.","code":"public int SumOfSeries(int n) \n{ \n    int sum = 0; \n    for (int i = 1; i \u003C= n; i\u002B\u002B) \n    { \n        sum \u002B= i * i * i; \n    } \n    return sum; \n}","task_id":504,"test_setup_code":"","test_list":["Debug.Assert(SumOfSeries(5) == 225);","Debug.Assert(SumOfSeries(2) == 9);","Debug.Assert(SumOfSeries(3) == 36);"],"challenge_test_list":[]}
{"name":"move-zeroes-end","description":"Move all zeroes to the end of an array","text":"Write a function to move all zeroes to the end of the given array.","code":"public int[] ReOrder(int[] A) {\n    int k = 0;\n    foreach (int i in A) {\n        if (i != 0) {\n            A[k] = i;\n            k\u002B\u002B;\n        }\n    }\n    for (int i = k; i \u003C A.Length; i\u002B\u002B) {\n        A[i] = 0;\n    }\n    return A;\n}","task_id":505,"test_setup_code":"","test_list":["Debug.Assert(ReOrder(new int[] { 6, 0, 8, 2, 3, 0, 4, 0, 1 }).SequenceEqual(new int[] { 6, 8, 2, 3, 4, 1, 0, 0, 0 }));","Debug.Assert(ReOrder(new int[] { 4, 0, 2, 7, 0, 9, 0, 12, 0 }).SequenceEqual(new int[] { 4, 2, 7, 9, 12, 0, 0, 0, 0 }));","Debug.Assert(ReOrder(new int[] { 3, 11, 0, 74, 14, 0, 1, 0, 2 }).SequenceEqual(new int[] { 3, 11, 74, 14, 1, 2, 0, 0, 0 }));"],"challenge_test_list":[]}
{"name":"perm-coeff-calc","description":"Calculate permutation coefficient p(n, k) function","text":"Write a function to calculate the permutation coefficient of given p(n, k).","code":"public int PermutationCoefficient(int n, int k) \n{\n    int[][] P = new int[n \u002B 1][];\n    for (int j = 0; j \u003C= n; j\u002B\u002B)\n    {\n        P[j] = new int[k \u002B 1];\n    }\n\n    for (int i = 0; i \u003C= n; i\u002B\u002B) \n    {\n        for (int j = 0; j \u003C= Math.Min(i, k); j\u002B\u002B) \n        {\n            if (j == 0) \n            {\n                P[i][j] = 1;\n            } \n            else \n            {\n                P[i][j] = P[i - 1][j] \u002B (j * P[i - 1][j - 1]);\n            }\n            if (j \u003C k) \n            {\n                P[i][j \u002B 1] = 0;\n            }\n        }\n    }\n    return P[n][k];\n}","task_id":506,"test_setup_code":"","test_list":["Debug.Assert(PermutationCoefficient(10, 2) == 90);","Debug.Assert(PermutationCoefficient(10, 3) == 720);","Debug.Assert(PermutationCoefficient(10, 1) == 10);"],"challenge_test_list":[]}
{"name":"remove-words-func","description":"Remove specified words from a list with a function","text":"Write a function to remove specific words from a given list.","code":"public List\u003Cstring\u003E RemoveWords(List\u003Cstring\u003E list1, List\u003Cstring\u003E removeWords)\n{\n    foreach (var word in new List\u003Cstring\u003E(list1))\n    {\n        if (removeWords.Contains(word))\n        {\n            list1.Remove(word);\n        }\n    }\n    return list1;\n}","task_id":507,"test_setup_code":"","test_list":["Debug.Assert(RemoveWords(new List\u003Cstring\u003E { \u0022red\u0022, \u0022green\u0022, \u0022blue\u0022, \u0022white\u0022, \u0022black\u0022, \u0022orange\u0022 }, new List\u003Cstring\u003E { \u0022white\u0022, \u0022orange\u0022 }).SequenceEqual(new List\u003Cstring\u003E { \u0022red\u0022, \u0022green\u0022, \u0022blue\u0022, \u0022black\u0022 }));","Debug.Assert(RemoveWords(new List\u003Cstring\u003E { \u0022red\u0022, \u0022green\u0022, \u0022blue\u0022, \u0022white\u0022, \u0022black\u0022, \u0022orange\u0022 }, new List\u003Cstring\u003E { \u0022black\u0022, \u0022orange\u0022 }).SequenceEqual(new List\u003Cstring\u003E { \u0022red\u0022, \u0022green\u0022, \u0022blue\u0022, \u0022white\u0022 }));","Debug.Assert(RemoveWords(new List\u003Cstring\u003E { \u0022red\u0022, \u0022green\u0022, \u0022blue\u0022, \u0022white\u0022, \u0022black\u0022, \u0022orange\u0022 }, new List\u003Cstring\u003E { \u0022blue\u0022, \u0022white\u0022 }).SequenceEqual(new List\u003Cstring\u003E { \u0022red\u0022, \u0022green\u0022, \u0022black\u0022, \u0022orange\u0022 }));"],"challenge_test_list":[]}
{"name":"check-common-order","description":"Check if common elements in lists preserve order","text":"Write a function to check if the common elements between two given lists are in the same order or not.","code":"public bool SameOrder(List\u003Cint\u003E l1, List\u003Cint\u003E l2) {\n    var commonElements = new HashSet\u003Cint\u003E(l1).Intersect(l2).ToList();\n    l1 = l1.Where(e =\u003E commonElements.Contains(e)).ToList();\n    l2 = l2.Where(e =\u003E commonElements.Contains(e)).ToList();\n    return l1.SequenceEqual(l2);\n}","task_id":508,"test_setup_code":"","test_list":["Debug.Assert(SameOrder(new string[] {\u0022red\u0022, \u0022green\u0022, \u0022black\u0022, \u0022orange\u0022}, new string[] {\u0022red\u0022, \u0022pink\u0022, \u0022green\u0022, \u0022white\u0022, \u0022black\u0022}) == true);","Debug.Assert(SameOrder(new string[] { \u0022red\u0022, \u0022pink\u0022, \u0022green\u0022, \u0022white\u0022, \u0022black\u0022 }, new string[] { \u0022white\u0022, \u0022orange\u0022, \u0022pink\u0022, \u0022black\u0022 }) == false);","Debug.Assert(SameOrder(new string[] { \u0022red\u0022, \u0022green\u0022, \u0022black\u0022, \u0022orange\u0022 }, new string[] { \u0022red\u0022, \u0022pink\u0022, \u0022green\u0022, \u0022white\u0022, \u0022black\u0022 }) == true);"],"challenge_test_list":[]}
{"name":"average-odds","description":"Calculate the average of odd numbers up to n","text":"Write a C# function to find the average of odd numbers till a given odd number.","code":"public static int AverageOdd(int n) \n{ \n    if (n % 2 == 0) \n    { \n        return -1; \n    } \n    \n    int sm = 0; \n    int count = 0; \n    \n    while (n \u003E= 1) \n    { \n        count = count \u002B 1; \n        sm = sm \u002B n; \n        n = n - 2; \n    } \n    \n    return sm / count; \n}","task_id":509,"test_setup_code":"","test_list":["Debug.Assert(AverageOdd(9) == 5);","Debug.Assert(AverageOdd(5) == 3);","Debug.Assert(AverageOdd(11) == 6);"],"challenge_test_list":[]}
{"name":"subseq-prod-smaller","description":"Count subsequences with product less than k","text":"Write a function to find the number of subsequences having product smaller than k for the given non negative array.","code":"public int NoOfSubsequences(int[] arr, int k) \n{\n    int n = arr.Length;\n    int[,] dp = new int[k \u002B 1, n \u002B 1];\n\n    for (int i = 1; i \u003C= k; i\u002B\u002B) \n    {\n        for (int j = 1; j \u003C= n; j\u002B\u002B) \n        {\n            dp[i, j] = dp[i, j - 1];\n            if (arr[j - 1] \u003C= i \u0026\u0026 arr[j - 1] \u003E 0) \n            {\n                dp[i, j] \u002B= dp[i / arr[j - 1], j - 1] \u002B 1;\n            }\n        }\n    }\n    return dp[k, n];\n}","task_id":510,"test_setup_code":"","test_list":["Debug.Assert(NoOfSubsequences(new int[] { 1, 2, 3, 4 }, 10) == 11);","Debug.Assert(NoOfSubsequences(new int[] { 4, 8, 7, 2 }, 50) == 9);","Debug.Assert(NoOfSubsequences(new int[] { 5, 6, 7, 8 }, 15) == 4);"],"challenge_test_list":[]}
{"name":"min-sum-factors","description":"Find minimum sum of factors for a given number","text":"Write a C# function to find minimum sum of factors of a given number.","code":"public int FindMinSum(int num) \n{ \n    int sum = 0; \n    int i = 2; \n    while (i * i \u003C= num) \n    { \n        while (num % i == 0) \n        { \n            sum \u002B= i; \n            num /= i; \n        } \n        i\u002B\u002B; \n    } \n    sum \u002B= num; \n    return sum; \n}","task_id":511,"test_setup_code":"","test_list":["Debug.Assert(FindMinSum(12) == 7);","Debug.Assert(FindMinSum(105) == 15);","Debug.Assert(FindMinSum(2) == 2);"],"challenge_test_list":[]}
{"name":"element-frequency","description":"Count frequencies of elements in a nested tuple","text":"Write a function to count the element frequency in the mixed nested tuple.","code":"public static Dictionary\u003Cobject, int\u003E CountElementFreq(IEnumerable\u003Cobject\u003E testTuple) \n{\n    var res = new Dictionary\u003Cobject, int\u003E();\n    foreach (var ele in Flatten(testTuple))\n    {\n        if (!res.ContainsKey(ele))\n        {\n            res[ele] = 0;\n        }\n        res[ele]\u002B\u002B;\n    }\n    return res;\n}\n\nprivate static IEnumerable\u003Cobject\u003E Flatten(IEnumerable\u003Cobject\u003E testTuple) \n{\n    foreach (var tup in testTuple) \n    {\n        if (tup is IEnumerable\u003Cobject\u003E subTuple) \n        {\n            foreach (var item in Flatten(subTuple)) \n            {\n                yield return item;\n            }\n        } \n        else \n        {\n            yield return tup;\n        }\n    }\n}","task_id":512,"test_setup_code":"","test_list":["Debug.Assert(Flatten((5, 6, (5, 6), 7, (8, 9), 9)).SequenceEqual(new Dictionary\u003Cint, int\u003E { { 5, 2 }, { 6, 2 }, { 7, 1 }, { 8, 1 }, { 9, 2 } }));","Debug.Assert(Flatten((6, 7, (6, 7), 8, (9, 10), 10)) == new Dictionary\u003Cint, int\u003E { { 6, 2 }, { 7, 2 }, { 8, 1 }, { 9, 1 }, { 10, 2 } });","Debug.Assert(Flatten((7, 8, (7, 8), 9, (10, 11), 11)).SequenceEqual(new Dictionary\u003Cint, int\u003E { { 7, 2 }, { 8, 2 }, { 9, 1 }, { 10, 1 }, { 11, 2 } }));"],"challenge_test_list":[]}
{"name":"tuple-to-list-add","description":"Convert tuple to list with string after each element","text":"Write a function to convert tuple into list by adding the given string after every element.","code":"public List\u003Cobject\u003E AddStr(IEnumerable\u003CIEnumerable\u003Cobject\u003E\u003E testTup, object K) \n{\n    var res = testTup.SelectMany(sub =\u003E new List\u003Cobject\u003E { sub, K }).ToList();\n    return res;\n}","task_id":513,"test_setup_code":"","test_list":["Debug.Assert(AddStr(new Tuple\u003Cint, int, int, int, int\u003E(5, 6, 7, 4, 9), \u0022FDF\u0022).SequenceEqual(new object[] { 5, \u0022FDF\u0022, 6, \u0022FDF\u0022, 7, \u0022FDF\u0022, 4, \u0022FDF\u0022, 9, \u0022FDF\u0022 }));","Debug.Assert(AddStr(new int[] { 7, 8, 9, 10 }, \u0022PF\u0022).SequenceEqual(new object[] { 7, \u0022PF\u0022, 8, \u0022PF\u0022, 9, \u0022PF\u0022, 10, \u0022PF\u0022 }));","Debug.Assert(AddStr(new int[] { 11, 14, 12, 1, 4 }, \u0022JH\u0022).SequenceEqual(new object[] { 11, \u0022JH\u0022, 14, \u0022JH\u0022, 12, \u0022JH\u0022, 1, \u0022JH\u0022, 4, \u0022JH\u0022 }));"],"challenge_test_list":[]}
{"name":"summation-tuple","description":"Sum elements of tuples in a given list","text":"Write a function to find the summation of tuple elements in the given tuple list.","code":"public static int SumElements(IEnumerable\u003Cint\u003E testTup)  \n{  \n    int res = testTup.Sum();  \n    return res;  \n}","task_id":514,"test_setup_code":"","test_list":["Debug.Assert(SumElements(new int[] { 7, 8, 9, 1, 10, 7 }) == 42);","Debug.Assert(SumElements(new int[] { 1, 2, 3, 4, 5, 6 }) == 21);","Debug.Assert(SumElements(new int[] { 11, 12, 13, 45, 14 }) == 95);"],"challenge_test_list":[]}
{"name":"subset-sum-check","description":"Check for subset sum divisible by m","text":"Write a function to check if there is a subset with sum divisible by m.","code":"bool ModularSum(int[] arr, int n, int m) \n{ \n    if (n \u003E m) \n    { \n        return true; \n    } \n    bool[] DP = new bool[m]; \n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    { \n        if (DP[0]) \n        { \n            return true; \n        } \n        bool[] temp = new bool[m]; \n        for (int j = 0; j \u003C m; j\u002B\u002B) \n        { \n            if (DP[j]) \n            { \n                if (!DP[(j \u002B arr[i]) % m]) \n                { \n                    temp[(j \u002B arr[i]) % m] = true; \n                } \n            } \n        } \n        for (int j = 0; j \u003C m; j\u002B\u002B) \n        { \n            if (temp[j]) \n            { \n                DP[j] = true; \n            } \n        } \n        DP[arr[i] % m] = true; \n    } \n    return DP[0]; \n}","task_id":515,"test_setup_code":"","test_list":["Debug.Assert(ModularSum(new int[] { 3, 1, 7, 5 }, 4, 6) == true);","Debug.Assert(ModularSum(new int[] { 1, 7 }, 2, 5) == false);","Debug.Assert(ModularSum(new int[] { 1, 6 }, 2, 5) == false);"],"challenge_test_list":[]}
{"name":"radix-sort-list","description":"Radix sort function for sorting a list of elements","text":"Write a function to sort a list of elements using radix sort.","code":"public List\u003Cint\u003E RadixSort(List\u003Cint\u003E nums) \n{\n    const int RADIX = 10;\n    int placement = 1;\n    int maxDigit = nums.Max();\n\n    while (placement \u003C maxDigit) \n    {\n        List\u003CList\u003Cint\u003E\u003E buckets = new List\u003CList\u003Cint\u003E\u003E();\n        for (int i = 0; i \u003C RADIX; i\u002B\u002B) \n        {\n            buckets.Add(new List\u003Cint\u003E());\n        }\n        \n        foreach (int i in nums) \n        {\n            int tmp = (i / placement) % RADIX;\n            buckets[tmp].Add(i);\n        }\n\n        int a = 0;\n        for (int b = 0; b \u003C RADIX; b\u002B\u002B) \n        {\n            List\u003Cint\u003E buck = buckets[b];\n            foreach (int i in buck) \n            {\n                nums[a] = i;\n                a\u002B\u002B;\n            }\n        }\n        placement *= RADIX;\n    }\n    return nums;\n}","task_id":516,"test_setup_code":"","test_list":["Debug.Assert(RadixSort(new int[] { 15, 79, 25, 68, 37 }).SequenceEqual(new int[] { 15, 25, 37, 68, 79 }));","Debug.Assert(RadixSort(new int[] { 9, 11, 8, 7, 3, 2 }).SequenceEqual(new int[] { 2, 3, 7, 8, 9, 11 }));","Debug.Assert(RadixSort(new int[] { 36, 12, 24, 26, 29 }) == new int[] { 12, 24, 26, 29, 36 });"],"challenge_test_list":[]}
{"name":"largest-positive-number","description":"Find the largest positive number in a list","text":"Write a C# function to find the largest postive number from the given list.","code":"public int LargestPos(List\u003Cint\u003E list1) \n{\n    int max = list1[0]; \n    foreach (int x in list1) \n    {\n        if (x \u003E max) \n        {\n            max = x; \n        }\n    }\n    return max;\n}","task_id":517,"test_setup_code":"","test_list":["Debug.Assert(LargestPos(new int[] { 1, 2, 3, 4, -1 }) == 4);","Debug.Assert(LargestPos(new int[] { 0, 1, 2, -5, -1, 6 }) == 6);","Debug.Assert(LargestPos(new int[] { 0, 0, 1, 0 }) == 1);"],"challenge_test_list":[]}
{"name":"perfect-sqrt","description":"Find the square root of a perfect number","text":"Write a function to find the square root of a perfect number.","code":"public double SqrtRoot(double num)\n{\n    double sqrtRoot = Math.Pow(num, 0.5);\n    return sqrtRoot;\n}","task_id":518,"test_setup_code":"","test_list":["Debug.Assert(SqrtRoot(4) == 2);","Debug.Assert(SqrtRoot(16) == 4);","Debug.Assert(SqrtRoot(400) == 20);"],"challenge_test_list":[]}
{"name":"calculate-tetra-volume","description":"Calculate the volume of a tetrahedron with a function","text":"Write a function to calculate volume of a tetrahedron.","code":"public double VolumeTetrahedron(double num) {\n    double volume = (Math.Pow(num, 3) / (6 * Math.Sqrt(2)));\n    return Math.Round(volume, 2);\n}","task_id":519,"test_setup_code":"","test_list":["Debug.Assert(VolumeTetrahedron(10) == 117.85);","Debug.Assert(VolumeTetrahedron(15) == 397.75);","Debug.Assert(VolumeTetrahedron(20) == 942.81);"],"challenge_test_list":[]}
{"name":"lcm-of-array","description":"Find the lcm of array elements in a function","text":"Write a function to find the lcm of the given array elements.","code":"public int FindLcm(int num1, int num2) \n{\n    int num, den;\n    if (num1 \u003E num2) \n    {\n        num = num1;\n        den = num2;\n    } \n    else \n    {\n        num = num2;\n        den = num1;\n    }\n    int rem = num % den;\n    while (rem != 0) \n    {\n        num = den;\n        den = rem;\n        rem = num % den;\n    }\n    int gcd = den;\n    int lcm = (num1 * num2) / gcd;\n    return lcm;\n}\n\npublic int GetLcm(List\u003Cint\u003E l) \n{\n    int num1 = l[0];\n    int num2 = l[1];\n    int lcm = FindLcm(num1, num2);\n    for (int i = 2; i \u003C l.Count; i\u002B\u002B) \n    {\n        lcm = FindLcm(lcm, l[i]);\n    }\n    return lcm;\n}","task_id":520,"test_setup_code":"","test_list":["Debug.Assert(GetLcm(new int[] { 2, 7, 3, 9, 4 }) == 252);","Debug.Assert(GetLcm(new List\u003Cint\u003E { 1, 2, 8, 3 }) == 24);","Debug.Assert(GetLcm(new int[] { 3, 8, 4, 10, 5 }) == 120);"],"challenge_test_list":[]}
{"name":"scalene-triangle","description":"Check if a triangle is scalene using a function","text":"Write a function to print check if the triangle is scalene or not.","code":"public bool CheckIsosceles(int x, int y, int z)  \n{  \n    if (x != y \u0026\u0026 y != z \u0026\u0026 z != x)  \n        return true;  \n    else  \n        return false;  \n}","task_id":521,"test_setup_code":"","test_list":["Debug.Assert(CheckIsosceles(6, 8, 12) == true);","Debug.Assert(CheckIsosceles(6, 6, 12) == false);","Debug.Assert(CheckIsosceles(6, 15, 20) == true);"],"challenge_test_list":[]}
{"name":"longest-bitonic","description":"Find the longest bitonic subsequence in an array","text":"Write a function to find the longest bitonic subsequence for the given array.","code":"public int Lbs(int[] arr) \n{ \n    int n = arr.Length; \n    int[] lis = new int[n \u002B 1]; \n    for (int i = 0; i \u003C= n; i\u002B\u002B) \n    { \n        lis[i] = 1; \n    } \n    for (int i = 1; i \u003C n; i\u002B\u002B) \n    { \n        for (int j = 0; j \u003C i; j\u002B\u002B) \n        { \n            if (arr[i] \u003E arr[j] \u0026\u0026 lis[i] \u003C lis[j] \u002B 1) \n            { \n                lis[i] = lis[j] \u002B 1; \n            } \n        } \n    } \n    int[] lds = new int[n \u002B 1]; \n    for (int i = 0; i \u003C= n; i\u002B\u002B) \n    { \n        lds[i] = 1; \n    } \n    for (int i = n - 2; i \u003E= 0; i--) \n    { \n        for (int j = n - 1; j \u003E i; j--) \n        { \n            if (arr[i] \u003E arr[j] \u0026\u0026 lds[i] \u003C lds[j] \u002B 1) \n            { \n                lds[i] = lds[j] \u002B 1; \n            } \n        } \n    } \n    int maximum = lis[0] \u002B lds[0] - 1; \n    for (int i = 1; i \u003C n; i\u002B\u002B) \n    { \n        maximum = Math.Max((lis[i] \u002B lds[i] - 1), maximum); \n    } \n    return maximum; \n}","task_id":522,"test_setup_code":"","test_list":["Debug.Assert(Lbs(new int[] { 0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15 }) == 7);","Debug.Assert(Lbs(new List\u003Cint\u003E { 1, 11, 2, 10, 4, 5, 2, 1 }) == 6);","Debug.Assert(Lbs(new int[] { 80, 60, 30, 40, 20, 10 }) == 5);"],"challenge_test_list":[]}
{"name":"check-string-valid","description":"Check string for case number and length validity","text":"Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.","code":"public List\u003Cstring\u003E CheckString(string str1)\n{\n    List\u003CFunc\u003Cstring, object\u003E\u003E messg = new List\u003CFunc\u003Cstring, object\u003E\u003E\n    {\n        str =\u003E str.Any(char.IsUpper) || \u0022String must have 1 upper case character.\u0022,\n        str =\u003E str.Any(char.IsLower) || \u0022String must have 1 lower case character.\u0022,\n        str =\u003E str.Any(char.IsDigit) || \u0022String must have 1 number.\u0022,\n        str =\u003E str.Length \u003E= 7 || \u0022String length should be at least 8.\u0022\n    };\n\n    List\u003Cstring\u003E result = messg.Select(i =\u003E i(str1)).Where(x =\u003E x is string).Cast\u003Cstring\u003E().ToList();\n\n    if (!result.Any())\n    {\n        result.Add(\u0022Valid string.\u0022);\n    }\n\n    return result;\n}","task_id":523,"test_setup_code":"","test_list":["Debug.Assert(CheckString(\u0022python\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022String must have 1 upper case character.\u0022, \u0022String must have 1 number.\u0022, \u0022String length should be atleast 8.\u0022 }));","Debug.Assert(CheckString(\u0022123python\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022String must have 1 upper case character.\u0022 }));","Debug.Assert(CheckString(\u0022123Python\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022Valid string.\u0022 }));\n\npublic List\u003Cstring\u003E CheckString(string input)\n{\n    // implementation of CheckString method\n}"],"challenge_test_list":[]}
{"name":"max-inc-subseq-sum","description":"Sum of maximum increasing subsequence in array","text":"Write a function to find the sum of maximum increasing subsequence of the given array.","code":"public static int MaxSumIncreasingSubsequence(int[] arr, int n) \n{\n    int max = 0;\n    int[] msis = new int[n];\n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    {\n        msis[i] = arr[i];\n    }\n    for (int i = 1; i \u003C n; i\u002B\u002B) \n    {\n        for (int j = 0; j \u003C i; j\u002B\u002B) \n        {\n            if (arr[i] \u003E arr[j] \u0026\u0026 msis[i] \u003C msis[j] \u002B arr[i]) \n            {\n                msis[i] = msis[j] \u002B arr[i];\n            }\n        }\n    }\n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    {\n        if (max \u003C msis[i]) \n        {\n            max = msis[i];\n        }\n    }\n    return max;\n}","task_id":524,"test_setup_code":"","test_list":["Debug.Assert(MaxSumIncreasingSubsequence(new int[] { 1, 101, 2, 3, 100, 4, 5 }, 7) == 106);","Debug.Assert(MaxSumIncreasingSubsequence(new int[] { 3, 4, 5, 10 }, 4) == 22);","Debug.Assert(MaxSumIncreasingSubsequence(new int[] { 10, 5, 4, 3 }, 4) == 10);"],"challenge_test_list":[]}
{"name":"check-lines-parallel","description":"Check if two lines are parallel in Python","text":"Write a C# function to check whether two given lines are parallel or not.","code":"public bool ParallelLines(double[] line1, double[] line2) {\n    return line1[0] / line1[1] == line2[0] / line2[1];\n}","task_id":525,"test_setup_code":"","test_list":["Debug.Assert(ParallelLines(new int[] { 2, 3, 4 }, new int[] { 2, 3, 8 }) == true);","Debug.Assert(ParallelLines(new int[] { 2, 3, 4 }, new int[] { 4, -3, 8 }) == false);","Debug.Assert(ParallelLines(new int[] { 3, 3 }, new int[] { 5, 5 }) == true);"],"challenge_test_list":[]}
{"name":"capitalize-first-last-words","description":"Capitalize first and last letters of each word","text":"Write a C# function to capitalize first and last letters of each word of a given string.","code":"public string CapitalizeFirstLastLetters(string str1)\n{\n    str1 = str1.ToLower();\n    string result = \u0022\u0022;\n    foreach (var word in str1.Split(\u0027 \u0027))\n    {\n        result \u002B= word.Substring(0, word.Length - 1) \u002B char.ToUpper(word[word.Length - 1]) \u002B \u0022 \u0022;\n    }\n    return result.TrimEnd();\n}","task_id":526,"test_setup_code":"","test_list":["Debug.Assert(CapitalizeFirstLastLetters(\u0022python\u0022) == \u0022PythoN\u0022);","Debug.Assert(CapitalizeFirstLastLetters(\u0022bigdata\u0022) == \u0022BigdatA\u0022);","Debug.Assert(CapitalizeFirstLastLetters(\u0022Hadoop\u0022) == \u0022HadooP\u0022);"],"challenge_test_list":[]}
{"name":"find-pairs-sum","description":"Find pairs in array with sum equal to target number","text":"Write a function to find all pairs in an integer array whose sum is equal to a given number.","code":"public int GetPairsCount(int[] arr, int n, int sum) {\n    int count = 0; \n    for (int i = 0; i \u003C n; i\u002B\u002B) {\n        for (int j = i \u002B 1; j \u003C n; j\u002B\u002B) {\n            if (arr[i] \u002B arr[j] == sum) {\n                count\u002B\u002B;\n            }\n        }\n    }\n    return count;\n}","task_id":527,"test_setup_code":"","test_list":["Debug.Assert(GetPairsCount(new List\u003Cint\u003E { 1, 5, 7, -1, 5 }, 5, 6) == 3);","Debug.Assert(GetPairsCount(new int[] { 1, 5, 7, -1 }, 4, 6) == 2);","Debug.Assert(GetPairsCount(new int[] { 1, 1, 1, 1 }, 4, 2) == 6);"],"challenge_test_list":[]}
{"name":"min-length-lists","description":"Find lists with the minimum length from input","text":"Write a function to find the list of lists with minimum length.","code":"public (int, string) MinLength(List\u003Cstring\u003E list1)\n{\n    int minLength = list1.Min(x =\u003E x.Length);\n    string minList = list1.OrderBy(x =\u003E x.Length).First();\n    return (minLength, minList);\n}","task_id":528,"test_setup_code":"","test_list":["Debug.Assert(MinLength(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 0 }, new List\u003Cint\u003E { 1, 3 }, new List\u003Cint\u003E { 5, 7 }, new List\u003Cint\u003E { 9, 11 }, new List\u003Cint\u003E { 13, 15, 17 } }) == (1, new List\u003Cint\u003E { 0 }));","Debug.Assert(MinLength(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 1 }, new List\u003Cint\u003E { 5, 7 }, new List\u003Cint\u003E { 10, 12, 14, 15 } }) == (1, new List\u003Cint\u003E { 1 }));","Debug.Assert(MinLength(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 5 }, new List\u003Cint\u003E { 15, 20, 25 } }) == (1, new List\u003Cint\u003E { 5 }));"],"challenge_test_list":[]}
{"name":"jacobsthal-lucas","description":"Find the nth Jacobsthal-Lucas number","text":"Write a function to find the nth jacobsthal-lucas number.","code":"public int JacobsthalLucas(int n) \n{ \n    int[] dp = new int[n \u002B 1]; \n    dp[0] = 2; \n    dp[1] = 1; \n    for (int i = 2; i \u003C= n; i\u002B\u002B) \n    { \n        dp[i] = dp[i - 1] \u002B 2 * dp[i - 2]; \n    } \n    return dp[n]; \n}","task_id":529,"test_setup_code":"","test_list":["Debug.Assert(jacobsthalLucas(5) == 31);","Debug.Assert(jacobsthalLucas(2) == 5);","Debug.Assert(jacobsthalLucas(4) == 17);"],"challenge_test_list":[]}
{"name":"negative-ratio","description":"Calculate the ratio of negative integers in an array","text":"Write a function to find the ration of negative numbers in an array of integers.","code":"using System;\n\npublic class Program\n{\n    public static double NegativeCount(double[] nums)\n    {\n        int n = nums.Length;\n        int n1 = 0;\n        foreach (var x in nums)\n        {\n            if (x \u003C 0)\n            {\n                n1\u002B\u002B;\n            }\n        }\n        return Math.Round((double)n1 / n, 2);\n    }\n}","task_id":530,"test_setup_code":"","test_list":["Debug.Assert(NegativeCount(new int[] { 0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8 }) == 0.31);","Debug.Assert(NegativeCount(new int[] { 2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8 }) == 0.31);","Debug.Assert(NegativeCount(new List\u003Cint\u003E { 2, 4, -6, -9, 11, -12, 14, -5, 17 }) == 0.44);\n\npublic double NegativeCount(List\u003Cint\u003E numbers)\n{\n    int negativeCount = numbers.Count(n =\u003E n \u003C 0);\n    return (double)negativeCount / numbers.Count;\n}"],"challenge_test_list":[]}
{"name":"min-coins-value","description":"Find the least coins for a specific value","text":"Write a function to find minimum number of coins that make a given value.","code":"using System;\n\nclass CoinChanger\n{\n    public static int MinCoins(int[] coins, int m, int V)\n    {\n        if (V == 0)\n        {\n            return 0;\n        }\n        int res = int.MaxValue;\n        for (int i = 0; i \u003C m; i\u002B\u002B)\n        {\n            if (coins[i] \u003C= V)\n            {\n                int sub_res = MinCoins(coins, m, V - coins[i]);\n                if (sub_res != int.MaxValue \u0026\u0026 sub_res \u002B 1 \u003C res)\n                {\n                    res = sub_res \u002B 1;\n                }\n            }\n        }\n        return res;\n    }\n}","task_id":531,"test_setup_code":"","test_list":["Debug.Assert(MinCoins(new int[] { 9, 6, 5, 1 }, 4, 11) == 2);","Debug.Assert(MinCoins(new int[] { 4, 5, 6, 7, 8, 9 }, 6, 9) == 1);","Debug.Assert(MinCoins(new int[] { 1, 2, 3 }, 3, 4) == 2);"],"challenge_test_list":[]}
{"name":"permutation-check","description":"Check if two strings are permutations of each other","text":"Write a function to check if the two given strings are permutations of each other.","code":"public bool CheckPermutation(string str1, string str2) {\n    int n1 = str1.Length;\n    int n2 = str2.Length;\n    if (n1 != n2) {\n        return false;\n    }\n    char[] a = str1.ToCharArray();\n    Array.Sort(a);\n    str1 = new string(a);\n    char[] b = str2.ToCharArray();\n    Array.Sort(b);\n    str2 = new string(b);\n    for (int i = 0; i \u003C n1; i\u002B\u002B) {\n        if (str1[i] != str2[i]) {\n            return false;\n        }\n    }\n    return true;\n}","task_id":532,"test_setup_code":"","test_list":["Debug.Assert(CheckPermutation(\u0022abc\u0022, \u0022cba\u0022) == true);","Debug.Assert(CheckPermutation(\u0022test\u0022, \u0022ttew\u0022) == false);","Debug.Assert(CheckPermutation(\u0022xxyz\u0022, \u0022yxzx\u0022) == true);"],"challenge_test_list":[]}
{"name":"remove-tuple-elem","description":"Remove specific data types from a tuple","text":"Write a function to remove particular data type elements from the given tuple.","code":"public List\u003Cobject\u003E RemoveDatatype(Tuple\u003Cobject\u003E testTuple, Type dataType) {\n    List\u003Cobject\u003E res = new List\u003Cobject\u003E();\n    foreach (var ele in testTuple) {\n        if (!dataType.IsInstanceOfType(ele)) {\n            res.Add(ele);\n        }\n    }\n    return res;\n}","task_id":533,"test_setup_code":"","test_list":["Debug.Assert(RemoveDatatype(new object[] { 4, 5, 4, 7.7, 1.2 }, typeof(int)).SequenceEqual(new List\u003Cdouble\u003E { 7.7, 1.2 }));","Debug.Assert(RemoveDatatype(new Tuple\u003Cobject, object, object, string\u003E(7, 8, 9, \u0022SR\u0022), typeof(string)).Equals(new List\u003Cint\u003E { 7, 8, 9 }));","Debug.Assert(RemoveDatatype(new Tuple\u003Cint, double, int, double\u003E(7, 1.1, 2, 2.2), typeof(float)).SequenceEqual(new List\u003Cint\u003E { 7, 2 }));"],"challenge_test_list":[]}
{"name":"string-pattern-search","description":"Search for a pattern in a string and locate it","text":"Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.","code":"using System.Text.RegularExpressions;\n\npublic (int, int) SearchLiteral(string pattern, string text)\n{\n    Match match = Regex.Match(text, pattern);\n    int s = match.Index;\n    int e = match.Index \u002B match.Length;\n    return (s, e);\n}","task_id":534,"test_setup_code":"","test_list":["Debug.Assert(SearchLiteral(\u0022python\u0022, \u0022python programming language\u0022).Equals((0, 6)));\n\npublic static (int, int) SearchLiteral(string searchTerm, string text)\n{\n    int index = text.IndexOf(searchTerm);\n    if (index != -1)\n    {\n        return (index, index \u002B searchTerm.Length);\n    }\n    return (-1, -1);\n}","Debug.Assert(SearchLiteral(\u0022programming\u0022, \u0022python programming language\u0022).Equals((7, 18)));","Debug.Assert(SearchLiteral(\u0022language\u0022, \u0022python programming language\u0022).Equals((19, 27)));"],"challenge_test_list":[]}
{"name":"top-bottom-area","description":"Calculate a cylinder\u0027s top or bottom surface area","text":"Write a function to find the top or bottom surface area of a cylinder.","code":"public static double TopBottomSurfaceArea(double r)  \n{  \n    double topOrBottomArea = 3.1415 * r * r;  \n    return topOrBottomArea;  \n}","task_id":535,"test_setup_code":"","test_list":["Debug.Assert(TopBottomSurfaceArea(10) == 314.15000000000003);","Debug.Assert(TopBottomSurfaceArea(5) == 78.53750000000001);","Debug.Assert(TopBottomSurfaceArea(4) == 50.264);"],"challenge_test_list":[]}
{"name":"select-nth-items","description":"Select the nth items from a given list","text":"Write a function to select the nth items of a list.","code":"public List\u003CT\u003E NthItems\u003CT\u003E(List\u003CT\u003E list, int n)\n{\n    List\u003CT\u003E result = new List\u003CT\u003E();\n    for (int i = 0; i \u003C list.Count; i \u002B= n)\n    {\n        result.Add(list[i]);\n    }\n    return result;\n}","task_id":536,"test_setup_code":"","test_list":["Debug.Assert(NthItems(new List\u003Cint\u003E { 1, 2, 3, 4, 5, 6, 7, 8, 9 }, 2).SequenceEqual(new List\u003Cint\u003E { 1, 3, 5, 7, 9 }));","Debug.Assert(NthItems(new List\u003Cint\u003E { 10, 15, 19, 17, 16, 18 }, 3).SequenceEqual(new List\u003Cint\u003E { 10, 17 }));","Debug.Assert(NthItems(new List\u003Cint\u003E { 14, 16, 19, 15, 17 }, 4).SequenceEqual(new List\u003Cint\u003E { 14, 17 }));"],"challenge_test_list":[]}
{"name":"first-repeated-word","description":"Find the first repeated word in a string","text":"Write a C# function to find the first repeated word in a given string.","code":"public string FirstRepeatedWord(string str1) {\n    HashSet\u003Cstring\u003E temp = new HashSet\u003Cstring\u003E();\n    foreach (var word in str1.Split(\u0027 \u0027)) {\n        if (temp.Contains(word)) {\n            return word;\n        } else {\n            temp.Add(word);\n        }\n    }\n    return \u0022None\u0022;\n}","task_id":537,"test_setup_code":"","test_list":["Debug.Assert(FirstRepeatedWord(\u0022ab ca bc ab\u0022) == \u0022ab\u0022);","Debug.Assert(FirstRepeatedWord(\u0022ab ca bc\u0022) == \u0022None\u0022);","Debug.Assert(FirstRepeatedWord(\u0022ab ca bc ca ab bc\u0022) == \u0022ca\u0022);"],"challenge_test_list":[]}
{"name":"string-list-to-tuple","description":"Convert string list to a tuple in Python","text":"Write a C# function to convert a given string list to a tuple.","code":"public static Tuple\u003Cchar\u003E[] StringListToTuple(string str1)\r\n{\r\n    var result = str1.Where(x =\u003E !char.IsWhiteSpace(x)).Select(x =\u003E x).ToArray();\r\n    return result;\r\n}","task_id":538,"test_setup_code":"","test_list":["Debug.Assert(StringListToTuple(new string[] { \u0022python 3.0\u0022 }).Equals(Tuple.Create(\u0027p\u0027, \u0027y\u0027, \u0027t\u0027, \u0027h\u0027, \u0027o\u0027, \u0027n\u0027, \u00273\u0027, \u0027.\u0027, \u00270\u0027)));","Debug.Assert(StringListToTuple(\u0022bigdata\u0022).Equals(Tuple.Create(\u0027b\u0027, \u0027i\u0027, \u0027g\u0027, \u0027d\u0027, \u0027a\u0027, \u0027t\u0027, \u0027a\u0027)));","Debug.Assert(StringListToTuple(\u0022language\u0022).Equals((\u0027l\u0027, \u0027a\u0027, \u0027n\u0027, \u0027g\u0027, \u0027u\u0027, \u0027a\u0027, \u0027g\u0027, \u0027e\u0027)));"],"challenge_test_list":[]}
{"name":"power-list-map","description":"Generate power list using map function","text":"Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.","code":"public List\u003Cint\u003E BasesNumCoresspondingNum(List\u003Cint\u003E basesNum, List\u003Cint\u003E index)\n{\n    List\u003Cint\u003E result = basesNum.Zip(index, (b, i) =\u003E (int)Math.Pow(b, i)).ToList();\n    return result;\n}","task_id":539,"test_setup_code":"","test_list":["Debug.Assert(BasesNumCoresspondingNum(new int[] {10, 20, 30, 40, 50, 60, 70, 80, 90, 100}, new int[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}).SequenceEqual(new long[] {10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000}));","Debug.Assert(BasesNumCoresspondingNum(new int[]{1, 2, 3, 4, 5, 6, 7}, new int[]{10, 20, 30, 40, 50, 60, 70}) == new long[]{1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249});","Debug.Assert(BasesNumCoresspondingNum(new int[] { 4, 8, 12, 16, 20, 24, 28 }, new int[] { 3, 6, 9, 12, 15, 18, 21 }).SequenceEqual(new long[] { 64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728 }));"],"challenge_test_list":[]}
{"name":"freq-diff-array","description":"Calculate frequency range in an array with Python","text":"Write a C# function to find the difference between highest and least frequencies in a given array.","code":"public static int FindDiff(int[] arr, int n) \n{ \n    Array.Sort(arr); \n    int count = 0; \n    int maxCount = 0; \n    int minCount = n; \n\n    for (int i = 0; i \u003C n - 1; i\u002B\u002B) \n    { \n        if (arr[i] == arr[i \u002B 1]) \n        { \n            count\u002B\u002B; \n            continue; \n        } \n        else \n        { \n            maxCount = Math.Max(maxCount, count); \n            minCount = Math.Min(minCount, count); \n            count = 0; \n        } \n    } \n    return maxCount - minCount; \n}","task_id":540,"test_setup_code":"","test_list":["Debug.Assert(FindDiff(new int[] { 1, 1, 2, 2, 7, 8, 4, 5, 1, 4 }, 10) == 2);","Debug.Assert(FindDiff(new int[] { 1, 7, 9, 2, 3, 3, 1, 3, 3 }, 9) == 3);","Debug.Assert(FindDiff(new int[] { 1, 2, 1, 2 }, 4) == 0);"],"challenge_test_list":[]}
{"name":"abundant-checker","description":"Check if a number is abundant or not","text":"Write a function to find if the given number is abundant or not.","code":"public static int GetSum(int n) \n{ \n    int sum = 0; \n    int i = 1; \n    while (i \u003C= (int)Math.Sqrt(n)) \n    { \n        if (n % i == 0) \n        { \n            if (n / i == i) \n            { \n                sum \u002B= i; \n            } \n            else \n            { \n                sum \u002B= i; \n                sum \u002B= (n / i); \n            } \n        } \n        i\u002B\u002B; \n    } \n    sum -= n; \n    return sum; \n}\n\npublic static bool CheckAbundant(int n) \n{ \n    return GetSum(n) \u003E n; \n}","task_id":541,"test_setup_code":"","test_list":["Debug.Assert(CheckAbundant(12) == true);","Debug.Assert(CheckAbundant(15) == false);","Debug.Assert(CheckAbundant(18) == true);"],"challenge_test_list":[]}
{"name":"replace-spaces-with-colons","description":"Replace spaces commas and dots with colons using regex","text":"Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.","code":"public string FillSpaces(string text)  \n{  \n    return Regex.Replace(text, \u0022[ ,.]\u0022, \u0022:\u0022);  \n}","task_id":542,"test_setup_code":"","test_list":["Debug.Assert(FillSpaces(\u0022Boult Curve Wireless Neckband\u0022) == \u0022Boult:Curve:Wireless:Neckband\u0022);","Debug.Assert(FillSpaces(\u0022Stereo Sound Sweatproof\u0022) == \u0022Stereo:Sound:Sweatproof\u0022);","Debug.Assert(FillSpaces(\u0022Probass Curve Audio\u0022) == \u0022Probass:Curve:Audio\u0022);"],"challenge_test_list":[]}
{"name":"add-two-numbers","description":"Add two numbers and print digits of their sum","text":"Write a function to add two numbers and print number of digits of sum.","code":"public int CountDigits(int num1, int num2) \n{\n    int number = num1 \u002B num2;\n    int count = 0;\n    while (number \u003E 0) \n    {\n        number = number / 10;\n        count = count \u002B 1;\n    }\n    return count;\n}","task_id":543,"test_setup_code":"","test_list":["Debug.Assert(CountDigits(9875, 10) == 4);","Debug.Assert(CountDigits(98759853034, 100) == 11);","Debug.Assert(CountDigits(1234567, 500) == 7);"],"challenge_test_list":[]}
{"name":"flatten-tuple-list","description":"Flatten tuple list into a single string","text":"Write a function to flatten the tuple list to a string.","code":"public string FlattenTuple(List\u003CTuple\u003Cstring\u003E\u003E testList)  \n{  \n    string res = string.Join(\u0022 \u0022, testList.SelectMany(tup =\u003E tup));  \n    return res;  \n}","task_id":544,"test_setup_code":"","test_list":["Debug.Assert(FlattenTuple(new Tuple\u003Cstring, string, string\u003E[] { Tuple.Create(\u00221\u0022, \u00224\u0022, \u00226\u0022), Tuple.Create(\u00225\u0022, \u00228\u0022), Tuple.Create(\u00222\u0022, \u00229\u0022), Tuple.Create(\u00221\u0022, \u002210\u0022) }) == \u00221 4 6 5 8 2 9 1 10\u0022);","Debug.Assert(FlattenTuple(new Tuple\u003Cstring, string\u003E[] { Tuple.Create(\u00222\u0022, \u00223\u0022, \u00224\u0022), Tuple.Create(\u00226\u0022, \u00229\u0022), Tuple.Create(\u00223\u0022, \u00222\u0022), Tuple.Create(\u00222\u0022, \u002211\u0022) }) == \u00222 3 4 6 9 3 2 2 11\u0022);","Debug.Assert(FlattenTuple(new Tuple\u003Cstring, string\u003E[] { Tuple.Create(\u002214\u0022, \u002221\u0022, \u00229\u0022), Tuple.Create(\u002224\u0022, \u002219\u0022), Tuple.Create(\u002212\u0022, \u002229\u0022), Tuple.Create(\u002223\u0022, \u002217\u0022) }) == \u002214 21 9 24 19 12 29 23 17\u0022);"],"challenge_test_list":[]}
{"name":"toggle-first-last","description":"Toggle first and last bits of a number in Python","text":"Write a C# function to toggle only first and last bits of a given number.","code":"int TakeLAndFSetBits(int n) \n{ \n    n = n | (n \u003E\u003E 1); \n    n = n | (n \u003E\u003E 2); \n    n = n | (n \u003E\u003E 4); \n    n = n | (n \u003E\u003E 8); \n    n = n | (n \u003E\u003E 16); \n    return ((n \u002B 1) \u003E\u003E 1) \u002B 1; \n} \n\nint ToggleFAndLBits(int n) \n{ \n    if (n == 1) \n    { \n        return 0; \n    } \n    return n ^ TakeLAndFSetBits(n); \n}","task_id":545,"test_setup_code":"","test_list":["Debug.Assert(ToggleFAndLBits(10) == 3);","Debug.Assert(ToggleFAndLBits(15) == 6);","Debug.Assert(ToggleFAndLBits(20) == 5);"],"challenge_test_list":[]}
{"name":"last-occurrence","description":"Find the last index of a character in a string","text":"Write a function to find the last occurrence of a character in a string.","code":"public int? LastOccurenceChar(string str, char ch) {\n    int flag = -1;\n    for (int i = 0; i \u003C str.Length; i\u002B\u002B) {\n        if (str[i] == ch) {\n            flag = i;\n        }\n    }\n    if (flag == -1) {\n        return null;\n    } else {\n        return flag \u002B 1;\n    }\n}","task_id":546,"test_setup_code":"","test_list":["Debug.Assert(LastOccurenceChar(\u0022hello world\u0022, \u0027l\u0027) == 10);","Debug.Assert(LastOccurenceChar(\u0022language\u0022, \u0027g\u0027) == 7);","Debug.Assert(LastOccurenceChar(\u0022little\u0022, \u0027y\u0027) == null);"],"challenge_test_list":[]}
{"name":"sum-hamming-dists","description":"Sum Hamming distances of consecutive numbers from 0 to n","text":"Write a C# function to find the sum of hamming distances of all consecutive numbers from o to n.","code":"public static int TotalHammingDistance(int n)  \n{  \n    int i = 1;  \n    int sum = 0;  \n    while (n / i \u003E 0)  \n    {  \n        sum \u002B= n / i;  \n        i *= 2;  \n    }  \n    return sum;  \n}","task_id":547,"test_setup_code":"","test_list":["Debug.Assert(TotalHammingDistance(4) == 7);","Debug.Assert(TotalHammingDistance(2) == 3);","Debug.Assert(TotalHammingDistance(5) == 8);"],"challenge_test_list":[]}
{"name":"long-increasing-sub","description":"Find the longest increasing subsequence length","text":"Write a function to find the length of the longest increasing subsequence of the given sequence.","code":"public int LongestIncreasingSubsequence(int[] arr) \n{\n    int n = arr.Length;\n    int[] longestIncreasingSubsequence = new int[n];\n    for (int i = 0; i \u003C n; i\u002B\u002B)\n    {\n        longestIncreasingSubsequence[i] = 1;\n    }\n    for (int i = 1; i \u003C n; i\u002B\u002B)\n    {\n        for (int j = 0; j \u003C i; j\u002B\u002B)\n        {\n            if (arr[i] \u003E arr[j] \u0026\u0026 longestIncreasingSubsequence[i] \u003C longestIncreasingSubsequence[j] \u002B 1)\n            {\n                longestIncreasingSubsequence[i] = longestIncreasingSubsequence[j] \u002B 1;\n            }\n        }\n    }\n    int maximum = 0;\n    for (int i = 0; i \u003C n; i\u002B\u002B)\n    {\n        maximum = Math.Max(maximum, longestIncreasingSubsequence[i]);\n    }\n    return maximum;\n}","task_id":548,"test_setup_code":"","test_list":["Debug.Assert(LongestIncreasingSubsequence(new int[] { 10, 22, 9, 33, 21, 50, 41, 60 }) == 5);","Debug.Assert(LongestIncreasingSubsequence(new int[] { 3, 10, 2, 1, 20 }) == 3);","Debug.Assert(LongestIncreasingSubsequence(new int[] { 50, 3, 10, 7, 40, 80 }) == 4);"],"challenge_test_list":[]}
{"name":"sum-fifth-odd-n","description":"Sum fifth powers of first n odd numbers","text":"Write a C# function to find the sum of fifth power of first n odd natural numbers.","code":"public int OddNumSum(int n) \n{\n    int j = 0;\n    int sm = 0;\n    for (int i = 1; i \u003C= n; i\u002B\u002B)\n    {\n        j = (2 * i - 1);\n        sm \u002B= (j * j * j * j * j);\n    }\n    return sm;\n}","task_id":549,"test_setup_code":"","test_list":["Debug.Assert(OddNumSum(1) == 1);","Debug.Assert(OddNumSum(2) == 244);","Debug.Assert(OddNumSum(3) == 3369);"],"challenge_test_list":[]}
{"name":"max-in-rotated-array","description":"Find max element in a sorted rotated array","text":"Write a C# function to find the maximum element in a sorted and rotated array.","code":"public int FindMax(int[] arr, int low, int high) \n{ \n    if (high \u003C low) \n    { \n        return arr[0]; \n    } \n    if (high == low) \n    { \n        return arr[low]; \n    } \n    int mid = low \u002B (high - low) / 2; \n    if (mid \u003C high \u0026\u0026 arr[mid \u002B 1] \u003C arr[mid]) \n    { \n        return arr[mid]; \n    } \n    if (mid \u003E low \u0026\u0026 arr[mid] \u003C arr[mid - 1]) \n    { \n        return arr[mid - 1]; \n    } \n    if (arr[low] \u003E arr[mid]) \n    { \n        return FindMax(arr, low, mid - 1); \n    } \n    else \n    { \n        return FindMax(arr, mid \u002B 1, high); \n    } \n}","task_id":550,"test_setup_code":"","test_list":["Debug.Assert(FindMax(new int[] { 2, 3, 5, 6, 9 }, 0, 4) == 9);","Debug.Assert(FindMax(new int[] { 3, 4, 5, 2, 1 }, 0, 4) == 5);","Debug.Assert(FindMax(new int[] { 1, 2, 3 }, 0, 2) == 3);"],"challenge_test_list":[]}
{"name":"extract-column","description":"Extract a column from a nested list in Python","text":"Write a function to extract a specified column from a given nested list.","code":"public List\u003Cobject\u003E ExtractColumn(List\u003CList\u003Cobject\u003E\u003E list1, int n)\n{\n    List\u003Cobject\u003E result = new List\u003Cobject\u003E();\n    foreach (var i in list1)\n    {\n        result.Add(i[n]);\n        i.RemoveAt(n);\n    }\n    return result;\n}","task_id":551,"test_setup_code":"","test_list":["Debug.Assert(ExtractColumn(new int[,] { { 1, 2, 3 }, { 2, 4, 5 }, { 1, 1, 1 } }, 0).SequenceEqual(new int[] { 1, 2, 1 }));","Debug.Assert(ExtractColumn(new int[][] { new int[] { 1, 2, 3 }, new int[] { -2, 4, -5 }, new int[] { 1, -1, 1 } }, 2).SequenceEqual(new int[] { 3, -5, 1 }));","Debug.Assert(ExtractColumn(new int[][] { new int[] { 1, 3 }, new int[] { 5, 7 }, new int[] { 1, 3 }, new int[] { 13, 15, 17 }, new int[] { 5, 7 }, new int[] { 9, 11 } }, 0).SequenceEqual(new int[] { 1, 5, 1, 13, 5, 9 }));"],"challenge_test_list":[]}
{"name":"check-linear-seq","description":"Check if a sequence is linear using Python","text":"Write a C# function to check whether a given sequence is linear or not.","code":"public string SeqLinear(List\u003Cint\u003E seqNums) \n{\n    for (int x = 1; x \u003C seqNums.Count; x\u002B\u002B) \n    {\n        seqNums[x] = seqNums[x] - seqNums[x - 1];\n    }\n    \n    if (seqNums.Distinct().Count() == 1) \n    {\n        return \u0022Linear Sequence\u0022;\n    }\n    else \n    {\n        return \u0022Non Linear Sequence\u0022;\n    }\n}","task_id":552,"test_setup_code":"","test_list":["Debug.Assert(SeqLinear(new int[] { 0, 2, 4, 6, 8, 10 }) == \u0022Linear Sequence\u0022);","Debug.Assert(SeqLinear(new int[] { 1, 2, 3 }) == \u0022Linear Sequence\u0022);","Debug.Assert(SeqLinear(new int[] { 1, 5, 2 }) == \u0022Non Linear Sequence\u0022);"],"challenge_test_list":[]}
{"name":"tuple-to-float","description":"Convert tuple to floating-point number function","text":"Write a function to convert the given tuple to a floating-point number.","code":"float TupleToFloat(ValueTuple\u003Cfloat, float\u003E testTup) \n{\n    string res = string.Join(\u0022.\u0022, testTup.Item1.ToString(), testTup.Item2.ToString());\n    return float.Parse(res);\n}","task_id":553,"test_setup_code":"","test_list":["Debug.Assert(TupleToFloat((4, 56)) == 4.56f);","Debug.Assert(TupleToFloat((7, 256)) == 7.256f);","Debug.Assert(TupleToFloat((8, 123)) == 8.123f);"],"challenge_test_list":[]}
{"name":"find-odd-numbers","description":"Find odd numbers in a mixed list using Python","text":"Write a C# function to find odd numbers from a mixed list.","code":"public List\u003Cint\u003E Split(List\u003Cint\u003E list) \n{ \n    List\u003Cint\u003E odLi = new List\u003Cint\u003E(); \n    foreach (int i in list) \n    { \n        if (i % 2 != 0) \n        { \n            odLi.Add(i); \n        } \n    } \n    return odLi; \n}","task_id":554,"test_setup_code":"","test_list":["Debug.Assert(Split(new int[] { 1, 2, 3, 4, 5, 6 }).SequenceEqual(new int[] { 1, 3, 5 }));","Debug.Assert(Split(new int[] { 10, 11, 12, 13 }).SequenceEqual(new int[] { 11, 13 }));","Debug.Assert(Split(new int[] { 7, 8, 9, 1 }).SequenceEqual(new int[] { 7, 9, 1 }));"],"challenge_test_list":[]}
{"name":"sum-cubes-diff","description":"Difference between sum of cubes and sum of naturals","text":"Write a C# function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.","code":"public static long Difference(int n)  \n{  \n    long S = (n * (n \u002B 1)) / 2;  \n    long res = S * (S - 1);  \n    return res;  \n}","task_id":555,"test_setup_code":"","test_list":["Debug.Assert(Difference(3) == 30);","Debug.Assert(Difference(5) == 210);","Debug.Assert(Difference(2) == 6);"],"challenge_test_list":[]}
{"name":"count-odd-xor-pairs","description":"Count pairs with odd XOR in a list","text":"Write a C# function to count the pairs with xor as an odd number.","code":"public int FindOddPair(int[] A, int N) \n{ \n    int oddPair = 0; \n    for (int i = 0; i \u003C N; i\u002B\u002B) \n    { \n        for (int j = i \u002B 1; j \u003C N; j\u002B\u002B) \n        { \n            if ((A[i] ^ A[j]) % 2 != 0) \n            { \n                oddPair\u002B\u002B; \n            } \n        } \n    } \n    return oddPair; \n}","task_id":556,"test_setup_code":"","test_list":["Debug.Assert(FindOddPair(new int[] { 5, 4, 7, 2, 1 }, 5) == 6);","Debug.Assert(FindOddPair(new int[] { 7, 2, 8, 1, 0, 5, 11 }, 7) == 12);","Debug.Assert(FindOddPair(new int[] { 1, 2, 3 }, 3) == 2);"],"challenge_test_list":[]}
{"name":"toggle-case-string","description":"Toggle the case of each character in a string","text":"Write a function to toggle characters case in a string.","code":"public string ToggleString(string input)\r\n{\r\n    string result = string.Empty;\r\n\r\n    foreach (char c in input)\r\n    {\r\n        if (char.IsUpper(c))\r\n        {\r\n            result \u002B= char.ToLower(c);\r\n        }\r\n        else if (char.IsLower(c))\r\n        {\r\n            result \u002B= char.ToUpper(c);\r\n        }\r\n        else\r\n        {\r\n            result \u002B= c;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","task_id":557,"test_setup_code":"","test_list":["Debug.Assert(ToggleString(\u0022Python\u0022) == \u0022pYTHON\u0022);","Debug.Assert(ToggleString(\u0022Pangram\u0022) == \u0022pANGRAM\u0022);","Debug.Assert(ToggleString(\u0022LIttLE\u0022) == \u0022liTTle\u0022);"],"challenge_test_list":[]}
{"name":"digit-distance.py","description":"Calculate digit distance between two integers","text":"Write a C# function to find the digit distance between two integers.","code":"public int DigitDistanceNums(int n1, int n2)\n{\n    return n1.ToString().Length \u003E n2.ToString().Length ? \n        n1.ToString().Length : n2.ToString().Length;\n}","task_id":558,"test_setup_code":"","test_list":["Debug.Assert(DigitDistanceNums(1, 2) == 1);","Debug.Assert(DigitDistanceNums(23, 56) == 6);","Debug.Assert(DigitDistanceNums(123, 256) == 7);"],"challenge_test_list":[]}
{"name":"max-contig-sum","description":"Find largest sum of contiguous subarray in array","text":"Write a function to find the largest sum of contiguous subarray in the given array.","code":"public int MaxSubArraySum(int[] a, int size) {\n    int maxSoFar = 0;\n    int maxEndingHere = 0;\n    for (int i = 0; i \u003C size; i\u002B\u002B) {\n        maxEndingHere \u002B= a[i];\n        if (maxEndingHere \u003C 0) {\n            maxEndingHere = 0;\n        } else if (maxSoFar \u003C maxEndingHere) {\n            maxSoFar = maxEndingHere;\n        }\n    }\n    return maxSoFar;\n}","task_id":559,"test_setup_code":"","test_list":["Debug.Assert(MaxSubArraySum(new int[] { -2, -3, 4, -1, -2, 1, 5, -3 }, 8) == 7);","Debug.Assert(MaxSubArraySum(new int[] { -3, -4, 5, -2, -3, 2, 6, -4 }, 8) == 8);","Debug.Assert(MaxSubArraySum(new int[] { -4, -5, 6, -3, -4, 3, 7, -5 }, 8) == 10);"],"challenge_test_list":[]}
{"name":"union-of-tuples","description":"Find union of elements in given tuples","text":"Write a function to find the union of elements of the given tuples.","code":"public static Tuple\u003Cint\u003E UnionElements(Tuple\u003Cint\u003E testTup1, Tuple\u003Cint\u003E testTup2)\n{\n    var res = new HashSet\u003Cint\u003E(testTup1.Concat(testTup2));\n    return Tuple.Create(res.ToArray());\n}","task_id":560,"test_setup_code":"","test_list":["Debug.Assert(UnionElements(new int[] { 3, 4, 5, 6 }, new int[] { 5, 7, 4, 10 }).SequenceEqual(new int[] { 3, 4, 5, 6, 7, 10 }));","Debug.Assert(UnionElements(new int[] { 1, 2, 3, 4 }, new int[] { 3, 4, 5, 6 }).SequenceEqual(new int[] { 1, 2, 3, 4, 5, 6 }));","Debug.Assert(UnionElements(new int[] { 11, 12, 13, 14 }, new int[] { 13, 15, 16, 17 }).SequenceEqual(new int[] { 11, 12, 13, 14, 15, 16, 17 }));"],"challenge_test_list":[]}
{"name":"pair-assignment","description":"Pair elements in a tuple with their similar pairs","text":"Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.","code":"public Dictionary\u003Cobject, List\u003Cobject\u003E\u003E AssignElements(List\u003CTuple\u003Cobject, object\u003E\u003E testList) {\n    var res = new Dictionary\u003Cobject, List\u003Cobject\u003E\u003E();\n    foreach (var tuple in testList) {\n        var key = tuple.Item1;\n        var val = tuple.Item2;\n        if (!res.ContainsKey(val)) {\n            res[val] = new List\u003Cobject\u003E();\n        }\n        if (!res.ContainsKey(key)) {\n            res[key] = new List\u003Cobject\u003E();\n        }\n        res[key].Add(val);\n    }\n    return res;\n}","task_id":561,"test_setup_code":"","test_list":["Debug.Assert(AssignElements(new Tuple\u003Cint, int\u003E[] { Tuple.Create(5, 3), Tuple.Create(7, 5), Tuple.Create(2, 7), Tuple.Create(3, 8), Tuple.Create(8, 4) }) .SequenceEqual(new Dictionary\u003Cint, List\u003Cint\u003E\u003E { { 3, new List\u003Cint\u003E { 8 } }, { 5, new List\u003Cint\u003E { 3 } }, { 7, new List\u003Cint\u003E { 5 } }, { 2, new List\u003Cint\u003E { 7 } }, { 8, new List\u003Cint\u003E { 4 } }, { 4, new List\u003Cint\u003E { } } }));","Debug.Assert(AssignElements(new (int, int)[] { (6, 4), (9, 4), (3, 8), (4, 9), (9, 5) }) .SequenceEqual(new Dictionary\u003Cint, List\u003Cint\u003E\u003E { { 4, new List\u003Cint\u003E { 9 } }, { 6, new List\u003Cint\u003E { 4 } }, { 9, new List\u003Cint\u003E { 4, 5 } }, { 8, new List\u003Cint\u003E() }, { 3, new List\u003Cint\u003E { 8 } }, { 5, new List\u003Cint\u003E() } }));","Debug.Assert(AssignElements(new (int, int)[] { (6, 2), (6, 8), (4, 9), (4, 9), (3, 7) }) \n    .SequenceEqual(new Dictionary\u003Cint, List\u003Cint\u003E\u003E { { 2, new List\u003Cint\u003E() }, { 6, new List\u003Cint\u003E { 2, 8 } }, { 8, new List\u003Cint\u003E() }, { 9, new List\u003Cint\u003E() }, { 4, new List\u003Cint\u003E { 9, 9 } }, { 7, new List\u003Cint\u003E() }, { 3, new List\u003Cint\u003E { 7 } } }));"],"challenge_test_list":[]}
{"name":"max-length-sublist","description":"Find longest sublist length in a given list","text":"Write a C# function to find the maximum length of sublist.","code":"public static int FindMaxLength(List\u003Cstring\u003E lst)  \n{  \n    int maxLength = lst.Max(x =\u003E x.Length);  \n    return maxLength;  \n}","task_id":562,"test_setup_code":"","test_list":["Debug.Assert(FindMaxLength(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 1 }, new List\u003Cint\u003E { 1, 4 }, new List\u003Cint\u003E { 5, 6, 7, 8 } }) == 4);","Debug.Assert(FindMaxLength(new int[][] { new int[] { 0, 1 }, new int[] { 2, 2 }, new int[] { 3, 2, 1 } }) == 3);","Debug.Assert(FindMaxLength(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 7 }, new List\u003Cint\u003E { 22, 23 }, new List\u003Cint\u003E { 13, 14, 15 }, new List\u003Cint\u003E { 10, 20, 30, 40, 50 } }) == 5);"],"challenge_test_list":[]}
{"name":"extract-quoted-vals","description":"Extract values from quoted strings in a given text","text":"Write a function to extract values between quotation marks of a string.","code":"public List\u003Cstring\u003E ExtractValues(string text)\r\n{\r\n    return Regex.Matches(text, \u0022\\\u0022(.*?)\\\u0022\u0022)\r\n                .Cast\u003CMatch\u003E()\r\n                .Select(m =\u003E m.Groups[1].Value)\r\n                .ToList();\r\n}","task_id":563,"test_setup_code":"","test_list":["Debug.Assert(ExtractValues(\u0022\\\u0022Python\\\u0022, \\\u0022PHP\\\u0022, \\\u0022Java\\\u0022\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022Python\u0022, \u0022PHP\u0022, \u0022Java\u0022 }));","Debug.Assert(ExtractValues(\u0022\\\u0022python\\\u0022,\\\u0022program\\\u0022,\\\u0022language\\\u0022\u0022).SequenceEqual(new[] { \u0022python\u0022, \u0022program\u0022, \u0022language\u0022 }));","Debug.Assert(ExtractValues(\u0022\\\u0022red\\\u0022,\\\u0022blue\\\u0022,\\\u0022green\\\u0022,\\\u0022yellow\\\u0022\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022red\u0022, \u0022blue\u0022, \u0022green\u0022, \u0022yellow\u0022 }));"],"challenge_test_list":[]}
{"name":"count-unequal-pairs","description":"Count unequal element pairs in an array","text":"Write a C# function to count unequal element pairs from the given array.","code":"public int CountPairs(int[] arr, int n) \n{ \n    int cnt = 0; \n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    { \n        for (int j = i \u002B 1; j \u003C n; j\u002B\u002B) \n        { \n            if (arr[i] != arr[j]) \n            { \n                cnt\u002B\u002B; \n            } \n        } \n    } \n    return cnt; \n}","task_id":564,"test_setup_code":"","test_list":["Debug.Assert(CountPairs(new int[] { 1, 2, 1 }, 3) == 2);","Debug.Assert(CountPairs(new int[] { 1, 1, 1, 1 }, 4) == 0);","Debug.Assert(CountPairs(new int[] { 1, 2, 3, 4, 5 }, 5) == 10);"],"challenge_test_list":[]}
{"name":"split-string-into-characters","description":"Function to split a string into individual characters","text":"Write a C# function to split a string into characters.","code":"public List\u003Cchar\u003E Split(string word) \n{ \n    return word.ToCharArray().ToList(); \n}","task_id":565,"test_setup_code":"","test_list":["Debug.Assert(Split(\u0022python\u0022).SequenceEqual(new List\u003Cchar\u003E { \u0027p\u0027, \u0027y\u0027, \u0027t\u0027, \u0027h\u0027, \u0027o\u0027, \u0027n\u0027 }));","Debug.Assert(Split(\u0022Name\u0022).SequenceEqual(new[] { \u0027N\u0027, \u0027a\u0027, \u0027m\u0027, \u0027e\u0027 }));","Debug.Assert(Split(\u0022program\u0022).SequenceEqual(new char[] { \u0027p\u0027, \u0027r\u0027, \u0027o\u0027, \u0027g\u0027, \u0027r\u0027, \u0027a\u0027, \u0027m\u0027 }));"],"challenge_test_list":[]}
{"name":"sum-of-non-neg","description":"Sum digits of a non-negative integer efficiently","text":"Write a function to get the sum of a non-negative integer.","code":"public int SumDigits(int n) {\n    if (n == 0) {\n        return 0;\n    } else {\n        return n % 10 \u002B SumDigits(n / 10);\n    }\n}","task_id":566,"test_setup_code":"","test_list":["Debug.Assert(SumDigits(345) == 12);","Debug.Assert(SumDigits(12) == 3);","Debug.Assert(SumDigits(97) == 16);"],"challenge_test_list":[]}
{"name":"check-list-sorted","description":"Check if a list is sorted in ascending order","text":"Write a function to check whether a specified list is sorted or not.","code":"public static bool IsSortList(List\u003Cint\u003E list1) {\n    bool result = list1.Zip(list1.Skip(1), (a, b) =\u003E a \u003C= b).All(x =\u003E x);\n    return result;\n}","task_id":567,"test_setup_code":"","test_list":["Debug.Assert(IsSortList(new List\u003Cint\u003E { 1, 2, 4, 6, 8, 10, 12, 14, 16, 17 }) == true);","Debug.Assert(IsSortList(new List\u003Cint\u003E { 1, 2, 4, 6, 8, 10, 12, 14, 20, 17 }) == false);","Debug.Assert(IsSortList(new List\u003Cint\u003E { 1, 2, 4, 6, 8, 10, 15, 14, 20 }) == false);"],"challenge_test_list":[]}
{"name":"create-empty-dicts","description":"Create a list filled with empty dictionaries","text":"Write a function to create a list of empty dictionaries.","code":"public List\u003CDictionary\u003Cstring, object\u003E\u003E EmptyList(int length)  \n{  \n    var emptyList = new List\u003CDictionary\u003Cstring, object\u003E\u003E();  \n    for (int i = 0; i \u003C length; i\u002B\u002B)  \n    {  \n        emptyList.Add(new Dictionary\u003Cstring, object\u003E());  \n    }  \n    return emptyList;  \n}","task_id":568,"test_setup_code":"","test_list":["Debug.Assert(EmptyList(5).SequenceEqual(new List\u003CDictionary\u003Cstring, object\u003E\u003E { new Dictionary\u003Cstring, object\u003E(), new Dictionary\u003Cstring, object\u003E(), new Dictionary\u003Cstring, object\u003E(), new Dictionary\u003Cstring, object\u003E(), new Dictionary\u003Cstring, object\u003E() }));","Debug.Assert(EmptyList(6).SequenceEqual(new List\u003CDictionary\u003Cstring, object\u003E\u003E { new Dictionary\u003Cstring, object\u003E(), new Dictionary\u003Cstring, object\u003E(), new Dictionary\u003Cstring, object\u003E(), new Dictionary\u003Cstring, object\u003E(), new Dictionary\u003Cstring, object\u003E(), new Dictionary\u003Cstring, object\u003E() }));","Debug.Assert(EmptyList(7).SequenceEqual(new List\u003CDictionary\u003Cstring, object\u003E\u003E { new Dictionary\u003Cstring, object\u003E(), new Dictionary\u003Cstring, object\u003E(), new Dictionary\u003Cstring, object\u003E(), new Dictionary\u003Cstring, object\u003E(), new Dictionary\u003Cstring, object\u003E(), new Dictionary\u003Cstring, object\u003E(), new Dictionary\u003Cstring, object\u003E() }));"],"challenge_test_list":[]}
{"name":"sort-sublists","description":"Sort strings in each sublist of a list of lists","text":"Write a function to sort each sublist of strings in a given list of lists.","code":"public List\u003CList\u003CT\u003E\u003E SortSublists\u003CT\u003E(List\u003CList\u003CT\u003E\u003E list1)\n{\n    var result = list1.Select(sublist =\u003E sublist.OrderBy(x =\u003E x).ToList()).ToList();\n    return result;\n}","task_id":569,"test_setup_code":"","test_list":["Debug.Assert(SortSublists(new List\u003CList\u003Cstring\u003E\u003E { new List\u003Cstring\u003E { \u0022green\u0022, \u0022orange\u0022 }, new List\u003Cstring\u003E { \u0022black\u0022, \u0022white\u0022 }, new List\u003Cstring\u003E { \u0022white\u0022, \u0022black\u0022, \u0022orange\u0022 } }).SequenceEqual(new List\u003CList\u003Cstring\u003E\u003E { new List\u003Cstring\u003E { \u0022green\u0022, \u0022orange\u0022 }, new List\u003Cstring\u003E { \u0022black\u0022, \u0022white\u0022 }, new List\u003Cstring\u003E { \u0022black\u0022, \u0022orange\u0022, \u0022white\u0022 } }));","Debug.Assert(SortSublists(new List\u003CList\u003Cstring\u003E\u003E { new List\u003Cstring\u003E { \u0022green\u0022, \u0022orange\u0022 }, new List\u003Cstring\u003E { \u0022black\u0022 }, new List\u003Cstring\u003E { \u0022green\u0022, \u0022orange\u0022 }, new List\u003Cstring\u003E { \u0022white\u0022 } }).SequenceEqual(new List\u003CList\u003Cstring\u003E\u003E { new List\u003Cstring\u003E { \u0022green\u0022, \u0022orange\u0022 }, new List\u003Cstring\u003E { \u0022black\u0022 }, new List\u003Cstring\u003E { \u0022green\u0022, \u0022orange\u0022 }, new List\u003Cstring\u003E { \u0022white\u0022 } }));","Debug.Assert(SortSublists(new List\u003CList\u003Cstring\u003E\u003E { new List\u003Cstring\u003E { \u0022a\u0022, \u0022b\u0022 }, new List\u003Cstring\u003E { \u0022d\u0022, \u0022c\u0022 }, new List\u003Cstring\u003E { \u0022g\u0022, \u0022h\u0022 }, new List\u003Cstring\u003E { \u0022f\u0022, \u0022e\u0022 } }).SequenceEqual(new List\u003CList\u003Cstring\u003E\u003E { new List\u003Cstring\u003E { \u0022a\u0022, \u0022b\u0022 }, new List\u003Cstring\u003E { \u0022c\u0022, \u0022d\u0022 }, new List\u003Cstring\u003E { \u0022g\u0022, \u0022h\u0022 }, new List\u003Cstring\u003E { \u0022e\u0022, \u0022f\u0022 } }));"],"challenge_test_list":[]}
{"name":"remove-words-by","description":"Remove words with specific characters from list","text":"Write a function to remove words from a given list of strings containing a character or string.","code":"public List\u003Cstring\u003E RemoveWords(List\u003Cstring\u003E list1, List\u003Cstring\u003E charlist) {\n    List\u003Cstring\u003E newList = new List\u003Cstring\u003E();\n    foreach (string line in list1) {\n        string newWords = string.Join(\u0022 \u0022, line.Split().Where(word =\u003E !charlist.Any(phrase =\u003E word.Contains(phrase))));\n        newList.Add(newWords);\n    }\n    return newList;\n}","task_id":570,"test_setup_code":"","test_list":["Debug.Assert(RemoveWords(new List\u003Cstring\u003E { \u0022Red color\u0022, \u0022Orange#\u0022, \u0022Green\u0022, \u0022Orange @\u0022, \u0022White\u0022 }, new List\u003Cstring\u003E { \u0022#\u0022, \u0022color\u0022, \u0022@\u0022 }).SequenceEqual(new List\u003Cstring\u003E { \u0022Red\u0022, \u0022\u0022, \u0022Green\u0022, \u0022Orange\u0022, \u0022White\u0022 }));","Debug.Assert(RemoveWords(new List\u003Cstring\u003E { \u0022Red \u0026\u0022, \u0022Orange\u002B\u0022, \u0022Green\u0022, \u0022Orange @\u0022, \u0022White\u0022 }, new List\u003Cstring\u003E { \u0022\u0026\u0022, \u0022\u002B\u0022, \u0022@\u0022 }).SequenceEqual(new List\u003Cstring\u003E { \u0022Red\u0022, \u0022\u0022, \u0022Green\u0022, \u0022Orange\u0022, \u0022White\u0022 }));","Debug.Assert(RemoveWords(new List\u003Cstring\u003E { \u0022Red \u0026\u0022, \u0022Orange\u002B\u0022, \u0022Green\u0022, \u0022Orange @\u0022, \u0022White\u0022 }, new List\u003Cstring\u003E { \u0022@\u0022 }).SequenceEqual(new List\u003Cstring\u003E { \u0022Red \u0026\u0022, \u0022Orange\u002B\u0022, \u0022Green\u0022, \u0022Orange\u0022, \u0022White\u0022 }));"],"challenge_test_list":[]}
{"name":"max-sum-disjoint","description":"Max sum of disjoint pairs up to k in array","text":"Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.","code":"public int MaxSumPairDiffLessthanK(int[] arr, int N, int K) \n{\n    Array.Sort(arr);\n    int[] dp = new int[N];\n    dp[0] = 0;\n    for (int i = 1; i \u003C N; i\u002B\u002B) \n    {\n        dp[i] = dp[i - 1];\n        if (arr[i] - arr[i - 1] \u003C K) \n        {\n            if (i \u003E= 2) \n            {\n                dp[i] = Math.Max(dp[i], dp[i - 2] \u002B arr[i] \u002B arr[i - 1]);\n            } \n            else \n            {\n                dp[i] = Math.Max(dp[i], arr[i] \u002B arr[i - 1]);\n            }\n        }\n    }\n    return dp[N - 1];\n}","task_id":571,"test_setup_code":"","test_list":["Debug.Assert(MaxSumPairDiffLessthanK(new int[] { 3, 5, 10, 15, 17, 12, 9 }, 7, 4) == 62);","Debug.Assert(MaxSumPairDiffLessthanK(new int[] { 5, 15, 10, 300 }, 4, 12) == 25);","Debug.Assert(MaxSumPairDiffLessthanK(new int[] { 1, 2, 3, 4, 5, 6 }, 6, 6) == 21);"],"challenge_test_list":[]}
{"name":"remove-dups-from-lists","description":"Remove two duplicates from multiple lists in Python","text":"Write a C# function to remove two duplicate numbers from a given number of lists.","code":"public List\u003Cint\u003E TwoUniqueNums(List\u003Cint\u003E nums)\n{\n    return nums.Where(i =\u003E nums.Count(x =\u003E x == i) == 1).ToList();\n}","task_id":572,"test_setup_code":"","test_list":["Debug.Assert(TwoUniqueNums(new int[] { 1, 2, 3, 2, 3, 4, 5 }).SequenceEqual(new int[] { 1, 4, 5 }));","Debug.Assert(TwoUniqueNums(new List\u003Cint\u003E { 1, 2, 3, 2, 4, 5 }).SequenceEqual(new List\u003Cint\u003E { 1, 3, 4, 5 }));","Debug.Assert(TwoUniqueNums(new List\u003Cint\u003E { 1, 2, 3, 4, 5 }).SequenceEqual(new List\u003Cint\u003E { 1, 2, 3, 4, 5 }));"],"challenge_test_list":[]}
{"name":"unique-product","description":"Calculate product of unique list numbers","text":"Write a C# function to calculate the product of the unique numbers of a given list.","code":"public static int UniqueProduct(List\u003Cint\u003E listData) {\n    var temp = new HashSet\u003Cint\u003E(listData);\n    int p = 1;\n    foreach (var i in temp) {\n        p *= i;\n    }\n    return p;\n}","task_id":573,"test_setup_code":"","test_list":["Debug.Assert(UniqueProduct(new List\u003Cint\u003E { 10, 20, 30, 40, 20, 50, 60, 40 }) == 720000000);","Debug.Assert(UniqueProduct(new int[] { 1, 2, 3, 1 }) == 6);","Debug.Assert(UniqueProduct(new int[] { 7, 8, 9, 0, 1, 1 }) == 0);"],"challenge_test_list":[]}
{"name":"cylinder-surface-area","description":"Calculate the surface area of a cylinder","text":"Write a function to find the surface area of a cylinder.","code":"public double SurfaceAreaCylinder(double r, double h)\n{\n    double surfaceArea = (2 * 3.1415 * r * r) \u002B (2 * 3.1415 * r * h);\n    return surfaceArea;\n}","task_id":574,"test_setup_code":"","test_list":["Debug.Assert(SurfaceAreaCylinder(10, 5) == 942.45);","Debug.Assert(SurfaceAreaCylinder(4, 5) == 226.18800000000002);","Debug.Assert(SurfaceAreaCylinder(4, 10) == 351.848);"],"challenge_test_list":[]}
{"name":"nth-number-seq","description":"Find the nth non-multiple of a given number","text":"Write a C# function to find nth number in a sequence which is not a multiple of a given number.","code":"public int CountNo(int A, int N, int L, int R) \n{\n    int count = 0;\n    int i;\n    for (i = L; i \u003C= R; i\u002B\u002B) \n    {\n        if (i % A != 0) \n        {\n            count\u002B\u002B;\n        }\n        if (count == N) \n        {\n            break;\n        }\n    }\n    return i;\n}","task_id":575,"test_setup_code":"","test_list":["Debug.Assert(CountNo(2, 3, 1, 10) == 5);","Debug.Assert(CountNo(3, 6, 4, 20) == 11);","Debug.Assert(CountNo(5, 10, 4, 20) == 16);"],"challenge_test_list":[]}
{"name":"subarray-checker","description":"Check if one array is a subarray of another","text":"Write a C# function to check whether an array is subarray of another or not.","code":"public static bool IsSubArray(int[] A, int[] B, int n, int m) \n{\n    int i = 0, j = 0; \n    while (i \u003C n \u0026\u0026 j \u003C m) \n    {  \n        if (A[i] == B[j]) \n        {\n            i\u002B\u002B; \n            j\u002B\u002B; \n            if (j == m) \n                return true;  \n        } \n        else \n        {\n            i = i - j \u002B 1; \n            j = 0;       \n        } \n    }\n    return false;  \n}","task_id":576,"test_setup_code":"","test_list":["Debug.Assert(IsSubArray(new int[] { 1, 4, 3, 5 }, new int[] { 1, 2 }, 4, 2) == false);","Debug.Assert(IsSubArray(new int[] { 1, 2, 1 }, new int[] { 1, 2, 1 }, 3, 3) == true);","Debug.Assert(IsSubArray(new int[] { 1, 0, 2, 2 }, new int[] { 2, 2, 0 }, 4, 3) == false);"],"challenge_test_list":[]}
{"name":"last-digit-fac","description":"Find the last digit of a factorial in Python","text":"Write a C# function to find the last digit in factorial of a given number.","code":"public int LastDigitFactorial(int n) \n{\n    if (n == 0) return 1;\n    else if (n \u003C= 2) return n;\n    else if (n == 3) return 6;\n    else if (n == 4) return 4;\n    else return 0;\n}","task_id":577,"test_setup_code":"","test_list":["Debug.Assert(LastDigitFactorial(4) == 4);","Debug.Assert(LastDigitFactorial(21) == 0);","Debug.Assert(LastDigitFactorial(30) == 0);"],"challenge_test_list":[]}
{"name":"interleave-lists","description":"Interleave two lists of equal length into one","text":"Write a function to interleave lists of the same length.","code":"public List\u003CT\u003E InterleaveLists\u003CT\u003E(List\u003CT\u003E list1, List\u003CT\u003E list2, List\u003CT\u003E list3)\n{\n    var result = new List\u003CT\u003E();\n    var count = Math.Min(Math.Min(list1.Count, list2.Count), list3.Count);\n\n    for (int i = 0; i \u003C count; i\u002B\u002B)\n    {\n        result.Add(list1[i]);\n        result.Add(list2[i]);\n        result.Add(list3[i]);\n    }\n    \n    return result;\n}","task_id":578,"test_setup_code":"","test_list":["Debug.Assert(InterleaveLists(new int[] { 1, 2, 3, 4, 5, 6, 7 }, new int[] { 10, 20, 30, 40, 50, 60, 70 }, new int[] { 100, 200, 300, 400, 500, 600, 700 }).SequenceEqual(new int[] { 1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700 }));","Debug.Assert(InterleaveLists(new List\u003Cint\u003E { 10, 20 }, new List\u003Cint\u003E { 15, 2 }, new List\u003Cint\u003E { 5, 10 }).SequenceEqual(new List\u003Cint\u003E { 10, 15, 5, 20, 2, 10 }));","Debug.Assert(InterleaveLists(new List\u003Cint\u003E { 11, 44 }, new List\u003Cint\u003E { 10, 15 }, new List\u003Cint\u003E { 20, 5 }).SequenceEqual(new List\u003Cint\u003E { 11, 10, 20, 44, 15, 5 }));"],"challenge_test_list":[]}
{"name":"dissimilar-elements","description":"Find dissimilar elements in two tuples","text":"Write a function to find the dissimilar elements in the given two tuples.","code":"public static Tuple\u003CT\u003E[] FindDissimilar\u003CT\u003E(Tuple\u003CT\u003E[] testTup1, Tuple\u003CT\u003E[] testTup2)\n{\n    var res = new HashSet\u003CT\u003E(testTup1).SymmetricExceptWith(testTup2);\n    return res.ToArray();\n}","task_id":579,"test_setup_code":"","test_list":["Debug.Assert(FindDissimilar(new Tuple\u003Cint, int, int, int\u003E(3, 4, 5, 6), new Tuple\u003Cint, int, int, int\u003E(5, 7, 4, 10)).Equals(new Tuple\u003Cint, int, int, int\u003E(3, 6, 7, 10)));","Debug.Assert(FindDissimilar(new[] { 1, 2, 3, 4 }, new[] { 7, 2, 3, 9 }).SequenceEqual(new[] { 1, 4, 7, 9 }));","Debug.Assert(FindDissimilar(new Tuple\u003Cint, int, int, int\u003E(21, 11, 25, 26), new Tuple\u003Cint, int, int, int\u003E(26, 34, 21, 36)).Equals(new Tuple\u003Cint, int, int, int\u003E(34, 36, 11, 25)));"],"challenge_test_list":[]}
{"name":"even-elements-tu","description":"Extract even elements from nested mixed tuple","text":"Write a function to extract the even elements in the nested mixed tuple.","code":"public static Tuple\u003Cobject\u003E EvenEle(Tuple\u003Cobject\u003E testTuple, Func\u003Cobject, bool\u003E evenFnc) \n{\n    var res = new List\u003Cobject\u003E();\n    foreach (var ele in testTuple)\n    {\n        if (ele is Tuple\u003Cobject\u003E nestedTuple)\n        {\n            res.Add(EvenEle(nestedTuple, evenFnc));\n        }\n        else if (evenFnc(ele))\n        {\n            res.Add(ele);\n        }\n    }\n    return Tuple.Create(res.ToArray());\n}\n\npublic static Tuple\u003Cobject\u003E ExtractEven(Tuple\u003Cobject\u003E testTuple) \n{\n    var res = EvenEle(testTuple, x =\u003E (int)x % 2 == 0);\n    return res;\n}","task_id":580,"test_setup_code":"","test_list":["Debug.Assert(ExtractEven(new object[] { 4, 5, new object[] { 7, 6, new object[] { 2, 4 } }, 6, 8 }).Equals(new object[] { 4, new object[] { 6, new object[] { 2, 4 } }, 6, 8 }));","Debug.Assert(ExtractEven(new Tuple\u003Cint, int, Tuple\u003Cint, int, Tuple\u003Cint, int\u003E\u003E\u003E(\n    5, 6, new Tuple\u003Cint, int, Tuple\u003Cint, int\u003E\u003E(8, 7, new Tuple\u003Cint, int\u003E(4, 8))\n)) == new Tuple\u003Cint, Tuple\u003Cint, Tuple\u003Cint, int\u003E\u003E\u003E(\n    6, new Tuple\u003Cint, Tuple\u003Cint\u003E\u003E(8, new Tuple\u003Cint\u003E(4, 8))\n));","Debug.Assert(ExtractEven((5, 6, (9, 8, (4, 6)), 8, 10)).Equals((6, (8, (4, 6)), 8, 10)));"],"challenge_test_list":[]}
{"name":"square-pyramid-sa","description":"Calculate surface area of a square pyramid","text":"Write a C# function to find the surface area of the square pyramid.","code":"public static double SurfaceArea(double b, double s) \n{ \n    return 2 * b * s \u002B Math.Pow(b, 2); \n}","task_id":581,"test_setup_code":"","test_list":["Debug.Assert(SurfaceArea(3, 4) == 33);","Debug.Assert(SurfaceArea(4, 5) == 56);","Debug.Assert(SurfaceArea(1, 2) == 5);"],"challenge_test_list":[]}
{"name":"check-empty-dict","description":"Check if a dictionary is empty or contains items","text":"Write a function to check if a dictionary is empty or not.","code":"public bool MyDict(Dictionary\u003Cstring, object\u003E dict1)\n{\n    if (dict1.Any())\n    {\n        return false;\n    }\n    else\n    {\n        return true;\n    }\n}","task_id":582,"test_setup_code":"","test_list":["Debug.Assert(MyDict(new HashSet\u003Cint\u003E { 10 }) == false);","Debug.Assert(MyDict(new HashSet\u003Cint\u003E { 11 }) == false);","Debug.Assert(MyDict(new Dictionary\u003Cstring, string\u003E()) == true);"],"challenge_test_list":[]}
{"name":"nth-catalan-num","description":"Calculate the nth Catalan number function","text":"Write a function for nth catalan number.","code":"public int CatalanNumber(int num) {\n    if (num \u003C= 1) {\n        return 1;\n    }\n    int resNum = 0;\n    for (int i = 0; i \u003C num; i\u002B\u002B) {\n        resNum \u002B= CatalanNumber(i) * CatalanNumber(num - i - 1);\n    }\n    return resNum;\n}","task_id":583,"test_setup_code":"","test_list":["Debug.Assert(CatalanNumber(10) == 16796);","Debug.Assert(CatalanNumber(9) == 4862);","Debug.Assert(CatalanNumber(7) == 429);"],"challenge_test_list":[]}
{"name":"find-adverbs-pos","description":"Extract adverbs and their positions from a sentence","text":"Write a function to find all adverbs and their positions in a given sentence by using regex.","code":"using System.Text.RegularExpressions;\n\npublic string FindAdverbs(string text)\n{\n    MatchCollection matches = Regex.Matches(text, @\u0022\\w\u002Bly\u0022);\n    foreach (Match m in matches)\n    {\n        return string.Format(\u0022{0}-{1}: {2}\u0022, m.Index, m.Index \u002B m.Length, m.Value);\n    }\n    return null;\n}","task_id":584,"test_setup_code":"","test_list":["Debug.Assert(FindAdverbs(\u0022Clearly, he has no excuse for such behavior.\u0022) == \u00220-7: Clearly\u0022);","Debug.Assert(FindAdverbs(\u0022Please handle the situation carefuly\u0022) == \u002228-36: carefuly\u0022);","Debug.Assert(FindAdverbs(\u0022Complete the task quickly\u0022) == \u002218-25: quickly\u0022);"],"challenge_test_list":[]}
{"name":"expensive-items","description":"Find n most expensive items using heap queue","text":"Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.","code":"public List\u003CDictionary\u003Cstring, object\u003E\u003E ExpensiveItems(List\u003CDictionary\u003Cstring, object\u003E\u003E items, int n) {\n    return items.OrderByDescending(item =\u003E (decimal)item[\u0022price\u0022]).Take(n).ToList();\n}","task_id":585,"test_setup_code":"","test_list":["Debug.Assert(ExpensiveItems(new List\u003CDictionary\u003Cstring, object\u003E\u003E { new Dictionary\u003Cstring, object\u003E { { \u0022name\u0022, \u0022Item-1\u0022 }, { \u0022price\u0022, 101.1 } }, new Dictionary\u003Cstring, object\u003E { { \u0022name\u0022, \u0022Item-2\u0022 }, { \u0022price\u0022, 555.22 } } }, 1).SequenceEqual(new List\u003CDictionary\u003Cstring, object\u003E\u003E { new Dictionary\u003Cstring, object\u003E { { \u0022name\u0022, \u0022Item-2\u0022 }, { \u0022price\u0022, 555.22 } } }));","Debug.Assert(ExpensiveItems(new List\u003CDictionary\u003Cstring, object\u003E\u003E{ new Dictionary\u003Cstring, object\u003E{{\u0022name\u0022, \u0022Item-1\u0022}, {\u0022price\u0022, 101.1}}, new Dictionary\u003Cstring, object\u003E{{\u0022name\u0022, \u0022Item-2\u0022}, {\u0022price\u0022, 555.22}}, new Dictionary\u003Cstring, object\u003E{{\u0022name\u0022, \u0022Item-3\u0022}, {\u0022price\u0022, 45.09}}}, 2).SequenceEqual(new List\u003CDictionary\u003Cstring, object\u003E\u003E{ new Dictionary\u003Cstring, object\u003E{{\u0022name\u0022, \u0022Item-2\u0022}, {\u0022price\u0022, 555.22}}, new Dictionary\u003Cstring, object\u003E{{\u0022name\u0022, \u0022Item-1\u0022}, {\u0022price\u0022, 101.1}}}));","Debug.Assert(ExpensiveItems(new List\u003CDictionary\u003Cstring, object\u003E\u003E { new Dictionary\u003Cstring, object\u003E { { \u0022name\u0022, \u0022Item-1\u0022 }, { \u0022price\u0022, 101.1 } }, new Dictionary\u003Cstring, object\u003E { { \u0022name\u0022, \u0022Item-2\u0022 }, { \u0022price\u0022, 555.22 } }, new Dictionary\u003Cstring, object\u003E { { \u0022name\u0022, \u0022Item-3\u0022 }, { \u0022price\u0022, 45.09 } }, new Dictionary\u003Cstring, object\u003E { { \u0022name\u0022, \u0022Item-4\u0022 }, { \u0022price\u0022, 22.75 } } }, 1).SequenceEqual(new List\u003CDictionary\u003Cstring, object\u003E\u003E { new Dictionary\u003Cstring, object\u003E { { \u0022name\u0022, \u0022Item-2\u0022 }, { \u0022price\u0022, 555.22 } } }));"],"challenge_test_list":[]}
{"name":"split-and-add.py","description":"Split array and move first part to the end","text":"Write a C# function to split the array and add the first part to the end.","code":"public static List\u003Cint\u003E SplitArr(List\u003Cint\u003E a, int n, int k)  \n{  \n    var b = a.Take(k).ToList();  \n    return a.Skip(k).Concat(b).ToList();  \n}","task_id":586,"test_setup_code":"","test_list":["Debug.Assert(SplitArr(new int[] { 12, 10, 5, 6, 52, 36 }, 6, 2).SequenceEqual(new int[] { 5, 6, 52, 36, 12, 10 }));","Debug.Assert(SplitArr(new int[] { 1, 2, 3, 4 }, 4, 1).SequenceEqual(new int[] { 2, 3, 4, 1 }));","Debug.Assert(SplitArr(new int[] { 0, 1, 2, 3, 4, 5, 6, 7 }, 8, 3).SequenceEqual(new int[] { 3, 4, 5, 6, 7, 0, 1, 2 }));"],"challenge_test_list":[]}
{"name":"list-to-tuple","description":"Convert a list into a tuple using a function","text":"Write a function to convert a list to a tuple.","code":"public Tuple\u003Cobject\u003E ListTuple(List\u003Cobject\u003E listx) \n{\n    var tuplex = Tuple.Create(listx.ToArray());\n    return tuplex;\n}","task_id":587,"test_setup_code":"","test_list":["Debug.Assert(ListTuple(new List\u003Cint\u003E { 5, 10, 7, 4, 15, 3 }).Equals((5, 10, 7, 4, 15, 3)));","Debug.Assert(ListTuple(new List\u003Cint\u003E { 2, 4, 5, 6, 2, 3, 4, 4, 7 }).SequenceEqual(new ValueTuple\u003Cint, int, int, int, int, int, int, int, int\u003E(2, 4, 5, 6, 2, 3, 4, 4, 7)));","Debug.Assert(ListTuple(new int[] { 58, 44, 56 }).SequenceEqual(new int[] { 58, 44, 56 }));"],"challenge_test_list":[]}
{"name":"largest-smallest","description":"Find the difference between max and min in array","text":"Write a C# function to find the difference between largest and smallest value in a given array.","code":"public int BigDiff(List\u003Cint\u003E nums) \n{\n    int diff = nums.Max() - nums.Min();\n    return diff;\n}","task_id":588,"test_setup_code":"","test_list":["Debug.Assert(BigDiff(new int[] { 1, 2, 3, 4 }) == 3);","Debug.Assert(BigDiff(new int[] { 4, 5, 12 }) == 8);","Debug.Assert(BigDiff(new int[] { 9, 2, 3 }) == 7);"],"challenge_test_list":[]}
{"name":"find-perfect-sq","description":"Find perfect squares in a specified range","text":"Write a function to find perfect squares between two given numbers.","code":"public List\u003Cint\u003E PerfectSquares(int a, int b) {\n    List\u003Cint\u003E lists = new List\u003Cint\u003E();\n    for (int i = a; i \u003C= b; i\u002B\u002B) {\n        int j = 1;\n        while (j * j \u003C= i) {\n            if (j * j == i) {\n                lists.Add(i);\n            }\n            j\u002B\u002B;\n        }\n    }\n    return lists;\n}","task_id":589,"test_setup_code":"","test_list":["Debug.Assert(PerfectSquares(1, 30).SequenceEqual(new List\u003Cint\u003E { 1, 4, 9, 16, 25 }));","Debug.Assert(PerfectSquares(50, 100).SequenceEqual(new List\u003Cint\u003E { 64, 81, 100 }));","Debug.Assert(PerfectSquares(100, 200).SequenceEqual(new List\u003Cint\u003E { 100, 121, 144, 169, 196 }));"],"challenge_test_list":[]}
{"name":"polar-to-rectangular","description":"Convert polar to rectangular coordinates function","text":"Write a function to convert polar coordinates to rectangular coordinates.","code":"using System;\nusing System.Numerics;\n\npublic class Converter\n{\n    public Tuple\u003C(double, double), Complex\u003E PolarRect(double x, double y)\n    {\n        Complex cn = new Complex(x, y);\n        var polar = Complex polar = Complex.Add(new Complex(cn.Magnitude, cn.Phase));\n        Complex cn1 = Complex.FromPolarCoordinates(2, Math.PI);\n        return Tuple.Create((polar.Real, polar.Imaginary), cn1);\n    }\n}","task_id":590,"test_setup_code":"","test_list":["Debug.Assert(PolarRect(3, 4).Item1 == (5.0, 0.9272952180016122) \u0026\u0026 PolarRect(3, 4).Item2 == new Complex(-2, 2.4492935982947064e-16));","Debug.Assert(PolarRect(4, 7).Item1 == (8.06225774829855, 1.0516502125483738) \u0026\u0026 PolarRect(4, 7).Item2 == (-2 \u002B 2.4492935982947064e-16j));","Debug.Assert(PolarRect(15, 17).Item1 == (22.67156809750927, 0.8478169733934057) \u0026\u0026 PolarRect(15, 17).Item2 == new Complex(-2, 2.4492935982947064e-16));"],"challenge_test_list":[]}
{"name":"interchange-list","description":"Interchange first and last elements in a list","text":"Write a C# function to interchange the first and last elements in a list.","code":"public List\u003CT\u003E SwapList\u003CT\u003E(List\u003CT\u003E newList) \n{ \n    int size = newList.Count; \n    T temp = newList[0]; \n    newList[0] = newList[size - 1]; \n    newList[size - 1] = temp; \n    return newList; \n}","task_id":591,"test_setup_code":"","test_list":["Debug.Assert(SwapList(new List\u003Cint\u003E { 12, 35, 9, 56, 24 }).SequenceEqual(new List\u003Cint\u003E { 24, 35, 9, 56, 12 }));","Debug.Assert(SwapList(new List\u003Cint\u003E { 1, 2, 3 }).SequenceEqual(new List\u003Cint\u003E { 3, 2, 1 }));","Debug.Assert(SwapList(new List\u003Cint\u003E { 4, 5, 6 }).SequenceEqual(new List\u003Cint\u003E { 6, 5, 4 }));\n\npublic List\u003Cint\u003E SwapList(List\u003Cint\u003E inputList) {\n    inputList.Reverse();\n    return inputList;\n}"],"challenge_test_list":[]}
{"name":"binomial-sum-prod","description":"Calculate sum of products of binomial coefficients","text":"Write a C# function to find sum of product of binomial co-efficients.","code":"public static int BinomialCoeff(int n, int k) \n{ \n    int[] C = new int[k \u002B 1]; \n    C[0] = 1; \n    for (int i = 1; i \u003C= n; i\u002B\u002B) \n    { \n        for (int j = Math.Min(i, k); j \u003E 0; j--) \n        { \n            C[j] \u002B= C[j - 1]; \n        } \n    } \n    return C[k]; \n}\n\npublic static int SumOfProduct(int n) \n{ \n    return BinomialCoeff(2 * n, n - 1); \n}","task_id":592,"test_setup_code":"","test_list":["Debug.Assert(SumOfProduct(3) == 15);","Debug.Assert(SumOfProduct(4) == 56);","Debug.Assert(SumOfProduct(1) == 1);"],"challenge_test_list":[]}
{"name":"remove-leading-zeros","description":"Remove leading zeroes from an IP address","text":"Write a function to remove leading zeroes from an ip address.","code":"public string RemoveZeroIp(string ip)\n{\n    string result = Regex.Replace(ip, @\u0022\\.[0]*\u0022, \u0022.\u0022);\n    return result;\n}","task_id":593,"test_setup_code":"","test_list":["Debug.Assert(RemoveZeroIp(\u0022216.08.094.196\u0022) == \u0022216.8.94.196\u0022);","Debug.Assert(RemoveZeroIp(\u002212.01.024\u0022) == \u002212.1.24\u0022);","Debug.Assert(RemoveZeroIp(\u0022216.08.094.0196\u0022) == \u0022216.8.94.196\u0022);"],"challenge_test_list":[]}
{"name":"first-even-odd","description":"Calculate difference between first even and odd numbers","text":"Write a function to find the difference of first even and odd number of a given list.","code":"public int DiffEvenOdd(List\u003Cint\u003E list1) {\n    int firstEven = list1.FirstOrDefault(el =\u003E el % 2 == 0);\n    int firstOdd = list1.FirstOrDefault(el =\u003E el % 2 != 0);\n    return firstEven - firstOdd;\n}","task_id":594,"test_setup_code":"","test_list":["Debug.Assert(DiffEvenOdd(new int[] { 1, 3, 5, 7, 4, 1, 6, 8 }) == 3);","Debug.Assert(DiffEvenOdd(new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }) == 1);","Debug.Assert(DiffEvenOdd(new int[] { 1, 5, 7, 9, 10 }) == 9);"],"challenge_test_list":[]}
{"name":"binary-swap-count","description":"Count swaps to convert one binary string to another","text":"Write a C# function to count minimum number of swaps required to convert one binary string to another.","code":"public string MinSwaps(string str1, string str2) \n{ \n    int count = 0; \n    for (int i = 0; i \u003C str1.Length; i\u002B\u002B) \n    { \n        if (str1[i] != str2[i]) \n        { \n            count\u002B\u002B; \n        } \n    } \n    if (count % 2 == 0) \n    { \n        return (count / 2).ToString(); \n    } \n    else \n    { \n        return \u0022Not Possible\u0022; \n    } \n}","task_id":595,"test_setup_code":"","test_list":["Debug.Assert(MinSwaps(\u00221101\u0022, \u00221110\u0022) == 1);","Debug.Assert(MinSwaps(\u0022111\u0022, \u0022000\u0022) == \u0022Not Possible\u0022);","Debug.Assert(MinSwaps(\u0022111\u0022, \u0022110\u0022) == \u0022Not Possible\u0022);"],"challenge_test_list":[]}
{"name":"tuple-size-finder","description":"Find the size of a given tuple","text":"Write a function to find the size of the given tuple.","code":"using System;\n\npublic class TupleSizeCalculator\n{\n    public static long TupleSize(object tupleList)\n    {\n        return System.Runtime.InteropServices.Marshal.SizeOf(tupleList);\n    }\n}","task_id":596,"test_setup_code":"","test_list":["Debug.Assert(TupleSize((\u0022A\u0022, 1, \u0022B\u0022, 2, \u0022C\u0022, 3)) == System.Runtime.InteropServices.Marshal.SizeOf(typeof(ValueTuple\u003Cstring, int, string, int, string, int\u003E)));","Debug.Assert(TupleSize((1, \u0022Raju\u0022, 2, \u0022Nikhil\u0022, 3, \u0022Deepanshu\u0022)) == System.Runtime.InteropServices.Marshal.SizeOf\u003C(int, string, int, string, int, string)\u003E((1, \u0022Raju\u0022, 2, \u0022Nikhil\u0022, 3, \u0022Deepanshu\u0022)));","Debug.Assert(TupleSize(((1, \u0022Lion\u0022), (2, \u0022Tiger\u0022), (3, \u0022Fox\u0022), (4, \u0022Wolf\u0022))) == System.Runtime.InteropServices.Marshal.SizeOf(((1, \u0022Lion\u0022), (2, \u0022Tiger\u0022), (3, \u0022Fox\u0022), (4, \u0022Wolf\u0022))));"],"challenge_test_list":[]}
{"name":"kth-element-finder","description":"Find kth element in two sorted arrays","text":"Write a function to find kth element from the given two sorted arrays.","code":"public int FindKth(int[] arr1, int[] arr2, int m, int n, int k) {\n    int[] sorted1 = new int[m \u002B n];\n    int i = 0, j = 0, d = 0;\n    \n    while (i \u003C m \u0026\u0026 j \u003C n) {\n        if (arr1[i] \u003C arr2[j]) {\n            sorted1[d] = arr1[i];\n            i\u002B\u002B;\n        } else {\n            sorted1[d] = arr2[j];\n            j\u002B\u002B;\n        }\n        d\u002B\u002B;\n    }\n    \n    while (i \u003C m) {\n        sorted1[d] = arr1[i];\n        d\u002B\u002B;\n        i\u002B\u002B;\n    }\n    \n    while (j \u003C n) {\n        sorted1[d] = arr2[j];\n        d\u002B\u002B;\n        j\u002B\u002B;\n    }\n    \n    return sorted1[k - 1];\n}","task_id":597,"test_setup_code":"","test_list":["Debug.Assert(FindKth(new int[] { 2, 3, 6, 7, 9 }, new int[] { 1, 4, 8, 10 }, 5, 4, 5) == 6);","Debug.Assert(FindKth(new int[] { 100, 112, 256, 349, 770 }, new int[] { 72, 86, 113, 119, 265, 445, 892 }, 5, 7, 7) == 256);","Debug.Assert(FindKth(new int[] { 3, 4, 7, 8, 10 }, new int[] { 2, 5, 9, 11 }, 5, 4, 6) == 8);"],"challenge_test_list":[]}
{"name":"armstrong-check","description":"Check if a number is an Armstrong number","text":"Write a function to check whether the given number is armstrong or not.","code":"public bool ArmstrongNumber(int number) {\n    int sum = 0;\n    int times = 0;\n    int temp = number;\n    \n    while (temp \u003E 0) {\n        times\u002B\u002B;\n        temp /= 10;\n    }\n    \n    temp = number;\n    while (temp \u003E 0) {\n        int reminder = temp % 10;\n        sum \u002B= (int)Math.Pow(reminder, times);\n        temp /= 10;\n    }\n    \n    return number == sum;\n}","task_id":598,"test_setup_code":"","test_list":["Debug.Assert(ArmstrongNumber(153) == true);","Debug.Assert(ArmstrongNumber(259) == false);","Debug.Assert(ArmstrongNumber(4458) == false);"],"challenge_test_list":[]}
{"name":"sum-and-average","description":"Sum and average of first n natural numbers","text":"Write a function to find sum and average of first n natural numbers.","code":"public (int Total, double Average) SumAverage(int number)\n{\n    int total = 0;\n    for (int value = 1; value \u003C= number; value\u002B\u002B)\n    {\n        total \u002B= value;\n    }\n    double average = (double)total / number;\n    return (total, average);\n}","task_id":599,"test_setup_code":"","test_list":["Debug.Assert(SumAverage(10).Equals((55, 5.5)));","Debug.Assert(SumAverage(15).Item1 == 120 \u0026\u0026 SumAverage(15).Item2 == 8.0);","Debug.Assert(SumAverage(20).Equals((210, 10.5)));"],"challenge_test_list":[]}
{"name":"check-even-bits","description":"Check if a number is even using bitwise operator","text":"Write a C# function to check whether the given number is even or not using bitwise operator.","code":"bool IsEven(int n) \n{ \n    if ((n ^ 1) == (n \u002B 1)) \n    { \n        return true; \n    } \n    else \n    { \n        return false; \n    } \n}","task_id":600,"test_setup_code":"","test_list":["Debug.Assert(IsEven(1) == false);","Debug.Assert(IsEven(2) == true);","Debug.Assert(IsEven(3) == false);"],"challenge_test_list":[]}
{"name":"longest-chain-fn","description":"Find the longest chain from pairs of elements","text":"Write a function to find the longest chain which can be formed from the given set of pairs.","code":"class Pair\n{\n    public int A { get; set; }\n    public int B { get; set; }\n\n    public Pair(int a, int b)\n    {\n        A = a;\n        B = b;\n    }\n}\n\npublic int MaxChainLength(Pair[] arr, int n)\n{\n    int max = 0;\n    int[] mcl = new int[n];\n    for (int i = 0; i \u003C n; i\u002B\u002B)\n    {\n        mcl[i] = 1;\n    }\n    for (int i = 1; i \u003C n; i\u002B\u002B)\n    {\n        for (int j = 0; j \u003C i; j\u002B\u002B)\n        {\n            if (arr[i].A \u003E arr[j].B \u0026\u0026 mcl[i] \u003C mcl[j] \u002B 1)\n            {\n                mcl[i] = mcl[j] \u002B 1;\n            }\n        }\n    }\n    for (int i = 0; i \u003C n; i\u002B\u002B)\n    {\n        if (max \u003C mcl[i])\n        {\n            max = mcl[i];\n        }\n    }\n    return max;\n}","task_id":601,"test_setup_code":"","test_list":["Debug.Assert(MaxChainLength(new Pair[] { new Pair(5, 24), new Pair(15, 25), new Pair(27, 40), new Pair(50, 60) }, 4) == 3);","Debug.Assert(MaxChainLength(new Pair[] { new Pair(1, 2), new Pair(3, 4), new Pair(5, 6), new Pair(7, 8) }) == 4);","Debug.Assert(MaxChainLength(new List\u003CPair\u003E { new Pair(19, 10), new Pair(11, 12), new Pair(13, 14), new Pair(15, 16), new Pair(31, 54) }) == 5);"],"challenge_test_list":[]}
{"name":"first-repeated","description":"Find the first repeated character in a string","text":"Write a C# function to find the first repeated character in a given string.","code":"public string FirstRepeatedChar(string str1)\n{\n    for (int index = 0; index \u003C str1.Length; index\u002B\u002B)\n    {\n        char c = str1[index];\n        if (str1.Substring(0, index \u002B 1).Count(x =\u003E x == c) \u003E 1)\n        {\n            return c.ToString();\n        }\n    }\n    return \u0022None\u0022;\n}","task_id":602,"test_setup_code":"","test_list":["Debug.Assert(FirstRepeatedChar(\u0022abcabc\u0022) == \u0022a\u0022);","Debug.Assert(FirstRepeatedChar(\u0022abc\u0022) == \u0022None\u0022);","Debug.Assert(FirstRepeatedChar(\u0022123123\u0022) == \u00221\u0022);"],"challenge_test_list":[]}
{"name":"lucid-number-n","description":"Get the nearest lucid number to n","text":"Write a function to get a lucid number smaller than or equal to n.","code":"public List\u003Cint\u003E GetLudic(int n) {\n    List\u003Cint\u003E ludics = new List\u003Cint\u003E();\n    for (int i = 1; i \u003C= n; i\u002B\u002B) {\n        ludics.Add(i);\n    }\n    int index = 1;\n    while (index != ludics.Count) {\n        int firstLudic = ludics[index];\n        int removeIndex = index \u002B firstLudic;\n        while (removeIndex \u003C ludics.Count) {\n            ludics.RemoveAt(removeIndex);\n            removeIndex \u002B= firstLudic - 1;\n        }\n        index\u002B\u002B;\n    }\n    return ludics;\n}","task_id":603,"test_setup_code":"","test_list":["Debug.Assert(GetLudic(10).SequenceEqual(new List\u003Cint\u003E { 1, 2, 3, 5, 7 }));","Debug.Assert(GetLudic(25).SequenceEqual(new List\u003Cint\u003E { 1, 2, 3, 5, 7, 11, 13, 17, 23, 25 }));","Debug.Assert(GetLudic(45).SequenceEqual(new List\u003Cint\u003E { 1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43 }));"],"challenge_test_list":[]}
{"name":"reverse-words","description":"Reverse words in a string with a custom function","text":"Write a function to reverse words in a given string.","code":"public string ReverseWords(string s) \n{\n    return string.Join(\u0022 \u0022, s.Split(\u0027 \u0027).Reverse());\n}","task_id":604,"test_setup_code":"","test_list":["Debug.Assert(ReverseWords(\u0022python program\u0022) == \u0022program python\u0022);","Debug.Assert(ReverseWords(\u0022java language\u0022) == \u0022language java\u0022);","Debug.Assert(ReverseWords(\u0022indian man\u0022) == \u0022man indian\u0022);"],"challenge_test_list":[]}
{"name":"\u0060check-prime-num\u0060","description":"Check if an integer is a prime number","text":"Write a function to check if the given integer is a prime number.","code":"public bool PrimeNum(int num)\n{\n    if (num \u003E= 1)\n    {\n        for (int i = 2; i \u003C= num / 2; i\u002B\u002B)\n        {\n            if (num % i == 0)\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}","task_id":605,"test_setup_code":"","test_list":["Debug.Assert(PrimeNum(13) == true);","Debug.Assert(PrimeNum(7) == true);","Debug.Assert(PrimeNum(-1010) == false);"],"challenge_test_list":[]}
{"name":"degrees-to-radians","description":"Convert degrees to radians using a function","text":"Write a function to convert degrees to radians.","code":"public double RadianDegree(double degree)  \n{  \n    double radian = degree * (Math.PI / 180);  \n    return radian;  \n}","task_id":606,"test_setup_code":"","test_list":["Debug.Assert(RadianDegree(90) == 1.5707963267948966);","Debug.Assert(RadianDegree(60) == 1.0471975511965976);","Debug.Assert(RadianDegree(120) == 2.0943951023931953);"],"challenge_test_list":[]}
{"name":"literal-search-regex","description":"Search for pattern in string using regex locating index","text":"Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.","code":"using System.Text.RegularExpressions;\n\npublic class Example\n{\n    public static (string, int, int) FindLiterals(string text, string pattern)\n    {\n        Match match = Regex.Match(text, pattern);\n        int s = match.Index;\n        int e = match.Index \u002B match.Length;\n        return (match.ToString(), s, e);\n    }\n}","task_id":607,"test_setup_code":"","test_list":["Debug.Assert(FindLiterals(\u0022The quick brown fox jumps over the lazy dog.\u0022, \u0022fox\u0022).Equals(Tuple.Create(\u0022fox\u0022, 16, 19)));","Debug.Assert(FindLiterals(\u0022Its been a very crazy procedure right\u0022, \u0022crazy\u0022).Equals((\u0022crazy\u0022, 16, 21)));","Debug.Assert(FindLiterals(\u0022Hardest choices required strongest will\u0022, \u0022will\u0022).Equals((\u0022will\u0022, 35, 39)));"],"challenge_test_list":[]}
{"name":"bell-number-nth","description":"Find the nth Bell number using a Python function","text":"Write a C# function to find nth bell number.","code":"public int BellNumber(int n) \n{\n    int[,] bell = new int[n \u002B 1, n \u002B 1];\n    bell[0, 0] = 1;\n    for (int i = 1; i \u003C= n; i\u002B\u002B)\n    {\n        bell[i, 0] = bell[i - 1, i - 1];\n        for (int j = 1; j \u003C= i; j\u002B\u002B)\n        {\n            bell[i, j] = bell[i - 1, j - 1] \u002B bell[i, j - 1];\n        }\n    }\n    return bell[n, 0];\n}","task_id":608,"test_setup_code":"","test_list":["Debug.Assert(BellNumber(2) == 2);","Debug.Assert(BellNumber(3) == 5);","Debug.Assert(BellNumber(4) == 15);"],"challenge_test_list":[]}
{"name":"min-periodic-func","description":"Find minimum value of a periodic function in Python","text":"Write a C# function to find minimum possible value for the given periodic function.","code":"public int FloorMin(int A, int B, int N) {\n    int x = Math.Max(B - 1, N);\n    return (A * x) / B;\n}","task_id":609,"test_setup_code":"","test_list":["Debug.Assert(FloorMin(10, 20, 30) == 15);","Debug.Assert(FloorMin(1, 2, 1) == 0);","Debug.Assert(FloorMin(11, 10, 9) == 9);"],"challenge_test_list":[]}
{"name":"remove-kth-element","description":"Remove the k\u0027th element from a list in Python","text":"Write a C# function to remove the k\u0027th element from a given list.","code":"public List\u003CT\u003E RemoveKthElement\u003CT\u003E(List\u003CT\u003E list1, int L) {\n    return list1.Take(L - 1).Concat(list1.Skip(L)).ToList();\n}","task_id":610,"test_setup_code":"","test_list":["Debug.Assert(RemoveKthElement(new List\u003Cint\u003E { 1, 1, 2, 3, 4, 4, 5, 1 }, 3).SequenceEqual(new List\u003Cint\u003E { 1, 1, 3, 4, 4, 5, 1 }));","Debug.Assert(RemoveKthElement(new List\u003Cint\u003E { 0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 }, 4).SequenceEqual(new List\u003Cint\u003E { 0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 }));","Debug.Assert(RemoveKthElement(new List\u003Cint\u003E { 10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10 }, 5).SequenceEqual(new List\u003Cint\u003E { 10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10 }));"],"challenge_test_list":[]}
{"name":"max-nth-column","description":"Find maximum value in nth column of tuples","text":"Write a function to find the maximum of nth column from the given tuple list.","code":"public static int MaxOfNth(List\u003CList\u003Cint\u003E\u003E testList, int N)  \n{  \n    int res = testList.Max(sub =\u003E sub[N]);  \n    return res;  \n}","task_id":611,"test_setup_code":"","test_list":["Debug.Assert(MaxOfNth(new List\u003CTuple\u003Cint, int, int\u003E\u003E { Tuple.Create(5, 6, 7), Tuple.Create(1, 3, 5), Tuple.Create(8, 9, 19) }, 2) == 19);","Debug.Assert(MaxOfNth(new[] { (6, 7, 8), (2, 4, 6), (9, 10, 20) }, 1) == 10);","Debug.Assert(MaxOfNth(new int[,] {{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1) == 11);"],"challenge_test_list":[]}
{"name":"merge-first-last","description":"Merge first and last elements of list of lists","text":"Write a C# function to merge the first and last elements separately in a list of lists.","code":"public List\u003CList\u003CT\u003E\u003E Merge\u003CT\u003E(List\u003CList\u003CT\u003E\u003E lst)  \n{  \n    return lst.Select(ele =\u003E ele.ToList()).ToList();  \n}","task_id":612,"test_setup_code":"","test_list":["Debug.Assert(Merge(new List\u003CList\u003Cstring\u003E\u003E { new List\u003Cstring\u003E { \u0022x\u0022, \u0022y\u0022 }, new List\u003Cstring\u003E { \u0022a\u0022, \u0022b\u0022 }, new List\u003Cstring\u003E { \u0022m\u0022, \u0022n\u0022 } }).SequenceEqual(new List\u003CList\u003Cstring\u003E\u003E { new List\u003Cstring\u003E { \u0022x\u0022, \u0022a\u0022, \u0022m\u0022 }, new List\u003Cstring\u003E { \u0022y\u0022, \u0022b\u0022, \u0022n\u0022 } }));","Debug.Assert(Merge(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 1, 2 }, new List\u003Cint\u003E { 3, 4 }, new List\u003Cint\u003E { 5, 6 }, new List\u003Cint\u003E { 7, 8 } }) == new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 1, 3, 5, 7 }, new List\u003Cint\u003E { 2, 4, 6, 8 } });","Debug.Assert(Merge(new List\u003CList\u003Cstring\u003E\u003E { new List\u003Cstring\u003E { \u0022x\u0022, \u0022y\u0022, \u0022z\u0022 }, new List\u003Cstring\u003E { \u0022a\u0022, \u0022b\u0022, \u0022c\u0022 }, new List\u003Cstring\u003E { \u0022m\u0022, \u0022n\u0022, \u0022o\u0022 } }) == new List\u003CList\u003Cstring\u003E\u003E { new List\u003Cstring\u003E { \u0022x\u0022, \u0022a\u0022, \u0022m\u0022 }, new List\u003Cstring\u003E { \u0022y\u0022, \u0022b\u0022, \u0022n\u0022 }, new List\u003Cstring\u003E { \u0022z\u0022, \u0022c\u0022, \u0022o\u0022 } });"],"challenge_test_list":[]}
{"name":"max-value-tuple","description":"Find max value in tuple attribute of list","text":"Write a function to find the maximum value in record list as tuple attribute in the given tuple list.","code":"public List\u003CTuple\u003CTKey, int\u003E\u003E MaximumValue\u003CTKey\u003E(List\u003CTuple\u003CTKey, List\u003Cint\u003E\u003E\u003E testList) {\n    var res = testList.Select(item =\u003E Tuple.Create(item.Item1, item.Item2.Max())).ToList();\n    return res;\n}","task_id":613,"test_setup_code":"","test_list":["Debug.Assert(MaximumValue(new List\u003CTuple\u003Cstring, List\u003Cint\u003E\u003E\u003E() { \n    new Tuple\u003Cstring, List\u003Cint\u003E\u003E(\u0022key1\u0022, new List\u003Cint\u003E() { 3, 4, 5 }), \n    new Tuple\u003Cstring, List\u003Cint\u003E\u003E(\u0022key2\u0022, new List\u003Cint\u003E() { 1, 4, 2 }), \n    new Tuple\u003Cstring, List\u003Cint\u003E\u003E(\u0022key3\u0022, new List\u003Cint\u003E() { 9, 3 }) \n}) ).SequenceEqual(new List\u003CTuple\u003Cstring, int\u003E\u003E() { \n    new Tuple\u003Cstring, int\u003E(\u0022key1\u0022, 5), \n    new Tuple\u003Cstring, int\u003E(\u0022key2\u0022, 4), \n    new Tuple\u003Cstring, int\u003E(\u0022key3\u0022, 9) }));","Debug.Assert(MaximumValue(new List\u003CTuple\u003Cstring, List\u003Cint\u003E\u003E\u003E { \n    Tuple.Create(\u0022key1\u0022, new List\u003Cint\u003E { 4, 5, 6 }), \n    Tuple.Create(\u0022key2\u0022, new List\u003Cint\u003E { 2, 5, 3 }), \n    Tuple.Create(\u0022key3\u0022, new List\u003Cint\u003E { 10, 4 }) \n}) == new List\u003CTuple\u003Cstring, int\u003E\u003E { \n    Tuple.Create(\u0022key1\u0022, 6), \n    Tuple.Create(\u0022key2\u0022, 5), \n    Tuple.Create(\u0022key3\u0022, 10) });","Debug.Assert(MaximumValue(new List\u003CTuple\u003Cstring, List\u003Cint\u003E\u003E\u003E { \n    new Tuple\u003Cstring, List\u003Cint\u003E\u003E(\u0022key1\u0022, new List\u003Cint\u003E { 5, 6, 7 }), \n    new Tuple\u003Cstring, List\u003Cint\u003E\u003E(\u0022key2\u0022, new List\u003Cint\u003E { 3, 6, 4 }), \n    new Tuple\u003Cstring, List\u003Cint\u003E\u003E(\u0022key3\u0022, new List\u003Cint\u003E { 11, 5 }) \n}) == new List\u003CTuple\u003Cstring, int\u003E\u003E { \n    new Tuple\u003Cstring, int\u003E(\u0022key1\u0022, 7), \n    new Tuple\u003Cstring, int\u003E(\u0022key2\u0022, 6), \n    new Tuple\u003Cstring, int\u003E(\u0022key3\u0022, 11) });"],"challenge_test_list":[]}
{"name":"cumulative-sum","description":"Calculate cumulative sum from a list of tuples","text":"Write a function to find the cumulative sum of all the values that are present in the given tuple list.","code":"public int CummulativeSum(List\u003CList\u003Cint\u003E\u003E testList) \n{\n    int res = testList.Sum(innerList =\u003E innerList.Sum());\n    return res;\n}","task_id":614,"test_setup_code":"","test_list":["Debug.Assert(CummulativeSum(new List\u003CTuple\u003Cint, int\u003E\u003E { Tuple.Create(1, 3), Tuple.Create(5, 6, 7), Tuple.Create(2, 6) }) == 30);","Debug.Assert(CummulativeSum(new List\u003CTuple\u003Cint\u003E\u003E { Tuple.Create(2, 4), Tuple.Create(6, 7, 8), Tuple.Create(3, 7) }) == 37);","Debug.Assert(CummulativeSum(new List\u003CTuple\u003Cint\u003E\u003E { Tuple.Create(3, 5), Tuple.Create(7, 8, 9), Tuple.Create(4, 8) }) == 44);"],"challenge_test_list":[]}
{"name":"average-of-tuples","description":"Calculate average of numbers in tuple of tuples","text":"Write a function to find average value of the numbers in a given tuple of tuples.","code":"public List\u003Cdouble\u003E AverageTuple(List\u003CList\u003Cdouble\u003E\u003E nums)\n{\n    var result = nums.Select(x =\u003E x.Select((v, i) =\u003E new { v, i })\n                                    .GroupBy(y =\u003E y.i, y =\u003E y.v)\n                                    .Average(g =\u003E g.Average()))\n                     .ToList();\n    return result;\n}","task_id":615,"test_setup_code":"","test_list":["Debug.Assert(AverageTuple(new (int, int, int, int)[] { (10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4) }).SequenceEqual(new double[] { 30.5, 34.25, 27.0, 23.25 }));","Debug.Assert(AverageTuple(new (int, int, int)[]{ (1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3) }).SequenceEqual(new double[]{ 25.5, -18.0, 3.75 }));","Debug.Assert(AverageTuple(new (int, int, int, int)[] { (100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40) }).SequenceEqual(new double[] { 305.0, 342.5, 270.0, 232.5 }));"],"challenge_test_list":[]}
{"name":"tuple-modulo-op","description":"Modulo operation on elements of two tuples","text":"Write a function to perfom the modulo of tuple elements in the given two tuples.","code":"public static Tuple\u003Cint, int\u003E TupleModulo(Tuple\u003Cint, int\u003E testTup1, Tuple\u003Cint, int\u003E testTup2) \n{\n    var res = new Tuple\u003Cint, int\u003E(testTup1.Item1 % testTup2.Item1, testTup1.Item2 % testTup2.Item2);\n    return res;\n}","task_id":616,"test_setup_code":"","test_list":["Debug.Assert(TupleModulo((10, 4, 5, 6), (5, 6, 7, 5)).Equals((0, 4, 5, 1)));","Debug.Assert(TupleModulo((11, 5, 6, 7), (6, 7, 8, 6)).Equals((5, 5, 6, 1)));","Debug.Assert(TupleModulo((12, 6, 7, 8), (7, 8, 9, 7)).Equals((5, 6, 7, 1)));"],"challenge_test_list":[]}
{"name":"jumps-to-point-d0","description":"Count jumps to reach point d on a 2D plane","text":"Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.","code":"public static double MinJumps(double a, double b, double d) \n{ \n    double temp = a; \n    a = Math.Min(a, b); \n    b = Math.Max(temp, b); \n    if (d \u003E= b) \n    { \n        return (d \u002B b - 1) / b; \n    } \n    if (d == 0) \n    { \n        return 0; \n    } \n    if (d == a) \n    { \n        return 1; \n    } \n    else \n    { \n        return 2; \n    } \n}","task_id":617,"test_setup_code":"","test_list":["Debug.Assert(MinJumps(3, 4, 11) == 3.5);","Debug.Assert(MinJumps(3, 4, 0) == 0);","Debug.Assert(MinJumps(11, 14, 11) == 1);"],"challenge_test_list":[]}
{"name":"divide-lists-map","description":"Divide two lists using map and lambda functions","text":"Write a function to divide two lists using map and lambda function.","code":"public List\u003Cdouble\u003E DivList(List\u003Cdouble\u003E nums1, List\u003Cdouble\u003E nums2) {\n    var result = nums1.Zip(nums2, (x, y) =\u003E x / y);\n    return result.ToList();\n}","task_id":618,"test_setup_code":"","test_list":["Debug.Assert(DivList(new List\u003Cint\u003E { 4, 5, 6 }, new List\u003Cint\u003E { 1, 2, 3 }).SequenceEqual(new List\u003Cdouble\u003E { 4.0, 2.5, 2.0 }));","Debug.Assert(DivList(new double[] { 3, 2 }, new double[] { 1, 4 }).SequenceEqual(new double[] { 3.0, 0.5 }));","Debug.Assert(DivList(new int[] { 90, 120 }, new int[] { 50, 70 }).SequenceEqual(new double[] { 1.8, 1.7142857142857142 }));"],"challenge_test_list":[]}
{"name":"move-numbers-here","description":"Move all numbers to the specified string in function","text":"Write a function to move all the numbers in it to the given string.","code":"public string MoveNum(string testStr) \n{\n    string res = string.Empty;\n    string dig = string.Empty;\n    foreach (char ele in testStr) \n    {\n        if (char.IsDigit(ele)) \n        {\n            dig \u002B= ele;\n        } \n        else \n        {\n            res \u002B= ele;\n        }\n    }\n    res \u002B= dig;\n    return res;\n}","task_id":619,"test_setup_code":"","test_list":["Debug.Assert(MoveNum(\u0022I1love143you55three3000thousand\u0022) == \u0022Iloveyouthreethousand1143553000\u0022);","Debug.Assert(MoveNum(\u0022Avengers124Assemble\u0022) == \u0022AvengersAssemble124\u0022);","Debug.Assert(MoveNum(\u0022Its11our12path13to14see15things16do17things\u0022) == \u0022Itsourpathtoseethingsdothings11121314151617\u0022);"],"challenge_test_list":[]}
{"name":"largest-divisible","description":"Find the largest divisible subset from a set","text":"Write a function to find the largest subset where each pair is divisible.","code":"public int LargestSubset(int[] a, int n) {\n    int[] dp = new int[n];\n    dp[n - 1] = 1; \n    for (int i = n - 2; i \u003E= 0; i--) {\n        int mxm = 0;\n        for (int j = i \u002B 1; j \u003C n; j\u002B\u002B) {\n            if (a[j] % a[i] == 0 || a[i] % a[j] == 0) {\n                mxm = Math.Max(mxm, dp[j]);\n            }\n        }\n        dp[i] = 1 \u002B mxm;\n    }\n    return dp.Max();\n}","task_id":620,"test_setup_code":"","test_list":["Debug.Assert(LargestSubset(new int[] { 1, 3, 6, 13, 17, 18 }, 6) == 4);","Debug.Assert(LargestSubset(new int[] { 10, 5, 3, 15, 20 }, 5) == 3);","Debug.Assert(LargestSubset(new int[] { 18, 1, 3, 6, 13, 17 }, 6) == 4);"],"challenge_test_list":[]}
{"name":"increment-strings","description":"Increment numeric values in strings by k","text":"Write a function to increment the numeric values in the given strings by k.","code":"public List\u003Cstring\u003E IncrementNumerics(List\u003Cstring\u003E testList, int K) \n{\n    List\u003Cstring\u003E res = testList.Select(ele =\u003E int.TryParse(ele, out int num) ? (num \u002B K).ToString() : ele).ToList();\n    return res;\n}","task_id":621,"test_setup_code":"","test_list":["Debug.Assert(IncrementNumerics(new string[] { \u0022MSM\u0022, \u0022234\u0022, \u0022is\u0022, \u002298\u0022, \u0022123\u0022, \u0022best\u0022, \u00224\u0022 }, 6).SequenceEqual(new string[] { \u0022MSM\u0022, \u0022240\u0022, \u0022is\u0022, \u0022104\u0022, \u0022129\u0022, \u0022best\u0022, \u002210\u0022 }));","Debug.Assert(IncrementNumerics(new List\u003Cstring\u003E { \u0022Dart\u0022, \u0022356\u0022, \u0022is\u0022, \u002288\u0022, \u0022169\u0022, \u0022Super\u0022, \u00226\u0022 }, 12).SequenceEqual(new List\u003Cstring\u003E { \u0022Dart\u0022, \u0022368\u0022, \u0022is\u0022, \u0022100\u0022, \u0022181\u0022, \u0022Super\u0022, \u002218\u0022 }));","Debug.Assert(IncrementNumerics(new string[] { \u0022Flutter\u0022, \u0022451\u0022, \u0022is\u0022, \u002244\u0022, \u002296\u0022, \u0022Magnificent\u0022, \u002212\u0022 }, 33).SequenceEqual(new string[] { \u0022Flutter\u0022, \u0022484\u0022, \u0022is\u0022, \u002277\u0022, \u0022129\u0022, \u0022Magnificent\u0022, \u002245\u0022 }));"],"challenge_test_list":[]}
{"name":"median-of-arrays","description":"Find median of two equal-sized sorted arrays","text":"Write a function to find the median of two sorted arrays of same size.","code":"public double GetMedian(int[] arr1, int[] arr2, int n)\n{\n    int i = 0;\n    int j = 0;\n    int m1 = -1;\n    int m2 = -1;\n    int count = 0;\n    while (count \u003C n \u002B 1)\n    {\n        count\u002B\u002B;\n        if (i == n)\n        {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n)\n        {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] \u003C= arr2[j])\n        {\n            m1 = m2;\n            m2 = arr1[i];\n            i\u002B\u002B;\n        }\n        else\n        {\n            m1 = m2;\n            m2 = arr2[j];\n            j\u002B\u002B;\n        }\n    }\n    return (m1 \u002B m2) / 2.0;\n}","task_id":622,"test_setup_code":"","test_list":["Debug.Assert(GetMedian(new int[] { 1, 12, 15, 26, 38 }, new int[] { 2, 13, 17, 30, 45 }, 5) == 16.0);","Debug.Assert(GetMedian(new int[] { 2, 4, 8, 9 }, new int[] { 7, 13, 19, 28 }, 4) == 8.5);","Debug.Assert(GetMedian(new int[] { 3, 6, 14, 23, 36, 42 }, new int[] { 2, 18, 27, 39, 49, 55 }, 6) == 25.0);"],"challenge_test_list":[]}
{"name":"find-nth-power","description":"Find n-th power of list elements with lambda","text":"Write a function to find the n-th power of individual elements in a list using lambda function.","code":"public List\u003Cint\u003E NthNums(List\u003Cint\u003E nums, int n) {\n    List\u003Cint\u003E nthNums = nums.Select(x =\u003E (int)Math.Pow(x, n)).ToList();\n    return nthNums;\n}","task_id":623,"test_setup_code":"","test_list":["Debug.Assert(NthNums(new List\u003Cint\u003E { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, 2).SequenceEqual(new List\u003Cint\u003E { 1, 4, 9, 16, 25, 36, 49, 64, 81, 100 }));","Debug.Assert(NthNums(new int[] { 10, 20, 30 }, 3).SequenceEqual(new int[] { 1000, 8000, 27000 }));","Debug.Assert(NthNums(new int[] { 12, 15 }, 5).SequenceEqual(new int[] { 248832, 759375 }));"],"challenge_test_list":[]}
{"name":"string-to-upper","description":"Convert a string to upper case using Python","text":"Write a C# function to convert the given string to upper case.","code":"public string IsUpper(string input)\n{\n    return input.ToUpper();\n}","task_id":624,"test_setup_code":"","test_list":["Debug.Assert(IsUpper(\u0022person\u0022) == \u0022PERSON\u0022);","Debug.Assert(IsUpper(\u0022final\u0022) == \u0022FINAL\u0022);","Debug.Assert(IsUpper(\u0022Valid\u0022) == \u0022VALID\u0022);"],"challenge_test_list":[]}
{"name":"interchange-elements","description":"Interchange first and last list elements in Python","text":"Write a C# function to interchange first and last elements in a given list.","code":"public List\u003CT\u003E SwapList\u003CT\u003E(List\u003CT\u003E newList) \n{ \n    int size = newList.Count; \n    T temp = newList[0]; \n    newList[0] = newList[size - 1]; \n    newList[size - 1] = temp;   \n    return newList; \n}","task_id":625,"test_setup_code":"","test_list":["Debug.Assert(SwapList(new List\u003Cint\u003E { 1, 2, 3 }).SequenceEqual(new List\u003Cint\u003E { 3, 2, 1 }));","Debug.Assert(SwapList(new List\u003Cint\u003E { 1, 2, 3, 4, 4 }).SequenceEqual(new List\u003Cint\u003E { 4, 2, 3, 4, 1 }));","Debug.Assert(SwapList(new List\u003Cint\u003E { 4, 5, 6 }).SequenceEqual(new List\u003Cint\u003E { 6, 5, 4 }));"],"challenge_test_list":[]}
{"name":"largest-triangle","description":"Find the largest triangle in a semicircle","text":"Write a C# function to find the largest triangle that can be inscribed in the semicircle.","code":"public int TriangleArea(int r)  \n{  \n    if (r \u003C 0)  \n    {  \n        return -1;  \n    }  \n    return r * r;  \n}","task_id":626,"test_setup_code":"","test_list":["Debug.Assert(TriangleArea(0) == 0);","Debug.Assert(TriangleArea(-1) == -1);","Debug.Assert(TriangleArea(2) == 4);\n\npublic static int TriangleArea(int baseLength) \n{\n    return (baseLength * baseLength) / 2;\n}"],"challenge_test_list":[]}
{"name":"smallest-missing","description":"Find the smallest missing number in an array","text":"Write a C# function to find the smallest missing number from the given array.","code":"public int FindFirstMissing(int[] array, int start, int end) \n{ \n    if (start \u003E end) \n    { \n        return end \u002B 1; \n    } \n    if (start != array[start]) \n    { \n        return start; \n    } \n    int mid = (start \u002B end) / 2; \n    if (array[mid] == mid) \n    { \n        return FindFirstMissing(array, mid \u002B 1, end); \n    } \n    return FindFirstMissing(array, start, mid); \n}","task_id":627,"test_setup_code":"","test_list":["Debug.Assert(FindFirstMissing(new int[] { 0, 1, 2, 3 }, 0, 3) == 4);","Debug.Assert(FindFirstMissing(new int[] { 0, 1, 2, 6, 9 }, 0, 4) == 3);","Debug.Assert(FindFirstMissing(new int[] { 2, 3, 5, 8, 9 }, 0, 4) == 0);"],"challenge_test_list":[]}
{"name":"replace-spaces","description":"Replace spaces in a string with %20 characters","text":"Write a function to replace all spaces in the given string with character * list item * list item * list item * list item \u0027%20\u0027.","code":"MAX = 1000;\n\npublic static string ReplaceSpaces(string input)\n{\n    input = input.Trim();\n    int i = input.Length;\n    int spaceCount = input.Count(c =\u003E c == \u0027 \u0027);\n    int newLength = i \u002B spaceCount * 2;\n\n    if (newLength \u003E MAX)\n    {\n        return \u0022-1\u0022;\n    }\n\n    int index = newLength - 1;\n    List\u003Cchar\u003E chars = input.ToList();\n\n    for (int f = 0; f \u003C spaceCount * 2; f\u002B\u002B)\n    {\n        chars.Add(\u00270\u0027);\n    }\n\n    for (int j = i - 1; j \u003E= 0; j--)\n    {\n        if (chars[j] == \u0027 \u0027)\n        {\n            chars[index] = \u00270\u0027;\n            chars[index - 1] = \u00272\u0027;\n            chars[index - 2] = \u0027%\u0027;\n            index -= 3;\n        }\n        else\n        {\n            chars[index] = chars[j];\n            index -= 1;\n        }\n    }\n\n    return new string(chars.ToArray());\n}","task_id":628,"test_setup_code":"","test_list":["Debug.Assert(ReplaceSpaces(\u0022My Name is Dawood\u0022) == \u0022My%20Name%20is%20Dawood\u0022);","Debug.Assert(ReplaceSpaces(\u0022I am a Programmer\u0022) == \u0022I%20am%20a%20Programmer\u0022);","Debug.Assert(ReplaceSpaces(\u0022I love Coding\u0022) == \u0022I%20love%20Coding\u0022);"],"challenge_test_list":[]}
{"name":"even-numbers-list","description":"Find even numbers in a mixed list using Python","text":"Write a C# function to find even numbers from a mixed list.","code":"public List\u003Cint\u003E Split(List\u003Cint\u003E list) \n{ \n    List\u003Cint\u003E ev_li = new List\u003Cint\u003E(); \n    foreach (int i in list) \n    { \n        if (i % 2 == 0) \n        { \n            ev_li.Add(i); \n        } \n    } \n    return ev_li; \n}","task_id":629,"test_setup_code":"","test_list":["Debug.Assert(Split(new int[] { 1, 2, 3, 4, 5 }).SequenceEqual(new int[] { 2, 4 }));","Debug.Assert(Split(new int[] { 4, 5, 6, 7, 8, 0, 1 }).SequenceEqual(new int[] { 4, 6, 8, 0 }));","Debug.Assert(Split(new int[] { 8, 12, 15, 19 }).SequenceEqual(new int[] { 8, 12 }));"],"challenge_test_list":[]}
{"name":"adjacent-coords","description":"Extract adjacent coordinates from a given tuple","text":"Write a function to extract all the adjacent coordinates of the given coordinate tuple.","code":"IEnumerable\u003CList\u003Cint\u003E\u003E Adjac(List\u003Cint\u003E ele, List\u003Cint\u003E sub = null) \n{ \n    if (sub == null) \n    {\n        sub = new List\u003Cint\u003E(); \n    }\n    \n    if (!ele.Any()) \n    { \n        yield return sub; \n    } \n    else \n    { \n        for (int j = ele[0] - 1; j \u003C= ele[0] \u002B 1; j\u002B\u002B) \n        { \n            foreach (var idx in Adjac(ele.Skip(1).ToList(), sub.Concat(new List\u003Cint\u003E { j }).ToList())) \n            { \n                yield return idx; \n            } \n        } \n    } \n} \n\nList\u003CList\u003Cint\u003E\u003E GetCoordinates(List\u003Cint\u003E testTup) \n{ \n    var res = Adjac(testTup).ToList(); \n    return res; \n}","task_id":630,"test_setup_code":"","test_list":["Debug.Assert(GetCoordinates((3, 4)).SequenceEqual(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 2, 3 }, new List\u003Cint\u003E { 2, 4 }, new List\u003Cint\u003E { 2, 5 }, new List\u003Cint\u003E { 3, 3 }, new List\u003Cint\u003E { 3, 4 }, new List\u003Cint\u003E { 3, 5 }, new List\u003Cint\u003E { 4, 3 }, new List\u003Cint\u003E { 4, 4 }, new List\u003Cint\u003E { 4, 5 } }));","Debug.Assert(GetCoordinates((4, 5)).SequenceEqual(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 3, 4 }, new List\u003Cint\u003E { 3, 5 }, new List\u003Cint\u003E { 3, 6 }, new List\u003Cint\u003E { 4, 4 }, new List\u003Cint\u003E { 4, 5 }, new List\u003Cint\u003E { 4, 6 }, new List\u003Cint\u003E { 5, 4 }, new List\u003Cint\u003E { 5, 5 }, new List\u003Cint\u003E { 5, 6 } }));","Debug.Assert(GetCoordinates((5, 6)).SequenceEqual(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 4, 5 }, new List\u003Cint\u003E { 4, 6 }, new List\u003Cint\u003E { 4, 7 }, new List\u003Cint\u003E { 5, 5 }, new List\u003Cint\u003E { 5, 6 }, new List\u003Cint\u003E { 5, 7 }, new List\u003Cint\u003E { 6, 5 }, new List\u003Cint\u003E { 6, 6 }, new List\u003Cint\u003E { 6, 7 } }));"],"challenge_test_list":[]}
{"name":"replace-whitespace","description":"Replace whitespaces with underscores and vice versa","text":"Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.","code":"using System.Text.RegularExpressions;\n\npublic class TextProcessor\n{\n    public string ReplaceSpaces(string text)\n    {\n        text = text.Replace(\u0022 \u0022, \u0022_\u0022);\n        return text;\n    }\n}","task_id":631,"test_setup_code":"","test_list":["Debug.Assert(ReplaceSpaces(\u0022Jumanji The Jungle\u0022) == \u0022Jumanji_The_Jungle\u0022);","Debug.Assert(ReplaceSpaces(\u0022The Avengers\u0022) == \u0022The_Avengers\u0022);","Debug.Assert(ReplaceSpaces(\u0022Fast and Furious\u0022) == \u0022Fast_and_Furious\u0022);"],"challenge_test_list":[]}
{"name":"move-zeroes-end","description":"Move all zeroes to the end of the list","text":"Write a C# function to move all zeroes to the end of the given list.","code":"public List\u003Cint\u003E MoveZero(List\u003Cint\u003E numList) {\n    List\u003Cint\u003E a = new List\u003Cint\u003E(new int[numList.Count(n =\u003E n == 0)]);\n    List\u003Cint\u003E x = numList.Where(i =\u003E i != 0).ToList();\n    x.AddRange(a);\n    return x;\n}","task_id":632,"test_setup_code":"","test_list":["Debug.Assert(MoveZero(new int[] { 1, 0, 2, 0, 3, 4 }).SequenceEqual(new int[] { 1, 2, 3, 4, 0, 0 }));","Debug.Assert(MoveZero(new int[] { 2, 3, 2, 0, 0, 4, 0, 5, 0 }).SequenceEqual(new int[] { 2, 3, 2, 4, 5, 0, 0, 0, 0 }));","Debug.Assert(MoveZero(new int[] { 0, 1, 0, 1, 1 }).SequenceEqual(new int[] { 1, 1, 1, 0, 0 }));"],"challenge_test_list":[]}
{"name":"sum-xor-pairs","description":"Sum of XOR for all pairs in an array","text":"Write a C# function to find the sum of xor of all pairs of numbers in the given array.","code":"public int PairOrSum(int[] arr, int n) \n{\n    int ans = 0; \n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    {    \n        for (int j = i \u002B 1; j \u003C n; j\u002B\u002B) \n        {   \n            ans \u002B= (arr[i] ^ arr[j]);          \n        }\n    }\n    return ans; \n}","task_id":633,"test_setup_code":"","test_list":["Debug.Assert(PairOrSum(new int[] { 5, 9, 7, 6 }, 4) == 47);","Debug.Assert(PairOrSum(new int[] { 7, 3, 5 }, 3) == 12);","Debug.Assert(PairOrSum(new int[] { 7, 3 }, 2) == 4);"],"challenge_test_list":[]}
{"name":"sum-fourth-even","description":"Sum of fourth powers of first n even numbers","text":"Write a C# function to find the sum of fourth power of first n even natural numbers.","code":"public static int EvenPowerSum(int n) \n{ \n    int sum = 0; \n    for (int i = 1; i \u003C= n; i\u002B\u002B) \n    { \n        int j = 2 * i; \n        sum \u002B= j * j * j * j; \n    } \n    return sum; \n}","task_id":634,"test_setup_code":"","test_list":["Debug.Assert(EvenPowerSum(2) == 272);","Debug.Assert(EvenPowerSum(3) == 1568);","Debug.Assert(EvenPowerSum(4) == 5664);"],"challenge_test_list":[]}
{"name":"heap-push-pop","description":"Heapify values and remove smallest elements sequentially","text":"Write a function to push all values into a heap and then pop off the smallest values one at a time.","code":"public List\u003CT\u003E HeapSort\u003CT\u003E(IEnumerable\u003CT\u003E iterable) where T : IComparable\u003CT\u003E\n{\n    var h = new List\u003CT\u003E();\n    foreach (var value in iterable)\n    {\n        h.Add(value);\n        h.Sort();\n    }\n    var result = new List\u003CT\u003E();\n    while (h.Count \u003E 0)\n    {\n        result.Add(h[0]);\n        h.RemoveAt(0);\n    }\n    return result;\n}","task_id":635,"test_setup_code":"","test_list":["Debug.Assert(HeapSort(new List\u003Cint\u003E { 1, 3, 5, 7, 9, 2, 4, 6, 8, 0 }).SequenceEqual(new List\u003Cint\u003E { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }));","Debug.Assert(HeapSort(new int[] { 25, 35, 22, 85, 14, 65, 75, 25, 58 }).SequenceEqual(new int[] { 14, 22, 25, 25, 35, 58, 65, 75, 85 }));","Debug.Assert(HeapSort(new int[] { 7, 1, 9, 5 }).SequenceEqual(new int[] { 1, 5, 7, 9 }));"],"challenge_test_list":[]}
{"name":"reciprocals-check","description":"Check if quadratic roots are reciprocals","text":"Write a C# function to check if roots of a quadratic equation are reciprocal of each other or not.","code":"public string CheckSolution(int a, int b, int c) \n{ \n    if (a == c) \n    { \n        return \u0022Yes\u0022; \n    } \n    else \n    { \n        return \u0022No\u0022; \n    } \n}","task_id":636,"test_setup_code":"","test_list":["Debug.Assert(CheckSolution(2, 0, 2) == \u0022Yes\u0022);","Debug.Assert(CheckSolution(2, -5, 2) == \u0022Yes\u0022);","Debug.Assert(CheckSolution(1, 2, 3) == \u0022No\u0022);"],"challenge_test_list":[]}
{"name":"no-profit-no-loss","description":"Function to check zero profit or loss","text":"Write a function to check whether the given amount has no profit and no loss","code":"public bool NoProfitNoLoss(decimal actualCost, decimal saleAmount) \n{ \n    return saleAmount == actualCost; \n}","task_id":637,"test_setup_code":"","test_list":["Debug.Assert(NoProfitNoLoss(1500, 1200) == false);","Debug.Assert(NoProfitNoLoss(100, 100) == true);","Debug.Assert(NoProfitNoLoss(2000, 5000) == false);"],"challenge_test_list":[]}
{"name":"wind-chill-calc","description":"Calculate wind chill index based on temperature and wind","text":"Write a function to calculate wind chill index.","code":"public int WindChill(double v, double t)  \n{  \n    double windchill = 13.12 \u002B 0.6215 * t - 11.37 * Math.Pow(v, 0.16) \u002B 0.3965 * t * Math.Pow(v, 0.16);  \n    return (int)Math.Round(windchill, 0);  \n}","task_id":638,"test_setup_code":"","test_list":["Debug.Assert(WindChill(120, 35) == 40);","Debug.Assert(WindChill(40, 70) == 86);","Debug.Assert(WindChill(10, 100) == 116);"],"challenge_test_list":[]}
{"name":"sum-length-names","description":"Sum lengths of names excluding those starting lowercase","text":"Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.","code":"public int SampleNam(List\u003Cstring\u003E sampleNames) {\n    sampleNames = sampleNames.Where(el =\u003E char.IsUpper(el[0]) \u0026\u0026 el.Substring(1).All(char.IsLower)).ToList();\n    return \u0022\u0022.Join(sampleNames).Length;\n}","task_id":639,"test_setup_code":"","test_list":["Debug.Assert(SampleNam(new List\u003Cstring\u003E { \u0022sally\u0022, \u0022Dylan\u0022, \u0022rebecca\u0022, \u0022Diana\u0022, \u0022Joanne\u0022, \u0022keith\u0022 }) == 16);","Debug.Assert(SampleNam(new string[] {\u0022php\u0022, \u0022res\u0022, \u0022Python\u0022, \u0022abcd\u0022, \u0022Java\u0022, \u0022aaa\u0022}) == 10);","Debug.Assert(SampleNam(new string[] { \u0022abcd\u0022, \u0022Python\u0022, \u0022abba\u0022, \u0022aba\u0022 }) == 6);"],"challenge_test_list":[]}
{"name":"remove-parenthesis","description":"Remove text inside parentheses from a string","text":"Write a function to remove the parenthesis area in a string.","code":"public string RemoveParenthesis(List\u003Cstring\u003E items) \n{\n    foreach (var item in items) \n    {\n        return Regex.Replace(item, @\u0022 ?\\([^)]\u002B\\)\u0022, \u0022\u0022);\n    }\n    return string.Empty; // or handle as needed if no item is found\n}","task_id":640,"test_setup_code":"","test_list":["Debug.Assert(RemoveParenthesis(new string[] { \u0022python (chrome)\u0022 }) == \u0022python\u0022);","Debug.Assert(RemoveParenthesis(new string[] { \u0022string(.abc)\u0022 }) == \u0022string\u0022);","Debug.Assert(RemoveParenthesis(new string[] {\u0022alpha(num)\u0022}) == \u0022alpha\u0022);"],"challenge_test_list":[]}
{"name":"nonagonal-number","description":"Find the nth nonagonal number in a sequence","text":"Write a function to find the nth nonagonal number.","code":"public int IsNonagonal(int n) \n{\n    return (int)(n * (7 * n - 5) / 2);\n}","task_id":641,"test_setup_code":"","test_list":["Debug.Assert(IsNonagonal(10) == 325);","Debug.Assert(IsNonagonal(15) == 750);","Debug.Assert(IsNonagonal(18) == 1089);"],"challenge_test_list":[]}
{"name":"remove-similar","description":"Remove duplicates from a tuple matrix","text":"Write a function to remove similar rows from the given tuple matrix.","code":"public static HashSet\u003CHashSet\u003Cint\u003E\u003E RemoveSimilarRow(List\u003CList\u003Cint\u003E\u003E testList)\n{\n    var res = new HashSet\u003CHashSet\u003Cint\u003E\u003E(testList.Select(sub =\u003E new HashSet\u003Cint\u003E(sub.OrderBy(x =\u003E x))).Select(sub =\u003E new HashSet\u003Cint\u003E(sub))).OrderBy(sub =\u003E string.Join(\u0022,\u0022, sub));\n    return res;\n}","task_id":642,"test_setup_code":"","test_list":["Debug.Assert(RemoveSimilarRow(new List\u003CList\u003C(int, int)\u003E\u003E { new List\u003C(int, int)\u003E { (4, 5), (3, 2) }, new List\u003C(int, int)\u003E { (2, 2), (4, 6) }, new List\u003C(int, int)\u003E { (3, 2), (4, 5) } }) .SetEquals(new HashSet\u003C(int, int)\u003E { ((2, 2), (4, 6)), ((3, 2), (4, 5)) }));","Debug.Assert(RemoveSimilarRow(new List\u003CList\u003C(int, int)\u003E\u003E { new List\u003C(int, int)\u003E { (5, 6), (4, 3) }, new List\u003C(int, int)\u003E { (3, 3), (5, 7) }, new List\u003C(int, int)\u003E { (4, 3), (5, 6) } }) == new HashSet\u003C(int, int)\u003E { ((4, 3), (5, 6)), ((3, 3), (5, 7)) });","Debug.Assert(RemoveSimilarRow(new[] { new[] { (6, 7), (5, 4) }, new[] { (4, 4), (6, 8) }, new[] { (5, 4), (6, 7) } }) .SetEquals(new HashSet\u003C(int, int)\u003E { ((4, 4), (6, 8)), ((5, 4), (6, 7)) }));"],"challenge_test_list":[]}
{"name":"match-z-in-word","description":"Match words with \u0027z\u0027 not at the start or end","text":"Write a function that matches a word containing \u0027z\u0027, not at the start or end of the word.","code":"public string TextMatchWordzMiddle(string text) {\n    string patterns = @\u0022\\Bz\\B\u0022;\n    if (Regex.IsMatch(text, patterns)) {\n        return \u0022Found a match!\u0022;\n    } else {\n        return \u0022Not matched!\u0022;\n    }\n}","task_id":643,"test_setup_code":"","test_list":["Debug.Assert(TextMatchWordzMiddle(\u0022pythonzabc.\u0022) == \u0022Found a match!\u0022);","Debug.Assert(TextMatchWordzMiddle(\u0022xyzabc.\u0022) == \u0022Found a match!\u0022);","Debug.Assert(TextMatchWordzMiddle(\u0022  lang  .\u0022) == \u0022Not matched!\u0022);"],"challenge_test_list":[]}
{"name":"reverse-array-up","description":"Reverse an array up to a specified position in Python","text":"Write a C# function to reverse an array upto a given position.","code":"public static List\u003CT\u003E ReverseArrayUptoK\u003CT\u003E(List\u003CT\u003E input, int k) \n{\n    return input.Take(k).Reverse().Concat(input.Skip(k)).ToList();\n}","task_id":644,"test_setup_code":"","test_list":["Debug.Assert(ReverseArrayUptoK(new int[] { 1, 2, 3, 4, 5, 6 }, 4).SequenceEqual(new int[] { 4, 3, 2, 1, 5, 6 }));","Debug.Assert(ReverseArrayUptoK(new int[] { 4, 5, 6, 7 }, 2).SequenceEqual(new int[] { 5, 4, 6, 7 }));","Debug.Assert(ReverseArrayUptoK(new int[] { 9, 8, 7, 6, 5 }, 3).SequenceEqual(new int[] { 7, 8, 9, 6, 5 }));"],"challenge_test_list":[]}
{"name":"kth-index-product","description":"Find product of kth index in given tuples","text":"Write a function to find the product of it\u2019s kth index in the given tuples.","code":"public int GetProduct(List\u003Cint\u003E val) \n{ \n    int res = 1; \n    foreach (int ele in val) \n    { \n        res *= ele; \n    } \n    return res; \n} \n\npublic int FindKProduct(List\u003CList\u003Cint\u003E\u003E testList, int K) \n{ \n    int res = GetProduct(testList.Select(sub =\u003E sub[K]).ToList()); \n    return res; \n}","task_id":645,"test_setup_code":"","test_list":["Debug.Assert(FindKProduct(new (int, int, int)[] { (5, 6, 7), (1, 3, 5), (8, 9, 19) }, 2) == 665);","Debug.Assert(FindKProduct(new Tuple\u003Cint, int, int\u003E[] { Tuple.Create(6, 7, 8), Tuple.Create(2, 4, 6), Tuple.Create(9, 10, 20) }, 1) == 280);","Debug.Assert(FindKProduct(new (int, int, int)[] { (7, 8, 9), (3, 5, 7), (10, 11, 21) }, 0) == 210);"],"challenge_test_list":[]}
{"name":"count-cubes-k-n","description":"Count cubes of size k in a larger cube of size n","text":"Write a C# function to count number of cubes of size k in a cube of size n.","code":"public int NoOfCubes(int N, int K)  \n{  \n    int No = (N - K \u002B 1);  \n    No = (int)Math.Pow(No, 3);  \n    return No;  \n}","task_id":646,"test_setup_code":"","test_list":["Debug.Assert(NoOfCubes(2, 1) == 8);","Debug.Assert(NoOfCubes(5, 2) == 64);","Debug.Assert(NoOfCubes(1, 1) == 1);"],"challenge_test_list":[]}
{"name":"split-at-uppercase","description":"Split a string at each uppercase letter","text":"Write a function to split a string at uppercase letters.","code":"public List\u003Cstring\u003E SplitUpperString(string text) \n{\n    return Regex.Matches(text, \u0022[A-Z][^A-Z]*\u0022)\n                .Cast\u003CMatch\u003E()\n                .Select(m =\u003E m.Value)\n                .ToList();\n}","task_id":647,"test_setup_code":"","test_list":["Debug.Assert(SplitUpperString(\u0022PythonProgramLanguage\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022Python\u0022, \u0022Program\u0022, \u0022Language\u0022 }));","Debug.Assert(SplitUpperString(\u0022PythonProgram\u0022).SequenceEqual(new[] { \u0022Python\u0022, \u0022Program\u0022 }));","Debug.Assert(SplitUpperString(\u0022ProgrammingLanguage\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022Programming\u0022, \u0022Language\u0022 }));"],"challenge_test_list":[]}
{"name":"swap-nth-values","description":"Swap every n-th and (n\u002B1)-th list values","text":"Write a function to exchange the position of every n-th value with (n\u002B1)th value and (n\u002B1)th value with n-th value in a given list.","code":"public List\u003Cobject\u003E ExchangeElements(List\u003Cobject\u003E lst)\n{\n    var lst1 = new List\u003Cobject\u003E(lst);\n    var lst2 = new List\u003Cobject\u003E(lst);\n    return lst.Zip(lst2.Skip(1).Take(lst.Count - 1).ToList(), (a, b) =\u003E new[] { b, a })\n              .SelectMany(x =\u003E x)\n              .ToList();\n}","task_id":648,"test_setup_code":"","test_list":["Debug.Assert(ExchangeElements(new int[] { 0, 1, 2, 3, 4, 5 }).SequenceEqual(new int[] { 1, 0, 3, 2, 5, 4 }));","Debug.Assert(ExchangeElements(new List\u003Cint\u003E{5, 6, 7, 8, 9, 10}).SequenceEqual(new List\u003Cint\u003E{6, 5, 8, 7, 10, 9}));","Debug.Assert(ExchangeElements(new int[] { 25, 35, 45, 55, 75, 95 }).SequenceEqual(new int[] { 35, 25, 55, 45, 95, 75 }));"],"challenge_test_list":[]}
{"name":"sum-between-indices","description":"Calculate sum of numbers in a specified index range","text":"Write a C# function to calculate the sum of the numbers in a list between the indices of a specified range.","code":"public int SumRangeList(List\u003Cint\u003E nums, int m, int n)  \n{  \n    int sumRange = 0;  \n    for (int i = m; i \u003C= n; i\u002B\u002B)  \n    {  \n        sumRange \u002B= nums[i];  \n    }  \n    return sumRange;  \n}","task_id":649,"test_setup_code":"","test_list":["Debug.Assert(SumRangeList(new List\u003Cint\u003E { 2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12 }, 8, 10) == 29);","Debug.Assert(SumRangeList(new int[] { 1, 2, 3, 4, 5 }, 1, 2) == 5);","Debug.Assert(SumRangeList(new List\u003Cint\u003E { 1, 0, 1, 2, 5, 6 }, 4, 5) == 11);"],"challenge_test_list":[]}
{"name":"array-equality","description":"Compare two arrays for equality in Python","text":"Write a C# function to check whether the given two arrays are equal or not.","code":"bool AreEqual(int[] arr1, int[] arr2, int n, int m) {\r\n    if (n != m) {\r\n        return false;\r\n    }\r\n    Array.Sort(arr1);\r\n    Array.Sort(arr2);\r\n    for (int i = 0; i \u003C n; i\u002B\u002B) {\r\n        if (arr1[i] != arr2[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","task_id":650,"test_setup_code":"","test_list":["Debug.Assert(AreEqual(new int[] { 1, 2, 3 }, new int[] { 3, 2, 1 }, 3, 3) == true);","Debug.Assert(AreEqual(new int[] { 1, 1, 1 }, new int[] { 2, 2, 2 }, 3, 3) == false);","Debug.Assert(AreEqual(new int[] { 8, 9 }, new int[] { 4, 5, 6 }, 2, 3) == false);"],"challenge_test_list":[]}
{"name":"tuple-subset-check","description":"Check if one tuple is a subset of another tuple","text":"Write a function to check if one tuple is a subset of another tuple.","code":"public bool CheckSubset(Tuple\u003Cint\u003E[] testTup1, Tuple\u003Cint\u003E[] testTup2) \n{\n    var res = new HashSet\u003CTuple\u003Cint\u003E\u003E(testTup2).IsSubsetOf(testTup1);\n    return res;\n}","task_id":651,"test_setup_code":"","test_list":["Debug.Assert(CheckSubset(new int[] { 10, 4, 5, 6 }, new int[] { 5, 10 }) == true);","Debug.Assert(CheckSubset(new int[] { 1, 2, 3, 4 }, new int[] { 5, 6 }) == false);","Debug.Assert(CheckSubset(new int[] { 7, 8, 9, 10 }, new int[] { 10, 8 }) == true);"],"challenge_test_list":[]}
{"name":"flatten-tuple-mtx","description":"Flatten a tuple matrix into a list of columns","text":"Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.","code":"public string MatrixToList(List\u003CList\u003Cobject\u003E\u003E testList)\n{\n    var temp = testList.SelectMany(sub =\u003E sub).ToList();\n    var res = Enumerable.Zip(temp.Select((x, i) =\u003E new { Value = x, Index = i }), \n                              temp.Select((x, i) =\u003E new { Value = x, Index = i }), \n                              (a, b) =\u003E new { a.Value, b.Value }).ToList();\n    return res.ToString();\n}","task_id":652,"test_setup_code":"","test_list":["Debug.Assert(MatrixToList(new (int, int)[][][] { new (int, int)[] { (4, 5), (7, 8) }, new (int, int)[] { (10, 13), (18, 17) }, new (int, int)[] { (0, 4), (10, 1) } }) == \u0022[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]\u0022);","Debug.Assert(MatrixToList(new List\u003CList\u003C(int, int)\u003E\u003E { new List\u003C(int, int)\u003E { (5, 6), (8, 9) }, new List\u003C(int, int)\u003E { (11, 14), (19, 18) }, new List\u003C(int, int)\u003E { (1, 5), (11, 2) } }) == \u0022[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]\u0022);","Debug.Assert(MatrixToList(new List\u003CList\u003C(int, int)\u003E\u003E { new List\u003C(int, int)\u003E { (6, 7), (9, 10) }, new List\u003C(int, int)\u003E { (12, 15), (20, 21) }, new List\u003C(int, int)\u003E { (23, 7), (15, 8) } }) == \u0022[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]\u0022);"],"challenge_test_list":[]}
{"name":"group-kv-pairs","description":"Group key-value pairs into a dictionary of lists","text":"Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.","code":"using System.Collections.Generic;\n\npublic Dictionary\u003CTKey, List\u003CTValue\u003E\u003E GroupingDictionary\u003CTKey, TValue\u003E(IEnumerable\u003CKeyValuePair\u003CTKey, TValue\u003E\u003E l)\n{\n    var d = new Dictionary\u003CTKey, List\u003CTValue\u003E\u003E();\n    foreach (var kvp in l)\n    {\n        if (!d.ContainsKey(kvp.Key))\n        {\n            d[kvp.Key] = new List\u003CTValue\u003E();\n        }\n        d[kvp.Key].Add(kvp.Value);\n    }\n    return d;\n}","task_id":653,"test_setup_code":"","test_list":["Debug.Assert(GroupingDictionary(new List\u003CTuple\u003Cstring, int\u003E\u003E { Tuple.Create(\u0022yellow\u0022, 1), Tuple.Create(\u0022blue\u0022, 2), Tuple.Create(\u0022yellow\u0022, 3), Tuple.Create(\u0022blue\u0022, 4), Tuple.Create(\u0022red\u0022, 1) }) == new Dictionary\u003Cstring, List\u003Cint\u003E\u003E { { \u0022yellow\u0022, new List\u003Cint\u003E { 1, 3 } }, { \u0022blue\u0022, new List\u003Cint\u003E { 2, 4 } }, { \u0022red\u0022, new List\u003Cint\u003E { 1 } } });","Debug.Assert(GroupingDictionary(new Tuple\u003Cstring, int\u003E[] { Tuple.Create(\u0022yellow\u0022, 10), Tuple.Create(\u0022blue\u0022, 20), Tuple.Create(\u0022yellow\u0022, 30), Tuple.Create(\u0022blue\u0022, 40), Tuple.Create(\u0022red\u0022, 10) }).Equals(new Dictionary\u003Cstring, List\u003Cint\u003E\u003E { { \u0022yellow\u0022, new List\u003Cint\u003E { 10, 30 } }, { \u0022blue\u0022, new List\u003Cint\u003E { 20, 40 } }, { \u0022red\u0022, new List\u003Cint\u003E { 10 } } }));","Debug.Assert(GroupingDictionary(new Tuple\u003Cstring, int\u003E[] { Tuple.Create(\u0022yellow\u0022, 15), Tuple.Create(\u0022blue\u0022, 25), Tuple.Create(\u0022yellow\u0022, 35), Tuple.Create(\u0022blue\u0022, 45), Tuple.Create(\u0022red\u0022, 15) }).SequenceEqual(new Dictionary\u003Cstring, List\u003Cint\u003E\u003E { { \u0022yellow\u0022, new List\u003Cint\u003E { 15, 35 } }, { \u0022blue\u0022, new List\u003Cint\u003E { 25, 45 } }, { \u0022red\u0022, new List\u003Cint\u003E { 15 } } }));"],"challenge_test_list":[]}
{"name":"perimeter-rectanble","description":"Calculate the rectangle\u0027s perimeter using a function","text":"Write a function to find the perimeter of a rectangle.","code":"public int RectanglePerimeter(int l, int b)  \n{  \n    int perimeter = 2 * (l \u002B b);  \n    return perimeter;  \n}","task_id":654,"test_setup_code":"","test_list":["Debug.Assert(RectanglePerimeter(10, 20) == 60);","Debug.Assert(RectanglePerimeter(10, 5) == 30);","Debug.Assert(RectanglePerimeter(4, 2) == 12);"],"challenge_test_list":[]}
{"name":"sum-of-fifth-pow","description":"Sum of fifth powers of n natural numbers","text":"Write a C# function to find the sum of fifth power of n natural numbers.","code":"public int FifthPowerSum(int n) \n{ \n    int sm = 0; \n    for (int i = 1; i \u003C= n; i\u002B\u002B) \n    { \n        sm \u002B= (i * i * i * i * i); \n    } \n    return sm; \n}","task_id":655,"test_setup_code":"","test_list":["Debug.Assert(FifthPowerSum(2) == 33);","Debug.Assert(FifthPowerSum(4) == 1300);","Debug.Assert(FifthPowerSum(3) == 276);"],"challenge_test_list":[]}
{"name":"min-abs-diff-sum","description":"Find minimum sum of absolute differences in arrays","text":"Write a C# function to find the minimum sum of absolute differences of two arrays.","code":"public static int FindMinSum(int[] a, int[] b, int n) \n{ \n    Array.Sort(a); \n    Array.Sort(b); \n    int sum = 0; \n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    { \n        sum \u002B= Math.Abs(a[i] - b[i]); \n    } \n    return sum; \n}","task_id":656,"test_setup_code":"","test_list":["Debug.Assert(FindMinSum(new int[] { 3, 2, 1 }, new int[] { 2, 1, 3 }, 3) == 0);","Debug.Assert(FindMinSum(new int[] { 1, 2, 3 }, new int[] { 4, 5, 6 }, 3) == 9);","Debug.Assert(FindMinSum(new int[] { 4, 1, 8, 7 }, new int[] { 2, 3, 6, 5 }, 4) == 6);"],"challenge_test_list":[]}
{"name":"first-digit-fact","description":"Find the first digit in a factorial number","text":"Write a C# function to find the first digit in factorial of a given number.","code":"using System;\n\npublic class Program\n{\n    public static int FirstDigit(int n)\n    {\n        long fact = 1;\n        for (int i = 2; i \u003C= n; i\u002B\u002B)\n        {\n            fact *= i;\n            while (fact % 10 == 0)\n            {\n                fact /= 10;\n            }\n        }\n        while (fact \u003E= 10)\n        {\n            fact /= 10;\n        }\n        return (int)Math.Floor(fact);\n    }\n}","task_id":657,"test_setup_code":"","test_list":["Debug.Assert(FirstDigit(5) == 1);","Debug.Assert(FirstDigit(10) == 3);","Debug.Assert(FirstDigit(7) == 5);"],"challenge_test_list":[]}
{"name":"max-occurrences","description":"Find the most frequent item in a list","text":"Write a function to find the item with maximum occurrences in a given list.","code":"public static T MaxOccurrences\u003CT\u003E(List\u003CT\u003E list1)\n{\n    int maxVal = 0;\n    T result = list1[0];\n    foreach (T i in list1)\n    {\n        int occu = list1.Count(x =\u003E x.Equals(i));\n        if (occu \u003E maxVal)\n        {\n            maxVal = occu;\n            result = i;\n        }\n    }\n    return result;\n}","task_id":658,"test_setup_code":"","test_list":["Debug.Assert(MaxOccurrences(new int[] { 2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 4, 6, 9, 1, 2 }) == 2);\n\npublic int MaxOccurrences(int[] numbers) \n{\n    // Method implementation goes here\n}","Debug.Assert(MaxOccurrences(new int[] { 1, 3, 5, 7, 1, 3, 13, 15, 17, 5, 7, 9, 1, 11 }) == 1);","Debug.Assert(MaxOccurrences(new int[] { 1, 2, 3, 2, 4, 5, 1, 1, 1 }) == 1);"],"challenge_test_list":[]}
{"name":"print-duplicants","description":"Find and print duplicates in a list of integers","text":"Write a C# function to print duplicants from a list of integers.","code":"public List\u003CT\u003E Repeat\u003CT\u003E(List\u003CT\u003E x) \n{\n    int _size = x.Count; \n    List\u003CT\u003E repeated = new List\u003CT\u003E(); \n    for (int i = 0; i \u003C _size; i\u002B\u002B) \n    {\n        int k = i \u002B 1; \n        for (int j = k; j \u003C _size; j\u002B\u002B) \n        {\n            if (EqualityComparer\u003CT\u003E.Default.Equals(x[i], x[j]) \u0026\u0026 !repeated.Contains(x[i])) \n            {\n                repeated.Add(x[i]); \n            }\n        }\n    }\n    return repeated; \n}","task_id":659,"test_setup_code":"","test_list":["Debug.Assert(Repeat(new List\u003Cint\u003E { 10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20 }).SequenceEqual(new List\u003Cint\u003E { 20, 30, -20, 60 }));","Debug.Assert(Repeat(new int[] { -1, 1, -1, 8 }).SequenceEqual(new int[] { -1 }));","Debug.Assert(Repeat(new int[] { 1, 2, 3, 1, 2 }) == new int[] { 1, 2 });"],"challenge_test_list":[]}
{"name":"choose-points-ranges","description":"Select points from two distinct ranges in Python","text":"Write a C# function to choose points from two ranges such that no point lies in both the ranges.","code":"public (int, int) FindPoints(int l1, int r1, int l2, int r2) \n{ \n    int x = (l1 != l2) ? Math.Min(l1, l2) : -1; \n    int y = (r1 != r2) ? Math.Max(r1, r2) : -1; \n    return (x, y); \n}","task_id":660,"test_setup_code":"","test_list":["Debug.Assert(FindPoints(5, 10, 1, 5).Equals((1, 10)));","Debug.Assert(FindPoints(3, 5, 7, 9).Equals((3, 9)));","Debug.Assert(FindPoints(1, 5, 2, 8).Equals((1, 8)));"],"challenge_test_list":[]}
{"name":"max-sum-no-three","description":"Max sum of non-consecutive elements in a list","text":"Write a function to find the maximum sum that can be formed which has no three consecutive elements present.","code":"public int MaxSumOfThreeConsecutive(int[] arr, int n) \n{\n    int[] sum = new int[n];\n    if (n \u003E= 1) \n    {\n        sum[0] = arr[0];\n    }\n    if (n \u003E= 2) \n    {\n        sum[1] = arr[0] \u002B arr[1];\n    }\n    if (n \u003E 2) \n    {\n        sum[2] = Math.Max(sum[1], Math.Max(arr[1] \u002B arr[2], arr[0] \u002B arr[2]));\n    }\n    for (int i = 3; i \u003C n; i\u002B\u002B) \n    {\n        sum[i] = Math.Max(Math.Max(sum[i - 1], sum[i - 2] \u002B arr[i]), arr[i] \u002B arr[i - 1] \u002B sum[i - 3]);\n    }\n    return sum[n - 1];\n}","task_id":661,"test_setup_code":"","test_list":["Debug.Assert(MaxSumOfThreeConsecutive(new int[] { 100, 1000, 100, 1000, 1 }, 5) == 2101);","Debug.Assert(MaxSumOfThreeConsecutive(new int[] { 3000, 2000, 1000, 3, 10 }, 5) == 5013);","Debug.Assert(MaxSumOfThreeConsecutive(new int[] { 1, 2, 3, 4, 5, 6, 7, 8 }, 8) == 27);"],"challenge_test_list":[]}
{"name":"sort-list-in-dict","description":"Sort a list within a dictionary using a function","text":"Write a function to sort a list in a dictionary.","code":"public Dictionary\u003Cstring, List\u003Cstring\u003E\u003E SortedDict(Dictionary\u003Cstring, List\u003Cstring\u003E\u003E dict1)\n{\n    var sortedDict = dict1.ToDictionary(x =\u003E x.Key, x =\u003E x.Value.OrderBy(y =\u003E y).ToList());\n    return sortedDict;\n}","task_id":662,"test_setup_code":"","test_list":["Debug.Assert(SortedDict(new Dictionary\u003Cstring, List\u003Cint\u003E\u003E { { \u0022n1\u0022, new List\u003Cint\u003E { 2, 3, 1 } }, { \u0022n2\u0022, new List\u003Cint\u003E { 5, 1, 2 } }, { \u0022n3\u0022, new List\u003Cint\u003E { 3, 2, 4 } } }) .SequenceEqual(new Dictionary\u003Cstring, List\u003Cint\u003E\u003E { { \u0022n1\u0022, new List\u003Cint\u003E { 1, 2, 3 } }, { \u0022n2\u0022, new List\u003Cint\u003E { 1, 2, 5 } }, { \u0022n3\u0022, new List\u003Cint\u003E { 2, 3, 4 } } }));","Debug.Assert(SortedDict(new Dictionary\u003Cstring, List\u003Cint\u003E\u003E() { {\u0022n1\u0022, new List\u003Cint\u003E() { 25, 37, 41 } }, {\u0022n2\u0022, new List\u003Cint\u003E() { 41, 54, 63 } }, {\u0022n3\u0022, new List\u003Cint\u003E() { 29, 38, 93 } } }) == new Dictionary\u003Cstring, List\u003Cint\u003E\u003E() { {\u0022n1\u0022, new List\u003Cint\u003E() { 25, 37, 41 } }, {\u0022n2\u0022, new List\u003Cint\u003E() { 41, 54, 63 } }, {\u0022n3\u0022, new List\u003Cint\u003E() { 29, 38, 93 } } });","Debug.Assert(SortedDict(new Dictionary\u003Cstring, List\u003Cint\u003E\u003E { { \u0022n1\u0022, new List\u003Cint\u003E { 58, 44, 56 } }, { \u0022n2\u0022, new List\u003Cint\u003E { 91, 34, 58 } }, { \u0022n3\u0022, new List\u003Cint\u003E { 100, 200, 300 } } }) \n    .SequenceEqual(new Dictionary\u003Cstring, List\u003Cint\u003E\u003E { { \u0022n1\u0022, new List\u003Cint\u003E { 44, 56, 58 } }, { \u0022n2\u0022, new List\u003Cint\u003E { 34, 58, 91 } }, { \u0022n3\u0022, new List\u003Cint\u003E { 100, 200, 300 } } }));"],"challenge_test_list":[]}
{"name":"largest-k-mod-y","description":"Find the largest k where k mod x equals y","text":"Write a function to find the largest possible value of k such that k modulo x is y.","code":"public int FindMaxVal(int n, int x, int y) \n{\n    int ans = int.MinValue;\n    for (int k = 0; k \u003C= n; k\u002B\u002B) \n    {\n        if (k % x == y) \n        {\n            ans = Math.Max(ans, k);\n        }\n    }\n    return (ans \u003E= 0 \u0026\u0026 ans \u003C= n) ? ans : -1;\n}","task_id":663,"test_setup_code":"","test_list":["Debug.Assert(FindMaxVal(15, 10, 5) == 15);","Debug.Assert(FindMaxVal(187, 10, 5) == 185);","Debug.Assert(FindMaxVal(16, 11, 1) == 12);"],"challenge_test_list":[]}
{"name":"even-numbers-avg","description":"Calculate average of even numbers up to n","text":"Write a C# function to find the average of even numbers till a given even number.","code":"public static string AverageEven(int n) \n{ \n    if (n % 2 != 0) \n    { \n        return \u0022Invalid Input\u0022; \n    } \n    \n    int sm = 0; \n    int count = 0; \n    \n    while (n \u003E= 2) \n    { \n        count\u002B\u002B; \n        sm \u002B= n; \n        n -= 2; \n    } \n    \n    return (sm / count).ToString(); \n}","task_id":664,"test_setup_code":"","test_list":["Debug.Assert(AverageEven(2) == 2);","Debug.Assert(AverageEven(4) == 3);","Debug.Assert(AverageEven(100) == 51);"],"challenge_test_list":[]}
{"name":"shift-first-to-end","description":"Shift first list element to the end in Python","text":"Write a C# function to shift first element to the end of given list.","code":"public List\u003Cint\u003E MoveLast(List\u003Cint\u003E numList) {\n    var a = new List\u003Cint\u003E(numList.Count(n =\u003E n == numList[0]));\n    for (int i = 0; i \u003C numList.Count(n =\u003E n == numList[0]); i\u002B\u002B) {\n        a.Add(numList[0]);\n    }\n    var x = numList.Where(i =\u003E i != numList[0]).ToList();\n    x.AddRange(a);\n    return x;\n}","task_id":665,"test_setup_code":"","test_list":["Debug.Assert(MoveLast(new int[] { 1, 2, 3, 4 }).SequenceEqual(new int[] { 2, 3, 4, 1 }));","Debug.Assert(MoveLast(new List\u003Cint\u003E { 2, 3, 4, 1, 5, 0 }).SequenceEqual(new List\u003Cint\u003E { 3, 4, 1, 5, 0, 2 }));","Debug.Assert(MoveLast(new int[] { 5, 4, 3, 2, 1 }).SequenceEqual(new int[] { 4, 3, 2, 1, 5 }));"],"challenge_test_list":[]}
{"name":"count-char-in-str","description":"Count character occurrences in a given string","text":"Write a function to count occurrence of a character in a string.","code":"public int CountChar(string str, char ch) \n{\n    int count = 0;\n    for (int i = 0; i \u003C str.Length; i\u002B\u002B) \n    {\n        if (str[i] == ch) \n        {\n            count\u002B\u002B;\n        }\n    }\n    return count;\n}","task_id":666,"test_setup_code":"","test_list":["Debug.Assert(CountChar(\u0022Python\u0022, \u0027o\u0027) == 1);","Debug.Assert(CountChar(\u0022little\u0022, \u0027t\u0027) == 2);","Debug.Assert(CountChar(\u0022assert\u0022, \u0027s\u0027) == 2);"],"challenge_test_list":[]}
{"name":"count-vowels.py","description":"Count vowels in a given string using Python","text":"Write a C# function to count number of vowels in the string.","code":"public int CheckVow(string inputString, string vowels) \n{\n    var final = inputString.Where(each =\u003E vowels.Contains(each)).ToList();\n    return final.Count;\n}","task_id":667,"test_setup_code":"","test_list":["Debug.Assert(CheckVow(\u0022corner\u0022, \u0022AaEeIiOoUu\u0022) == 2);","Debug.Assert(CheckVow(\u0022valid\u0022, \u0022AaEeIiOoUu\u0022) == 2);","Debug.Assert(CheckVow(\u0027true\u0027, \u0022AaEeIiOoUu\u0022) == 2);"],"challenge_test_list":[]}
{"name":"replace-multiple","description":"Replace multiple characters with a single one","text":"Write a C# function to replace multiple occurence of character by single.","code":"using System.Text.RegularExpressions;\n\npublic string Replace(string input, string character) \n{\n    string pattern = character \u002B \u0022{2,}\u0022;\n    string result = Regex.Replace(input, pattern, character);\n    return result;\n}","task_id":668,"test_setup_code":"","test_list":["Debug.Assert(Replace(\u0022peep\u0022, \u0027e\u0027) == \u0022pep\u0022);","Debug.Assert(Replace(\u0022Greek\u0022, \u0027e\u0027) == \u0022Grek\u0022);","Debug.Assert(Replace(\u0022Moon\u0022, \u0027o\u0027) == \u0022Mon\u0022);"],"challenge_test_list":[]}
{"name":"check-ip-validity","description":"Validate IP address format using regex function","text":"Write a function to check whether the given ip address is valid or not using regex.","code":"using System.Text.RegularExpressions;\n\npublic class IpValidator\n{\n    private static readonly string regex = @\u0022^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.\u0022 \u002B\n                                            @\u0022(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.\u0022 \u002B\n                                            @\u0022(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.\u0022 \u002B\n                                            @\u0022(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$\u0022;\n\n    public static string CheckIP(string Ip)\n    {\n        if (Regex.IsMatch(Ip, regex))\n        {\n            return \u0022Valid IP address\u0022;\n        }\n        else\n        {\n            return \u0022Invalid IP address\u0022;\n        }\n    }\n}","task_id":669,"test_setup_code":"","test_list":["Debug.Assert(CheckIP(\u0022192.168.0.1\u0022) == \u0022Valid IP address\u0022);","Debug.Assert(CheckIP(\u0022110.234.52.124\u0022) == \u0022Valid IP address\u0022);","Debug.Assert(CheckIP(\u0022366.1.2.2\u0022) == \u0022Invalid IP address\u0022);"],"challenge_test_list":[]}
{"name":"decreasing-trend","description":"Check if a sequence of numbers is decreasing","text":"Write a C# function to check whether a sequence of numbers has a decreasing trend or not.","code":"bool DecreasingTrend(List\u003Cint\u003E nums) {\r\n    return nums.SequenceEqual(nums.OrderByDescending(x =\u003E x));\r\n}","task_id":670,"test_setup_code":"","test_list":["Debug.Assert(DecreasingTrend(new int[] {-4, -3, -2, -1}) == true);","Debug.Assert(DecreasingTrend(new int[] { 1, 2, 3 }) == true);","Debug.Assert(DecreasingTrend(new List\u003Cint\u003E { 3, 2, 1 }) == false);"],"challenge_test_list":[]}
{"name":"set-rightmost-bit","description":"Set the rightmost unset bit in an integer","text":"Write a C# function to set the right most unset bit.","code":"using System;\n\npublic class BitManipulation\n{\n    public static int GetPosOfRightMostSetBit(int n)\n    {\n        return (int)Math.Floor(Math.Log2(n \u0026 -n) \u002B 1);\n    }\n\n    public static int SetRightMostUnsetBit(int n)\n    {\n        if (n == 0)\n        {\n            return 1;\n        }\n        if ((n \u0026 (n \u002B 1)) == 0)\n        {\n            return n;\n        }\n        int pos = GetPosOfRightMostSetBit(~n);\n        return ((1 \u003C\u003C (pos - 1)) | n);\n    }\n}","task_id":671,"test_setup_code":"","test_list":["Debug.Assert(SetRightMostUnsetBit(21) == 23);","Debug.Assert(SetRightMostUnsetBit(11) == 15);","Debug.Assert(SetRightMostUnsetBit(15) == 15);"],"challenge_test_list":[]}
{"name":"max-of-three-nr","description":"Find the maximum among three given numbers","text":"Write a function to find maximum of three numbers.","code":"public int MaxOfThree(int num1, int num2, int num3) \n{\n    int lnum;\n    if (num1 \u003E= num2 \u0026\u0026 num1 \u003E= num3)\n        lnum = num1;\n    else if (num2 \u003E= num1 \u0026\u0026 num2 \u003E= num3)\n        lnum = num2;\n    else\n        lnum = num3;\n    return lnum;\n}","task_id":672,"test_setup_code":"","test_list":["Debug.Assert(MaxOfThree(10, 20, 30) == 30);\n\npublic int MaxOfThree(int a, int b, int c)\n{\n    return Math.Max(a, Math.Max(b, c));\n}","Debug.Assert(MaxOfThree(55, 47, 39) == 55);\n\npublic int MaxOfThree(int a, int b, int c)\n{\n    return Math.Max(a, Math.Max(b, c));\n}","Debug.Assert(MaxOfThree(10, 49, 30) == 49);\n\npublic int MaxOfThree(int a, int b, int c)\n{\n    return Math.Max(a, Math.Max(b, c));\n}"],"challenge_test_list":[]}
{"name":"int-list-to-int","description":"Convert a list of integers into a single integer","text":"Write a C# function to convert a list of multiple integers into a single integer.","code":"public int Convert(List\u003Cint\u003E list) \n{ \n    var s = list.Select(i =\u003E i.ToString()).ToList(); \n    var res = int.Parse(string.Join(\u0022\u0022, s)); \n    return res; \n}","task_id":673,"test_setup_code":"","test_list":["Debug.Assert(Convert(new int[] { 1, 2, 3 }) == 123);","Debug.Assert(Convert(new int[] { 4, 5, 6 }) == 456);","Debug.Assert(Convert(new int[] { 7, 8, 9 }) == 789);"],"challenge_test_list":[]}
{"name":"remove-dup-words","description":"Remove duplicate words from a string with collections","text":"Write a function to remove duplicate words from a given string using collections module.","code":"using System.Collections.Generic;\n\npublic class StringManipulator\n{\n    public string RemoveDuplicate(string input)\n    {\n        var seen = new HashSet\u003Cstring\u003E();\n        var result = new List\u003Cstring\u003E();\n\n        foreach (var word in input.Split(\u0027 \u0027))\n        {\n            if (seen.Add(word))\n            {\n                result.Add(word);\n            }\n        }\n\n        return string.Join(\u0022 \u0022, result);\n    }\n}","task_id":674,"test_setup_code":"","test_list":["Debug.Assert(RemoveDuplicate(\u0022Python Exercises Practice Solution Exercises\u0022) == \u0022Python Exercises Practice Solution\u0022);","Debug.Assert(RemoveDuplicate(\u0022Python Exercises Practice Solution Python\u0022) == \u0022Python Exercises Practice Solution\u0022);","Debug.Assert(RemoveDuplicate(\u0022Python Exercises Practice Solution Practice\u0022) == \u0022Python Exercises Practice Solution\u0022);"],"challenge_test_list":[]}
{"name":"add-two-ints-20","description":"Add two integers but return 20 if in range","text":"Write a function to add two integers. however, if the sum is between the given range it will return 20.","code":"public int SumNums(int x, int y, int m, int n) \n{\n    int sumNums = x \u002B y;\n    if (sumNums \u003E= m \u0026\u0026 sumNums \u003C n) \n    {\n        return 20;\n    } \n    else \n    {\n        return sumNums;\n    }\n}","task_id":675,"test_setup_code":"","test_list":["Debug.Assert(SumNums(2, 10, 11, 20) == 20);","Debug.Assert(SumNums(15, 17, 1, 10) == 32);","Debug.Assert(SumNums(10, 15, 5, 30) == 20);"],"challenge_test_list":[]}
{"name":"remove-non-alphanum","description":"Remove non-alphanumeric characters using regex","text":"Write a function to remove everything except alphanumeric characters from the given string by using regex.","code":"public string RemoveExtraChar(string text1) {\n    var pattern = new Regex(@\u0022[\\W_]\u002B\u0022);\n    return pattern.Replace(text1, \u0022\u0022);\n}","task_id":676,"test_setup_code":"","test_list":["Debug.Assert(RemoveExtraChar(\u0022**//Google Android// - 12. \u0022) == \u0022GoogleAndroid12\u0022);","Debug.Assert(RemoveExtraChar(\u0022****//Google Flutter//*** - 36. \u0022) == \u0022GoogleFlutter36\u0022);","Debug.Assert(RemoveExtraChar(\u0022**//Google Firebase// - 478. \u0022) == \u0022GoogleFirebase478\u0022);"],"challenge_test_list":[]}
{"name":"triangle-checker","description":"Determine if a triangle is valid based on sides","text":"Write a function to check if the triangle is valid or not.","code":"public bool ValidityTriangle(int a, int b, int c) \n{\n    int total = a \u002B b \u002B c;\n    return total == 180;\n}","task_id":677,"test_setup_code":"","test_list":["Debug.Assert(ValidityTriangle(60, 50, 90) == false);","Debug.Assert(ValidityTriangle(45, 75, 60) == true);","Debug.Assert(ValidityTriangle(30, 50, 100) == true);"],"challenge_test_list":[]}
{"name":"remove-spaces","description":"Remove spaces from a given string in Python","text":"Write a C# function to remove spaces from a given string.","code":"public string RemoveSpaces(string str1) \n{\n    str1 = str1.Replace(\u0027 \u0027, \u0027\u0027);\n    return str1;\n}","task_id":678,"test_setup_code":"","test_list":["Debug.Assert(RemoveSpaces(\u0022a b c\u0022) == \u0022abc\u0022);","Debug.Assert(RemoveSpaces(\u00221 2 3\u0022) == \u0022123\u0022);","Debug.Assert(RemoveSpaces(\u0022 b c\u0022) == \u0022bc\u0022);"],"challenge_test_list":[]}
{"name":"dict-key-by-index","description":"Access dictionary values using key indices","text":"Write a function to access dictionary key\u2019s element by index.","code":"public static List\u003Cstring\u003E AccessKey(Dictionary\u003Cstring, string\u003E dictionary, int key) \n{\n    return dictionary.Keys.ToList()[key];\n}","task_id":679,"test_setup_code":"","test_list":["Debug.Assert(AccessKey(new Dictionary\u003Cstring, int\u003E{{\u0022physics\u0022, 80}, {\u0022math\u0022, 90}, {\u0022chemistry\u0022, 86}}, 0) == \u0022physics\u0022);","Debug.Assert(AccessKey(new Dictionary\u003Cstring, int\u003E{{\u0022python\u0022, 10}, {\u0022java\u0022, 20}, {\u0022C\u002B\u002B\u0022, 30}}, 2) == \u0022C\u002B\u002B\u0022);\n\npublic string AccessKey(Dictionary\u003Cstring, int\u003E keys, int index)\n{\n    return keys.Keys.ElementAt(index);\n}","Debug.Assert(AccessKey(new Dictionary\u003Cstring, int\u003E{{\u0022program\u0022, 15}, {\u0022computer\u0022, 45}}, 1) == \u0022computer\u0022);"],"challenge_test_list":[]}
{"name":"check-increasing-trend","description":"Check if a sequence of numbers is increasing","text":"Write a C# function to check whether a sequence of numbers has an increasing trend or not.","code":"public bool IncreasingTrend(List\u003Cint\u003E nums) {\n    return nums.SequenceEqual(nums.OrderBy(n =\u003E n));\n}","task_id":680,"test_setup_code":"","test_list":["Debug.Assert(IncreasingTrend(new int[] { 1, 2, 3, 4 }) == true);","Debug.Assert(IncreasingTrend(new int[] { 4, 3, 2, 1 }) == false);","Debug.Assert(IncreasingTrend(new int[] { 0, 1, 4, 9 }) == true);"],"challenge_test_list":[]}
{"name":"smallest-prime.py","description":"Find the smallest prime divisor of a number","text":"Write a C# function to find the smallest prime divisor of a number.","code":"public static int SmallestDivisor(int n) \n{ \n    if (n % 2 == 0) \n    { \n        return 2; \n    } \n    int i = 3; \n    while (i * i \u003C= n) \n    { \n        if (n % i == 0) \n        { \n            return i; \n        } \n        i \u002B= 2; \n    } \n    return n; \n}","task_id":681,"test_setup_code":"","test_list":["Debug.Assert(SmallestDivisor(10) == 2);","Debug.Assert(SmallestDivisor(25) == 5);","Debug.Assert(SmallestDivisor(31) == 31);"],"challenge_test_list":[]}
{"name":"multiply-lists","description":"Multiply two lists using map and lambda function","text":"Write a function to multiply two lists using map and lambda function.","code":"public List\u003Cint\u003E MulList(List\u003Cint\u003E nums1, List\u003Cint\u003E nums2)\n{\n    return nums1.Zip(nums2, (x, y) =\u003E x * y).ToList();\n}","task_id":682,"test_setup_code":"","test_list":["Debug.Assert(MulList(new int[] { 1, 2, 3 }, new int[] { 4, 5, 6 }).SequenceEqual(new int[] { 4, 10, 18 }));","Debug.Assert(MulList(new List\u003Cint\u003E { 1, 2 }, new List\u003Cint\u003E { 3, 4 }).SequenceEqual(new List\u003Cint\u003E { 3, 8 }));","Debug.Assert(MulList(new int[] { 90, 120 }, new int[] { 50, 70 }).SequenceEqual(new int[] { 4500, 8400 }));"],"challenge_test_list":[]}
{"name":"sum-of-two-sqs","description":"Check if a number is sum of two squares","text":"Write a C# function to check whether the given number can be represented by sum of two squares or not.","code":"public bool SumSquare(int n) \n{ \n    int i = 1; \n    while (i * i \u003C= n) \n    { \n        int j = 1; \n        while (j * j \u003C= n) \n        { \n            if (i * i \u002B j * j == n) \n            { \n                return true; \n            } \n            j\u002B\u002B; \n        } \n        i\u002B\u002B; \n    } \n    return false; \n}","task_id":683,"test_setup_code":"","test_list":["Debug.Assert(SumSquare(25) == true);","Debug.Assert(SumSquare(24) == false);","Debug.Assert(SumSquare(17) == true);"],"challenge_test_list":[]}
{"name":"count-char-in-repstr","description":"Count character occurrences in a repeated string","text":"Write a C# function to count occurences of a character in a repeated string.","code":"public int CountChar(string str, char x) \n{\n    int count = 0;\n    for (int i = 0; i \u003C str.Length; i\u002B\u002B) \n    {\n        if (str[i] == x) \n        {\n            count\u002B\u002B;\n        }\n    }\n    int n = 10;\n    int repititions = n / str.Length;\n    count = count * repititions;\n    int l = n % str.Length;\n    for (int i = 0; i \u003C l; i\u002B\u002B) \n    {\n        if (str[i] == x) \n        {\n            count\u002B\u002B;\n        }\n    }\n    return count;\n}","task_id":684,"test_setup_code":"","test_list":["Debug.Assert(CountChar(\u0022abcac\u0022, \u0027a\u0027) == 4);","Debug.Assert(CountChar(\u0022abca\u0022, \u0027c\u0027) == 2);","Debug.Assert(CountChar(\u0022aba\u0022, \u0027a\u0027) == 7);"],"challenge_test_list":[]}
{"name":"sum-of-primes-1toN","description":"Sum of prime numbers from 1 to n in Python","text":"Write a C# function to find sum of prime numbers between 1 to n.","code":"public int SumOfPrimes(int n)  \n{  \n    bool[] prime = new bool[n \u002B 1];  \n    for (int i = 0; i \u003C= n; i\u002B\u002B)  \n        prime[i] = true;  \n    int p = 2;  \n    while (p * p \u003C= n)  \n    {  \n        if (prime[p])  \n        {  \n            for (int i = p * 2; i \u003C= n; i \u002B= p)  \n                prime[i] = false;  \n        }  \n        p\u002B\u002B;  \n    }  \n    int sum = 0;  \n    for (int i = 2; i \u003C= n; i\u002B\u002B)  \n    {  \n        if (prime[i])  \n            sum \u002B= i;  \n    }  \n    return sum;  \n}","task_id":685,"test_setup_code":"","test_list":["Debug.Assert(SumOfPrimes(10) == 17);","Debug.Assert(SumOfPrimes(20) == 77);","Debug.Assert(SumOfPrimes(5) == 10);"],"challenge_test_list":[]}
{"name":"element-frequency","description":"Count occurrences of each element in a list","text":"Write a function to find the frequency of each element in the given list.","code":"using System;\nusing System.Collections.Generic;\n\npublic class Converter\n{\n    public static string FreqElement(IEnumerable\u003Cint\u003E testTup)\n    {\n        var res = new Dictionary\u003Cint, int\u003E();\n        foreach (var ele in testTup)\n        {\n            if (res.ContainsKey(ele))\n            {\n                res[ele]\u002B\u002B;\n            }\n            else\n            {\n                res[ele] = 1;\n            }\n        }\n        return string.Join(\u0022, \u0022, res);\n    }\n}","task_id":686,"test_setup_code":"","test_list":["Debug.Assert(FreqElement(new Tuple\u003Cint, int, int, int, int, int, int, int, int\u003E(4, 5, 4, 5, 6, 6, 5, 5, 4)) == \u0022{4: 3, 5: 4, 6: 2}\u0022);","Debug.Assert(FreqElement(new Tuple\u003Cint, int, int, int, int, int, int\u003E(7, 8, 8, 9, 4, 7, 6, 5, 4)) == \u0022{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}\u0022);","Debug.Assert(freq_element(new int[] { 1, 4, 3, 1, 4, 5, 2, 6, 2, 7 }) == \u0022{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}\u0022);"],"challenge_test_list":[]}
{"name":"gcd-by-recursion","description":"Find gcd of two integers using recursion","text":"Write a function to find the greatest common divisor (gcd) of two integers by using recursion.","code":"public int RecurGcd(int a, int b)\n{\n    int low = Math.Min(a, b);\n    int high = Math.Max(a, b);\n    if (low == 0)\n        return high;\n    else if (low == 1)\n        return 1;\n    else\n        return RecurGcd(low, high % low);\n}","task_id":687,"test_setup_code":"","test_list":["Debug.Assert(RecurGcd(12, 14) == 2);","Debug.Assert(RecurGcd(13, 17) == 1);","Debug.Assert(RecurGcd(9, 3) == 3);"],"challenge_test_list":[]}
{"name":"get-complex-len","description":"Calculate the magnitude of a complex number","text":"Write a function to get the length of a complex number.","code":"using System;\nusing System.Numerics;\n\npublic class ComplexOperations\n{\n    public static double LenComplex(double a, double b)\n    {\n        Complex cn = new Complex(a, b);\n        double length = cn.Magnitude;\n        return length;\n    }\n}","task_id":688,"test_setup_code":"","test_list":["Debug.Assert(LenComplex(3, 4) == 5.0);","Debug.Assert(LenComplex(9, 10) == 13.45362404707371);","Debug.Assert(LenComplex(7, 9) == 11.40175425099138);"],"challenge_test_list":[]}
{"name":"min-jumps-array","description":"Minimum jumps to reach array\u0027s end","text":"## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. \u003E indented block \u003E indented block","code":"public static int MinJumps(int[] arr, int n) {\n    int[] jumps = new int[n];\n    if (n == 0 || arr[0] == 0) {\n        return int.MaxValue;\n    }\n    jumps[0] = 0;\n    for (int i = 1; i \u003C n; i\u002B\u002B) {\n        jumps[i] = int.MaxValue;\n        for (int j = 0; j \u003C i; j\u002B\u002B) {\n            if (i \u003C= j \u002B arr[j] \u0026\u0026 jumps[j] != int.MaxValue) {\n                jumps[i] = Math.Min(jumps[i], jumps[j] \u002B 1);\n                break;\n            }\n        }\n    }\n    return jumps[n - 1];\n}","task_id":689,"test_setup_code":"","test_list":["Debug.Assert(MinJumps(new int[] { 1, 3, 6, 1, 0, 9 }, 6) == 3);","Debug.Assert(MinJumps(new int[] { 1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9 }, 11) == 3);","Debug.Assert(MinJumps(new int[] { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }, 11) == 10);"],"challenge_test_list":[]}
{"name":"multiply-consec","description":"Multiply consecutive numbers in a list with a function","text":"Write a function to multiply consecutive numbers of a given list.","code":"public List\u003Cint\u003E MulConsecutiveNums(List\u003Cint\u003E nums) {\n    List\u003Cint\u003E result = nums.Zip(nums.Skip(1), (a, b) =\u003E b * a).ToList();\n    return result;\n}","task_id":690,"test_setup_code":"","test_list":["Debug.Assert(MulConsecutiveNums(new List\u003Cint\u003E { 1, 1, 3, 4, 4, 5, 6, 7 }).SequenceEqual(new List\u003Cint\u003E { 1, 3, 12, 16, 20, 30, 42 }));","Debug.Assert(MulConsecutiveNums(new int[] { 4, 5, 8, 9, 6, 10 }).SequenceEqual(new int[] { 20, 40, 72, 54, 60 }));","Debug.Assert(MulConsecutiveNums(new List\u003Cint\u003E { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }).SequenceEqual(new List\u003Cint\u003E { 2, 6, 12, 20, 30, 42, 56, 72, 90 }));"],"challenge_test_list":[]}
{"name":"group-elements-by-2nd","description":"Group first elements by corresponding second elements","text":"Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.","code":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static Dictionary\u003Cint, List\u003Cint\u003E\u003E GroupElement(List\u003CTuple\u003Cint, int\u003E\u003E testList)\n    {\n        var res = new Dictionary\u003Cint, List\u003Cint\u003E\u003E();\n        foreach (var group in testList.OrderBy(ele =\u003E ele.Item2).GroupBy(ele =\u003E ele.Item2))\n        {\n            res[group.Key] = group.Select(ele =\u003E ele.Item1).ToList();\n        }\n        return res;\n    }\n}","task_id":691,"test_setup_code":"","test_list":["Debug.Assert(GroupElement(new List\u003C(int, int)\u003E { (6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7) }) .SequenceEqual(new Dictionary\u003Cint, List\u003Cint\u003E\u003E { { 5, new List\u003Cint\u003E { 6, 2 } }, { 7, new List\u003Cint\u003E { 2, 8, 3 } }, { 8, new List\u003Cint\u003E { 9 } } }));","Debug.Assert(GroupElement(new List\u003C(int, int)\u003E { (7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8) }).SequenceEqual(new Dictionary\u003Cint, List\u003Cint\u003E\u003E { { 6, new List\u003Cint\u003E { 7, 3 } }, { 8, new List\u003Cint\u003E { 3, 9, 4 } }, { 9, new List\u003Cint\u003E { 10 } } }));","Debug.Assert(GroupElement(new List\u003C(int, int)\u003E{(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)}) == new Dictionary\u003Cint, List\u003Cint\u003E\u003E{{7, new List\u003Cint\u003E{8, 4}}, {9, new List\u003Cint\u003E{4, 10, 5}}, {10, new List\u003Cint\u003E{11}}});"],"challenge_test_list":[]}
{"name":"last-two-digits","description":"Last two digits of factorial in Python function","text":"Write a C# function to find the last two digits in factorial of a given number.","code":"public int LastTwoDigits(int N) \n{ \n    if (N \u003E= 10) \n    { \n        return 0; \n    } \n    int fac = 1; \n    for (int i = 1; i \u003C= N; i\u002B\u002B) \n    { \n        fac = (fac * i) % 100; \n    } \n    return fac; \n}","task_id":692,"test_setup_code":"","test_list":["Debug.Assert(LastTwoDigits(7) == 40);","Debug.Assert(LastTwoDigits(5) == 20);","Debug.Assert(LastTwoDigits(2) == 2);"],"challenge_test_list":[]}
{"name":"remove-multi-spaces","description":"Remove extra spaces in a string using regex","text":"Write a function to remove multiple spaces in a string by using regex.","code":"using System.Text.RegularExpressions;\n\npublic string RemoveMultipleSpaces(string text1)\n{\n    return Regex.Replace(text1, \u0022 \u002B\u0022, \u0022 \u0022);\n}","task_id":693,"test_setup_code":"","test_list":["Debug.Assert(RemoveMultipleSpaces(\u0022Google      Assistant\u0022) == \u0022Google Assistant\u0022);","Debug.Assert(RemoveMultipleSpaces(\u0022Quad      Core\u0022) == \u0022Quad Core\u0022);","Debug.Assert(RemoveMultipleSpaces(\u0022ChromeCast      Built-in\u0022) == \u0022ChromeCast Built-in\u0022);"],"challenge_test_list":[]}
{"name":"unique-values-extract","description":"Extract unique values from dictionary values","text":"Write a function to extract unique values from the given dictionary values.","code":"public List\u003Cstring\u003E ExtractUnique(Dictionary\u003Cstring, List\u003Cstring\u003E\u003E testDict) \n{\n    var res = testDict.Values.SelectMany(val =\u003E val).Distinct().OrderBy(ele =\u003E ele).ToList();\n    return res;\n}","task_id":694,"test_setup_code":"","test_list":["Debug.Assert(ExtractUnique(new Dictionary\u003Cstring, List\u003Cint\u003E\u003E { { \u0022msm\u0022, new List\u003Cint\u003E { 5, 6, 7, 8 } }, { \u0022is\u0022, new List\u003Cint\u003E { 10, 11, 7, 5 } }, { \u0022best\u0022, new List\u003Cint\u003E { 6, 12, 10, 8 } }, { \u0022for\u0022, new List\u003Cint\u003E { 1, 2, 5 } } }) == new List\u003Cint\u003E { 1, 2, 5, 6, 7, 8, 10, 11, 12 });","Debug.Assert(ExtractUnique(new Dictionary\u003Cstring, List\u003Cint\u003E\u003E { { \u0022Built\u0022, new List\u003Cint\u003E { 7, 1, 9, 4 } }, { \u0022for\u0022, new List\u003Cint\u003E { 11, 21, 36, 14, 9 } }, { \u0022ISP\u0022, new List\u003Cint\u003E { 4, 1, 21, 39, 47 } }, { \u0022TV\u0022, new List\u003Cint\u003E { 1, 32, 38 } } }) .SequenceEqual(new List\u003Cint\u003E { 1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47 }));","Debug.Assert(ExtractUnique(new Dictionary\u003Cstring, List\u003Cint\u003E\u003E { {\u0022F\u0022, new List\u003Cint\u003E {11, 13, 14, 17}}, {\u0022A\u0022, new List\u003Cint\u003E {12, 11, 15, 18}}, {\u0022N\u0022, new List\u003Cint\u003E {19, 21, 15, 36}}, {\u0022G\u0022, new List\u003Cint\u003E {37, 36, 35}} }) .SequenceEqual(new List\u003Cint\u003E {11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37}));"],"challenge_test_list":[]}
{"name":"tuple-checker","description":"Check if second tuple elements exceed first tuple indices","text":"Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.","code":"public bool CheckGreater(Tuple\u003Cint, int\u003E testTup1, Tuple\u003Cint, int\u003E testTup2)\n{\n    bool res = testTup1.Item1 \u003C testTup2.Item1 \u0026\u0026 testTup1.Item2 \u003C testTup2.Item2;\n    return res;\n}","task_id":695,"test_setup_code":"","test_list":["Debug.Assert(CheckGreater(new int[] { 10, 4, 5 }, new int[] { 13, 5, 18 }) == true);","Debug.Assert(CheckGreater(new int[] { 1, 2, 3 }, new int[] { 2, 1, 4 }) == false);","Debug.Assert(CheckGreater(new int[] { 4, 5, 6 }, new int[] { 5, 6, 7 }) == true);"],"challenge_test_list":[]}
{"name":"zip-two-lists","description":"Zip two lists of lists into a single list of tuples","text":"Write a function to zip two given lists of lists.","code":"public List\u003CList\u003CT\u003E\u003E ZipList\u003CT\u003E(List\u003CList\u003CT\u003E\u003E list1, List\u003CList\u003CT\u003E\u003E list2)  \n{  \n    return list1.Zip(list2, (a, b) =\u003E a.Concat(b).ToList()).ToList();  \n}","task_id":696,"test_setup_code":"","test_list":["Debug.Assert(ZipList(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 1, 3 }, new List\u003Cint\u003E { 5, 7 }, new List\u003Cint\u003E { 9, 11 } }, \n                       new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 2, 4 }, new List\u003Cint\u003E { 6, 8 }, new List\u003Cint\u003E { 10, 12, 14 } }) \n               .SequenceEqual(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 1, 3, 2, 4 }, new List\u003Cint\u003E { 5, 7, 6, 8 }, new List\u003Cint\u003E { 9, 11, 10, 12, 14 } }));","Debug.Assert(ZipList(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 1, 2 }, new List\u003Cint\u003E { 3, 4 }, new List\u003Cint\u003E { 5, 6 } }, new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 7, 8 }, new List\u003Cint\u003E { 9, 10 }, new List\u003Cint\u003E { 11, 12 } }) == new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 1, 2, 7, 8 }, new List\u003Cint\u003E { 3, 4, 9, 10 }, new List\u003Cint\u003E { 5, 6, 11, 12 } });","Debug.Assert(ZipList(new List\u003CList\u003Cstring\u003E\u003E { new List\u003Cstring\u003E { \u0022a\u0022, \u0022b\u0022 }, new List\u003Cstring\u003E { \u0022c\u0022, \u0022d\u0022 } }, new List\u003CList\u003Cstring\u003E\u003E { new List\u003Cstring\u003E { \u0022e\u0022, \u0022f\u0022 }, new List\u003Cstring\u003E { \u0022g\u0022, \u0022h\u0022 } }) == new List\u003CList\u003Cstring\u003E\u003E { new List\u003Cstring\u003E { \u0022a\u0022, \u0022b\u0022, \u0022e\u0022, \u0022f\u0022 }, new List\u003Cstring\u003E { \u0022c\u0022, \u0022d\u0022, \u0022g\u0022, \u0022h\u0022 } });"],"challenge_test_list":[]}
{"name":"even-count-lambda","description":"Count even numbers in a list using lambda function","text":"Write a function to find number of even elements in the given list using lambda function.","code":"public int CountEven(int[] arrayNums) {\n    int countEven = arrayNums.Count(x =\u003E x % 2 == 0);\n    return countEven;\n}","task_id":697,"test_setup_code":"","test_list":["Debug.Assert(CountEven(new int[] { 1, 2, 3, 5, 7, 8, 9, 10 }) == 3);","Debug.Assert(CountEven(new int[] { 10, 15, 14, 13, -18, 12, -20 }) == 5);","Debug.Assert(CountEven(new int[] { 1, 2, 4, 8, 9 }) == 3);"],"challenge_test_list":[]}
{"name":"sort-dict-by-tuple","description":"Sort dictionary items by tuple key products","text":"Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.","code":"public Dictionary\u003CTKey, TValue\u003E SortDictItem\u003CTKey, TValue\u003E(Dictionary\u003CTKey, TValue\u003E testDict) \n {\n     var res = testDict.OrderBy(keyValue =\u003E Convert.ToDouble(keyValue.Key.ToString()[1].ToString()) * Convert.ToDouble(keyValue.Key.ToString()[0].ToString()))\n                        .ToDictionary(keyValue =\u003E keyValue.Key, keyValue =\u003E keyValue.Value);\n     return res;\n }","task_id":698,"test_setup_code":"","test_list":["Debug.Assert(SortDictItem(new Dictionary\u003C(int, int), int\u003E { {(5, 6), 3}, {(2, 3), 9}, {(8, 4), 10}, {(6, 4), 12} }) == new Dictionary\u003C(int, int), int\u003E { {(2, 3), 9}, {(6, 4), 12}, {(5, 6), 3}, {(8, 4), 10} });","Debug.Assert(SortDictItem(new Dictionary\u003C(int, int), int\u003E { {(6, 7), 4}, {(3, 4), 10}, {(9, 5), 11}, {(7, 5), 13} }).SequenceEqual(new Dictionary\u003C(int, int), int\u003E { {(3, 4), 10}, {(7, 5), 13}, {(6, 7), 4}, {(9, 5), 11} }));","Debug.Assert(SortDictItem(new Dictionary\u003C(int, int), int\u003E { { (7, 8), 5 }, { (4, 5), 11 }, { (10, 6), 12 }, { (8, 6), 14 } }) == new Dictionary\u003C(int, int), int\u003E { { (4, 5), 11 }, { (8, 6), 14 }, { (7, 8), 5 }, { (10, 6), 12 } });"],"challenge_test_list":[]}
{"name":"min-swaps-binary","description":"Minimum swaps to convert one binary string to another","text":"Write a C# function to find the minimum number of swaps required to convert one binary string to another.","code":"public static object MinSwaps(string str1, string str2) \n{ \n    int count = 0; \n    for (int i = 0; i \u003C str1.Length; i\u002B\u002B) \n    { \n        if (str1[i] != str2[i]) \n        { \n            count\u002B\u002B; \n        } \n    } \n    if (count % 2 == 0) \n    { \n        return count / 2; \n    } \n    else \n    { \n        return \u0022Not Possible\u0022; \n    } \n}","task_id":699,"test_setup_code":"","test_list":["Debug.Assert(MinSwaps(\u00221101\u0022, \u00221110\u0022) == 1);","Debug.Assert(MinSwaps(\u00221111\u0022, \u00220100\u0022) == \u0022Not Possible\u0022);","Debug.Assert(MinSwaps(\u00221110000\u0022, \u00220001101\u0022) == 3);"],"challenge_test_list":[]}
{"name":"count-in-range","description":"Count elements in a list within a specific range","text":"Write a function to count the number of elements in a list which are within a specific range.","code":"public int CountRangeInList(List\u003Cint\u003E li, int min, int max)\n{\n    int ctr = 0;\n    foreach (int x in li)\n    {\n        if (min \u003C= x \u0026\u0026 x \u003C= max)\n        {\n            ctr\u002B\u002B;\n        }\n    }\n    return ctr;\n}","task_id":700,"test_setup_code":"","test_list":["Debug.Assert(CountRangeInList(new List\u003Cint\u003E { 10, 20, 30, 40, 40, 40, 70, 80, 99 }, 40, 100) == 6);","Debug.Assert(CountRangeInList(new List\u003Cstring\u003E { \u0022a\u0022, \u0022b\u0022, \u0022c\u0022, \u0022d\u0022, \u0022e\u0022, \u0022f\u0022 }, \u0022a\u0022, \u0022e\u0022) == 5);","Debug.Assert(CountRangeInList(new List\u003Cint\u003E { 7, 8, 9, 15, 17, 19, 45 }, 15, 20) == 3);"],"challenge_test_list":[]}
{"name":"equilibrium-index","description":"Find the equilibrium index in an array","text":"Write a function to find the equilibrium index of the given array.","code":"public int EquilibriumIndex(int[] arr)\n{\n    int totalSum = arr.Sum();\n    int leftSum = 0;\n    for (int i = 0; i \u003C arr.Length; i\u002B\u002B)\n    {\n        totalSum -= arr[i];\n        if (leftSum == totalSum)\n        {\n            return i;\n        }\n        leftSum \u002B= arr[i];\n    }\n    return -1;\n}","task_id":701,"test_setup_code":"","test_list":["Debug.Assert(EquilibriumIndex(new int[] { 1, 2, 3, 4, 1, 2, 3 }) == 3);","Debug.Assert(EquilibriumIndex(new int[] { -7, 1, 5, 2, -4, 3, 0 }) == 3);","Debug.Assert(EquilibriumIndex(new int[] { 1, 2, 3 }) == -1);"],"challenge_test_list":[]}
{"name":"min-remove-amax-amin","description":"Find minimum removals for range constraint","text":"Write a function to find the minimum number of elements that should be removed such that amax-amin\u003C=k.","code":"int FindInd(int key, int i, int n, int k, int[] arr) {\n    int ind = -1;\n    int start = i \u002B 1;\n    int end = n - 1;\n    while (start \u003C end) {\n        int mid = start \u002B (end - start) / 2;\n        if (arr[mid] - key \u003C= k) {\n            ind = mid;\n            start = mid \u002B 1;\n        } else {\n            end = mid;\n        }\n    }\n    return ind;\n}\n\nint Removals(int[] arr, int n, int k) {\n    int ans = n - 1;\n    Array.Sort(arr);\n    for (int i = 0; i \u003C n; i\u002B\u002B) {\n        int j = FindInd(arr[i], i, n, k, arr);\n        if (j != -1) {\n            ans = Math.Min(ans, n - (j - i \u002B 1));\n        }\n    }\n    return ans;\n}","task_id":702,"test_setup_code":"","test_list":["Debug.Assert(Removals(new List\u003Cint\u003E { 1, 3, 4, 9, 10, 11, 12, 17, 20 }, 9, 4) == 5);","Debug.Assert(Removals(new int[] { 1, 5, 6, 2, 8 }, 5, 2) == 3);","Debug.Assert(Removals(new int[] { 1, 2, 3, 4, 5, 6 }, 6, 3) == 2);"],"challenge_test_list":[]}
{"name":"check-key-in-dict","description":"Check if a key exists in a dictionary","text":"Write a function to check whether the given key is present in the dictionary or not.","code":"public bool IsKeyPresent(Dictionary\u003Cobject, object\u003E d, object x)\n{\n    if (d.ContainsKey(x))\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}","task_id":703,"test_setup_code":"","test_list":["Debug.Assert(IsKeyPresent(new Dictionary\u003Cint, int\u003E{{1, 10}, {2, 20}, {3, 30}, {4, 40}, {5, 50}, {6, 60}}, 5) == true);","Debug.Assert(IsKeyPresent(new Dictionary\u003Cint, int\u003E{{1, 10}, {2, 20}, {3, 30}, {4, 40}, {5, 50}, {6, 60}}, 6) == true);","Debug.Assert(IsKeyPresent(new Dictionary\u003Cint, int\u003E { { 1, 10 }, { 2, 20 }, { 3, 30 }, { 4, 40 }, { 5, 50 }, { 6, 60 } }, 10) == false);"],"challenge_test_list":[]}
{"name":"harmonic-sum-n1","description":"Calculate the harmonic sum of n minus one","text":"Write a function to calculate the harmonic sum of n-1.","code":"public double HarmonicSum(int n)\n{\n    if (n \u003C 2)\n        return 1;\n    else\n        return 1.0 / n \u002B HarmonicSum(n - 1);\n}","task_id":704,"test_setup_code":"","test_list":["Debug.Assert(HarmonicSum(10) == 2.9289682539682538);\n\ndouble HarmonicSum(int n) {\n    double sum = 0.0;\n    for (int i = 1; i \u003C= n; i\u002B\u002B) {\n        sum \u002B= 1.0 / i;\n    }\n    return sum;\n}","Debug.Assert(HarmonicSum(4) == 2.083333333333333);","Debug.Assert(HarmonicSum(7) == 2.5928571428571425);"],"challenge_test_list":[]}
{"name":"sort-lists-by-len","description":"Sort lists by their length and values in order","text":"Write a function to sort a list of lists by length and value.","code":"public List\u003CList\u003CT\u003E\u003E SortSublists(List\u003CList\u003CT\u003E\u003E list1) \n{\n    list1.Sort();\n    list1.Sort((a, b) =\u003E a.Count.CompareTo(b.Count));\n    return list1;\n}","task_id":705,"test_setup_code":"","test_list":["Debug.Assert(SortSublists(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 2 }, new List\u003Cint\u003E { 0 }, new List\u003Cint\u003E { 1, 3 }, new List\u003Cint\u003E { 0, 7 }, new List\u003Cint\u003E { 9, 11 }, new List\u003Cint\u003E { 13, 15, 17 } }).SequenceEqual(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 0 }, new List\u003Cint\u003E { 2 }, new List\u003Cint\u003E { 0, 7 }, new List\u003Cint\u003E { 1, 3 }, new List\u003Cint\u003E { 9, 11 }, new List\u003Cint\u003E { 13, 15, 17 } }));","Debug.Assert(SortSublists(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 1 }, new List\u003Cint\u003E { 2, 3 }, new List\u003Cint\u003E { 4, 5, 6 }, new List\u003Cint\u003E { 7 }, new List\u003Cint\u003E { 10, 11 } }).SequenceEqual(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 1 }, new List\u003Cint\u003E { 7 }, new List\u003Cint\u003E { 2, 3 }, new List\u003Cint\u003E { 10, 11 }, new List\u003Cint\u003E { 4, 5, 6 } }));","Debug.Assert(SortSublists(new List\u003CList\u003Cstring\u003E\u003E { new List\u003Cstring\u003E { \u0022python\u0022 }, new List\u003Cstring\u003E { \u0022java\u0022, \u0022C\u0022, \u0022C\u002B\u002B\u0022 }, new List\u003Cstring\u003E { \u0022DBMS\u0022 }, new List\u003Cstring\u003E { \u0022SQL\u0022, \u0022HTML\u0022 } })\n    .SequenceEqual(new List\u003CList\u003Cstring\u003E\u003E { new List\u003Cstring\u003E { \u0022DBMS\u0022 }, new List\u003Cstring\u003E { \u0022python\u0022 }, new List\u003Cstring\u003E { \u0022SQL\u0022, \u0022HTML\u0022 }, new List\u003Cstring\u003E { \u0022java\u0022, \u0022C\u0022, \u0022C\u002B\u002B\u0022 } }));"],"challenge_test_list":[]}
{"name":"subset-check.py","description":"Check if one array is a subset of another array","text":"Write a function to find whether an array is subset of another array.","code":"bool IsSubset(int[] arr1, int m, int[] arr2, int n) \n{ \n    HashSet\u003Cint\u003E hashset = new HashSet\u003Cint\u003E(); \n    for (int i = 0; i \u003C m; i\u002B\u002B) \n    { \n        hashset.Add(arr1[i]); \n    } \n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    { \n        if (hashset.Contains(arr2[i])) \n        { \n            continue; \n        } \n        else \n        { \n            return false; \n        } \n    } \n    return true; \n}","task_id":706,"test_setup_code":"","test_list":["Debug.Assert(IsSubset(new int[] { 11, 1, 13, 21, 3, 7 }, 6, new int[] { 11, 3, 7, 1 }, 4) == true);","Debug.Assert(IsSubset(new List\u003Cint\u003E { 1, 2, 3, 4, 5, 6 }, 6, new List\u003Cint\u003E { 1, 2, 4 }, 3) == true);","Debug.Assert(IsSubset(new List\u003Cint\u003E { 10, 5, 2, 23, 19 }, 5, new List\u003Cint\u003E { 19, 5, 3 }, 3) == false);"],"challenge_test_list":[]}
{"name":"count-set-bits","description":"Count set bits in numbers from 1 to n","text":"Write a C# function to count the total set bits from 1 to n.","code":"public static int CountSetBits(int n)  \n{  \n    n \u002B= 1;  \n    int powerOf2 = 2;  \n    int cnt = n / 2;  \n    while (powerOf2 \u003C= n)  \n    {  \n        int totalPairs = n / powerOf2;  \n        cnt \u002B= (totalPairs / 2) * powerOf2;  \n        if ((totalPairs \u0026 1) != 0)  \n        {  \n            cnt \u002B= (n % powerOf2);  \n        }  \n        powerOf2 \u003C\u003C= 1;  \n    }  \n    return cnt;  \n}","task_id":707,"test_setup_code":"","test_list":["Debug.Assert(CountSetBits(16) == 33);","Debug.Assert(CountSetBits(2) == 2);","Debug.Assert(CountSetBits(14) == 28);"],"challenge_test_list":[]}
{"name":"string-to-list","description":"Convert a string into a list using Python","text":"Write a C# function to convert a string to a list.","code":"public List\u003Cstring\u003E Convert(string input) \n{ \n    List\u003Cstring\u003E li = new List\u003Cstring\u003E(input.Split(\u0027 \u0027)); \n    return li; \n}","task_id":708,"test_setup_code":"","test_list":["Debug.Assert(Convert(\u0022python program\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022python\u0022, \u0022program\u0022 }));","Debug.Assert(Convert(\u0022Data Analysis\u0022).SequenceEqual(new[] { \u0022Data\u0022, \u0022Analysis\u0022 }));","Debug.Assert(Convert(\u0022Hadoop Training\u0022).SequenceEqual(new[] { \u0022Hadoop\u0022, \u0022Training\u0022 }));"],"challenge_test_list":[]}
{"name":"unique-keys-count","description":"Count unique keys for each tuple value","text":"Write a function to count unique keys for each value present in the tuple.","code":"using System.Collections.Generic;\n\npublic class ExampleClass\n{\n    public string GetUnique(List\u003CTuple\u003Cstring, string\u003E\u003E testList)\n    {\n        var res = new Dictionary\u003Cstring, List\u003Cstring\u003E\u003E();\n        foreach (var sub in testList)\n        {\n            if (!res.ContainsKey(sub.Item2))\n            {\n                res[sub.Item2] = new List\u003Cstring\u003E();\n            }\n            res[sub.Item2].Add(sub.Item1);\n        }\n\n        var resDict = new Dictionary\u003Cstring, int\u003E();\n        foreach (var key in res.Keys)\n        {\n            resDict[key] = new HashSet\u003Cstring\u003E(res[key]).Count;\n        }\n\n        return resDict.ToString();\n    }\n}","task_id":709,"test_setup_code":"","test_list":["Debug.Assert(GetUnique(new List\u003CValueTuple\u003Cint, int\u003E\u003E { (3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4) }) == \u0022{4: 4, 2: 3, 1: 2}\u0022);","Debug.Assert(GetUnique(new List\u003CTuple\u003Cint, int\u003E\u003E { new Tuple\u003Cint, int\u003E(4, 5), new Tuple\u003Cint, int\u003E(2, 3), new Tuple\u003Cint, int\u003E(3, 5), new Tuple\u003Cint, int\u003E(9, 3), new Tuple\u003Cint, int\u003E(8, 3), new Tuple\u003Cint, int\u003E(9, 2), new Tuple\u003Cint, int\u003E(10, 2), new Tuple\u003Cint, int\u003E(9, 5), new Tuple\u003Cint, int\u003E(11, 5) }) == \u0022{5: 4, 3: 3, 2: 2}\u0022);","Debug.Assert(GetUnique(new (int, int)[] { (6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3) }) == \u0022{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}\u0022);"],"challenge_test_list":[]}
{"name":"initial-last-data","description":"Access first and last elements of a tuple record","text":"Write a function to access the initial and last data of the given tuple record.","code":"public static Tuple\u003Cobject, object\u003E FrontAndRear(Tuple\u003Cobject, object\u003E testTup)  \n{  \n    var res = Tuple.Create(testTup.Item1, testTup.Item2);  \n    return res;  \n}","task_id":710,"test_setup_code":"","test_list":["Debug.Assert(FrontAndRear(new int[] { 10, 4, 5, 6, 7 }).SequenceEqual(new int[] { 10, 7 }));","Debug.Assert(FrontAndRear(new Tuple\u003Cint, int, int, int, int\u003E(1, 2, 3, 4, 5)).Item1 == 1 \u0026\u0026 FrontAndRear(new Tuple\u003Cint, int, int, int, int\u003E(1, 2, 3, 4, 5)).Item2 == 5);","Debug.Assert(FrontAndRear(new Tuple\u003Cint, int, int, int, int\u003E(6, 7, 8, 9, 10)).Equals(new Tuple\u003Cint, int\u003E(6, 10)));"],"challenge_test_list":[]}
{"name":"even-odd-product","description":"Check if products of even and odd digit positions match","text":"Write a C# function to check whether the product of digits of a number at even and odd places is equal or not.","code":"bool ProductEqual(int n) \n{ \n    if (n \u003C 10) \n    { \n        return false; \n    } \n    int prodOdd = 1; \n    int prodEven = 1; \n    while (n \u003E 0) \n    { \n        int digit = n % 10; \n        prodOdd *= digit; \n        n /= 10; \n        if (n == 0) \n        { \n            break; \n        } \n        digit = n % 10; \n        prodEven *= digit; \n        n /= 10; \n    } \n    return prodOdd == prodEven; \n}","task_id":711,"test_setup_code":"","test_list":["Debug.Assert(ProductEqual(2841) == true);","Debug.Assert(ProductEqual(1234) == false);","Debug.Assert(ProductEqual(1212) == false);"],"challenge_test_list":[]}
{"name":"remove-dup-lists","description":"Function to eliminate duplicate nested lists","text":"Write a function to remove duplicates from a list of lists.","code":"using System.Collections.Generic;\nusing System.Linq;\n\npublic class MyClass\n{\n    public List\u003CT\u003E RemoveDuplicate\u003CT\u003E(List\u003CT\u003E list1)\n    {\n        list1.Sort();\n        var removeDuplicate = list1.Distinct().ToList();\n        return removeDuplicate;\n    }\n}","task_id":712,"test_setup_code":"","test_list":["Debug.Assert(RemoveDuplicate(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 10, 20 }, new List\u003Cint\u003E { 40 }, new List\u003Cint\u003E { 30, 56, 25 }, new List\u003Cint\u003E { 10, 20 }, new List\u003Cint\u003E { 33 }, new List\u003Cint\u003E { 40 } }) == new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 10, 20 }, new List\u003Cint\u003E { 30, 56, 25 }, new List\u003Cint\u003E { 33 }, new List\u003Cint\u003E { 40 } });","Debug.Assert(RemoveDuplicate(new string[] { \u0022a\u0022, \u0022b\u0022, \u0022a\u0022, \u0022c\u0022, \u0022c\u0022 }).SequenceEqual(new string[] { \u0022a\u0022, \u0022b\u0022, \u0022c\u0022 }));","Debug.Assert(RemoveDuplicate(new List\u003Cint\u003E { 1, 3, 5, 6, 3, 5, 6, 1 }).SequenceEqual(new List\u003Cint\u003E { 1, 3, 5, 6 }));"],"challenge_test_list":[]}
{"name":"valid-tuple-check","description":"Check if a tuple contains all valid values","text":"Write a function to check if the given tuple contains all valid values or not.","code":"public bool CheckValid(IEnumerable\u003Cbool\u003E testTup)\n{\n    bool res = !testTup.Any(ele =\u003E !ele);\n    return res;\n}","task_id":713,"test_setup_code":"","test_list":["Debug.Assert(CheckValid(new Tuple\u003Cbool, bool, bool, bool\u003E(true, true, true, true)) == true);","Debug.Assert(CheckValid(new Tuple\u003Cbool, bool, bool, bool\u003E(true, false, true, true)) == false);","Debug.Assert(CheckValid(new Tuple\u003Cbool, bool, bool, bool\u003E(true, true, true, true)) == true);"],"challenge_test_list":[]}
{"name":"distinct-prime-pow","description":"Count distinct prime factor powers in a number","text":"Write a C# function to count the number of distinct power of prime factor of given number.","code":"public int CountFac(int n)  \n{  \n    int m = n;  \n    int count = 0;  \n    int i = 2;  \n    while ((i * i) \u003C= m)  \n    {  \n        int total = 0;  \n        while (n % i == 0)  \n        {  \n            n /= i;  \n            total \u002B= 1;  \n        }  \n        int temp = 0;  \n        int j = 1;  \n        while ((temp \u002B j) \u003C= total)  \n        {  \n            temp \u002B= j;  \n            count \u002B= 1;  \n            j \u002B= 1;  \n        }  \n        i \u002B= 1;  \n    }  \n    if (n != 1)  \n    {  \n        count \u002B= 1;  \n    }  \n    return count;  \n}","task_id":714,"test_setup_code":"","test_list":["Debug.Assert(CountFac(24) == 3);","Debug.Assert(CountFac(12) == 2);","Debug.Assert(CountFac(4) == 1);"],"challenge_test_list":[]}
{"name":"\u0060convert-str-to-tuple\u0060","description":"Convert string of integers to a tuple","text":"Write a function to convert the given string of integers into a tuple.","code":"public Tuple\u003Cint, int\u003E StrToTuple(string testStr)  \n{  \n    var res = testStr.Split(\u0022, \u0022).Select(int.Parse).ToArray();  \n    return Tuple.Create(res[0], res[1]);  \n}","task_id":715,"test_setup_code":"","test_list":["Debug.Assert(StrToTuple(\u00221, -5, 4, 6, 7\u0022).Equals(Tuple.Create(1, -5, 4, 6, 7)));","Debug.Assert(StrToTuple(\u00221, 2, 3, 4, 5\u0022).Equals((1, 2, 3, 4, 5)));","Debug.Assert(StrToTuple(\u00224, 6, 9, 11, 13, 14\u0022).Equals(ValueTuple.Create(4, 6, 9, 11, 13, 14)));"],"challenge_test_list":[]}
{"name":"perimeter-rombus","description":"Calculate the perimeter of a rhombus shape","text":"Write a function to find the perimeter of a rombus.","code":"public int RombusPerimeter(int a)  \n{  \n    int perimeter = 4 * a;  \n    return perimeter;  \n}","task_id":716,"test_setup_code":"","test_list":["Debug.Assert(RombusPerimeter(10) == 40);","Debug.Assert(RombusPerimeter(5) == 20);","Debug.Assert(RombusPerimeter(4) == 16);"],"challenge_test_list":[]}
{"name":"std-dev-calc","description":"Calculate standard deviation using a custom function","text":"Write a function to calculate the standard deviation.","code":"using System;\n\npublic class Statistics\n{\n    public static double SdCalc(double[] data)\n    {\n        int n = data.Length;\n        if (n \u003C= 1)\n        {\n            return 0.0;\n        }\n        double mean = AvgCalc(data);\n        double sd = 0.0;\n        foreach (double el in data)\n        {\n            sd \u002B= (el - mean) * (el - mean);\n        }\n        sd = Math.Sqrt(sd / (n - 1));\n        return sd;\n    }\n\n    public static double AvgCalc(double[] ls)\n    {\n        int n = ls.Length;\n        double mean = 0.0;\n        if (n \u003C= 1)\n        {\n            return ls[0];\n        }\n        foreach (double el in ls)\n        {\n            mean \u002B= el;\n        }\n        mean /= n;\n        return mean;\n    }\n}","task_id":717,"test_setup_code":"","test_list":["Debug.Assert(SdCalc(new int[] { 4, 2, 5, 8, 6 }) == 2.23606797749979);","Debug.Assert(SdCalc(new double[] { 1, 2, 3, 4, 5, 6, 7 }) == 2.160246899469287);","Debug.Assert(SdCalc(new int[] { 5, 9, 10, 15, 6, 4 }) == 4.070217029430577);"],"challenge_test_list":[]}
{"name":"alt-elements-list","description":"Create a list of alternate elements from another list","text":"Write a function to create a list taking alternate elements from another given list.","code":"public List\u003CT\u003E AlternateElements\u003CT\u003E(List\u003CT\u003E list1)\n{\n    List\u003CT\u003E result = new List\u003CT\u003E();\n    for (int i = 0; i \u003C list1.Count; i \u002B= 2)\n    {\n        result.Add(list1[i]);\n    }\n    return result;\n}","task_id":718,"test_setup_code":"","test_list":["Debug.Assert(AlternateElements(new string[] { \u0022red\u0022, \u0022black\u0022, \u0022white\u0022, \u0022green\u0022, \u0022orange\u0022 }).SequenceEqual(new string[] { \u0022red\u0022, \u0022white\u0022, \u0022orange\u0022 }));","Debug.Assert(AlternateElements(new List\u003Cint\u003E { 2, 0, 3, 4, 0, 2, 8, 3, 4, 2 }).SequenceEqual(new List\u003Cint\u003E { 2, 3, 0, 8, 4 }));","Debug.Assert(AlternateElements(new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }).SequenceEqual(new int[] { 1, 3, 5, 7, 9 }));"],"challenge_test_list":[]}
{"name":"a-b-match-flag","description":"Match a string with an a followed by b\u0027s","text":"Write a function that matches a string that has an a followed by zero or more b\u0027s.","code":"public string TextMatch(string text) {\n    string patterns = \u0022ab*?\u0022;\n    if (Regex.IsMatch(text, patterns)) {\n        return \u0022Found a match!\u0022;\n    } else {\n        return \u0022Not matched!\u0022;\n    }\n}","task_id":719,"test_setup_code":"","test_list":["Debug.Assert(TextMatch(\u0022ac\u0022) == \u0022Found a match!\u0022);","Debug.Assert(TextMatch(\u0022dc\u0022) == \u0022Not matched!\u0022);\n\nstring TextMatch(string input) {\n    // implementation of the function would go here\n}","Debug.Assert(TextMatch(\u0022abba\u0022) == \u0022Found a match!\u0022);"],"challenge_test_list":[]}
{"name":"add-dict-to-tuple","description":"Add a dictionary to a tuple in a function","text":"Write a function to add a dictionary to the tuple.","code":"public Tuple\u003Cobject\u003E AddDictToTuple(Tuple\u003Cobject\u003E testTup, Dictionary\u003Cstring, object\u003E testDict)\n{\n    var testList = testTup.ToList();\n    testList.Add(testDict);\n    testTup = Tuple.Create(testList.ToArray());\n    return testTup;\n}","task_id":720,"test_setup_code":"","test_list":["Debug.Assert(AddDictToTuple((4, 5, 6), new Dictionary\u003Cstring, int\u003E { { \u0022MSAM\u0022, 1 }, { \u0022is\u0022, 2 }, { \u0022best\u0022, 3 } }) == (4, 5, 6, new Dictionary\u003Cstring, int\u003E { { \u0022MSAM\u0022, 1 }, { \u0022is\u0022, 2 }, { \u0022best\u0022, 3 } }));","Debug.Assert(AddDictToTuple((1, 2, 3), new Dictionary\u003Cstring, int\u003E { { \u0022UTS\u0022, 2 }, { \u0022is\u0022, 3 }, { \u0022Worst\u0022, 4 } }) == (1, 2, 3, new Dictionary\u003Cstring, int\u003E { { \u0022UTS\u0022, 2 }, { \u0022is\u0022, 3 }, { \u0022Worst\u0022, 4 } }));","Debug.Assert(AddDictToTuple((8, 9, 10), new Dictionary\u003Cstring, int\u003E { {\u0022POS\u0022, 3}, {\u0022is\u0022, 4}, {\u0022Okay\u0022, 5} }) == (8, 9, 10, new Dictionary\u003Cstring, int\u003E { {\u0022POS\u0022, 3}, {\u0022is\u0022, 4}, {\u0022Okay\u0022, 5} }));"],"challenge_test_list":[]}
{"name":"max-average-path","description":"Maximize average path in a square matrix","text":"Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.","code":"public static double MaxAverageOfPath(int[,] cost, int N) \n{\n    int[,] dp = new int[N \u002B 1, N \u002B 1];\n    dp[0, 0] = cost[0, 0];\n    for (int i = 1; i \u003C N; i\u002B\u002B) \n    {\n        dp[i, 0] = dp[i - 1, 0] \u002B cost[i, 0];\n    }\n    for (int j = 1; j \u003C N; j\u002B\u002B) \n    {\n        dp[0, j] = dp[0, j - 1] \u002B cost[0, j];\n    }\n    for (int i = 1; i \u003C N; i\u002B\u002B) \n    {\n        for (int j = 1; j \u003C N; j\u002B\u002B) \n        {\n            dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) \u002B cost[i, j];\n        }\n    }\n    return (double)dp[N - 1, N - 1] / (2 * N - 1);\n}","task_id":721,"test_setup_code":"","test_list":["Debug.Assert(MaxAverageOfPath(new int[][] { new int[] { 1, 2, 3 }, new int[] { 6, 5, 4 }, new int[] { 7, 3, 9 } }, 3) == 5.2);","Debug.Assert(MaxAverageOfPath(new int[][] { new int[] { 2, 3, 4 }, new int[] { 7, 6, 5 }, new int[] { 8, 4, 10 } }, 3) == 6.2);","Debug.Assert(MaxAverageOfPath(new int[][] { new int[] { 3, 4, 5 }, new int[] { 8, 7, 6 }, new int[] { 9, 5, 11 } }, 3) == 7.2);"],"challenge_test_list":[]}
{"name":"filter-student-dimensions","description":"Filter students\u0027 height and width from a dictionary","text":"Write a function to filter the height and width of students which are stored in a dictionary.","code":"public Dictionary\u003Cstring, (int, int)\u003E FilterData(Dictionary\u003Cstring, (int, int)\u003E students, int h, int w)\n{\n    var result = students.Where(kvp =\u003E kvp.Value.Item1 \u003E= h \u0026\u0026 kvp.Value.Item2 \u003E= w)\n                         .ToDictionary(kvp =\u003E kvp.Key, kvp =\u003E kvp.Value);\n    return result;\n}","task_id":722,"test_setup_code":"","test_list":["Debug.Assert(FilterData(new Dictionary\u003Cstring, (double, int)\u003E { { \u0022Cierra Vega\u0022, (6.2, 70) }, { \u0022Alden Cantrell\u0022, (5.9, 65) }, { \u0022Kierra Gentry\u0022, (6.0, 68) }, { \u0022Pierre Cox\u0022, (5.8, 66) } }, 6.0, 70).SequenceEqual(new Dictionary\u003Cstring, (double, int)\u003E { { \u0022Cierra Vega\u0022, (6.2, 70) } }));","Debug.Assert(FilterData(new Dictionary\u003Cstring, (double, int)\u003E { { \u0022Cierra Vega\u0022, (6.2, 70) }, { \u0022Alden Cantrell\u0022, (5.9, 65) }, { \u0022Kierra Gentry\u0022, (6.0, 68) }, { \u0022Pierre Cox\u0022, (5.8, 66) } }, 5.9, 67).SequenceEqual(new Dictionary\u003Cstring, (double, int)\u003E { { \u0022Cierra Vega\u0022, (6.2, 70) }, { \u0022Kierra Gentry\u0022, (6.0, 68) } }));","Debug.Assert(FilterData(new Dictionary\u003Cstring, (double, int)\u003E{{\u0022Cierra Vega\u0022, (6.2, 70)}, {\u0022Alden Cantrell\u0022, (5.9, 65)}, {\u0022Kierra Gentry\u0022, (6.0, 68)}, {\u0022Pierre Cox\u0022, (5.8, 66)}}, 5.7, 64).SequenceEqual(new Dictionary\u003Cstring, (double, int)\u003E{{\u0022Cierra Vega\u0022, (6.2, 70)}, {\u0022Alden Cantrell\u0022, (5.9, 65)}, {\u0022Kierra Gentry\u0022, (6.0, 68)}, {\u0022Pierre Cox\u0022, (5.8, 66)}}));"],"challenge_test_list":[]}
{"name":"count-same-pairs","description":"Count matching pairs in two lists using map","text":"Write a function to count the same pair in two given lists using map function.","code":"public int CountSamePair(List\u003Cint\u003E nums1, List\u003Cint\u003E nums2) {\n    return nums1.Zip(nums2, (x, y) =\u003E x == y ? 1 : 0).Sum();\n}","task_id":723,"test_setup_code":"","test_list":["Debug.Assert(CountSamePair(new int[] { 1, 2, 3, 4, 5, 6, 7, 8 }, new int[] { 2, 2, 3, 1, 2, 6, 7, 9 }) == 4);","Debug.Assert(CountSamePair(new int[] { 0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8 }, new int[] { 2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8 }) == 11);","Debug.Assert(CountSamePair(new int[] { 2, 4, -6, -9, 11, -12, 14, -5, 17 }, new int[] { 2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8 }) == 1);"],"challenge_test_list":[]}
{"name":"sum-of-digits-pow","description":"Sum digits of a number raised to a power","text":"Write a function to calculate the sum of all digits of the base to the specified power.","code":"public int PowerBaseSum(int base, int power)\n{\n    return str(pow(base, power)).ToCharArray().Sum(c =\u003E (int)char.GetNumericValue(c));\n}","task_id":724,"test_setup_code":"","test_list":["Debug.Assert(PowerBaseSum(2, 100) == 115);","Debug.Assert(PowerBaseSum(8, 10) == 37);","Debug.Assert(PowerBaseSum(8, 15) == 62);"],"challenge_test_list":[]}
{"name":"extract-quoted-vals","description":"Extract values from quotes using regex in a string","text":"Write a function to extract values between quotation marks of the given string by using regex.","code":"using System.Collections.Generic;\nusing System.Text.RegularExpressions;\n\npublic class QuotationExtractor\n{\n    public List\u003Cstring\u003E ExtractQuotation(string text1)\n    {\n        return new List\u003Cstring\u003E(Regex.Matches(text1, \u0022\\\u0022(.*?)\\\u0022\u0022)\n                                      .Cast\u003CMatch\u003E()\n                                      .Select(m =\u003E m.Groups[1].Value));\n    }\n}","task_id":725,"test_setup_code":"","test_list":["Debug.Assert(ExtractQuotation(\u0022Cortex \\\u0022A53\\\u0022 Based \\\u0022multi\\\u0022 tasking \\\u0022Processor\\\u0022\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022A53\u0022, \u0022multi\u0022, \u0022Processor\u0022 }));","Debug.Assert(ExtractQuotation(\u0022Cast your \\\u0022favorite\\\u0022 entertainment \\\u0022apps\\\u0022\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022favorite\u0022, \u0022apps\u0022 }));","Debug.Assert(ExtractQuotation(\u0022Watch content \\\u00224k Ultra HD\\\u0022 resolution with \\\u0022HDR 10\\\u0022 Support\u0022).SequenceEqual(new List\u003Cstring\u003E { \u00224k Ultra HD\u0022, \u0022HDR 10\u0022 }));"],"challenge_test_list":[]}
{"name":"adjacent-multiply","description":"Multiply adjacent elements in a tuple","text":"Write a function to multiply the adjacent elements of the given tuple.","code":"public static Tuple\u003Cint, int\u003E[] MultiplyElements(Tuple\u003Cint, int\u003E[] testTup) \n{\n    var res = testTup.Zip(testTup.Skip(1), (i, j) =\u003E i * j).ToArray();\n    return res;\n}","task_id":726,"test_setup_code":"","test_list":["Debug.Assert(MultiplyElements(new int[] { 1, 5, 7, 8, 10 }).SequenceEqual(new int[] { 5, 35, 56, 80 }));","Debug.Assert(MultiplyElements(new int[] { 2, 4, 5, 6, 7 }).SequenceEqual(new int[] { 8, 20, 30, 42 }));","Debug.Assert(MultiplyElements(new Tuple\u003Cint, int, int, int, int\u003E(12, 13, 14, 9, 15)).Item1 == 156 \u0026\u0026 MultiplyElements(new Tuple\u003Cint, int, int, int, int\u003E(12, 13, 14, 9, 15)).Item2 == 182 \u0026\u0026 MultiplyElements(new Tuple\u003Cint, int, int, int, int\u003E(12, 13, 14, 9, 15)).Item3 == 126 \u0026\u0026 MultiplyElements(new Tuple\u003Cint, int, int, int, int\u003E(12, 13, 14, 9, 15)).Item4 == 135);"],"challenge_test_list":[]}
{"name":"remove-non-alphanum","description":"Remove non-alphanumeric characters with regex","text":"Write a function to remove all characters except letters and numbers using regex","code":"using System.Text.RegularExpressions;\n\npublic string RemoveChar(string S)\n{\n    string result = Regex.Replace(S, @\u0022[\\W_]\u002B\u0022, \u0022\u0022);\n    return result;\n}","task_id":727,"test_setup_code":"","test_list":["Debug.Assert(RemoveChar(\u0022123abcjw:, .@! eiw\u0022) == \u0022123abcjweiw\u0022);","Debug.Assert(RemoveChar(\u0022Hello1234:, ! Howare33u\u0022) == \u0022Hello1234Howare33u\u0022);","Debug.Assert(RemoveChar(\u0022Cool543Triks@:, Make@987Trips\u0022) == \u0022Cool543TriksMake987Trips\u0022);"],"challenge_test_list":[]}
{"name":"sum-elements-lists","description":"Sum elements from two given lists","text":"Write a function to sum elements in two lists.","code":"public List\u003Cint\u003E SumList(List\u003Cint\u003E lst1, List\u003Cint\u003E lst2)\n{\n    List\u003Cint\u003E resList = new List\u003Cint\u003E();\n    for (int i = 0; i \u003C lst1.Count; i\u002B\u002B)\n    {\n        resList.Add(lst1[i] \u002B lst2[i]);\n    }\n    return resList;\n}","task_id":728,"test_setup_code":"","test_list":["Debug.Assert(SumList(new int[] { 10, 20, 30 }, new int[] { 15, 25, 35 }).SequenceEqual(new int[] { 25, 45, 65 }));","Debug.Assert(SumList(new int[] { 1, 2, 3 }, new int[] { 5, 6, 7 }).SequenceEqual(new int[] { 6, 8, 10 }));","Debug.Assert(SumList(new int[] { 15, 20, 30 }, new int[] { 15, 45, 75 }).SequenceEqual(new int[] { 30, 65, 105 }));"],"challenge_test_list":[]}
{"name":"add-two-lists","description":"Add two lists with map and lambda functions","text":"Write a function to add two lists using map and lambda function.","code":"public List\u003Cint\u003E AddList(List\u003Cint\u003E nums1, List\u003Cint\u003E nums2)\n{\n    return nums1.Zip(nums2, (x, y) =\u003E x \u002B y).ToList();\n}","task_id":729,"test_setup_code":"","test_list":["Debug.Assert(AddList(new List\u003Cint\u003E { 1, 2, 3 }, new List\u003Cint\u003E { 4, 5, 6 }).SequenceEqual(new List\u003Cint\u003E { 5, 7, 9 }));","Debug.Assert(AddList(new List\u003Cint\u003E { 1, 2 }, new List\u003Cint\u003E { 3, 4 }).SequenceEqual(new List\u003Cint\u003E { 4, 6 }));","Debug.Assert(AddList(new List\u003Cint\u003E { 10, 20 }, new List\u003Cint\u003E { 50, 70 }).SequenceEqual(new List\u003Cint\u003E { 60, 90 }));"],"challenge_test_list":[]}
{"name":"remove-consective-dubs","description":"Remove consecutive duplicates from a list","text":"Write a function to remove consecutive duplicates of a given list.","code":"public List\u003Cint\u003E ConsecutiveDuplicates(List\u003Cint\u003E nums) \n{\n    return nums\n        .Select((x, i) =\u003E new { Value = x, Index = i })\n        .GroupBy(x =\u003E x.Value)\n        .Select(g =\u003E g.First().Value)\n        .ToList();\n}","task_id":730,"test_setup_code":"","test_list":["Debug.Assert(ConsecutiveDuplicates(new int[] { 0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 }) == new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4 });\n\nint[] ConsecutiveDuplicates(int[] numbers) {\n    // Your implementation here\n}","Debug.Assert(ConsecutiveDuplicates(new List\u003Cint\u003E { 10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10 }).SequenceEqual(new List\u003Cint\u003E { 10, 15, 19, 18, 17, 26, 17, 18, 10 }));","Debug.Assert(ConsecutiveDuplicates(new List\u003Cstring\u003E { \u0022a\u0022, \u0022a\u0022, \u0022b\u0022, \u0022c\u0022, \u0022d\u0022, \u0022d\u0022 }).SequenceEqual(new List\u003Cstring\u003E { \u0022a\u0022, \u0022b\u0022, \u0022c\u0022, \u0022d\u0022 }));"],"challenge_test_list":[]}
{"name":"lateral-surface","description":"Calculate the cone\u0027s lateral surface area function","text":"Write a function to find the lateral surface area of a cone.","code":"public double LateralsurfaceCone(double r, double h)\n{\n    double l = Math.Sqrt(r * r \u002B h * h);\n    double LSA = Math.PI * r * l;\n    return LSA;\n}","task_id":731,"test_setup_code":"","test_list":["Debug.Assert(LateralsurfaceCone(5, 12) == 204.20352248333654);","Debug.Assert(LateralsurfaceCone(10, 15) == 566.3586699569488);","Debug.Assert(LateralsurfaceCone(19, 17) == 1521.8090132193388);"],"challenge_test_list":[]}
{"name":"replace-spaces-2","description":"Replace spaces commas and dots with a colon","text":"Write a function to replace all occurrences of spaces, commas, or dots with a colon.","code":"public string ReplaceSpecialChar(string text)\n{\n    return Regex.Replace(text, \u0022[ ,.]\u0022, \u0022:\u0022);\n}","task_id":732,"test_setup_code":"","test_list":["Debug.Assert(ReplaceSpecialChar(\u0022Python language, Programming language.\u0022) == \u0022Python:language::Programming:language:\u0022);","Debug.Assert(ReplaceSpecialChar(\u0022a b c,d e f\u0022) == \u0022a:b:c:d:e:f\u0022);","Debug.Assert(ReplaceSpecialChar(\u0022ram reshma,ram rahim\u0022) == \u0022ram:reshma:ram:rahim\u0022);"],"challenge_test_list":[]}
{"name":"first-index-of-num","description":"Find index of first appearance in sorted array","text":"Write a function to find the index of the first occurrence of a given number in a sorted array.","code":"public int FindFirstOccurrence(int[] A, int x) {\n    int left = 0, right = A.Length - 1;\n    int result = -1;\n    while (left \u003C= right) {\n        int mid = (left \u002B right) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            right = mid - 1;\n        } else if (x \u003C A[mid]) {\n            right = mid - 1;\n        } else {\n            left = mid \u002B 1;\n        }\n    }\n    return result;\n}","task_id":733,"test_setup_code":"","test_list":["Debug.Assert(FindFirstOccurrence(new int[] { 2, 5, 5, 5, 6, 6, 8, 9, 9, 9 }, 5) == 1);","Debug.Assert(FindFirstOccurrence(new int[] { 2, 3, 5, 5, 6, 6, 8, 9, 9, 9 }, 5) == 2);","Debug.Assert(FindFirstOccurrence(new int[] { 2, 4, 1, 5, 6, 6, 8, 9, 9, 9 }, 6) == 4);"],"challenge_test_list":[]}
{"name":"sum-of-products","description":"Calculate sum of products of all subarrays","text":"Write a C# function to find sum of products of all possible subarrays.","code":"public long SumOfSubarrayProd(int[] arr, int n) {\n    long ans = 0;\n    long res = 0;\n    int i = n - 1;\n    while (i \u003E= 0) {\n        long incr = arr[i] * (1 \u002B res);\n        ans \u002B= incr;\n        res = incr;\n        i--;\n    }\n    return ans;\n}","task_id":734,"test_setup_code":"","test_list":["Debug.Assert(SumOfSubarrayProd(new int[] { 1, 2, 3 }, 3) == 20);","Debug.Assert(SumOfSubarrayProd(new int[] { 1, 2 }, 2) == 5);","Debug.Assert(SumOfSubarrayProd(new int[] { 1, 2, 3, 4 }, 4) == 84);"],"challenge_test_list":[]}
{"name":"toggle-bits-except","description":"Toggle inner bits of a number in Python function","text":"Write a C# function to toggle bits of the number except the first and the last bit.","code":"public int SetMiddleBits(int n)  \n{  \n    n |= n \u003E\u003E 1;  \n    n |= n \u003E\u003E 2;  \n    n |= n \u003E\u003E 4;  \n    n |= n \u003E\u003E 8;  \n    n |= n \u003E\u003E 16;  \n    return (n \u003E\u003E 1) ^ 1;  \n}  \n\npublic int ToggleMiddleBits(int n)  \n{  \n    if (n == 1)  \n    {  \n        return 1;  \n    }  \n    return n ^ SetMiddleBits(n);  \n}","task_id":735,"test_setup_code":"","test_list":["Debug.Assert(ToggleMiddleBits(9) == 15);","Debug.Assert(ToggleMiddleBits(10) == 12);","Debug.Assert(ToggleMiddleBits(11) == 13);"],"challenge_test_list":[]}
{"name":"left-insert-point","description":"Find the left insertion point in sorted order","text":"Write a function to locate the left insertion point for a specified value in sorted order.","code":"using System.Collections.Generic;\n\npublic class Program\n{\n    public static int LeftInsertion(List\u003Cint\u003E a, int x)\n    {\n        return a.BinarySearch(x) \u003E= 0 ? a.BinarySearch(x) : ~a.BinarySearch(x);\n    }\n}","task_id":736,"test_setup_code":"","test_list":["Debug.Assert(LeftInsertion(new List\u003Cint\u003E { 1, 2, 4, 5 }, 6) == 4);","Debug.Assert(LeftInsertion(new List\u003Cint\u003E { 1, 2, 4, 5 }, 3) == 2);","Debug.Assert(LeftInsertion(new int[] { 1, 2, 4, 5 }, 7) == 4);"],"challenge_test_list":[]}
{"name":"check-vowel-start","description":"Check if a string starts with a vowel using regex","text":"Write a function to check whether the given string is starting with a vowel or not using regex.","code":"using System.Text.RegularExpressions;\n\npublic class StringChecker\n{\n    private static string regex = \u0022^[aeiouAEIOU][A-Za-z0-9_]*\u0022;\n\n    public static string CheckStr(string inputString)\n    {\n        if (Regex.IsMatch(inputString, regex))\n        {\n            return \u0022Valid\u0022;\n        }\n        else\n        {\n            return \u0022Invalid\u0022;\n        }\n    }\n}","task_id":737,"test_setup_code":"","test_list":["Debug.Assert(CheckStr(\u0022annie\u0022) == \u0022Valid\u0022);","Debug.Assert(CheckStr(\u0022dawood\u0022) == \u0022Invalid\u0022);","Debug.Assert(CheckStr(\u0022Else\u0022) == \u0022Valid\u0022);"],"challenge_test_list":[]}
{"name":"geo-sum-n-1","description":"Compute geometric sum for n minus one","text":"Write a function to calculate the geometric sum of n-1.","code":"public double GeometricSum(int n)\n{\n    if (n \u003C 0)\n    {\n        return 0;\n    }\n    else\n    {\n        return 1.0 / Math.Pow(2, n) \u002B GeometricSum(n - 1);\n    }\n}","task_id":738,"test_setup_code":"","test_list":["Debug.Assert(GeometricSum(7) == 1.9921875);","Debug.Assert(GeometricSum(4) == 1.9375);","Debug.Assert(GeometricSum(8) == 1.99609375);"],"challenge_test_list":[]}
{"name":"smallest-tri-num","description":"Find index of smallest triangular number with n digits","text":"Write a C# function to find the index of smallest triangular number with n digits.","code":"public int FindIndex(int n) \n{ \n    double x = Math.Sqrt(2 * Math.Pow(10, (n - 1))); \n    return (int)Math.Round(x); \n}","task_id":739,"test_setup_code":"","test_list":["Debug.Assert(FindIndex(2) == 4);","Debug.Assert(FindIndex(3) == 14);","Debug.Assert(FindIndex(4) == 45);"],"challenge_test_list":[]}
{"name":"tuple-to-dict","description":"Convert tuple to key-value dictionary from pairs","text":"Write a function to convert the given tuple to a key-value dictionary using adjacent elements.","code":"public Dictionary\u003CT, U\u003E TupleToDict\u003CT, U\u003E(Tuple\u003CT, U\u003E testTup)\n{\n    var res = new Dictionary\u003CT, U\u003E();\n    for (int idx = 0; idx \u003C testTup.Length; idx \u002B= 2)\n    {\n        res[testTup[idx]] = testTup[idx \u002B 1];\n    }\n    return res;\n}","task_id":740,"test_setup_code":"","test_list":["Debug.Assert(TupleToDict(new Tuple\u003Cint, int, int, int, int, int\u003E(1, 5, 7, 10, 13, 5)).SequenceEqual(new Dictionary\u003Cint, int\u003E { { 1, 5 }, { 7, 10 }, { 13, 5 } }));","Debug.Assert(TupleToDict(new int[] { 1, 2, 3, 4, 5, 6 }).SequenceEqual(new Dictionary\u003Cint, int\u003E { { 1, 2 }, { 3, 4 }, { 5, 6 } }));","Debug.Assert(TupleToDict((7, 8, 9, 10, 11, 12)).SequenceEqual(new Dictionary\u003Cint, int\u003E { { 7, 8 }, { 9, 10 }, { 11, 12 } }));"],"challenge_test_list":[]}
{"name":"all-same-chars","description":"Check if all characters in a string are the same","text":"Write a C# function to check whether all the characters are same or not.","code":"public static bool AllCharactersSame(string s) \n{\n    int n = s.Length;\n    for (int i = 1; i \u003C n; i\u002B\u002B) \n    {\n        if (s[i] != s[0]) \n        {\n            return false;\n        }\n    }\n    return true;\n}","task_id":741,"test_setup_code":"","test_list":["Debug.Assert(AllCharactersSame(\u0022python\u0022) == false);","Debug.Assert(AllCharactersSame(\u0022aaa\u0022) == true);","Debug.Assert(AllCharactersSame(\u0022data\u0022) == false);"],"challenge_test_list":[]}
{"name":"tetrahedron-area","description":"Calculate the area of a tetrahedron in Python","text":"Write a function to caluclate the area of a tetrahedron.","code":"public double AreaTetrahedron(double side) \n{\n    double area = Math.Sqrt(3) * (side * side);\n    return area;\n}","task_id":742,"test_setup_code":"","test_list":["Debug.Assert(AreaTetrahedron(3) == 15.588457268119894);","Debug.Assert(AreaTetrahedron(20) == 692.8203230275509);","Debug.Assert(AreaTetrahedron(10) == 173.20508075688772);"],"challenge_test_list":[]}
{"name":"rotate-list-right","description":"Rotate a list to the right by a specified amount","text":"Write a function to rotate a given list by specified number of items to the right direction.","code":"public List\u003CT\u003E RotateRight\u003CT\u003E(List\u003CT\u003E list1, int m, int n)\n{\n    var result = list1.Skip(list1.Count - m).ToList().Concat(list1.Take(list1.Count - n)).ToList();\n    return result;\n}","task_id":743,"test_setup_code":"","test_list":["Debug.Assert(RotateRight(new List\u003Cint\u003E { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, 3, 4).SequenceEqual(new List\u003Cint\u003E { 8, 9, 10, 1, 2, 3, 4, 5, 6 }));","Debug.Assert(RotateRight(new List\u003Cint\u003E { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, 2, 2).SequenceEqual(new List\u003Cint\u003E { 9, 10, 1, 2, 3, 4, 5, 6, 7, 8 }));","Debug.Assert(RotateRight(new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, 5, 2).SequenceEqual(new int[] { 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8 }));"],"challenge_test_list":[]}
{"name":"check-none-value","description":"Check for None values in a given tuple","text":"Write a function to check if the given tuple has any none value or not.","code":"bool CheckNone(Tuple\u003Cobject\u003E[] testTup) {\n    bool res = testTup.Any(ele =\u003E ele == null);\n    return res;\n}","task_id":744,"test_setup_code":"","test_list":["Debug.Assert(CheckNone(new Tuple\u003Cint, int, int, int, int\u003E(10, 4, 5, 6, null)) == true);","Debug.Assert(CheckNone(new int[] { 7, 8, 9, 11, 14 }) == false);","Debug.Assert(CheckNone(new object[] { 1, 2, 3, 4, null }) == true);"],"challenge_test_list":[]}
{"name":"divisible-by-digits","description":"Find numbers divisible by their own digits","text":"Write a function to find numbers within a given range where every number is divisible by every digit it contains.","code":"public List\u003Cint\u003E DivisibleByDigits(int startnum, int endnum)\n{\n    return Enumerable.Range(startnum, endnum - startnum \u002B 1)\n                     .Where(n =\u003E !n.ToString().Any(x =\u003E int.Parse(x.ToString()) == 0 || n % int.Parse(x.ToString()) != 0))\n                     .ToList();\n}","task_id":745,"test_setup_code":"","test_list":["Debug.Assert(DivisibleByDigits(1, 22).SequenceEqual(new List\u003Cint\u003E { 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22 }));","Debug.Assert(DivisibleByDigits(1, 15).SequenceEqual(new List\u003Cint\u003E { 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15 }));","Debug.Assert(DivisibleByDigits(20, 25).SequenceEqual(new List\u003Cint\u003E { 22, 24 }));"],"challenge_test_list":[]}
{"name":"area-of-sector","description":"Calculate the area of a circular sector","text":"Write a function to find area of a sector.","code":"public static double? SectorArea(double r, double a)\n{\n    double pi = 22.0 / 7.0;\n    if (a \u003E= 360)\n    {\n        return null;\n    }\n    double sectorArea = (pi * r * r) * (a / 360);\n    return sectorArea;\n}","task_id":746,"test_setup_code":"","test_list":["Debug.Assert(SectorArea(4, 45) == 6.285714285714286);","Debug.Assert(SectorArea(9, 45) == 31.82142857142857);\n\ndouble SectorArea(double radius, double angle)\n{\n    return (Math.PI * radius * radius * angle) / 360.0;\n}","Debug.Assert(SectorArea(9, 360) == null);"],"challenge_test_list":[]}
{"name":"longest-common-sub","description":"Find the longest common subsequence of three strings","text":"Write a function to find the longest common subsequence for the given three string sequence.","code":"public int LcsOfThree(char[] X, char[] Y, char[] Z, int m, int n, int o) \n{\n    int[,,] L = new int[m \u002B 1, n \u002B 1, o \u002B 1];\n    for (int i = 0; i \u003C= m; i\u002B\u002B) \n    {\n        for (int j = 0; j \u003C= n; j\u002B\u002B) \n        {\n            for (int k = 0; k \u003C= o; k\u002B\u002B) \n            {\n                if (i == 0 || j == 0 || k == 0) \n                {\n                    L[i, j, k] = 0;\n                }\n                else if (X[i - 1] == Y[j - 1] \u0026\u0026 X[i - 1] == Z[k - 1]) \n                {\n                    L[i, j, k] = L[i - 1, j - 1, k - 1] \u002B 1;\n                }\n                else \n                {\n                    L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n    }\n    return L[m, n, o];\n}","task_id":747,"test_setup_code":"","test_list":["Debug.Assert(LcsOfThree(\u0022AGGT12\u0022, \u002212TXAYB\u0022, \u002212XBA\u0022, 6, 7, 5) == 2);","Debug.Assert(LcsOfThree(\u0022Reels\u0022, \u0022Reelsfor\u0022, \u0022ReelsforReels\u0022, 5, 8, 13) == 5);","Debug.Assert(LcsOfThree(\u0022abcd1e2\u0022, \u0022bc12ea\u0022, \u0022bd1ea\u0022, 7, 6, 5) == 3);"],"challenge_test_list":[]}
{"name":"capital-words-split","description":"Insert spaces before capitalized words in a string","text":"Write a function to put spaces between words starting with capital letters in a given string by using regex.","code":"using System.Text.RegularExpressions;\n\npublic string CapitalWordsSpaces(string str1)\n{\n    return Regex.Replace(str1, @\u0022(\\w)([A-Z])\u0022, \u0022$1 $2\u0022);\n}","task_id":748,"test_setup_code":"","test_list":["Debug.Assert(CapitalWordsSpaces(\u0022Python\u0022) == \u0022Python\u0022);","Debug.Assert(CapitalWordsSpaces(\u0022PythonProgrammingExamples\u0022) == \u0022Python Programming Examples\u0022);","Debug.Assert(CapitalWordsSpaces(\u0022GetReadyToBeCodingFreak\u0022) == \u0022Get Ready To Be Coding Freak\u0022);"],"challenge_test_list":[]}
{"name":"sort-numbers-list","description":"Sort a list of numeric strings in ascending order","text":"Write a function to sort a given list of strings of numbers numerically.","code":"public List\u003Cint\u003E SortNumericStrings(List\u003Cstring\u003E numsStr) {\n    List\u003Cint\u003E result = numsStr.Select(x =\u003E int.Parse(x)).ToList();\n    result.Sort();\n    return result;\n}","task_id":749,"test_setup_code":"","test_list":["Debug.Assert(SortNumericStrings(new string[] { \u00224\u0022, \u002212\u0022, \u002245\u0022, \u00227\u0022, \u00220\u0022, \u0022100\u0022, \u0022200\u0022, \u0022-12\u0022, \u0022-500\u0022 }).SequenceEqual(new int[] { -500, -12, 0, 4, 7, 12, 45, 100, 200 }));","Debug.Assert(SortNumericStrings(new string[] { \u00222\u0022, \u00223\u0022, \u00228\u0022, \u00224\u0022, \u00227\u0022, \u00229\u0022, \u00228\u0022, \u00222\u0022, \u00226\u0022, \u00225\u0022, \u00221\u0022, \u00226\u0022, \u00221\u0022, \u00222\u0022, \u00223\u0022, \u00224\u0022, \u00226\u0022, \u00229\u0022, \u00221\u0022, \u00222\u0022 }).SequenceEqual(new int[] { 1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9 }));","Debug.Assert(SortNumericStrings(new List\u003Cstring\u003E { \u00221\u0022, \u00223\u0022, \u00225\u0022, \u00227\u0022, \u00221\u0022, \u00223\u0022, \u002213\u0022, \u002215\u0022, \u002217\u0022, \u00225\u0022, \u00227 \u0022, \u00229\u0022, \u00221\u0022, \u002211\u0022 }).SequenceEqual(new List\u003Cint\u003E { 1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17 }));"],"challenge_test_list":[]}
{"name":"add-tuple-to-list","description":"Add a tuple to a specified list in a function","text":"Write a function to add the given tuple to the given list.","code":"public List\u003Cint\u003E AddTuple(List\u003Cint\u003E testList, Tuple\u003Cint, int\u003E testTup) \n{\n    testList.Add(testTup.Item1);\n    testList.Add(testTup.Item2);\n    return testList;\n}","task_id":750,"test_setup_code":"","test_list":["Debug.Assert(AddTuple(new List\u003Cint\u003E { 5, 6, 7 }, (9, 10)).SequenceEqual(new List\u003Cint\u003E { 5, 6, 7, 9, 10 }));","Debug.Assert(AddTuple(new List\u003Cint\u003E { 6, 7, 8 }, (10, 11)).SequenceEqual(new List\u003Cint\u003E { 6, 7, 8, 10, 11 }));","Debug.Assert(AddTuple(new List\u003Cint\u003E { 7, 8, 9 }, Tuple.Create(11, 12)).SequenceEqual(new List\u003Cint\u003E { 7, 8, 9, 11, 12 }));"],"challenge_test_list":[]}
{"name":"min-heap-checker","description":"Check if an array is a min heap representation","text":"Write a function to check if the given array represents min heap or not.","code":"public bool CheckMinHeap(int[] arr, int i) {\n    if (2 * i \u002B 2 \u003E= arr.Length) {\n        return true;\n    }\n    bool leftChild = (arr[i] \u003C= arr[2 * i \u002B 1]) \u0026\u0026 CheckMinHeap(arr, 2 * i \u002B 1);\n    bool rightChild = (2 * i \u002B 2 == arr.Length) || (arr[i] \u003C= arr[2 * i \u002B 2] \u0026\u0026 CheckMinHeap(arr, 2 * i \u002B 2));\n    return leftChild \u0026\u0026 rightChild;\n}","task_id":751,"test_setup_code":"","test_list":["Debug.Assert(CheckMinHeap(new int[] { 1, 2, 3, 4, 5, 6 }, 0) == true);","Debug.Assert(CheckMinHeap(new int[] { 2, 3, 4, 5, 10, 15 }, 0) == true);","Debug.Assert(CheckMinHeap(new int[] { 2, 10, 4, 5, 3, 15 }, 0) == false);"],"challenge_test_list":[]}
{"name":"jacobsthal-nth","description":"Find the nth jacobsthal number in a sequence","text":"Write a function to find the nth jacobsthal number.","code":"public int JacobsthalNum(int n) \n{ \n    int[] dp = new int[n \u002B 1]; \n    dp[0] = 0; \n    dp[1] = 1; \n    for (int i = 2; i \u003C= n; i\u002B\u002B) \n    { \n        dp[i] = dp[i - 1] \u002B 2 * dp[i - 2]; \n    } \n    return dp[n]; \n}","task_id":752,"test_setup_code":"","test_list":["Debug.Assert(JacobsthalNum(5) == 11);","Debug.Assert(JacobsthalNum(2) == 1);","Debug.Assert(JacobsthalNum(4) == 5);"],"challenge_test_list":[]}
{"name":"min-k-records","description":"Find minimum k records from a list of tuples","text":"Write a function to find minimum k records from tuple list.","code":"public List\u003CTuple\u003Cint, int\u003E\u003E MinK(List\u003CTuple\u003Cint, int\u003E\u003E testList, int K) \n{\n    var res = testList.OrderBy(x =\u003E x.Item2).Take(K).ToList();\n    return res;\n}","task_id":753,"test_setup_code":"","test_list":["Debug.Assert(MinK(new Tuple\u003Cstring, int\u003E[] { Tuple.Create(\u0022Manjeet\u0022, 10), Tuple.Create(\u0022Akshat\u0022, 4), Tuple.Create(\u0022Akash\u0022, 2), Tuple.Create(\u0022Nikhil\u0022, 8) }, 2).SequenceEqual(new Tuple\u003Cstring, int\u003E[] { Tuple.Create(\u0022Akash\u0022, 2), Tuple.Create(\u0022Akshat\u0022, 4) }));","Debug.Assert(MinK(new List\u003C(string, int)\u003E { (\u0022Sanjeev\u0022, 11), (\u0022Angat\u0022, 5), (\u0022Akash\u0022, 3), (\u0022Nepin\u0022, 9) }, 3).SequenceEqual(new List\u003C(string, int)\u003E { (\u0022Akash\u0022, 3), (\u0022Angat\u0022, 5), (\u0022Nepin\u0022, 9) }));","Debug.Assert(MinK(new List\u003CTuple\u003Cstring, int\u003E\u003E { Tuple.Create(\u0022tanmay\u0022, 14), Tuple.Create(\u0022Amer\u0022, 11), Tuple.Create(\u0022Ayesha\u0022, 9), Tuple.Create(\u0022SKD\u0022, 16) }, 1).SequenceEqual(new List\u003CTuple\u003Cstring, int\u003E\u003E { Tuple.Create(\u0022Ayesha\u0022, 9) }));"],"challenge_test_list":[]}
{"name":"common-index-els","description":"Find common index elements in three lists","text":"Write a function to find common index elements from three lists.","code":"public List\u003CT\u003E ExtractIndexList\u003CT\u003E(List\u003CT\u003E l1, List\u003CT\u003E l2, List\u003CT\u003E l3)\n{\n    List\u003CT\u003E result = new List\u003CT\u003E();\n    for (int i = 0; i \u003C l1.Count; i\u002B\u002B)\n    {\n        T m = l1[i];\n        T n = l2[i];\n        T o = l3[i];\n        if (EqualityComparer\u003CT\u003E.Default.Equals(m, n) \u0026\u0026 EqualityComparer\u003CT\u003E.Default.Equals(n, o))\n        {\n            result.Add(m);\n        }\n    }\n    return result;\n}","task_id":754,"test_setup_code":"","test_list":["Debug.Assert(ExtractIndexList(new List\u003Cint\u003E { 1, 1, 3, 4, 5, 6, 7 }, new List\u003Cint\u003E { 0, 1, 2, 3, 4, 5, 7 }, new List\u003Cint\u003E { 0, 1, 2, 3, 4, 5, 7 }).SequenceEqual(new List\u003Cint\u003E { 1, 7 }));","Debug.Assert(ExtractIndexList(new List\u003Cint\u003E { 1, 1, 3, 4, 5, 6, 7 }, new List\u003Cint\u003E { 0, 1, 2, 3, 4, 6, 5 }, new List\u003Cint\u003E { 0, 1, 2, 3, 4, 6, 7 }).SequenceEqual(new List\u003Cint\u003E { 1, 6 }));","Debug.Assert(ExtractIndexList(new List\u003Cint\u003E { 1, 1, 3, 4, 6, 5, 6 }, new List\u003Cint\u003E { 0, 1, 2, 3, 4, 5, 7 }, new List\u003Cint\u003E { 0, 1, 2, 3, 4, 5, 7 }).SequenceEqual(new List\u003Cint\u003E { 1, 5 }));"],"challenge_test_list":[]}
{"name":"second-smallest","description":"Find the second smallest number in a list","text":"Write a function to find the second smallest number in a list.","code":"public int? SecondSmallest(List\u003Cint\u003E numbers)\n{\n    if (numbers.Count \u003C 2)\n    {\n        return null;\n    }\n    if (numbers.Count == 2 \u0026\u0026 numbers[0] == numbers[1])\n    {\n        return null;\n    }\n    HashSet\u003Cint\u003E dupItems = new HashSet\u003Cint\u003E();\n    List\u003Cint\u003E uniqItems = new List\u003Cint\u003E();\n    foreach (int x in numbers)\n    {\n        if (!dupItems.Contains(x))\n        {\n            uniqItems.Add(x);\n            dupItems.Add(x);\n        }\n    }\n    uniqItems.Sort();\n    return uniqItems[1];\n}","task_id":755,"test_setup_code":"","test_list":["Debug.Assert(SecondSmallest(new int[] { 1, 2, -8, -2, 0, -2 }) == -2);","Debug.Assert(SecondSmallest(new double[] { 1, 1, -0.5, 0, 2, -2, -2 }) == -0.5);","Debug.Assert(SecondSmallest(new int[] { 2, 2 }) == null);"],"challenge_test_list":[]}
{"name":"a-b-match-string","description":"Match a string with an a followed by optional b","text":"Write a function that matches a string that has an a followed by zero or one \u0027b\u0027.","code":"public string TextMatchZeroOne(string text) \n{\n    string patterns = \u0022ab?\u0022;\n    if (System.Text.RegularExpressions.Regex.IsMatch(text, patterns)) \n    {\n        return \u0022Found a match!\u0022;\n    } \n    else \n    {\n        return \u0022Not matched!\u0022;\n    }\n}","task_id":756,"test_setup_code":"","test_list":["Debug.Assert(TextMatchZeroOne(\u0022ac\u0022) == \u0022Found a match!\u0022);","Debug.Assert(TextMatchZeroOne(\u0022dc\u0022) == \u0022Not matched!\u0022);","Debug.Assert(TextMatchZeroOne(\u0022abbbba\u0022) == \u0022Found a match!\u0022);"],"challenge_test_list":[]}
{"name":"reverse-string-pairs","description":"Count reverse string pairs in a list","text":"Write a function to count the pairs of reverse strings in the given string list.","code":"public static string CountReversePairs(List\u003Cstring\u003E testList)\n{\n    int res = testList.SelectMany((value, idx) =\u003E \n        Enumerable.Range(idx, testList.Count - idx)\n            .Count(idxn =\u003E testList[idxn] == string.Concat(testList[idx].Reverse())))\n        .Sum();\n    return res.ToString();\n}","task_id":757,"test_setup_code":"","test_list":["Debug.Assert(CountReversePairs(new string[] { \u0022julia\u0022, \u0022best\u0022, \u0022tseb\u0022, \u0022for\u0022, \u0022ailuj\u0022 }) == 2);","Debug.Assert(CountReversePairs(new string[] { \u0022geeks\u0022, \u0022best\u0022, \u0022for\u0022, \u0022skeeg\u0022 }) == \u00271\u0027);","Debug.Assert(CountReversePairs(new string[] { \u0022makes\u0022, \u0022best\u0022, \u0022sekam\u0022, \u0022for\u0022, \u0022rof\u0022 }) == \u00222\u0022);"],"challenge_test_list":[]}
{"name":"unique-lists-count","description":"Count unique lists in a given list of lists","text":"Write a function to count number of unique lists within a list.","code":"public Dictionary\u003C(int, int), int\u003E UniqueSublists(List\u003CList\u003Cint\u003E\u003E list1) {\n    var result = new Dictionary\u003C(int, int), List\u003Cint\u003E\u003E();\n    foreach (var l in list1) {\n        var key = (l[0], l[1]);\n        if (!result.ContainsKey(key)) {\n            result[key] = new List\u003Cint\u003E();\n        }\n        result[key].Add(1);\n    }\n    var finalResult = new Dictionary\u003C(int, int), int\u003E();\n    foreach (var kvp in result) {\n        finalResult[kvp.Key] = kvp.Value.Sum();\n    }\n    return finalResult;\n}","task_id":758,"test_setup_code":"","test_list":["Debug.Assert(UniqueSublists(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 1, 3 }, new List\u003Cint\u003E { 5, 7 }, new List\u003Cint\u003E { 1, 3 }, new List\u003Cint\u003E { 13, 15, 17 }, new List\u003Cint\u003E { 5, 7 }, new List\u003Cint\u003E { 9, 11 } }) .SequenceEqual(new Dictionary\u003CTuple\u003Cint, int\u003E, int\u003E { { Tuple.Create(1, 3), 2 }, { Tuple.Create(5, 7), 2 }, { Tuple.Create(13, 15, 17), 1 }, { Tuple.Create(9, 11), 1 } }));","Debug.Assert(UniqueSublists(new List\u003CList\u003Cstring\u003E\u003E { new List\u003Cstring\u003E { \u0022green\u0022, \u0022orange\u0022 }, new List\u003Cstring\u003E { \u0022black\u0022 }, new List\u003Cstring\u003E { \u0022green\u0022, \u0022orange\u0022 }, new List\u003Cstring\u003E { \u0022white\u0022 } }).SequenceEqual(new Dictionary\u003C(string, string), int\u003E { { (\u0022green\u0022, \u0022orange\u0022), 2 }, { (\u0022black\u0022), 1 }, { (\u0022white\u0022), 1 } }));","Debug.Assert(UniqueSublists(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 10, 20, 30, 40 }, new List\u003Cint\u003E { 60, 70, 50, 50 }, new List\u003Cint\u003E { 90, 100, 200 } }).SequenceEqual(new Dictionary\u003CTuple\u003Cint, int, int, int\u003E, int\u003E { { Tuple.Create(10, 20, 30, 40), 1 }, { Tuple.Create(60, 70, 50, 50), 1 }, { Tuple.Create(90, 100, 200), 1 } }));"],"challenge_test_list":[]}
{"name":"\u0060check-decimal-2\u0060","description":"Check decimal values for two decimal precision","text":"Write a function to check a decimal with a precision of 2.","code":"public bool IsDecimal(string num) \n{\n    var dnumre = new System.Text.RegularExpressions.Regex(@\u0022^[0-9]\u002B(\\.[0-9]{1,2})?$\u0022);\n    var result = dnumre.IsMatch(num);\n    return result;\n}","task_id":759,"test_setup_code":"","test_list":["Debug.Assert(IsDecimal(\u0022123.11\u0022) == true);","Debug.Assert(IsDecimal(\u0022e666.86\u0022) == false);","Debug.Assert(IsDecimal(\u00223.124587\u0022) == false);"],"challenge_test_list":[]}
{"name":"distinct-check.py","description":"Check if an array has one distinct element","text":"Write a C# function to check whether an array contains only one distinct element or not.","code":"public string UniqueElement(int[] arr, int n) {\n    HashSet\u003Cint\u003E s = new HashSet\u003Cint\u003E(arr);\n    if (s.Count == 1) {\n        return \u0022YES\u0022;\n    } else {\n        return \u0022NO\u0022;\n    }\n}","task_id":760,"test_setup_code":"","test_list":["Debug.Assert(UniqueElement(new int[] { 1, 1, 1 }, 3) == \u0022YES\u0022);","Debug.Assert(UniqueElement(new int[] { 1, 2, 1, 2 }, 4) == \u0022NO\u0022);","Debug.Assert(UniqueElement(new int[] { 1, 2, 3, 4, 5 }, 5) == \u0022NO\u0022);"],"challenge_test_list":[]}
{"name":"arc-length-angle","description":"Calculate arc length from angle and radius","text":"Write a function to caluclate arc length of an angle.","code":"public static double? ArcLength(double d, double a)\n{\n    double pi = 22.0 / 7.0;\n    if (a \u003E= 360)\n    {\n        return null;\n    }\n    double arclength = (pi * d) * (a / 360);\n    return arclength;\n}","task_id":761,"test_setup_code":"","test_list":["Debug.Assert(ArcLength(9, 45) == 3.5357142857142856);","Debug.Assert(ArcLength(9, 480) == null);","Debug.Assert(ArcLength(5, 270) == 11.785714285714285);"],"challenge_test_list":[]}
{"name":"check-30-days","description":"Check if a month has 30 days or not","text":"Write a function to check whether the given month number contains 30 days or not.","code":"public bool CheckMonthNumberNumber(int monthnum3) \n{\n    if (monthnum3 == 4 || monthnum3 == 6 || monthnum3 == 9 || monthnum3 == 11) \n    {\n        return true;\n    } \n    else \n    {\n        return false;\n    }\n}","task_id":762,"test_setup_code":"","test_list":["Debug.Assert(CheckMonthNumberNumber(6) == true);","Debug.Assert(CheckMonthNumberNumber(2) == false);","Debug.Assert(CheckMonthNumberNumber(12) == false);"],"challenge_test_list":[]}
{"name":"min-diff-array","description":"Find minimum difference in array elements","text":"Write a C# function to find the minimum difference between any two elements in a given array.","code":"public static long FindMinDiff(int[] arr, int n) \n{ \n    Array.Sort(arr); \n    long diff = (long)1e20; \n    for (int i = 0; i \u003C n - 1; i\u002B\u002B) \n    { \n        if (arr[i \u002B 1] - arr[i] \u003C diff) \n        { \n            diff = arr[i \u002B 1] - arr[i]; \n        } \n    } \n    return diff; \n}","task_id":763,"test_setup_code":"","test_list":["Debug.Assert(FindMinDiff(new int[] { 1, 5, 3, 19, 18, 25 }, 6) == 1);","Debug.Assert(FindMinDiff(new int[] { 4, 3, 2, 6 }, 4) == 1);","Debug.Assert(FindMinDiff(new int[] { 30, 5, 20, 9 }, 4) == 4);"],"challenge_test_list":[]}
{"name":"count-numbers-in-string","description":"Count numeric values in a string with Python function","text":"Write a C# function to count numeric values in a given string.","code":"public int NumberCtr(string str) {\n    int numberCtr = 0;\n    for (int i = 0; i \u003C str.Length; i\u002B\u002B) {\n        if (str[i] \u003E= \u00270\u0027 \u0026\u0026 str[i] \u003C= \u00279\u0027) numberCtr\u002B\u002B;\n    }\n    return numberCtr;\n}","task_id":764,"test_setup_code":"","test_list":["Debug.Assert(NumberCtr(\u0022program2bedone\u0022) == 1);","Debug.Assert(NumberCtr(\u00223wonders\u0022) == 1);","Debug.Assert(NumberCtr(\u0022123\u0022) == 3);"],"challenge_test_list":[]}
{"name":"nth-polite-num","description":"Find the nth polite number using a function","text":"Write a function to find nth polite number.","code":"public int IsPolite(int n) \n{\n    n = n \u002B 1;\n    return (int)(n \u002B (Math.Log(n \u002B Math.Log(n, 2), 2)));\n}","task_id":765,"test_setup_code":"","test_list":["Debug.Assert(IsPolite(7) == 11);","Debug.Assert(IsPolite(4) == 7);","Debug.Assert(IsPolite(9) == 13);"],"challenge_test_list":[]}
{"name":"pairwise-iter-each","description":"Iterate over consecutive item pairs in a list","text":"Write a function to iterate over all pairs of consecutive items in a given list.","code":"public List\u003C(T, T)\u003E PairWise\u003CT\u003E(List\u003CT\u003E l1)\n{\n    var temp = new List\u003C(T, T)\u003E();\n    for (int i = 0; i \u003C l1.Count - 1; i\u002B\u002B)\n    {\n        var currentElement = l1[i];\n        var nextElement = l1[i \u002B 1];\n        var x = (currentElement, nextElement);\n        temp.Add(x);\n    }\n    return temp;\n}","task_id":766,"test_setup_code":"","test_list":["Debug.Assert(PairWise(new List\u003Cint\u003E { 1, 1, 2, 3, 3, 4, 4, 5 }).SequenceEqual(new List\u003C(int, int)\u003E { (1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5) }));","Debug.Assert(PairWise(new List\u003Cint\u003E { 1, 5, 7, 9, 10 }).SequenceEqual(new List\u003CTuple\u003Cint, int\u003E\u003E { Tuple.Create(1, 5), Tuple.Create(5, 7), Tuple.Create(7, 9), Tuple.Create(9, 10) }));","Debug.Assert(PairWise(new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }).SequenceEqual(new Tuple\u003Cint, int\u003E[] { \n    Tuple.Create(1, 2), Tuple.Create(2, 3), Tuple.Create(3, 4), \n    Tuple.Create(4, 5), Tuple.Create(5, 6), Tuple.Create(6, 7), \n    Tuple.Create(7, 8), Tuple.Create(8, 9), Tuple.Create(9, 10) }));"],"challenge_test_list":[]}
{"name":"count-pairs-sum","description":"Count pairs with specified sum in a list","text":"Write a C# function to count the number of pairs whose sum is equal to \u2018sum\u2019.","code":"public int GetPairsCount(int[] arr, int n, int sum)  \n{  \n    int count = 0;  \n    for (int i = 0; i \u003C n; i\u002B\u002B)  \n    {  \n        for (int j = i \u002B 1; j \u003C n; j\u002B\u002B)  \n        {  \n            if (arr[i] \u002B arr[j] == sum)  \n            {  \n                count\u002B\u002B;  \n            }  \n        }  \n    }  \n    return count;  \n}","task_id":767,"test_setup_code":"","test_list":["Debug.Assert(GetPairsCount(new int[] { 1, 1, 1, 1 }, 4, 2) == 6);","Debug.Assert(GetPairsCount(new int[] { 1, 5, 7, -1, 5 }, 5, 6) == 3);","Debug.Assert(GetPairsCount(new int[] { 1, -2, 3 }, 3, 1) == 1);"],"challenge_test_list":[]}
{"name":"odd-parity-check","description":"Check if a number has odd parity in Python","text":"Write a C# function to check for odd parity of a given number.","code":"public bool CheckOddParity(int x) \n{\n    int parity = 0;\n    while (x != 0) \n    {\n        x = x \u0026 (x - 1);\n        parity \u002B= 1;\n    }\n    return parity % 2 == 1;\n}","task_id":768,"test_setup_code":"","test_list":["Debug.Assert(CheckOddParity(13) == true);","Debug.Assert(CheckOddParity(21) == true);","Debug.Assert(CheckOddParity(18) == false);"],"challenge_test_list":[]}
{"name":"list-diff-finder","description":"Calculate the difference between two lists in Python","text":"Write a C# function to get the difference between two lists.","code":"public List\u003Cint\u003E Diff(List\u003Cint\u003E li1, List\u003Cint\u003E li2) \n{\n    return new List\u003Cint\u003E(new HashSet\u003Cint\u003E(li1).Except(li2).Union(new HashSet\u003Cint\u003E(li2).Except(li1)));\n}","task_id":769,"test_setup_code":"","test_list":["Debug.Assert(Diff(new int[] { 10, 15, 20, 25, 30, 35, 40 }, new int[] { 25, 40, 35 }).SequenceEqual(new int[] { 10, 20, 30, 15 }));","Debug.Assert(Diff(new int[] { 1, 2, 3, 4, 5 }, new int[] { 6, 7, 1 }).SequenceEqual(new int[] { 2, 3, 4, 5, 6, 7 }));","Debug.Assert(Diff(new List\u003Cint\u003E { 1, 2, 3 }, new List\u003Cint\u003E { 6, 7, 1 }).SequenceEqual(new List\u003Cint\u003E { 2, 3, 6, 7 }));"],"challenge_test_list":[]}
{"name":"sum-odd-fourth-power","description":"Sum of fourth powers of first n odd numbers","text":"Write a C# function to find the sum of fourth power of first n odd natural numbers.","code":"public int OddNumSum(int n) \n{ \n    int j = 0; \n    int sm = 0; \n    for (int i = 1; i \u003C= n; i\u002B\u002B) \n    { \n        j = (2 * i - 1); \n        sm \u002B= (j * j * j * j); \n    } \n    return sm; \n}","task_id":770,"test_setup_code":"","test_list":["Debug.Assert(OddNumSum(2) == 82);","Debug.Assert(OddNumSum(3) == 707);","Debug.Assert(OddNumSum(4) == 3108);"],"challenge_test_list":[]}
{"name":"balanced-checker","description":"Check if the expression has balanced brackets","text":"Write a function to check if the given expression is balanced or not.","code":"using System.Collections.Generic;\n\npublic class ExpressionChecker\n{\n    public static bool CheckExpression(string exp)\n    {\n        if (exp.Length % 2 != 0)\n        {\n            return false;\n        }\n        \n        Stack\u003Cchar\u003E stack = new Stack\u003Cchar\u003E();\n        \n        foreach (char ch in exp)\n        {\n            if (ch == \u0027(\u0027 || ch == \u0027{\u0027 || ch == \u0027[\u0027)\n            {\n                stack.Push(ch);\n            }\n            if (ch == \u0027)\u0027 || ch == \u0027}\u0027 || ch == \u0027]\u0027)\n            {\n                if (stack.Count == 0)\n                {\n                    return false;\n                }\n                char top = stack.Pop();\n                if ((top == \u0027(\u0027 \u0026\u0026 ch != \u0027)\u0027) || (top == \u0027{\u0027 \u0026\u0026 ch != \u0027}\u0027) || (top == \u0027[\u0027 \u0026\u0026 ch != \u0027]\u0027))\n                {\n                    return false;\n                }\n            }\n        }\n        \n        return stack.Count == 0;\n    }\n}","task_id":771,"test_setup_code":"","test_list":["Debug.Assert(CheckExpression(\u0022{()}[{}]\u0022) == true);","Debug.Assert(CheckExpression(\u0022{()}[{]\u0022) == false);","Debug.Assert(CheckExpression(\u0022{()}[{}][]({})\u0022) == true);"],"challenge_test_list":[]}
{"name":"remove-k-length-words","description":"Remove all words of k length from a string","text":"Write a function to remove all the words with k length in the given string.","code":"public string RemoveLength(string testStr, int K)\n{\n    string[] temp = testStr.Split(\u0027 \u0027);\n    List\u003Cstring\u003E res = new List\u003Cstring\u003E();\n    foreach (string ele in temp)\n    {\n        if (ele.Length != K)\n        {\n            res.Add(ele);\n        }\n    }\n    return string.Join(\u0022 \u0022, res);\n}","task_id":772,"test_setup_code":"","test_list":["Debug.Assert(RemoveLength(\u0022The person is most value tet\u0022, 3) == \u0022person is most value\u0022);","Debug.Assert(RemoveLength(\u0022If you told me about this ok\u0022, 4) == \u0022If you me about ok\u0022);","Debug.Assert(RemoveLength(\u0022Forces of darkeness is come into the play\u0022, 4) == \u0022Forces of darkeness is the\u0022);"],"challenge_test_list":[]}
{"name":"substring-finder","description":"Find substring positions and occurrences in a string","text":"Write a function to find the occurrence and position of the substrings within a string.","code":"using System.Text.RegularExpressions;\n\npublic (string Substring, int Start, int End) OccuranceSubstring(string text, string pattern)\n{\n    foreach (Match match in Regex.Matches(text, pattern))\n    {\n        int s = match.Index;\n        int e = match.Index \u002B match.Length;\n        return (text.Substring(s, e - s), s, e);\n    }\n    return (null, -1, -1);\n}","task_id":773,"test_setup_code":"","test_list":["Debug.Assert(OccuranceSubstring(\u0022python programming, python language\u0022, \u0022python\u0022).Equals(Tuple.Create(\u0022python\u0022, 0, 6)));","Debug.Assert(OccuranceSubstring(\u0022python programming,programming language\u0022, \u0022programming\u0022).Equals((\u0022programming\u0022, 7, 18)));","Debug.Assert(OccuranceSubstring(\u0022python programming,programming language\u0022, \u0022language\u0022).Equals((\u0022language\u0022, 31, 39)));"],"challenge_test_list":[]}
{"name":"valid-email-check","description":"Validate email format using regex in a function","text":"Write a function to check if the string is a valid email address or not using regex.","code":"using System.Text.RegularExpressions;\n\npublic class EmailValidator\n{\n    private static readonly string regex = @\u0022^[a-z0-9]\u002B[\\._]?[a-z0-9]\u002B[@]\\w\u002B[.]\\w{2,3}$\u0022;\n\n    public static string CheckEmail(string email)\n    {\n        if (Regex.IsMatch(email, regex))\n        {\n            return \u0022Valid Email\u0022;\n        }\n        else\n        {\n            return \u0022Invalid Email\u0022;\n        }\n    }\n}","task_id":774,"test_setup_code":"","test_list":["Debug.Assert(CheckEmail(\u0022ankitrai326@gmail.com\u0022) == \u0022Valid Email\u0022);","Debug.Assert(CheckEmail(\u0022my.ownsite@ourearth.org\u0022) == \u0022Valid Email\u0022);","Debug.Assert(CheckEmail(\u0022ankitaoie326.com\u0022) == \u0022Invalid Email\u0022);"],"challenge_test_list":[]}
{"name":"odd-index-check.py","description":"Check if odd indices have odd numbers","text":"Write a C# function to check whether every odd index contains odd numbers of a given list.","code":"public bool OddPosition(List\u003Cint\u003E nums)\n{\n    return nums.Select((num, i) =\u003E num % 2 == i % 2).All(x =\u003E x);\n}","task_id":775,"test_setup_code":"","test_list":["Debug.Assert(OddPosition(new List\u003Cint\u003E { 2, 1, 4, 3, 6, 7, 6, 3 }) == true);","Debug.Assert(OddPosition(new int[] { 4, 1, 2 }) == true);","Debug.Assert(OddPosition(new int[] { 1, 2, 3 }) == false);"],"challenge_test_list":[]}
{"name":"vowel-neighbors","description":"Count characters with vowel neighbors in a string","text":"Write a function to count those characters which have vowels as their neighbors in the given string.","code":"public int CountVowels(string testStr) {\n    int res = 0;\n    char[] vowList = { \u0027a\u0027, \u0027e\u0027, \u0027i\u0027, \u0027o\u0027, \u0027u\u0027 };\n    for (int idx = 1; idx \u003C testStr.Length - 1; idx\u002B\u002B) {\n        if (!vowList.Contains(testStr[idx]) \u0026\u0026 (vowList.Contains(testStr[idx - 1]) || vowList.Contains(testStr[idx \u002B 1]))) {\n            res\u002B\u002B;\n        }\n    }\n    if (!vowList.Contains(testStr[0]) \u0026\u0026 vowList.Contains(testStr[1])) {\n        res\u002B\u002B;\n    }\n    if (!vowList.Contains(testStr[testStr.Length - 1]) \u0026\u0026 vowList.Contains(testStr[testStr.Length - 2])) {\n        res\u002B\u002B;\n    }\n    return res;\n}","task_id":776,"test_setup_code":"","test_list":["Debug.Assert(CountVowels(\u0022bestinstareels\u0022) == 7);","Debug.Assert(CountVowels(\u0022partofthejourneyistheend\u0022) == 12);","Debug.Assert(CountVowels(\u0022amazonprime\u0022) == 5);"],"challenge_test_list":[]}
{"name":"sum-non-repeated","description":"Sum non-repeated elements in an array with Python","text":"Write a C# function to find the sum of non-repeated elements in a given array.","code":"public int FindSum(int[] arr, int n) \n{\n    Array.Sort(arr);\n    int sum = arr[0];\n    for (int i = 0; i \u003C n - 1; i\u002B\u002B) \n    {\n        if (arr[i] != arr[i \u002B 1]) \n        {\n            sum \u002B= arr[i \u002B 1];\n        }\n    }\n    return sum;\n}","task_id":777,"test_setup_code":"","test_list":["Debug.Assert(FindSum(new int[] { 1, 2, 3, 1, 1, 4, 5, 6 }, 8) == 21);","Debug.Assert(FindSum(new int[] { 1, 10, 9, 4, 2, 10, 10, 45, 4 }, 9) == 71);","Debug.Assert(FindSum(new int[] { 12, 10, 9, 45, 2, 10, 10, 45, 10 }, 9) == 78);"],"challenge_test_list":[]}
{"name":"pack-duplicates","description":"Pack consecutive duplicates into sublists","text":"Write a function to pack consecutive duplicates of a given list elements into sublists.","code":"using System.Collections.Generic;\nusing System.Linq;\n\npublic List\u003CList\u003CT\u003E\u003E PackConsecutiveDuplicates\u003CT\u003E(List\u003CT\u003E list1)\n{\n    return list1\n        .Select(g =\u003E new { Key = g, Group = list1.SkipWhile(x =\u003E !EqualityComparer\u003CT\u003E.Default.Equals(x, g)).TakeWhile(x =\u003E EqualityComparer\u003CT\u003E.Default.Equals(x, g)) })\n        .Distinct()\n        .Select(x =\u003E x.Group.ToList())\n        .ToList();\n}","task_id":778,"test_setup_code":"","test_list":["Debug.Assert(PackConsecutiveDuplicates(new List\u003Cint\u003E { 0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 }).SequenceEqual(new List\u003CList\u003Cint\u003E\u003E { \n    new List\u003Cint\u003E { 0, 0 }, \n    new List\u003Cint\u003E { 1 }, \n    new List\u003Cint\u003E { 2 }, \n    new List\u003Cint\u003E { 3 }, \n    new List\u003Cint\u003E { 4, 4 }, \n    new List\u003Cint\u003E { 5 }, \n    new List\u003Cint\u003E { 6, 6, 6 }, \n    new List\u003Cint\u003E { 7 }, \n    new List\u003Cint\u003E { 8 }, \n    new List\u003Cint\u003E { 9 }, \n    new List\u003Cint\u003E { 4, 4 } \n}));","Debug.Assert(PackConsecutiveDuplicates(new List\u003Cint\u003E {10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}).SequenceEqual(new List\u003CList\u003Cint\u003E\u003E {new List\u003Cint\u003E {10, 10}, new List\u003Cint\u003E {15}, new List\u003Cint\u003E {19}, new List\u003Cint\u003E {18, 18}, new List\u003Cint\u003E {17}, new List\u003Cint\u003E {26, 26}, new List\u003Cint\u003E {17}, new List\u003Cint\u003E {18}, new List\u003Cint\u003E {10}}));","Debug.Assert(PackConsecutiveDuplicates(new List\u003Cstring\u003E { \u0022a\u0022, \u0022a\u0022, \u0022b\u0022, \u0022c\u0022, \u0022d\u0022, \u0022d\u0022 }).SequenceEqual(new List\u003CList\u003Cstring\u003E\u003E { new List\u003Cstring\u003E { \u0022a\u0022, \u0022a\u0022 }, new List\u003Cstring\u003E { \u0022b\u0022 }, new List\u003Cstring\u003E { \u0022c\u0022 }, new List\u003Cstring\u003E { \u0022d\u0022, \u0022d\u0022 } }));"],"challenge_test_list":[]}
{"name":"count-uniq-lists","description":"Count unique lists in a given list","text":"Write a function to count the number of unique lists within a list.","code":"public Dictionary\u003CTuple\u003Cint\u003E, int\u003E UniqueSublists(List\u003CList\u003Cint\u003E\u003E list1) \n{\n    var result = new Dictionary\u003CTuple\u003Cint\u003E, List\u003Cint\u003E\u003E();\n    foreach (var l in list1) \n    {\n        var key = Tuple.Create(l.ToArray());\n        if (!result.ContainsKey(key)) \n        {\n            result[key] = new List\u003Cint\u003E();\n        }\n        result[key].Add(1);\n    }\n    foreach (var kvp in result.ToList()) \n    {\n        result[kvp.Key] = new List\u003Cint\u003E { kvp.Value.Sum() };\n    }\n    return result.ToDictionary(kvp =\u003E kvp.Key, kvp =\u003E kvp.Value.First());\n}","task_id":779,"test_setup_code":"","test_list":["Debug.Assert(UniqueSublists(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 1, 3 }, new List\u003Cint\u003E { 5, 7 }, new List\u003Cint\u003E { 1, 3 }, new List\u003Cint\u003E { 13, 15, 17 }, new List\u003Cint\u003E { 5, 7 }, new List\u003Cint\u003E { 9, 11 } }) == new Dictionary\u003CTuple\u003Cint, int\u003E, int\u003E { { Tuple.Create(1, 3), 2 }, { Tuple.Create(5, 7), 2 }, { Tuple.Create(13, 15, 17), 1 }, { Tuple.Create(9, 11), 1 } });","Debug.Assert(UniqueSublists(new List\u003CList\u003Cstring\u003E\u003E { new List\u003Cstring\u003E { \u0022green\u0022, \u0022orange\u0022 }, new List\u003Cstring\u003E { \u0022black\u0022 }, new List\u003Cstring\u003E { \u0022green\u0022, \u0022orange\u0022 }, new List\u003Cstring\u003E { \u0022white\u0022 } }).SequenceEqual(new Dictionary\u003C(string, string), int\u003E { { (\u0022green\u0022, \u0022orange\u0022), 2 }, { (\u0022black\u0022,), 1 }, { (\u0022white\u0022,), 1 } }));","Debug.Assert(UniqueSublists(new List\u003CList\u003Cint\u003E\u003E{ new List\u003Cint\u003E{ 1, 2 }, new List\u003Cint\u003E{ 3, 4 }, new List\u003Cint\u003E{ 4, 5 }, new List\u003Cint\u003E{ 6, 7 }}) .SequenceEqual(new Dictionary\u003C(int, int), int\u003E { { (1, 2), 1 }, { (3, 4), 1 }, { (4, 5), 1 }, { (6, 7), 1 } }));"],"challenge_test_list":[]}
{"name":"tuple-sum-comb","description":"Find combinations of sums from tuple lists","text":"Write a function to find the combinations of sums with tuples in the given tuple list.","code":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class CombinationFinder\n{\n    public List\u003C(int, int)\u003E FindCombinations(List\u003C(int, int)\u003E testList)\n    {\n        var res = new List\u003C(int, int)\u003E();\n        var combinations = testList.SelectMany((a, i) =\u003E testList.Skip(i \u002B 1), (a, b) =\u003E (a, b));\n        foreach (var (a, b) in combinations)\n        {\n            res.Add((b.Item1 \u002B a.Item1, b.Item2 \u002B a.Item2));\n        }\n        return res;\n    }\n}","task_id":780,"test_setup_code":"","test_list":["Debug.Assert(FindCombinations(new (int, int)[] { (2, 4), (6, 7), (5, 1), (6, 10) }).SequenceEqual(new (int, int)[] { (8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11) }));","Debug.Assert(FindCombinations(new[] { (3, 5), (7, 8), (6, 2), (7, 11) }).SequenceEqual(new[] { (10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13) }));","Debug.Assert(FindCombinations(new (int, int)[] { (4, 6), (8, 9), (7, 3), (8, 12) }).SequenceEqual(new (int, int)[] { (12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15) }));"],"challenge_test_list":[]}
{"name":"check-divisor-count","description":"Check if the count of divisors is even or odd","text":"Write a C# function to check whether the count of divisors is even or odd.","code":"using System;\n\npublic class Program\n{\n    public static string CountDivisors(int n) \n    {\n        int count = 0;\n        for (int i = 1; i \u003C= (int)(Math.Sqrt(n)) \u002B 1; i\u002B\u002B) \n        {\n            if (n % i == 0) \n            {\n                if (n / i == i) \n                {\n                    count\u002B\u002B;\n                }\n                else \n                {\n                    count \u002B= 2;\n                }\n            }\n        }\n        return (count % 2 == 0) ? \u0022Even\u0022 : \u0022Odd\u0022;\n    }\n}","task_id":781,"test_setup_code":"","test_list":["Debug.Assert(CountDivisors(10) == \u0022Even\u0022);","Debug.Assert(CountDivisors(100) == \u0022Odd\u0022);","Debug.Assert(CountDivisors(125) == \u0022Even\u0022);"],"challenge_test_list":[]}
{"name":"odd-length-subarrays","description":"Sum all odd-length subarrays in Python function","text":"Write a C# function to find the sum of all odd length subarrays.","code":"public static int OddLengthSum(int[] arr) {\n    int sum = 0;\n    int l = arr.Length;\n    for (int i = 0; i \u003C l; i\u002B\u002B) {\n        sum \u002B= ((((i \u002B 1) * (l - i) \u002B 1) / 2) * arr[i]));\n    }\n    return sum;\n}","task_id":782,"test_setup_code":"","test_list":["Debug.Assert(Odd_Length_Sum(new int[] { 1, 2, 4 }) == 14);","Debug.Assert(OddLengthSum(new int[] { 1, 2, 1, 2 }) == 15);","Debug.Assert(OddLengthSum(new int[] { 1, 7 }) == 8);"],"challenge_test_list":[]}
{"name":"rgb-to-hsv-conv","description":"Convert RGB color values to HSV format","text":"Write a function to convert rgb color to hsv color.","code":"public static (double h, double s, double v) RgbToHsv(int r, int g, int b)\n{\n    r /= 255.0;\n    g /= 255.0;\n    b /= 255.0;\n    double mx = Math.Max(r, Math.Max(g, b));\n    double mn = Math.Min(r, Math.Min(g, b));\n    double df = mx - mn;\n    double h, s, v;\n\n    if (mx == mn)\n    {\n        h = 0;\n    }\n    else if (mx == r)\n    {\n        h = (60 * ((g - b) / df) \u002B 360) % 360;\n    }\n    else if (mx == g)\n    {\n        h = (60 * ((b - r) / df) \u002B 120) % 360;\n    }\n    else\n    {\n        h = (60 * ((r - g) / df) \u002B 240) % 360;\n    }\n\n    s = mx == 0 ? 0 : (df / mx) * 100;\n    v = mx * 100;\n\n    return (h, s, v);\n}","task_id":783,"test_setup_code":"","test_list":["Debug.Assert(RgbToHsv(255, 255, 255).Equals((0, 0.0, 100.0)));","Debug.Assert(RgbToHsv(0, 215, 0).Equals((120.0, 100.0, 84.31372549019608)));","Debug.Assert(RgbToHsv(10, 215, 110).Equals((149.26829268292684, 95.34883720930233, 84.31372549019608)));"],"challenge_test_list":[]}
{"name":"even-odd-product","description":"Product of first even and odd numbers in a list","text":"Write a function to find the product of first even and odd number of a given list.","code":"public int MulEvenOdd(List\u003Cint\u003E list1) {\n    int firstEven = list1.FirstOrDefault(el =\u003E el % 2 == 0);\n    int firstOdd = list1.FirstOrDefault(el =\u003E el % 2 != 0);\n    return firstEven * firstOdd;\n}","task_id":784,"test_setup_code":"","test_list":["Debug.Assert(MulEvenOdd(new int[] { 1, 3, 5, 7, 4, 1, 6, 8 }) == 4);","Debug.Assert(MulEvenOdd(new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }) == 2);","Debug.Assert(MulEvenOdd(new int[] { 1, 5, 7, 9, 10 }) == 10);"],"challenge_test_list":[]}
{"name":"tuple-str-to-int-tup","description":"Convert tuple string to integer tuple function","text":"Write a function to convert tuple string to integer tuple.","code":"public static Tuple\u003Cint[]\u003E TupleStrInt(string testStr) {\n    var res = testStr.Replace(\u0022(\u0022, \u0022\u0022)\n                     .Replace(\u0022)\u0022, \u0022\u0022)\n                     .Replace(\u0022...\u0022, \u0022\u0022)\n                     .Split(\u0022, \u0022)\n                     .Select(num =\u003E int.Parse(num))\n                     .ToArray();\n    return Tuple.Create(res);\n}","task_id":785,"test_setup_code":"","test_list":["Debug.Assert(TupleStrInt(\u0022(7, 8, 9)\u0022).Equals(new Tuple\u003Cint, int, int\u003E(7, 8, 9)));","Debug.Assert(TupleStrInt(\u0022(1, 2, 3)\u0022).Equals(Tuple.Create(1, 2, 3)));","Debug.Assert(TupleStrInt(\u0022(4, 5, 6)\u0022).Item1 == 4 \u0026\u0026 TupleStrInt(\u0022(4, 5, 6)\u0022).Item2 == 5 \u0026\u0026 TupleStrInt(\u0022(4, 5, 6)\u0022).Item3 == 6);"],"challenge_test_list":[]}
{"name":"insertion-point-fn","description":"Locate insertion point for a value in sorted array","text":"Write a function to locate the right insertion point for a specified value in sorted order.","code":"using System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static int RightInsertion(List\u003Cint\u003E a, int x)\n    {\n        return a.BinarySearch(x) \u003E= 0 \n            ? a.IndexOf(x, a.BinarySearch(x)) \u002B 1 \n            : ~a.BinarySearch(x);\n    }\n}","task_id":786,"test_setup_code":"","test_list":["Debug.Assert(RightInsertion(new List\u003Cint\u003E { 1, 2, 4, 5 }, 6) == 4);","Debug.Assert(RightInsertion(new int[] { 1, 2, 4, 5 }, 3) == 2);","Debug.Assert(RightInsertion(new int[] { 1, 2, 4, 5 }, 7) == 4);"],"challenge_test_list":[]}
{"name":"a-bbb-matcher","description":"Match a string with an a followed by three b\u0027s","text":"Write a function that matches a string that has an a followed by three \u0027b\u0027.","code":"using System.Text.RegularExpressions;\n\npublic class Matcher\n{\n    public string TextMatchThree(string text)\n    {\n        string patterns = @\u0022ab{3}?\u0022;\n        if (Regex.IsMatch(text, patterns))\n        {\n            return \u0022Found a match!\u0022;\n        }\n        else\n        {\n            return \u0022Not matched!\u0022;\n        }\n    }\n}","task_id":787,"test_setup_code":"","test_list":["Debug.Assert(TextMatchThree(\u0022ac\u0022) == \u0022Not matched!\u0022);","Debug.Assert(TextMatchThree(\u0022dc\u0022) == \u0022Not matched!\u0022);\n\nstring TextMatchThree(string input)\n{\n    // Implement the method logic here\n}","Debug.Assert(TextMatchThree(\u0022abbbba\u0022) == \u0022Found a match!\u0022);"],"challenge_test_list":[]}
{"name":"str-to-tuple-gen","description":"Create a tuple from a string and a list","text":"Write a function to create a new tuple from the given string and list.","code":"public static Tuple\u003Cobject\u003E NewTuple(List\u003Cobject\u003E testList, string testStr)\n{\n    var res = Tuple.Create(testList.Concat(new List\u003Cobject\u003E { testStr }).ToArray());\n    return res;\n}","task_id":788,"test_setup_code":"","test_list":["Debug.Assert(NewTuple(new string[] { \u0022WEB\u0022, \u0022is\u0022 }, \u0022best\u0022).SequenceEqual(new ValueTuple\u003Cstring, string, string\u003E(\u0022WEB\u0022, \u0022is\u0022, \u0022best\u0022)));","Debug.Assert(NewTuple(new string[] { \u0022We\u0022, \u0022are\u0022 }, \u0022Developers\u0022).Equals(ValueTuple.Create(\u0022We\u0022, \u0022are\u0022, \u0022Developers\u0022)));","Debug.Assert(NewTuple(new string[] { \u0022Part\u0022, \u0022is\u0022 }) == Tuple.Create(\u0022Part\u0022, \u0022is\u0022, \u0022Wrong\u0022));"],"challenge_test_list":[]}
{"name":"perimeter-polygon","description":"Calculate the perimeter of a regular polygon","text":"Write a function to calculate the perimeter of a regular polygon.","code":"public static double PerimeterPolygon(int s, double l) \n{\n    double perimeter = s * l;\n    return perimeter;\n}","task_id":789,"test_setup_code":"","test_list":["Debug.Assert(PerimeterPolygon(4, 20) == 80);","Debug.Assert(PerimeterPolygon(10, 15) == 150);","Debug.Assert(PerimeterPolygon(9, 7) == 63);"],"challenge_test_list":[]}
{"name":"even-index-check","description":"Check if even indices have even numbers","text":"Write a C# function to check whether every even index contains even numbers of a given list.","code":"public bool EvenPosition(int[] nums)\n{\n    return nums.Select((num, i) =\u003E num % 2 == i % 2).All(x =\u003E x);\n}","task_id":790,"test_setup_code":"","test_list":["Debug.Assert(EvenPosition(new int[] { 3, 2, 1 }) == false);","Debug.Assert(EvenPosition(new int[] { 1, 2, 3 }) == false);","Debug.Assert(EvenPosition(new int[] { 2, 1, 4 }) == true);"],"challenge_test_list":[]}
{"name":"remove-nested-tuple","description":"Remove nested records from a given tuple","text":"Write a function to remove the nested record from the given tuple.","code":"public static Tuple\u003Cobject\u003E RemoveNested(Tuple\u003Cobject\u003E testTup)\n{\n    var res = new List\u003Cobject\u003E();\n    for (int count = 0; count \u003C testTup.Item1.Length; count\u002B\u002B)\n    {\n        var ele = testTup.Item1[count];\n        if (!(ele is Tuple\u003Cobject\u003E))\n        {\n            res.Add(ele);\n        }\n    }\n    return Tuple.Create(res.ToArray());\n}","task_id":791,"test_setup_code":"","test_list":["Debug.Assert(RemoveNested(new object[] { 1, 5, 7, new object[] { 4, 6 }, 10 }).SequenceEqual(new object[] { 1, 5, 7, 10 }));","Debug.Assert(RemoveNested(new object[] { 2, 6, 8, new object[] { 5, 7 }, 11 }).Equals(new object[] { 2, 6, 8, 11 }));","Debug.Assert(RemoveNested(new object[] { 3, 7, 9, new object[] { 6, 8 }, 12 }).Equals(new object[] { 3, 7, 9, 12 }));"],"challenge_test_list":[]}
{"name":"list-counter-prob","description":"Count lists within a list in Python function","text":"Write a C# function to count the number of lists in a given number of lists.","code":"public int CountList(List\u003Cobject\u003E inputList) \n{ \n    return inputList.Count; \n}","task_id":792,"test_setup_code":"","test_list":["Debug.Assert(CountList(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 1, 3 }, new List\u003Cint\u003E { 5, 7 }, new List\u003Cint\u003E { 9, 11 }, new List\u003Cint\u003E { 13, 15, 17 } }) == 4);","Debug.Assert(CountList(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 1, 2 }, new List\u003Cint\u003E { 2, 3 }, new List\u003Cint\u003E { 4, 5 } }) == 3);","Debug.Assert(CountList(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 1, 0 }, new List\u003Cint\u003E { 2, 0 } }) == 2);"],"challenge_test_list":[]}
{"name":"last-position-in-sorted-array","description":"Find last position of an element in sorted array","text":"Write a C# function to find the last position of an element in a sorted array.","code":"public int Last(int[] arr, int x, int n) \n{\n    int low = 0;\n    int high = n - 1;\n    int res = -1;  \n    while (low \u003C= high) \n    {\n        int mid = (low \u002B high) / 2; \n        if (arr[mid] \u003E x) \n        {\n            high = mid - 1;\n        } \n        else if (arr[mid] \u003C x) \n        {\n            low = mid \u002B 1;\n        } \n        else \n        {\n            res = mid;\n            low = mid \u002B 1;\n        }\n    }\n    return res;\n}","task_id":793,"test_setup_code":"","test_list":["Debug.Assert(Last(new int[] { 1, 2, 3 }, 1, 3) == 0);","Debug.Assert(Last(new int[] { 1, 1, 1, 2, 3, 4 }, 1, 6) == 2);","Debug.Assert(Last(new int[] { 2, 3, 2, 3, 6, 8, 9 }, 3, 8) == 3);"],"challenge_test_list":[]}
{"name":"a-to-b-matcher","description":"Match string with \u0027a\u0027 start and \u0027b\u0027 end","text":"Write a function that matches a string that has an \u0027a\u0027 followed by anything, ending in \u0027b\u0027.","code":"public string TextStartaEndb(string text)\n{\n    string patterns = @\u0022a.*?b$\u0022;\n    if (System.Text.RegularExpressions.Regex.IsMatch(text, patterns))\n    {\n        return \u0022Found a match!\u0022;\n    }\n    else\n    {\n        return \u0022Not matched!\u0022;\n    }\n}","task_id":794,"test_setup_code":"","test_list":["Debug.Assert(TextStartaEndb(\u0022aabbbb\u0022) == \u0022Found a match!\u0022);","Debug.Assert(TextStartaEndb(\u0022aabAbbbc\u0022) == \u0022Not matched!\u0022);","Debug.Assert(text_starta_endb(\u0022accddbbjjj\u0022) == \u0022Not matched!\u0022);"],"challenge_test_list":[]}
{"name":"find-n-cheap-items","description":"Find n cheapest items using a heap queue","text":"Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.","code":"using System.Collections.Generic;\nusing System.Linq;\n\npublic class Item\n{\n    public decimal Price { get; set; }\n}\n\npublic class ItemHelper\n{\n    public List\u003CItem\u003E CheapItems(List\u003CItem\u003E items, int n)\n    {\n        return items.OrderBy(item =\u003E item.Price).Take(n).ToList();\n    }\n}","task_id":795,"test_setup_code":"","test_list":["Debug.Assert(CheapItems(new List\u003CDictionary\u003Cstring, object\u003E\u003E { new Dictionary\u003Cstring, object\u003E { { \u0022name\u0022, \u0022Item-1\u0022 }, { \u0022price\u0022, 101.1 } }, new Dictionary\u003Cstring, object\u003E { { \u0022name\u0022, \u0022Item-2\u0022 }, { \u0022price\u0022, 555.22 } } }, 1).SequenceEqual(new List\u003CDictionary\u003Cstring, object\u003E\u003E { new Dictionary\u003Cstring, object\u003E { { \u0022name\u0022, \u0022Item-1\u0022 }, { \u0022price\u0022, 101.1 } } }));","Debug.Assert(CheapItems(new List\u003CDictionary\u003Cstring, object\u003E\u003E { new Dictionary\u003Cstring, object\u003E { { \u0022name\u0022, \u0022Item-1\u0022 }, { \u0022price\u0022, 101.1 } }, new Dictionary\u003Cstring, object\u003E { { \u0022name\u0022, \u0022Item-2\u0022 }, { \u0022price\u0022, 555.22 } } }, 2).SequenceEqual(new List\u003CDictionary\u003Cstring, object\u003E\u003E { new Dictionary\u003Cstring, object\u003E { { \u0022name\u0022, \u0022Item-1\u0022 }, { \u0022price\u0022, 101.1 } }, new Dictionary\u003Cstring, object\u003E { { \u0022name\u0022, \u0022Item-2\u0022 }, { \u0022price\u0022, 555.22 } } }));","Debug.Assert(CheapItems(new List\u003CDictionary\u003Cstring, object\u003E\u003E { \n    new Dictionary\u003Cstring, object\u003E { { \u0022name\u0022, \u0022Item-1\u0022 }, { \u0022price\u0022, 101.1 } }, \n    new Dictionary\u003Cstring, object\u003E { { \u0022name\u0022, \u0022Item-2\u0022 }, { \u0022price\u0022, 555.22 } }, \n    new Dictionary\u003Cstring, object\u003E { { \u0022name\u0022, \u0022Item-3\u0022 }, { \u0022price\u0022, 45.09 } }, \n    new Dictionary\u003Cstring, object\u003E { { \u0022name\u0022, \u0022Item-4\u0022 }, { \u0022price\u0022, 22.75 } } \n}, 1).SequenceEqual(new List\u003CDictionary\u003Cstring, object\u003E\u003E { \n    new Dictionary\u003Cstring, object\u003E { { \u0022name\u0022, \u0022Item-4\u0022 }, { \u0022price\u0022, 22.75 } } }));"],"challenge_test_list":[]}
{"name":"sum-items-dict","description":"Sum all values in a given dictionary","text":"Write function to find the sum of all items in the given dictionary.","code":"public int ReturnSum(Dictionary\u003Cstring, int\u003E dict) {\n    int sum = 0;\n    foreach (var value in dict.Values) {\n        sum \u002B= value;\n    }\n    return sum;\n}","task_id":796,"test_setup_code":"","test_list":["Debug.Assert(ReturnSum(new Dictionary\u003Cstring, int\u003E { { \u0022a\u0022, 100 }, { \u0022b\u0022, 200 }, { \u0022c\u0022, 300 } }) == 600);","Debug.Assert(ReturnSum(new Dictionary\u003Cstring, int\u003E{{\u0022a\u0022, 25}, {\u0022b\u0022, 18}, {\u0022c\u0022, 45}}) == 88);","Debug.Assert(ReturnSum(new Dictionary\u003Cstring, int\u003E { {\u0022a\u0022, 36}, {\u0022b\u0022, 39}, {\u0022c\u0022, 49} }) == 124);"],"challenge_test_list":[]}
{"name":"sum-odd-numbers","description":"Sum odd natural numbers in a given range","text":"Write a C# function to find the sum of all odd natural numbers within the range l and r.","code":"public int SumOdd(int n) \n{ \n    int terms = (n \u002B 1) / 2; \n    int sum1 = terms * terms; \n    return sum1; \n} \n\npublic int SumInRange(int l, int r) \n{ \n    return SumOdd(r) - SumOdd(l - 1); \n}","task_id":797,"test_setup_code":"","test_list":["Debug.Assert(SumInRange(2, 5) == 8);","Debug.Assert(SumInRange(5, 7) == 12);","Debug.Assert(SumInRange(7, 13) == 40);"],"challenge_test_list":[]}
{"name":"sum-of-array","description":"Calculate the sum of elements in an array","text":"Write a C# function to find the sum of an array.","code":"public int Sum(int[] arr)  \n{  \n    int sum = 0;  \n    foreach (int i in arr)  \n    {  \n        sum \u002B= i;  \n    }  \n    return sum;  \n}","task_id":798,"test_setup_code":"","test_list":["Debug.Assert(Sum(new int[] { 1, 2, 3 }) == 6);","Debug.Assert(Sum(new int[] { 15, 12, 13, 10 }) == 50);","Debug.Assert(Sum(new int[] { 0, 1, 2 }) == 3);"],"challenge_test_list":[]}
{"name":"left-rotate-bits","description":"Rotate bits of a number to the left in Python","text":"Write a C# function to left rotate the bits of a given number.","code":"const int INT_BITS = 32;\n\npublic static int LeftRotate(int n, int d)   \n{\n    return (n \u003C\u003C d) | (n \u003E\u003E (INT_BITS - d));\n}","task_id":799,"test_setup_code":"","test_list":["Debug.Assert(LeftRotate(16, 2) == 64);","Debug.Assert(LeftRotate(10, 2) == 40);","Debug.Assert(LeftRotate(99, 3) == 792);"],"challenge_test_list":[]}
{"name":"remove-whitespaces","description":"Remove all whitespace from a given string","text":"Write a function to remove all whitespaces from a string.","code":"public string RemoveAllSpaces(string text)\n{\n    return Regex.Replace(text, @\u0022\\s\u002B\u0022, \u0022\u0022);\n}","task_id":800,"test_setup_code":"","test_list":["Debug.Assert(RemoveAllSpaces(\u0022python  program\u0022) == \u0022pythonprogram\u0022);","Debug.Assert(RemoveAllSpaces(\u0022python   programming    language\u0022) == \u0022pythonprogramminglanguage\u0022);","Debug.Assert(RemoveAllSpaces(\u0022python                     program\u0022) == \u0022pythonprogram\u0022);"],"challenge_test_list":[]}
{"name":"equal-counts.py","description":"Count matching integers from three given values","text":"Write a C# function to count the number of equal numbers from three given integers.","code":"public int TestThreeEqual(int x, int y, int z)\n{\n    var result = new HashSet\u003Cint\u003E { x, y, z };\n    if (result.Count == 3)\n    {\n        return 0;\n    }\n    else\n    {\n        return 4 - result.Count;\n    }\n}","task_id":801,"test_setup_code":"","test_list":["Debug.Assert(TestThreeEqual(1, 1, 1) == 3);","Debug.Assert(TestThreeEqual(-1, -2, -3) == 0);","Debug.Assert(TestThreeEqual(1, 2, 2) == 2);\n\npublic int TestThreeEqual(int a, int b, int c)\n{\n    if (a == b \u0026\u0026 b == c)\n        return a;\n    if (a == b)\n        return a;\n    if (a == c)\n        return a;\n    if (b == c)\n        return b;\n    return -1; // or throw an exception based on your use case\n}"],"challenge_test_list":[]}
{"name":"count-rotations","description":"Count rotations to sort an array in Python","text":"Write a C# function to count the number of rotations required to generate a sorted array.","code":"public static int CountRotation(int[] arr, int n)  \n{  \n    for (int i = 1; i \u003C n; i\u002B\u002B)  \n    {  \n        if (arr[i] \u003C arr[i - 1])  \n        {  \n            return i;  \n        }  \n    }  \n    return 0;  \n}","task_id":802,"test_setup_code":"","test_list":["Debug.Assert(CountRotation(new int[] { 3, 2, 1 }, 3) == 1);","Debug.Assert(CountRotation(new int[] { 4, 5, 1, 2, 3 }, 5) == 2);","Debug.Assert(CountRotation(new int[] { 7, 8, 9, 1, 2, 3 }, 6) == 3);"],"challenge_test_list":[]}
{"name":"perfect-square.py","description":"Check if a number is a perfect square in Python","text":"Write a C# function to check whether the given number is a perfect square or not.","code":"public bool IsPerfectSquare(int n) \n{\n    int i = 1;\n    while (i * i \u003C= n)\n    {\n        if ((n % i == 0) \u0026\u0026 (n / i == i))\n        {\n            return true;     \n        }\n        i\u002B\u002B;\n    }\n    return false;\n}","task_id":803,"test_setup_code":"","test_list":["Debug.Assert(IsPerfectSquare(10) == false);","Debug.Assert(IsPerfectSquare(36) == true);","Debug.Assert(IsPerfectSquare(14) == false);"],"challenge_test_list":[]}
{"name":"check-product-even","description":"Check if the product of numbers is even","text":"Write a C# function to check whether the product of numbers is even or not.","code":"bool IsProductEven(int[] arr, int n) \n{ \n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    { \n        if ((arr[i] \u0026 1) == 0) \n        { \n            return true; \n        } \n    } \n    return false; \n}","task_id":804,"test_setup_code":"","test_list":["Debug.Assert(IsProductEven(new int[] { 1, 2, 3 }, 3) == true);","Debug.Assert(IsProductEven(new int[] { 1, 2, 1, 4 }, 4) == true);","Debug.Assert(IsProductEven(new int[] { 1, 1 }, 2) == false);"],"challenge_test_list":[]}
{"name":"list-with-highest-sum","description":"Find the list with the highest sum in a list of lists","text":"Write a function to find the list in a list of lists whose sum of elements is the highest.","code":"public List\u003Cint\u003E MaxSumList(List\u003CList\u003Cint\u003E\u003E lists)\r\n{\r\n    return lists.OrderByDescending(list =\u003E list.Sum()).First();\r\n}","task_id":805,"test_setup_code":"","test_list":["Debug.Assert(MaxSumList(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 1, 2, 3 }, new List\u003Cint\u003E { 4, 5, 6 }, new List\u003Cint\u003E { 10, 11, 12 }, new List\u003Cint\u003E { 7, 8, 9 } }).SequenceEqual(new List\u003Cint\u003E { 10, 11, 12 }));","Debug.Assert(MaxSumList(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 3, 2, 1 }, new List\u003Cint\u003E { 6, 5, 4 }, new List\u003Cint\u003E { 12, 11, 10 } }).SequenceEqual(new List\u003Cint\u003E { 12, 11, 10 }));","Debug.Assert(MaxSumList(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 2, 3, 1 } }).SequenceEqual(new List\u003Cint\u003E { 2, 3, 1 }));"],"challenge_test_list":[]}
{"name":"max-run-uppercase","description":"Find longest sequence of uppercase letters in string","text":"Write a function to find maximum run of uppercase characters in the given string.","code":"public static int MaxRunUppercase(string testStr) \n{\n    int cnt = 0;\n    int res = 0;\n    for (int idx = 0; idx \u003C testStr.Length; idx\u002B\u002B) \n    {\n        if (char.IsUpper(testStr[idx])) \n        {\n            cnt\u002B\u002B;\n        } \n        else \n        {\n            res = cnt;\n            cnt = 0;\n        }\n    }\n    if (char.IsUpper(testStr[testStr.Length - 1])) \n    {\n        res = cnt;\n    }\n    return res;\n}","task_id":806,"test_setup_code":"","test_list":["Debug.Assert(MaxRunUppercase(\u0022GeMKSForGERksISBESt\u0022) == 5);","Debug.Assert(MaxRunUppercase(\u0022PrECIOusMOVemENTSYT\u0022) == 6);","Debug.Assert(MaxRunUppercase(\u0022GooGLEFluTTER\u0022) == 4);"],"challenge_test_list":[]}
{"name":"first-odd-num","description":"Find the first odd number in a list of integers","text":"Write a C# function to find the first odd number in a given list of numbers.","code":"public int FirstOdd(List\u003Cint\u003E nums) \n{\n    return nums.FirstOrDefault(el =\u003E el % 2 != 0) == 0 ? -1 : nums.First(el =\u003E el % 2 != 0);\n}","task_id":807,"test_setup_code":"","test_list":["Debug.Assert(FirstOdd(new int[] { 1, 3, 5 }) == 1);","Debug.Assert(FirstOdd(new int[] { 2, 4, 1, 3 }) == 1);","Debug.Assert(FirstOdd(new int[] { 8, 9, 1 }) == 9);"],"challenge_test_list":[]}
{"name":"check-tuple-k","description":"Check if tuples contain the specified k value","text":"Write a function to check if the given tuples contain the k or not.","code":"public bool CheckK(Tuple\u003Cint, int\u003E[] testTup, int K)\n{\n    bool res = false;\n    foreach (var ele in testTup)\n    {\n        if (ele.Item1 == K || ele.Item2 == K)\n        {\n            res = true;\n            break;\n        }\n    }\n    return res;\n}","task_id":808,"test_setup_code":"","test_list":["Debug.Assert(CheckK(new int[] { 10, 4, 5, 6, 8 }, 6) == true);","Debug.Assert(CheckK(new int[] { 1, 2, 3, 4, 5, 6 }, 7) == false);","Debug.Assert(CheckK(new int[] { 7, 8, 9, 44, 11, 12 }, 11) == true);"],"challenge_test_list":[]}
{"name":"check-tuple-size","description":"Check if second tuple elements are smaller","text":"Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.","code":"public bool CheckSmaller(Tuple\u003Cint, int\u003E testTup1, Tuple\u003Cint, int\u003E testTup2)\n{\n    bool res = testTup1.Item1 \u003E testTup2.Item1 \u0026\u0026 testTup1.Item2 \u003E testTup2.Item2;\n    return res;\n}","task_id":809,"test_setup_code":"","test_list":["Debug.Assert(CheckSmaller(new Tuple\u003Cint, int, int\u003E(1, 2, 3), new Tuple\u003Cint, int, int\u003E(2, 3, 4)) == false);","Debug.Assert(CheckSmaller((4, 5, 6), (3, 4, 5)) == true);","Debug.Assert(CheckSmaller(new int[] { 11, 12, 13 }, new int[] { 10, 11, 12 }) == true);"],"challenge_test_list":[]}
{"name":"repeat-elements","description":"Repeat each element based on its count","text":"Write a function to iterate over elements repeating each as many times as its count.","code":"using System.Collections.Generic;\nusing System.Linq;\n\npublic class Example\n{\n    public List\u003Cobject\u003E CountVariable(object a, object b, object c, object d)\n    {\n        var dict = new Dictionary\u003Cobject, int\u003E\n        {\n            { a, 1 },\n            { b, 1 },\n            { c, 1 },\n            { d, 1 }\n        };\n\n        return dict.SelectMany(kvp =\u003E Enumerable.Repeat(kvp.Key, kvp.Value)).ToList();\n    }\n}","task_id":810,"test_setup_code":"","test_list":["Debug.Assert(CountVariable(4, 2, 0, -2).SequenceEqual(new List\u003Cstring\u003E { \u0022p\u0022, \u0022p\u0022, \u0022p\u0022, \u0022p\u0022, \u0022q\u0022, \u0022q\u0022 }));","Debug.Assert(CountVariable(0, 1, 2, 3).SequenceEqual(new List\u003Cstring\u003E { \u0022q\u0022, \u0022r\u0022, \u0022r\u0022, \u0022s\u0022, \u0022s\u0022, \u0022s\u0022 }));","Debug.Assert(CountVariable(11, 15, 12, 23).SequenceEqual(new[] { \u0027p\u0027, \u0027p\u0027, \u0027p\u0027, \u0027p\u0027, \u0027p\u0027, \u0027p\u0027, \u0027p\u0027, \u0027p\u0027, \u0027p\u0027, \u0027p\u0027, \u0027p\u0027, \u0027q\u0027, \u0027q\u0027, \u0027q\u0027, \u0027q\u0027, \u0027q\u0027, \u0027q\u0027, \u0027q\u0027, \u0027q\u0027, \u0027q\u0027, \u0027q\u0027, \u0027q\u0027, \u0027q\u0027, \u0027q\u0027, \u0027q\u0027, \u0027q\u0027, \u0027r\u0027, \u0027r\u0027, \u0027r\u0027, \u0027r\u0027, \u0027r\u0027, \u0027r\u0027, \u0027r\u0027, \u0027r\u0027, \u0027r\u0027, \u0027r\u0027, \u0027r\u0027, \u0027r\u0027, \u0027s\u0027, \u0027s\u0027, \u0027s\u0027, \u0027s\u0027, \u0027s\u0027, \u0027s\u0027, \u0027s\u0027, \u0027s\u0027, \u0027s\u0027, \u0027s\u0027, \u0027s\u0027, \u0027s\u0027, \u0027s\u0027, \u0027s\u0027, \u0027s\u0027, \u0027s\u0027, \u0027s\u0027, \u0027s\u0027, \u0027s\u0027, \u0027s\u0027, \u0027s\u0027, \u0027s\u0027, \u0027s\u0027 }));"],"challenge_test_list":[]}
{"name":"list-tuples-check","description":"Check if two tuple lists are identical","text":"Write a function to check if two lists of tuples are identical or not.","code":"public bool CheckIdentical(List\u003Cobject\u003E testList1, List\u003Cobject\u003E testList2) \n{\n    bool res = testList1.SequenceEqual(testList2);\n    return res;\n}","task_id":811,"test_setup_code":"","test_list":["Debug.Assert(CheckIdentical(new List\u003C(int, int)\u003E{(10, 4), (2, 5)}, new List\u003C(int, int)\u003E{(10, 4), (2, 5)}) == true);","Debug.Assert(CheckIdentical(new List\u003CTuple\u003Cint, int\u003E\u003E { Tuple.Create(1, 2), Tuple.Create(3, 7) }, new List\u003CTuple\u003Cint, int\u003E\u003E { Tuple.Create(12, 14), Tuple.Create(12, 45) }) == false);","Debug.Assert(CheckIdentical(new List\u003C(int, int)\u003E { (2, 14), (12, 25) }, new List\u003C(int, int)\u003E { (2, 14), (12, 25) }) == true);"],"challenge_test_list":[]}
{"name":"abbreviate-road","description":"Abbreviate road to rd in a given string","text":"Write a function to abbreviate \u0027road\u0027 as \u0027rd.\u0027 in a given string.","code":"public string RoadRd(string street)  \n{  \n    return Regex.Replace(street, \u0022Road$\u0022, \u0022Rd.\u0022);  \n}","task_id":812,"test_setup_code":"","test_list":["Debug.Assert(RoadRd(\u0022ravipadu Road\u0022) == \u0022ravipadu Rd.\u0022);","Debug.Assert(RoadRd(\u0022palnadu Road\u0022) == \u0022palnadu Rd.\u0022);","Debug.Assert(RoadRd(\u0022eshwar enclave Road\u0022) == \u0022eshwar enclave Rd.\u0022);"],"challenge_test_list":[]}
{"name":"string-length-fn","description":"Find the length of a given string","text":"Write a function to find length of the string.","code":"public int StringLength(string str1)\n{\n    int count = 0;\n    foreach (char c in str1)\n    {\n        count \u002B= 1;\n    }\n    return count;\n}","task_id":813,"test_setup_code":"","test_list":["Debug.Assert(StringLength(\u0022python\u0022) == 6);","Debug.Assert(StringLength(\u0022program\u0022) == 7);","Debug.Assert(StringLength(\u0022language\u0022) == 8);"],"challenge_test_list":[]}
{"name":"area-of-rombus","description":"Calculate the area of a rhombus using a function","text":"Write a function to find the area of a rombus.","code":"public double RombusArea(double p, double q) \n{\n    double area = (p * q) / 2;\n    return area;\n}","task_id":814,"test_setup_code":"","test_list":["Debug.Assert(RombusArea(10, 20) == 100);\n\npublic static double RombusArea(double d1, double d2) {\n    return (d1 * d2) / 2;\n}","Debug.Assert(RombusArea(10, 5) == 25);","Debug.Assert(RombusArea(4, 2) == 4);\n\npublic static double RombusArea(double d1, double d2)\n{\n    return (d1 * d2) / 2;\n}"],"challenge_test_list":[]}
{"name":"sort-zeros-ones-twos","description":"Sort an array of 0s 1s and 2s without algorithms","text":"Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.","code":"public int[] SortByDnf(int[] arr, int n) {\n    int low = 0;\n    int mid = 0;\n    int high = n - 1;\n    while (mid \u003C= high) {\n        if (arr[mid] == 0) {\n            (arr[low], arr[mid]) = (arr[mid], arr[low]);\n            low\u002B\u002B;\n            mid\u002B\u002B;\n        } else if (arr[mid] == 1) {\n            mid\u002B\u002B;\n        } else {\n            (arr[mid], arr[high]) = (arr[high], arr[mid]);\n            high--;\n        }\n    }\n    return arr;\n}","task_id":815,"test_setup_code":"","test_list":["Debug.Assert(SortByDnf(new List\u003Cint\u003E { 1, 2, 0, 1, 0, 1, 2, 1, 1 }, 9).SequenceEqual(new List\u003Cint\u003E { 0, 0, 1, 1, 1, 1, 1, 2, 2 }));","Debug.Assert(SortByDnf(new int[] { 1, 0, 0, 1, 2, 1, 2, 2, 1, 0 }, 10).SequenceEqual(new int[] { 0, 0, 0, 1, 1, 1, 1, 2, 2, 2 }));","Debug.Assert(SortByDnf(new int[] { 2, 2, 1, 0, 0, 0, 1, 1, 2, 1 }, 10).SequenceEqual(new int[] { 0, 0, 0, 1, 1, 1, 1, 2, 2, 2 }));"],"challenge_test_list":[]}
{"name":"clear-tuple-values","description":"Clear all values in the provided tuples function","text":"Write a function to clear the values of the given tuples.","code":"public static Tuple\u003CT\u003E ClearTuple\u003CT\u003E(Tuple\u003CT\u003E testTup)\n{\n    var temp = testTup.ToList();\n    temp.Clear();\n    testTup = Tuple.Create(temp.ToArray());\n    return testTup;\n}","task_id":816,"test_setup_code":"","test_list":["Debug.Assert(ClearTuple(new Tuple\u003Cint, int, int, int, int\u003E(1, 5, 3, 6, 8)).Equals(new Tuple()));","Debug.Assert(ClearTuple(new Tuple\u003Cint, int, int, int, int\u003E(2, 1, 4, 5, 6)).Equals(Tuple.Create()));","Debug.Assert(ClearTuple(new Tuple\u003Cint, int, int, int, int\u003E(3, 2, 5, 6, 8)).Equals(Tuple.Create()));"],"challenge_test_list":[]}
{"name":"find-divisibles","description":"Find numbers divisible by m or n using lambda","text":"Write a function to find numbers divisible by m or n from a list of numbers using lambda function.","code":"public List\u003Cint\u003E DivOfNums(List\u003Cint\u003E nums, int m, int n)  \n{  \n    return nums.Where(x =\u003E (x % m == 0 || x % n == 0)).ToList();  \n}","task_id":817,"test_setup_code":"","test_list":["Debug.Assert(DivOfNums(new int[] { 19, 65, 57, 39, 152, 639, 121, 44, 90, 190 }, 19, 13).SequenceEqual(new int[] { 19, 65, 57, 39, 152, 190 }));","Debug.Assert(DivOfNums(new int[] { 1, 2, 3, 5, 7, 8, 10 }, 2, 5).SequenceEqual(new int[] { 2, 5, 8, 10 }));","Debug.Assert(DivOfNums(new int[] { 10, 15, 14, 13, 18, 12, 20 }, 10, 5).SequenceEqual(new int[] { 10, 15, 20 }));"],"challenge_test_list":[]}
{"name":"count-lowercase","description":"Count lowercase letters in a string with Python","text":"Write a C# function to count lower case letters in a given string.","code":"public int LowerCtr(string str)  \n{  \n    int lowerCtr = 0;  \n    for (int i = 0; i \u003C str.Length; i\u002B\u002B)  \n    {  \n        if (str[i] \u003E= \u0027a\u0027 \u0026\u0026 str[i] \u003C= \u0027z\u0027)  \n        {  \n            lowerCtr\u002B\u002B;  \n        }  \n    }  \n    return lowerCtr;  \n}","task_id":818,"test_setup_code":"","test_list":["Debug.Assert(LowerCtr(\u0022abc\u0022) == 3);","Debug.Assert(LowerCtr(\u0022string\u0022) == 6);","Debug.Assert(LowerCtr(\u0022Python\u0022) == 5);"],"challenge_test_list":[]}
{"name":"consecutive-counts","description":"Count consecutive duplicates in a list of numbers","text":"Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.","code":"public (List\u003Cint\u003E, List\u003Cint\u003E) CountDuplic(List\u003Cint\u003E lists)\n{\n    List\u003Cint\u003E element = new List\u003Cint\u003E();\n    List\u003Cint\u003E frequency = new List\u003Cint\u003E();\n    if (lists.Count == 0)\n    {\n        return (element, frequency);\n    }\n    int runningCount = 1;\n    for (int i = 0; i \u003C lists.Count - 1; i\u002B\u002B)\n    {\n        if (lists[i] == lists[i \u002B 1])\n        {\n            runningCount\u002B\u002B;\n        }\n        else\n        {\n            frequency.Add(runningCount);\n            element.Add(lists[i]);\n            runningCount = 1;\n        }\n    }\n    frequency.Add(runningCount);\n    element.Add(lists[lists.Count - 1]);\n    return (element, frequency);\n}","task_id":819,"test_setup_code":"","test_list":["Debug.Assert(CountDuplic(new int[] { 1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5 }) == (new int[] { 1, 2, 4, 5 }, new int[] { 1, 3, 3, 4 }));","var result = CountDuplic(new List\u003Cint\u003E { 2, 2, 3, 1, 2, 6, 7, 9 });\nDebug.Assert(result.Equals((new List\u003Cint\u003E { 2, 3, 1, 2, 6, 7, 9 }, new List\u003Cint\u003E { 2, 1, 1, 1, 1, 1, 1 })));","Debug.Assert(CountDuplic(new int[] { 2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12 }).Equals((new int[] { 2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12 }, new int[] { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 })));"],"challenge_test_list":[]}
{"name":"month-28-check","description":"Check if a month number has 28 days","text":"Write a function to check whether the given month number contains 28 days or not.","code":"public bool CheckMonthNumNumber(int monthnum1)  \n{  \n    if (monthnum1 == 2)  \n    {  \n        return true;  \n    }  \n    else  \n    {  \n        return false;  \n    }  \n}","task_id":820,"test_setup_code":"","test_list":["Debug.Assert(CheckMonthNumNumber(2) == true);","Debug.Assert(CheckMonthNumNumber(1) == false);","Debug.Assert(CheckMonthNumNumber(3) == false);"],"challenge_test_list":[]}
{"name":"merge-dicts-func","description":"Merge two dictionaries into one expression","text":"Write a function to merge two dictionaries into a single expression.","code":"using System.Collections.Generic;\n\npublic Dictionary\u003CTKey, TValue\u003E MergeDictionaries\u003CTKey, TValue\u003E(Dictionary\u003CTKey, TValue\u003E dict1, Dictionary\u003CTKey, TValue\u003E dict2)\n{\n    var mergedDict = new Dictionary\u003CTKey, TValue\u003E(dict1);\n    foreach (var kvp in dict2)\n    {\n        mergedDict[kvp.Key] = kvp.Value;\n    }\n    return mergedDict;\n}","task_id":821,"test_setup_code":"","test_list":["Debug.Assert(MergeDictionaries(new Dictionary\u003Cstring, string\u003E { { \u0022R\u0022, \u0022Red\u0022 }, { \u0022B\u0022, \u0022Black\u0022 }, { \u0022P\u0022, \u0022Pink\u0022 } }, new Dictionary\u003Cstring, string\u003E { { \u0022G\u0022, \u0022Green\u0022 }, { \u0022W\u0022, \u0022White\u0022 } }).SequenceEqual(new Dictionary\u003Cstring, string\u003E { { \u0022B\u0022, \u0022Black\u0022 }, { \u0022R\u0022, \u0022Red\u0022 }, { \u0022P\u0022, \u0022Pink\u0022 }, { \u0022G\u0022, \u0022Green\u0022 }, { \u0022W\u0022, \u0022White\u0022 } }));","Debug.Assert(MergeDictionaries(new Dictionary\u003Cstring, string\u003E { { \u0022R\u0022, \u0022Red\u0022 }, { \u0022B\u0022, \u0022Black\u0022 }, { \u0022P\u0022, \u0022Pink\u0022 } }, new Dictionary\u003Cstring, string\u003E { { \u0022O\u0022, \u0022Orange\u0022 }, { \u0022W\u0022, \u0022White\u0022 }, { \u0022B\u0022, \u0022Black\u0022 } }).SequenceEqual(new Dictionary\u003Cstring, string\u003E { { \u0022O\u0022, \u0022Orange\u0022 }, { \u0022P\u0022, \u0022Pink\u0022 }, { \u0022B\u0022, \u0022Black\u0022 }, { \u0022W\u0022, \u0022White\u0022 }, { \u0022R\u0022, \u0022Red\u0022 } }));","Debug.Assert(MergeDictionaries(new Dictionary\u003Cstring, string\u003E { { \u0022G\u0022, \u0022Green\u0022 }, { \u0022W\u0022, \u0022White\u0022 } }, new Dictionary\u003Cstring, string\u003E { { \u0022O\u0022, \u0022Orange\u0022 }, { \u0022W\u0022, \u0022White\u0022 }, { \u0022B\u0022, \u0022Black\u0022 } }).SequenceEqual(new Dictionary\u003Cstring, string\u003E { { \u0022W\u0022, \u0022White\u0022 }, { \u0022O\u0022, \u0022Orange\u0022 }, { \u0022G\u0022, \u0022Green\u0022 }, { \u0022B\u0022, \u0022Black\u0022 } }));"],"challenge_test_list":[]}
{"name":"password-validity","description":"Validate a password and return true if valid","text":"Write a function to return true if the password is valid.","code":"using System.Text.RegularExpressions;\n\npublic bool PassValidity(string p) \n{\n    bool x = true;\n    while (x) \n    {\n        if (p.Length \u003C 6 || p.Length \u003E 12)\n        {\n            break;\n        }\n        else if (!Regex.IsMatch(p, \u0022[a-z]\u0022))\n        {\n            break;\n        }\n        else if (!Regex.IsMatch(p, \u0022[0-9]\u0022))\n        {\n            break;\n        }\n        else if (!Regex.IsMatch(p, \u0022[A-Z]\u0022))\n        {\n            break;\n        }\n        else if (!Regex.IsMatch(p, \u0022[$#@]\u0022))\n        {\n            break;\n        }\n        else if (Regex.IsMatch(p, \u0022\\\\s\u0022))\n        {\n            break;\n        }\n        else \n        {\n            return true;\n        }\n\n        x = false;\n        break;\n    }\n\n    return false;\n}","task_id":822,"test_setup_code":"","test_list":["Debug.Assert(PassValidity(\u0022password\u0022) == false);","Debug.Assert(PassValidity(\u0022Password@10\u0022) == true);","Debug.Assert(PassValidity(\u0022password@10\u0022) == false);"],"challenge_test_list":[]}
{"name":"\u0060check-startswith\u0060","description":"Check if a string starts with a substring using regex","text":"Write a function to check if the given string starts with a substring using regex.","code":"using System;\nusing System.Text.RegularExpressions;\n\npublic class SubstringChecker\n{\n    public string CheckSubstring(string inputString, string sample)\n    {\n        if (inputString.Contains(sample))\n        {\n            string pattern = \u0022^\u0022 \u002B Regex.Escape(sample);\n            Match match = Regex.Match(inputString, pattern);\n            if (match.Success)\n            {\n                return \u0022string starts with the given substring\u0022;\n            }\n            else\n            {\n                return \u0022string doesnt start with the given substring\u0022;\n            }\n        }\n        else\n        {\n            return \u0022entered string isnt a substring\u0022;\n        }\n    }\n}","task_id":823,"test_setup_code":"","test_list":["Debug.Assert(CheckSubstring(\u0022dreams for dreams makes life fun\u0022, \u0022makes\u0022) == \u0022string doesnt start with the given substring\u0022);\n\nstring CheckSubstring(string mainString, string substring) {\n    if (!mainString.StartsWith(substring)) {\n        return \u0022string doesnt start with the given substring\u0022;\n    }\n    return \u0022\u0022; // or any appropriate return based on your logic\n}","Debug.Assert(CheckSubstring(\u0022Hi there how are you Hi alex\u0022, \u0022Hi\u0022) == \u0022string starts with the given substring\u0022);\n\nstring CheckSubstring(string mainString, string substring) {\n    return mainString.StartsWith(substring) ? \u0022string starts with the given substring\u0022 : \u0022\u0022;\n}","Debug.Assert(CheckSubstring(\u0022Its been a long day\u0022, \u0022been\u0022) == \u0022string doesnt start with the given substring\u0022);\n\npublic string CheckSubstring(string mainString, string substring)\n{\n    if (!mainString.StartsWith(substring))\n    {\n        return \u0022string doesnt start with the given substring\u0022;\n    }\n    return string.Empty;\n}"],"challenge_test_list":[]}
{"name":"remove-even-numbers","description":"Remove even numbers from a list using Python","text":"Write a C# function to remove even numbers from a given list.","code":"public List\u003Cint\u003E RemoveEven(List\u003Cint\u003E l) \n{\n    for (int i = 0; i \u003C l.Count; i\u002B\u002B) \n    {\n        if (l[i] % 2 == 0) \n        {\n            l.RemoveAt(i);\n            i--; // Adjust index after removal\n        }\n    }\n    return l;\n}","task_id":824,"test_setup_code":"","test_list":["Debug.Assert(RemoveEven(new List\u003Cint\u003E { 1, 3, 5, 2 }).SequenceEqual(new List\u003Cint\u003E { 1, 3, 5 }));","Debug.Assert(RemoveEven(new List\u003Cint\u003E { 5, 6, 7 }).SequenceEqual(new List\u003Cint\u003E { 5, 7 }));","Debug.Assert(RemoveEven(new List\u003Cint\u003E { 1, 2, 3, 4 }).SequenceEqual(new List\u003Cint\u003E { 1, 3 }));"],"challenge_test_list":[]}
{"name":"list-element-access","description":"Access list elements by specified indices in Python","text":"Write a C# function to access multiple elements of specified index from a given list.","code":"public List\u003Cint\u003E AccessElements(List\u003Cint\u003E nums, List\u003Cint\u003E listIndex) {\n    List\u003Cint\u003E result = new List\u003Cint\u003E();\n    foreach (int i in listIndex) {\n        result.Add(nums[i]);\n    }\n    return result;\n}","task_id":825,"test_setup_code":"","test_list":["Debug.Assert(AccessElements(new int[] { 2, 3, 8, 4, 7, 9 }, new int[] { 0, 3, 5 }).SequenceEqual(new int[] { 2, 4, 9 }));","Debug.Assert(AccessElements(new int[] { 1, 2, 3, 4, 5 }, new int[] { 1, 2 }).SequenceEqual(new int[] { 2, 3 }));","Debug.Assert(AccessElements(new int[] { 1, 0, 2, 3 }, new int[] { 0, 1 }).SequenceEqual(new int[] { 1, 0 }));"],"challenge_test_list":[]}
{"name":"triangle-type-fn","description":"Determine triangle type from given side lengths","text":"Write a C# function to find the type of triangle from the given sides.","code":"public string CheckTypeOfTriangle(double a, double b, double c) \n{\n    double sqa = Math.Pow(a, 2);\n    double sqb = Math.Pow(b, 2);\n    double sqc = Math.Pow(c, 2);\n    \n    if (sqa == sqb \u002B sqc || sqb == sqa \u002B sqc || sqc == sqa \u002B sqb) \n    {\n        return \u0022Right-angled Triangle\u0022;\n    } \n    else if (sqa \u003E sqb \u002B sqc || sqb \u003E sqa \u002B sqc || sqc \u003E sqa \u002B sqb) \n    {\n        return \u0022Obtuse-angled Triangle\u0022;\n    } \n    else \n    {\n        return \u0022Acute-angled Triangle\u0022;\n    }\n}","task_id":826,"test_setup_code":"","test_list":["Debug.Assert(CheckTypeOfTriangle(1, 2, 3) == \u0022Obtuse-angled Triangle\u0022);","Debug.Assert(CheckTypeOfTriangle(2, 2, 2) == \u0022Acute-angled Triangle\u0022);","Debug.Assert(CheckTypeOfTriangle(1, 0, 1) == \u0022Right-angled Triangle\u0022);"],"challenge_test_list":[]}
{"name":"sum-column-list","description":"Sum a specific column from a list of lists","text":"Write a function to sum a specific column of a list in a given list of lists.","code":"public static int SumColumn(List\u003CList\u003Cint\u003E\u003E list1, int C) {\n    int result = list1.Sum(row =\u003E row[C]);\n    return result;\n}","task_id":827,"test_setup_code":"","test_list":["Debug.Assert(SumColumn(new int[][] { new int[] { 1, 2, 3, 2 }, new int[] { 4, 5, 6, 2 }, new int[] { 7, 8, 9, 5 } }, 0) == 12);","Debug.Assert(SumColumn(new int[][] { new int[] { 1, 2, 3, 2 }, new int[] { 4, 5, 6, 2 }, new int[] { 7, 8, 9, 5 } }, 1) == 15);","Debug.Assert(SumColumn(new int[][] { new int[] { 1, 2, 3, 2 }, new int[] { 4, 5, 6, 2 }, new int[] { 7, 8, 9, 5 } }, 3) == 9);"],"challenge_test_list":[]}
{"name":"count-char-types","description":"Count characters types in a given string","text":"Write a function to count alphabets,digits and special charactes in a given string.","code":"public (int alphabets, int digits, int special) CountAlphaDigSpl(string input)\n{\n    int alphabets = 0, digits = 0, special = 0;\n    for (int i = 0; i \u003C input.Length; i\u002B\u002B)\n    {\n        if (char.IsLetter(input[i]))\n        {\n            alphabets\u002B\u002B;\n        }\n        else if (char.IsDigit(input[i]))\n        {\n            digits\u002B\u002B;\n        }\n        else\n        {\n            special\u002B\u002B;\n        }\n    }\n    return (alphabets, digits, special);\n}","task_id":828,"test_setup_code":"","test_list":["Debug.Assert(CountAlphaDigSpl(\u0022abc!@#123\u0022).Equals((3, 3, 3)));","Debug.Assert(CountAlphaDigSpl(\u0022dgsuy@#$%\u00261255\u0022) == (5, 4, 5));","Debug.Assert(CountAlphaDigSpl(\u0022fjdsif627348#%$^\u0026\u0022) == (6, 6, 5));"],"challenge_test_list":[]}
{"name":"second-most-freq","description":"Find the second most frequent string in a list","text":"Write a function to find out the second most repeated (or frequent) string in the given sequence.","code":"using System.Collections.Generic;\nusing System.Linq;\n\npublic class Solution\n{\n    public static char SecondFrequent(string input)\n    {\n        var dict = input.GroupBy(c =\u003E c).ToDictionary(g =\u003E g.Key, g =\u003E g.Count());\n        var value = dict.Values.OrderByDescending(v =\u003E v).ToList();\n        var secondLarge = value[1];\n\n        foreach (var kvp in dict)\n        {\n            if (kvp.Value == secondLarge)\n            {\n                return kvp.Key;\n            }\n        }\n        \n        return default;\n    }\n}","task_id":829,"test_setup_code":"","test_list":["Debug.Assert(SecondFrequent(new string[] { \u0022aaa\u0022, \u0022bbb\u0022, \u0022ccc\u0022, \u0022bbb\u0022, \u0022aaa\u0022, \u0022aaa\u0022 }) == \u0022bbb\u0022);","Debug.Assert(SecondFrequent(new List\u003Cstring\u003E { \u0022abc\u0022, \u0022bcd\u0022, \u0022abc\u0022, \u0022bcd\u0022, \u0022bcd\u0022, \u0022bcd\u0022 }) == \u0022abc\u0022);","Debug.Assert(SecondFrequent(new List\u003Cstring\u003E { \u0022cdma\u0022, \u0022gsm\u0022, \u0022hspa\u0022, \u0022gsm\u0022, \u0022cdma\u0022, \u0022cdma\u0022 }) == \u0022gsm\u0022);"],"challenge_test_list":[]}
{"name":"round-up-to-dig","description":"Round a number up to the specified decimal places","text":"Write a function to round up a number to specific digits.","code":"public static double RoundUp(double a, int digits)\n{\n    double n = Math.Pow(10, -digits);\n    return Math.Round(Math.Ceiling(a / n) * n, digits);\n}","task_id":830,"test_setup_code":"","test_list":["Debug.Assert(RoundUp(123.01247, 0) == 124);\n\npublic static int RoundUp(double value, int decimals)\n{\n    double factor = Math.Pow(10, decimals);\n    return (int)Math.Ceiling(value * factor) / (int)factor;\n}","Debug.Assert(RoundUp(123.01247, 1) == 123.1);\n\ndouble RoundUp(double value, int decimalPlaces)\n{\n    double factor = Math.Pow(10, decimalPlaces);\n    return Math.Ceiling(value * factor) / factor;\n}","Debug.Assert(RoundUp(123.01247, 2) == 123.02);\n\npublic static double RoundUp(double value, int digits)\n{\n    double multiplier = Math.Pow(10, digits);\n    return Math.Ceiling(value * multiplier) / multiplier;\n}"],"challenge_test_list":[]}
{"name":"equal-element-pairs","description":"Count pairs of equal elements in an array","text":"Write a C# function to count equal element pairs from the given array.","code":"public int CountPairs(int[] arr, int n) \n{ \n    int cnt = 0; \n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    { \n        for (int j = i \u002B 1; j \u003C n; j\u002B\u002B) \n        { \n            if (arr[i] == arr[j]) \n            { \n                cnt\u002B\u002B; \n            } \n        } \n    } \n    return cnt; \n}","task_id":831,"test_setup_code":"","test_list":["Debug.Assert(CountPairs(new int[] { 1, 1, 1, 1 }, 4) == 6);","Debug.Assert(CountPairs(new int[] { 1, 5, 1 }, 3) == 1);","Debug.Assert(CountPairs(new int[] { 3, 2, 1, 7, 8, 9 }, 6) == 0);"],"challenge_test_list":[]}
{"name":"max-number-extract","description":"Extract max numeric value from string using regex","text":"Write a function to extract the maximum numeric value from a string by using regex.","code":"using System;\nusing System.Linq;\nusing System.Text.RegularExpressions;\n\npublic class Program\n{\n    public static int ExtractMax(string input)\n    {\n        var numbers = Regex.Matches(input, @\u0022\\d\u002B\u0022)\n                           .Cast\u003CMatch\u003E()\n                           .Select(m =\u003E int.Parse(m.Value));\n        return numbers.Max();\n    }\n}","task_id":832,"test_setup_code":"","test_list":["Debug.Assert(ExtractMax(\u0022100klh564abc365bg\u0022) == 564);","Debug.Assert(ExtractMax(\u0022hello300how546mer231\u0022) == 546);","Debug.Assert(ExtractMax(\u0022its233beenalong343journey234\u0022) == 343);"],"challenge_test_list":[]}
{"name":"get-keys-as-list","description":"Get dictionary keys and return as a list","text":"Write a function to get dictionary keys as a list.","code":"public List\u003CTKey\u003E GetKey\u003CTKey, TValue\u003E(Dictionary\u003CTKey, TValue\u003E dict) \n{ \n    List\u003CTKey\u003E list = new List\u003CTKey\u003E(); \n    foreach (TKey key in dict.Keys) \n    { \n        list.Add(key); \n    } \n    return list; \n}","task_id":833,"test_setup_code":"","test_list":["Debug.Assert(GetKey(new Dictionary\u003Cint, string\u003E { { 1, \u0022python\u0022 }, { 2, \u0022java\u0022 } }).SequenceEqual(new List\u003Cint\u003E { 1, 2 }));","Debug.Assert(GetKey(new Dictionary\u003Cint, string\u003E {{10, \u0022red\u0022}, {20, \u0022blue\u0022}, {30, \u0022black\u0022}}).SequenceEqual(new List\u003Cint\u003E {10, 20, 30}));","Debug.Assert(GetKey(new Dictionary\u003Cint, string\u003E {{27, \u0022language\u0022}, {39, \u0022java\u0022}, {44, \u0022little\u0022}}).SequenceEqual(new List\u003Cint\u003E {27, 39, 44}));"],"challenge_test_list":[]}
{"name":"spiral-square-matrix","description":"Spiral matrix of squares from 1 to n","text":"Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.","code":"public int[,] GenerateMatrix(int n) {\n    if (n \u003C= 0) {\n        return new int[0, 0];\n    }\n    int[,] matrix = new int[n, n];\n    int rowSt = 0;\n    int rowEd = n - 1;\n    int colSt = 0;\n    int colEd = n - 1;\n    int current = 1;\n\n    while (true) {\n        if (current \u003E n * n) {\n            break;\n        }\n        for (int c = colSt; c \u003C= colEd; c\u002B\u002B) {\n            matrix[rowSt, c] = current;\n            current\u002B\u002B;\n        }\n        rowSt\u002B\u002B;\n        for (int r = rowSt; r \u003C= rowEd; r\u002B\u002B) {\n            matrix[r, colEd] = current;\n            current\u002B\u002B;\n        }\n        colEd--;\n        for (int c = colEd; c \u003E= colSt; c--) {\n            matrix[rowEd, c] = current;\n            current\u002B\u002B;\n        }\n        rowEd--;\n        for (int r = rowEd; r \u003E= rowSt; r--) {\n            matrix[r, colSt] = current;\n            current\u002B\u002B;\n        }\n        colSt\u002B\u002B;\n    }\n    return matrix;\n}","task_id":834,"test_setup_code":"","test_list":["Debug.Assert(GenerateMatrix(3).SequenceEqual(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 1, 2, 3 }, new List\u003Cint\u003E { 8, 9, 4 }, new List\u003Cint\u003E { 7, 6, 5 } }));","Debug.Assert(GenerateMatrix(2).SequenceEqual(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 1, 2 }, new List\u003Cint\u003E { 4, 3 } }));","Debug.Assert(GenerateMatrix(7).SequenceEqual(new List\u003CList\u003Cint\u003E\u003E() { \n    new List\u003Cint\u003E() { 1, 2, 3, 4, 5, 6, 7 }, \n    new List\u003Cint\u003E() { 24, 25, 26, 27, 28, 29, 8 }, \n    new List\u003Cint\u003E() { 23, 40, 41, 42, 43, 30, 9 }, \n    new List\u003Cint\u003E() { 22, 39, 48, 49, 44, 31, 10 }, \n    new List\u003Cint\u003E() { 21, 38, 47, 46, 45, 32, 11 }, \n    new List\u003Cint\u003E() { 20, 37, 36, 35, 34, 33, 12 }, \n    new List\u003Cint\u003E() { 19, 18, 17, 16, 15, 14, 13 } \n}));"],"challenge_test_list":[]}
{"name":"slope-of-line.py","description":"Calculate the slope of a line in Python","text":"Write a C# function to find the slope of a line.","code":"public float Slope(float x1, float y1, float x2, float y2) \n{ \n    return (y2 - y1) / (x2 - x1); \n}","task_id":835,"test_setup_code":"","test_list":["Debug.Assert(Slope(4, 2, 2, 5) == -1.5);\n\ndouble Slope(double x1, double y1, double x2, double y2) {\n    return (y2 - y1) / (x2 - x1);\n}","Debug.Assert(Slope(2, 4, 4, 6) == 1);\n\npublic static double Slope(double x1, double y1, double x2, double y2) {\n    return (y2 - y1) / (x2 - x1);\n}","Debug.Assert(Slope(1, 2, 4, 2) == 0);"],"challenge_test_list":[]}
{"name":"max-sum-length","description":"Find length of subarray with maximum sum","text":"Write a function to find length of the subarray having maximum sum.","code":"using System;\n\npublic class Program\n{\n    public static int MaxSubArraySum(int[] a, int size)\n    {\n        int maxSoFar = int.MinValue;\n        int maxEndingHere = 0;\n        int start = 0;\n        int end = 0;\n        int s = 0;\n\n        for (int i = 0; i \u003C size; i\u002B\u002B)\n        {\n            maxEndingHere \u002B= a[i];\n\n            if (maxSoFar \u003C maxEndingHere)\n            {\n                maxSoFar = maxEndingHere;\n                start = s;\n                end = i;\n            }\n\n            if (maxEndingHere \u003C 0)\n            {\n                maxEndingHere = 0;\n                s = i \u002B 1;\n            }\n        }\n\n        return end - start \u002B 1;\n    }\n}","task_id":836,"test_setup_code":"","test_list":["Debug.Assert(MaxSubArraySum(new int[] { -2, -3, 4, -1, -2, 1, 5, -3 }) == 5);\n\npublic static int MaxSubArraySum(int[] arr) {\n    // Implementation of MaxSubArraySum goes here\n}","Debug.Assert(MaxSubArraySum(new int[] { 1, -2, 1, 1, -2, 1 }, 6) == 2);","Debug.Assert(MaxSubArraySum(new int[] { -1, -2, 3, 4, 5 }, 5) == 3);"],"challenge_test_list":[]}
{"name":"cube-sum-odd-n","description":"Calculate the cube sum of first n odd numbers","text":"Write a C# function to find the cube sum of first n odd natural numbers.","code":"public int CubeSum(int n) \n{ \n    int sum = 0; \n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    { \n        sum \u002B= (2 * i \u002B 1) * (2 * i \u002B 1) * (2 * i \u002B 1); \n    } \n    return sum; \n}","task_id":837,"test_setup_code":"","test_list":["Debug.Assert(CubeSum(2) == 28);","Debug.Assert(CubeSum(3) == 153);","Debug.Assert(CubeSum(4) == 496);"],"challenge_test_list":[]}
{"name":"min-swaps-binary","description":"Find swaps to make two binary strings equal","text":"Write a C# function to find minimum number swaps required to make two binary strings equal.","code":"public int MinSwaps(string s1, string s2)  \n{  \n    int c0 = 0, c1 = 0;  \n    for (int i = 0; i \u003C s1.Length; i\u002B\u002B)  \n    {  \n        if (s1[i] == \u00270\u0027 \u0026\u0026 s2[i] == \u00271\u0027)  \n        {  \n            c0\u002B\u002B;  \n        }  \n        else if (s1[i] == \u00271\u0027 \u0026\u0026 s2[i] == \u00270\u0027)  \n        {  \n            c1\u002B\u002B;  \n        }  \n    }  \n    int result = c0 / 2 \u002B c1 / 2;  \n    if (c0 % 2 == 0 \u0026\u0026 c1 % 2 == 0)  \n    {  \n        return result;  \n    }  \n    else if ((c0 \u002B c1) % 2 == 0)  \n    {  \n        return result \u002B 2;  \n    }  \n    else  \n    {  \n        return -1;  \n    }  \n}","task_id":838,"test_setup_code":"","test_list":["Debug.Assert(MinSwaps(\u00220011\u0022, \u00221111\u0022) == 1);","Debug.Assert(MinSwaps(\u002200011\u0022, \u002201001\u0022) == 2);","Debug.Assert(MinSwaps(\u0022111\u0022, \u0022111\u0022) == 0);"],"challenge_test_list":[]}
{"name":"sort-tuples-alpha","description":"Sort tuples by the first item alphabetically","text":"Write a function to sort the tuples alphabetically by the first item of each tuple.","code":"public Tuple\u003Cint, int\u003E[] SortTuple(Tuple\u003Cint, int\u003E[] tup) \n{ \n    int n = tup.Length; \n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    { \n        for (int j = 0; j \u003C n - i - 1; j\u002B\u002B) \n        { \n            if (tup[j].Item1 \u003E tup[j \u002B 1].Item1) \n            { \n                var temp = tup[j]; \n                tup[j] = tup[j \u002B 1]; \n                tup[j \u002B 1] = temp; \n            } \n        } \n    } \n    return tup; \n}","task_id":839,"test_setup_code":"","test_list":["Debug.Assert(SortTuple(new Tuple\u003Cstring, object\u003E[] { Tuple.Create(\u0022Amana\u0022, 28), Tuple.Create(\u0022Zenat\u0022, 30), Tuple.Create(\u0022Abhishek\u0022, 29), Tuple.Create(\u0022Nikhil\u0022, 21), Tuple.Create(\u0022B\u0022, \u0022C\u0022) }).SequenceEqual(new Tuple\u003Cstring, object\u003E[] { Tuple.Create(\u0022Abhishek\u0022, 29), Tuple.Create(\u0022Amana\u0022, 28), Tuple.Create(\u0022B\u0022, \u0022C\u0022), Tuple.Create(\u0022Nikhil\u0022, 21), Tuple.Create(\u0022Zenat\u0022, 30) }));","Debug.Assert(SortTuple(new Tuple\u003Cstring, object\u003E[] { Tuple.Create(\u0022aaaa\u0022, 28), Tuple.Create(\u0022aa\u0022, 30), Tuple.Create(\u0022bab\u0022, 29), Tuple.Create(\u0022bb\u0022, 21), Tuple.Create(\u0022csa\u0022, \u0022C\u0022) }).SequenceEqual(new List\u003CTuple\u003Cstring, object\u003E\u003E { Tuple.Create(\u0022aa\u0022, 30), Tuple.Create(\u0022aaaa\u0022, 28), Tuple.Create(\u0022bab\u0022, 29), Tuple.Create(\u0022bb\u0022, 21), Tuple.Create(\u0022csa\u0022, \u0022C\u0022) }));","Debug.Assert(SortTuple(new Tuple\u003Cstring, object\u003E[] { Tuple.Create(\u0022Sarala\u0022, 28), Tuple.Create(\u0022Ayesha\u0022, 30), Tuple.Create(\u0022Suman\u0022, 29), Tuple.Create(\u0022Sai\u0022, 21), Tuple.Create(\u0022G\u0022, \u0022H\u0022) })\n                .SequenceEqual(new List\u003CTuple\u003Cstring, object\u003E\u003E { Tuple.Create(\u0022Ayesha\u0022, 30), Tuple.Create(\u0022G\u0022, \u0022H\u0022), Tuple.Create(\u0022Sai\u0022, 21), Tuple.Create(\u0022Sarala\u0022, 28), Tuple.Create(\u0022Suman\u0022, 29) }));"],"challenge_test_list":[]}
{"name":"check-opposite-roots","description":"Check if quadratic roots are equal and opposite","text":"Write a C# function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.","code":"public string CheckSolution(int a, int b, int c)  \n{  \n    if (b == 0)  \n    {  \n        return \u0022Yes\u0022;  \n    }  \n    else  \n    {  \n        return \u0022No\u0022;  \n    }  \n}","task_id":840,"test_setup_code":"","test_list":["Debug.Assert(CheckSolution(2, 0, -1) == \u0022Yes\u0022);","Debug.Assert(CheckSolution(1, -5, 6) == \u0022No\u0022);","Debug.Assert(CheckSolution(2, 0, 2) == \u0022Yes\u0022);"],"challenge_test_list":[]}
{"name":"count-inversions","description":"Count inversions in an array with a function","text":"Write a function to count the number of inversions in the given array.","code":"public int GetInvCount(int[] arr, int n) \n{\n    int invCount = 0;\n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    {\n        for (int j = i \u002B 1; j \u003C n; j\u002B\u002B) \n        {\n            if (arr[i] \u003E arr[j]) \n            {\n                invCount\u002B\u002B;\n            }\n        }\n    }\n    return invCount;\n}","task_id":841,"test_setup_code":"","test_list":["Debug.Assert(GetInvCount(new int[] { 1, 20, 6, 4, 5 }, 5) == 5);","Debug.Assert(GetInvCount(new int[] { 8, 4, 2, 1 }, 4) == 6);","Debug.Assert(GetInvCount(new int[] { 3, 1, 2 }, 3) == 2);"],"challenge_test_list":[]}
{"name":"odd-count-number","description":"Find the number that appears odd times in array","text":"Write a function to find the number which occurs for odd number of times in the given array.","code":"public int GetOddOccurence(int[] arr, int arrSize) {\n    for (int i = 0; i \u003C arrSize; i\u002B\u002B) {\n        int count = 0;\n        for (int j = 0; j \u003C arrSize; j\u002B\u002B) {\n            if (arr[i] == arr[j]) {\n                count\u002B\u002B;\n            }\n        }\n        if (count % 2 != 0) {\n            return arr[i];\n        }\n    }\n    return -1;\n}","task_id":842,"test_setup_code":"","test_list":["Debug.Assert(GetOddOccurence(new int[] { 2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2 }, 13) == 5);","Debug.Assert(GetOddOccurence(new int[] { 1, 2, 3, 2, 3, 1, 3 }, 7) == 3);","Debug.Assert(GetOddOccurence(new int[] { 5, 7, 2, 7, 5, 2, 5 }, 7) == 5);"],"challenge_test_list":[]}
{"name":"super-ugly-nth","description":"Find the nth super ugly number using a heap","text":"Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.","code":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Solution\n{\n    public int NthSuperUglyNumber(int n, int[] primes)\n    {\n        List\u003Cint\u003E uglies = new List\u003Cint\u003E { 1 };\n        \n        IEnumerable\u003CIEnumerable\u003Clong\u003E\u003E Generate(int prime)\n        {\n            foreach (long ugly in uglies)\n            {\n                yield return new long[] { ugly * prime };\n            }\n        }\n\n        IEnumerable\u003Clong\u003E merged = primes.SelectMany(p =\u003E Generate(p)).OrderBy(x =\u003E x).Distinct();\n\n        using (var enumerator = merged.GetEnumerator())\n        {\n            while (uglies.Count \u003C n)\n            {\n                enumerator.MoveNext();\n                long ugly = enumerator.Current;\n                if (ugly != uglies.Last())\n                {\n                    uglies.Add((int)ugly);\n                }\n            }\n        }\n        \n        return uglies.Last();\n    }\n}","task_id":843,"test_setup_code":"","test_list":["Debug.Assert(NthSuperUglyNumber(12, new int[]{2, 7, 13, 19}) == 32);","Debug.Assert(NthSuperUglyNumber(10, new int[] { 2, 7, 13, 19 }) == 26);","Debug.Assert(NthSuperUglyNumber(100, new int[] { 2, 7, 13, 19 }) == 5408);"],"challenge_test_list":[]}
{"name":"odd-even-kth-finder","description":"Find the kth element in a segregated array","text":"Write a C# function to find the kth element in an array containing odd elements first and then even elements.","code":"public int GetNumber(int n, int k) \n{ \n    int[] arr = new int[n]; \n    int i = 0; \n    int odd = 1; \n    while (odd \u003C= n) \n    { \n        arr[i] = odd; \n        i\u002B\u002B; \n        odd \u002B= 2; \n    } \n    int even = 2; \n    while (even \u003C= n) \n    { \n        arr[i] = even; \n        i\u002B\u002B; \n        even \u002B= 2; \n    } \n    return arr[k - 1]; \n}","task_id":844,"test_setup_code":"","test_list":["Debug.Assert(GetNumber(8, 5) == 2);","Debug.Assert(GetNumber(7, 2) == 3);","Debug.Assert(GetNumber(5, 2) == 3);"],"challenge_test_list":[]}
{"name":"count-digits-fact","description":"Count digits in factorial of a number","text":"Write a C# function to count the number of digits in factorial of a given number.","code":"public static int FindDigits(int n) \n{ \n    if (n \u003C 0) \n        return 0; \n    if (n \u003C= 1) \n        return 1; \n    double x = (n * Math.Log10(n / Math.E) \u002B Math.Log10(2 * Math.PI * n) / 2.0); \n    return (int)Math.Floor(x) \u002B 1; \n}","task_id":845,"test_setup_code":"","test_list":["Debug.Assert(FindDigits(7) == 4);","Debug.Assert(FindDigits(5) == 3);","Debug.Assert(FindDigits(4) == 2);"],"challenge_test_list":[]}
{"name":"min-platforms-needed","description":"Calculate platforms needed for a railway or bus station","text":"Write a function to find the minimum number of platforms required for a railway/bus station.","code":"public static int FindPlatform(int[] arr, int[] dep, int n) \n{\n    Array.Sort(arr);\n    Array.Sort(dep);\n    int platNeeded = 1;\n    int result = 1;\n    int i = 1;\n    int j = 0;\n    while (i \u003C n \u0026\u0026 j \u003C n) \n    {\n        if (arr[i] \u003C= dep[j]) \n        {\n            platNeeded\u002B\u002B;\n            i\u002B\u002B;\n        }\n        else if (arr[i] \u003E dep[j]) \n        {\n            platNeeded--;\n            j\u002B\u002B;\n        }\n        if (platNeeded \u003E result) \n        {\n            result = platNeeded;\n        }\n    }\n    return result;\n}","task_id":846,"test_setup_code":"","test_list":["Debug.Assert(FindPlatform(new int[] { 900, 940, 950, 1100, 1500, 1800 }, new int[] { 910, 1200, 1120, 1130, 1900, 2000 }, 6) == 3);","Debug.Assert(FindPlatform(new int[] { 100, 200, 300, 400 }, new int[] { 700, 800, 900, 1000 }, 4) == 4);","Debug.Assert(FindPlatform(new int[] { 5, 6, 7, 8 }, new int[] { 4, 3, 2, 1 }, 4) == 1);"],"challenge_test_list":[]}
{"name":"singleton-list.py","description":"Copy a list from a singleton tuple using Python","text":"Write a C# function to copy a list from a singleton tuple.","code":"public List\u003CT\u003E Lcopy\u003CT\u003E(List\u003CT\u003E xs)\n{\n    return new List\u003CT\u003E(xs);\n}","task_id":847,"test_setup_code":"","test_list":["Debug.Assert(Lcopy(new List\u003Cint\u003E { 1, 2, 3 }).SequenceEqual(new List\u003Cint\u003E { 1, 2, 3 }));","Debug.Assert(Lcopy(new List\u003Cint\u003E { 4, 8, 2, 10, 15, 18 }).SequenceEqual(new List\u003Cint\u003E { 4, 8, 2, 10, 15, 18 }));","Debug.Assert(Lcopy(new List\u003Cint\u003E { 4, 5, 6 }).SequenceEqual(new List\u003Cint\u003E { 4, 5, 6 }));"],"challenge_test_list":[]}
{"name":"trapezium-area","description":"Calculate the area of a trapezium with a function","text":"Write a function to find the area of a trapezium.","code":"public double AreaTrapezium(double base1, double base2, double height)\n{\n    double area = 0.5 * (base1 \u002B base2) * height;\n    return area;\n}","task_id":848,"test_setup_code":"","test_list":["Debug.Assert(AreaTrapezium(6, 9, 4) == 30);","Debug.Assert(AreaTrapezium(10, 20, 30) == 450);","Debug.Assert(AreaTrapezium(15, 25, 35) == 700);"],"challenge_test_list":[]}
{"name":"prime-divisor-sum","description":"Sum of all prime divisors of a number in Python","text":"Write a C# function to find sum of all prime divisors of a given number.","code":"public int Sum(int N) \n{\n    int[] SumOfPrimeDivisors = new int[N \u002B 1];\n    for (int i = 2; i \u003C= N; i\u002B\u002B)\n    {\n        if (SumOfPrimeDivisors[i] == 0)\n        {\n            for (int j = i; j \u003C= N; j \u002B= i)\n            {\n                SumOfPrimeDivisors[j] \u002B= i;\n            }\n        }\n    }\n    return SumOfPrimeDivisors[N];\n}","task_id":849,"test_setup_code":"","test_list":["Debug.Assert(Sum(60) == 10);","Debug.Assert(Sum(39) == 16);","Debug.Assert(Sum(40) == 7);"],"challenge_test_list":[]}
{"name":"check-triangle","description":"Check if positive area triangle angles are valid","text":"Write a function to check if a triangle of positive area is possible with the given angles.","code":"bool IsTriangleExists(int a, int b, int c) \n{ \n    if (a != 0 \u0026\u0026 b != 0 \u0026\u0026 c != 0 \u0026\u0026 (a \u002B b \u002B c) == 180) \n    { \n        if ((a \u002B b) \u003E= c || (b \u002B c) \u003E= a || (a \u002B c) \u003E= b) \n        { \n            return true; \n        } \n        else \n        { \n            return false; \n        } \n    } \n    else \n    { \n        return false; \n    } \n}","task_id":850,"test_setup_code":"","test_list":["Debug.Assert(IsTriangleExists(50, 60, 70) == true);","Debug.Assert(IsTriangleExists(90, 45, 45) == true);","Debug.Assert(IsTriangleExists(150, 30, 70) == false);"],"challenge_test_list":[]}
{"name":"sum-of-inv-divis","description":"Calculate sum of inverse of divisors in Python","text":"Write a C# function to find sum of inverse of divisors.","code":"public static double SumOfInverseDivisors(int N, double Sum) \n{ \n    double ans = Sum * 1.0 / N; \n    return Math.Round(ans, 2); \n}","task_id":851,"test_setup_code":"","test_list":["Debug.Assert(SumOfInverseDivisors(6, 12) == 2);","Debug.Assert(SumOfInverseDivisors(9, 13) == 1.44);","Debug.Assert(SumOfInverseDivisors(1, 4) == 4);"],"challenge_test_list":[]}
{"name":"remove-negatives","description":"Remove negative numbers from a list in Python","text":"Write a C# function to remove negative numbers from a list.","code":"public List\u003Cint\u003E RemoveNegs(List\u003Cint\u003E numList) \n{ \n    for (int i = numList.Count - 1; i \u003E= 0; i--) \n    { \n        if (numList[i] \u003C 0) \n        { \n            numList.RemoveAt(i); \n        } \n    } \n    return numList; \n}","task_id":852,"test_setup_code":"","test_list":["Debug.Assert(RemoveNegs(new List\u003Cint\u003E { 1, -2, 3, -4 }).SequenceEqual(new List\u003Cint\u003E { 1, 3 }));","Debug.Assert(RemoveNegs(new List\u003Cint\u003E { 1, 2, 3, -4 }).SequenceEqual(new List\u003Cint\u003E { 1, 2, 3 }));","Debug.Assert(RemoveNegs(new List\u003Cint\u003E { 4, 5, -6, 7, -8 }).SequenceEqual(new List\u003Cint\u003E { 4, 5, 7 }));"],"challenge_test_list":[]}
{"name":"sum-odd-factors","description":"Sum odd factors of a number using Python function","text":"Write a C# function to find sum of odd factors of a number.","code":"public static int SumOfOddFactors(int n) \n{\n    int res = 1;\n    while (n % 2 == 0) \n    {\n        n /= 2;\n    }\n    for (int i = 3; i \u003C= Math.Sqrt(n); i \u002B= 2) \n    {\n        int count = 0;\n        int currSum = 1;\n        int currTerm = 1;\n        while (n % i == 0) \n        {\n            count\u002B\u002B;\n            n /= i;\n            currTerm *= i;\n            currSum \u002B= currTerm;\n        }\n        res *= currSum;\n    }\n    if (n \u003E= 2) \n    {\n        res *= (1 \u002B n);\n    }\n    return res;\n}","task_id":853,"test_setup_code":"","test_list":["Debug.Assert(SumOfOddFactors(30) == 24);","Debug.Assert(SumOfOddFactors(18) == 13);","Debug.Assert(SumOfOddFactors(2) == 1);"],"challenge_test_list":[]}
{"name":"heap-queue-convert","description":"Convert a list to a heap using the heap queue algorithm","text":"Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.","code":"using System.Collections.Generic;\n\npublic List\u003Cint\u003E RawHeap(List\u003Cint\u003E rawheap)\n{\n    Heapify(rawheap);\n    return rawheap;\n}\n\nprivate void Heapify(List\u003Cint\u003E heap)\n{\n    int count = heap.Count;\n    for (int i = count / 2 - 1; i \u003E= 0; i--)\n    {\n        SiftDown(heap, i, count);\n    }\n}\n\nprivate void SiftDown(List\u003Cint\u003E heap, int index, int count)\n{\n    int childIndex = 2 * index \u002B 1;\n    while (childIndex \u003C count)\n    {\n        int rightIndex = childIndex \u002B 1;\n        if (rightIndex \u003C count \u0026\u0026 heap[rightIndex] \u003C heap[childIndex])\n        {\n            childIndex = rightIndex;\n        }\n\n        if (heap[index] \u003C= heap[childIndex]) \n            break;\n\n        int temp = heap[index];\n        heap[index] = heap[childIndex];\n        heap[childIndex] = temp;\n\n        index = childIndex;\n        childIndex = 2 * index \u002B 1;\n    }\n}","task_id":854,"test_setup_code":"","test_list":["Debug.Assert(RawHeap(new List\u003Cint\u003E { 25, 44, 68, 21, 39, 23, 89 }).SequenceEqual(new List\u003Cint\u003E { 21, 25, 23, 44, 39, 68, 89 }));","Debug.Assert(RawHeap(new int[] { 25, 35, 22, 85, 14, 65, 75, 25, 58 }).SequenceEqual(new int[] { 14, 25, 22, 25, 35, 65, 75, 85, 58 }));","Debug.Assert(RawHeap(new List\u003Cint\u003E { 4, 5, 6, 2 }).SequenceEqual(new List\u003Cint\u003E { 2, 4, 6, 5 }));"],"challenge_test_list":[]}
{"name":"even-parity-check","description":"Check if a number has even parity in Python","text":"Write a C# function to check for even parity of a given number.","code":"public bool CheckEvenParity(int x) \n{ \n    int parity = 0; \n    while (x != 0) \n    { \n        x = x \u0026 (x - 1); \n        parity \u002B= 1; \n    } \n    return parity % 2 == 0; \n}","task_id":855,"test_setup_code":"","test_list":["Debug.Assert(CheckEvenParity(10) == true);","Debug.Assert(CheckEvenParity(11) == false);","Debug.Assert(CheckEvenParity(18) == true);"],"challenge_test_list":[]}
{"name":"min-adj-swaps","description":"Find minimum swaps to sort binary array","text":"Write a C# function to find minimum adjacent swaps required to sort binary array.","code":"int FindMinSwaps(int[] arr, int n) \n{\n    int[] noOfZeroes = new int[n];\n    int count = 0;\n    noOfZeroes[n - 1] = 1 - arr[n - 1];\n    \n    for (int i = n - 2; i \u003E= 0; i--) \n    {\n        noOfZeroes[i] = noOfZeroes[i \u002B 1];\n        if (arr[i] == 0) \n        {\n            noOfZeroes[i] \u002B= 1;\n        }\n    }\n    \n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    {\n        if (arr[i] == 1) \n        {\n            count \u002B= noOfZeroes[i];\n        }\n    }\n    \n    return count;\n}","task_id":856,"test_setup_code":"","test_list":["Debug.Assert(FindMinSwaps(new int[] { 1, 0, 1, 0 }, 4) == 3);","Debug.Assert(FindMinSwaps(new int[] { 0, 1, 0 }, 3) == 1);","Debug.Assert(FindMinSwaps(new int[] { 0, 0, 1, 1, 0 }, 5) == 2);"],"challenge_test_list":[]}
{"name":"list-strings-map","description":"List strings individually using the map function","text":"Write a function to list out the list of given strings individually using map function.","code":"public List\u003CList\u003Cobject\u003E\u003E ListifyList(List\u003Cobject\u003E list1) \n{\n    return list1.Select(item =\u003E item as List\u003Cobject\u003E).ToList();\n}","task_id":857,"test_setup_code":"","test_list":["Debug.Assert(ListifyList(new List\u003Cstring\u003E { \u0022Red\u0022, \u0022Blue\u0022, \u0022Black\u0022, \u0022White\u0022, \u0022Pink\u0022 }).SequenceEqual(new List\u003CList\u003Cchar\u003E\u003E { \n    new List\u003Cchar\u003E { \u0027R\u0027, \u0027e\u0027, \u0027d\u0027 }, \n    new List\u003Cchar\u003E { \u0027B\u0027, \u0027l\u0027, \u0027u\u0027, \u0027e\u0027 }, \n    new List\u003Cchar\u003E { \u0027B\u0027, \u0027l\u0027, \u0027a\u0027, \u0027c\u0027, \u0027k\u0027 }, \n    new List\u003Cchar\u003E { \u0027W\u0027, \u0027h\u0027, \u0027i\u0027, \u0027t\u0027, \u0027e\u0027 }, \n    new List\u003Cchar\u003E { \u0027P\u0027, \u0027i\u0027, \u0027n\u0027, \u0027k\u0027 } }));","Debug.Assert(ListifyList(new List\u003Cstring\u003E { \u0022python\u0022 }).SequenceEqual(new List\u003CList\u003Cchar\u003E\u003E { new List\u003Cchar\u003E { \u0027p\u0027, \u0027y\u0027, \u0027t\u0027, \u0027h\u0027, \u0027o\u0027, \u0027n\u0027 } }));","Debug.Assert(ListifyList(new List\u003Cstring\u003E { \u0022 red \u0022, \u0022green\u0022, \u0022 black\u0022, \u0022blue \u0022, \u0022 orange\u0022, \u0022brown\u0022 }).SequenceEqual(new List\u003CList\u003Cchar\u003E\u003E { \n    new List\u003Cchar\u003E { \u0027 \u0027, \u0027r\u0027, \u0027e\u0027, \u0027d\u0027, \u0027 \u0027 }, \n    new List\u003Cchar\u003E { \u0027g\u0027, \u0027r\u0027, \u0027e\u0027, \u0027e\u0027, \u0027n\u0027 }, \n    new List\u003Cchar\u003E { \u0027 \u0027, \u0027b\u0027, \u0027l\u0027, \u0027a\u0027, \u0027c\u0027, \u0027k\u0027 }, \n    new List\u003Cchar\u003E { \u0027b\u0027, \u0027l\u0027, \u0027u\u0027, \u0027e\u0027, \u0027 \u0027 }, \n    new List\u003Cchar\u003E { \u0027 \u0027, \u0027o\u0027, \u0027r\u0027, \u0027a\u0027, \u0027n\u0027, \u0027g\u0027, \u0027e\u0027 }, \n    new List\u003Cchar\u003E { \u0027b\u0027, \u0027r\u0027, \u0027o\u0027, \u0027w\u0027, \u0027n\u0027 } }));"],"challenge_test_list":[]}
{"name":"count-and-square","description":"Count lists in a list and return the square","text":"Write a function to count number of lists in a given list of lists and square the count.","code":"public int CountList(List\u003Cobject\u003E inputList) \n{ \n    return (inputList.Count) * (inputList.Count); \n}","task_id":858,"test_setup_code":"","test_list":["Debug.Assert(CountList(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 0 }, new List\u003Cint\u003E { 1, 3 }, new List\u003Cint\u003E { 5, 7 }, new List\u003Cint\u003E { 9, 11 }, new List\u003Cint\u003E { 13, 15, 17 } }) == 25);","Debug.Assert(CountList(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 1, 3 }, new List\u003Cint\u003E { 5, 7 }, new List\u003Cint\u003E { 9, 11 }, new List\u003Cint\u003E { 13, 15, 17 } }) == 16);","Debug.Assert(CountList(new object[][] { new object[] { 2, 4 }, new object[][] { new object[][] { 6, 8 }, new object[] { 4, 5, 8 } }, new object[] { 10, 12, 14 } }) == 9);"],"challenge_test_list":[]}
{"name":"generate-sublists","description":"Generate all sublists from a given list","text":"Write a function to generate all sublists of a given list.","code":"using System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static List\u003CList\u003CT\u003E\u003E SubLists\u003CT\u003E(List\u003CT\u003E myList)\n    {\n        var subs = new List\u003CList\u003CT\u003E\u003E();\n        for (int i = 0; i \u003C= myList.Count; i\u002B\u002B)\n        {\n            var temp = Combinations(myList, i);\n            if (temp.Count \u003E 0)\n            {\n                subs.AddRange(temp);\n            }\n        }\n        return subs;\n    }\n\n    private static List\u003CList\u003CT\u003E\u003E Combinations\u003CT\u003E(List\u003CT\u003E list, int length)\n    {\n        if (length == 0) return new List\u003CList\u003CT\u003E\u003E { new List\u003CT\u003E() };\n        if (list.Count == 0) return new List\u003CList\u003CT\u003E\u003E();\n\n        var result = new List\u003CList\u003CT\u003E\u003E();\n        foreach (var item in list)\n        {\n            var remaining = list.Where(x =\u003E !EqualityComparer\u003CT\u003E.Default.Equals(x, item)).ToList();\n            var subCombinations = Combinations(remaining, length - 1);\n            foreach (var combination in subCombinations)\n            {\n                combination.Insert(0, item);\n                result.Add(combination);\n            }\n        }\n        return result;\n    }\n}","task_id":859,"test_setup_code":"","test_list":["Debug.Assert(SubLists(new int[] { 10, 20, 30, 40 }).SequenceEqual(new List\u003CList\u003Cint\u003E\u003E {\n    new List\u003Cint\u003E(),\n    new List\u003Cint\u003E { 10 },\n    new List\u003Cint\u003E { 20 },\n    new List\u003Cint\u003E { 30 },\n    new List\u003Cint\u003E { 40 },\n    new List\u003Cint\u003E { 10, 20 },\n    new List\u003Cint\u003E { 10, 30 },\n    new List\u003Cint\u003E { 10, 40 },\n    new List\u003Cint\u003E { 20, 30 },\n    new List\u003Cint\u003E { 20, 40 },\n    new List\u003Cint\u003E { 30, 40 },\n    new List\u003Cint\u003E { 10, 20, 30 },\n    new List\u003Cint\u003E { 10, 20, 40 },\n    new List\u003Cint\u003E { 10, 30, 40 },\n    new List\u003Cint\u003E { 20, 30, 40 },\n    new List\u003Cint\u003E { 10, 20, 30, 40 }\n}));","Debug.Assert(SubLists(new List\u003Cstring\u003E { \u0022X\u0022, \u0022Y\u0022, \u0022Z\u0022 }).SequenceEqual(new List\u003CList\u003Cstring\u003E\u003E { new List\u003Cstring\u003E(), new List\u003Cstring\u003E { \u0022X\u0022 }, new List\u003Cstring\u003E { \u0022Y\u0022 }, new List\u003Cstring\u003E { \u0022Z\u0022 }, new List\u003Cstring\u003E { \u0022X\u0022, \u0022Y\u0022 }, new List\u003Cstring\u003E { \u0022X\u0022, \u0022Z\u0022 }, new List\u003Cstring\u003E { \u0022Y\u0022, \u0022Z\u0022 }, new List\u003Cstring\u003E { \u0022X\u0022, \u0022Y\u0022, \u0022Z\u0022 } }));","Debug.Assert(SubLists(new List\u003Cint\u003E { 1, 2, 3 }).SequenceEqual(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E(), new List\u003Cint\u003E { 1 }, new List\u003Cint\u003E { 2 }, new List\u003Cint\u003E { 3 }, new List\u003Cint\u003E { 1, 2 }, new List\u003Cint\u003E { 1, 3 }, new List\u003Cint\u003E { 2, 3 }, new List\u003Cint\u003E { 1, 2, 3 } }));"],"challenge_test_list":[]}
{"name":"check-alnum-end","description":"Check if string ends with alphanumeric characters","text":"Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.","code":"using System.Text.RegularExpressions;\n\npublic class Validator\n{\n    private static readonly string regex = \u0022[a-zA-Z0-9]$\u0022;\n\n    public static string CheckAlphanumeric(string input)\n    {\n        if (Regex.IsMatch(input, regex))\n        {\n            return \u0022Accept\u0022;\n        }\n        else\n        {\n            return \u0022Discard\u0022;\n        }\n    }\n}","task_id":860,"test_setup_code":"","test_list":["Debug.Assert(CheckAlphanumeric(\u0022dawood@\u0022) == \u0022Discard\u0022);","Debug.Assert(CheckAlphanumeric(\u0022skdmsam326\u0022) == \u0022Accept\u0022);","Debug.Assert(CheckAlphanumeric(\u0022cooltricks@\u0022) == \u0022Discard\u0022);"],"challenge_test_list":[]}
{"name":"anagram-finder","description":"Find anagrams of a string in a list using lambda","text":"Write a function to find all anagrams of a string in a given list of strings using lambda function.","code":"using System.Collections.Generic;\nusing System.Linq;\n\npublic class Anagram\n{\n    public List\u003Cstring\u003E AnagramLambda(List\u003Cstring\u003E texts, string str)\n    {\n        return texts.Where(x =\u003E x.Count(c =\u003E str.Contains(c)) == str.Length \u0026\u0026 str.Length == x.Length \u0026\u0026 x.All(c =\u003E str.Count(d =\u003E d == c) == x.Count(d =\u003E d == c)).ToList()).ToList();\n    }\n}","task_id":861,"test_setup_code":"","test_list":["Debug.Assert(AnagramLambda(new string[] { \u0022bcda\u0022, \u0022abce\u0022, \u0022cbda\u0022, \u0022cbea\u0022, \u0022adcb\u0022 }, \u0022abcd\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022bcda\u0022, \u0022cbda\u0022, \u0022adcb\u0022 }));\n\npublic List\u003Cstring\u003E AnagramLambda(string[] words, string target)\n{\n    // Method implementation here\n}","Debug.Assert(AnagramLambda(new List\u003Cstring\u003E { \u0022recitals\u0022, \u0022 python\u0022 }, \u0022articles\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022recitals\u0022 }));","Debug.Assert(AnagramLambda(new List\u003Cstring\u003E { \u0022 keep\u0022, \u0022 abcdef\u0022, \u0022 xyz\u0022 }, \u0022 peek\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022 keep\u0022 }));\n\npublic List\u003Cstring\u003E AnagramLambda(List\u003Cstring\u003E words, string target) {\n    // Method implementation goes here\n}"],"challenge_test_list":[]}
{"name":"find-most-common","description":"Count the most common words in a text input","text":"Write a function to find the occurrences of n most common words in a given text.","code":"using System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\n\npublic class WordCounter\n{\n    public List\u003CKeyValuePair\u003Cstring, int\u003E\u003E NCommonWords(string text, int n)\n    {\n        var words = Regex.Matches(text, @\u0022\\w\u002B\u0022).Cast\u003CMatch\u003E().Select(m =\u003E m.Value);\n        var nCommonWords = words.GroupBy(word =\u003E word)\n                                 .Select(group =\u003E new KeyValuePair\u003Cstring, int\u003E(group.Key, group.Count()))\n                                 .OrderByDescending(pair =\u003E pair.Value)\n                                 .Take(n)\n                                 .ToList();\n        return nCommonWords;\n    }\n}","task_id":862,"test_setup_code":"","test_list":["Debug.Assert(NCommonWords(\u0022python is a programming language\u0022, 1).SequenceEqual(new List\u003CTuple\u003Cstring, int\u003E\u003E { Tuple.Create(\u0022python\u0022, 1) }));","Debug.Assert(NCommonWords(\u0022python is a programming language\u0022, 1).SequenceEqual(new KeyValuePair\u003Cstring, int\u003E[] { new KeyValuePair\u003Cstring, int\u003E(\u0022python\u0022, 1) }));","Debug.Assert(NCommonWords(\u0022python is a programming language\u0022, 5).SequenceEqual(new List\u003C(string, int)\u003E { (\u0022python\u0022, 1), (\u0022is\u0022, 1), (\u0022a\u0022, 1), (\u0022programming\u0022, 1), (\u0022language\u0022, 1) }));"],"challenge_test_list":[]}
{"name":"longest-conseq-sub","description":"Find the longest subsequence of consecutive integers","text":"Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.","code":"public int FindLongestConseqSubseq(int[] arr, int n) \n{\n    int ans = 0;\n    int count = 0;\n    Array.Sort(arr);\n    List\u003Cint\u003E v = new List\u003Cint\u003E();\n    v.Add(arr[0]);\n    for (int i = 1; i \u003C n; i\u002B\u002B)\n    {\n        if (arr[i] != arr[i - 1])\n        {\n            v.Add(arr[i]);\n        }\n    }\n    for (int i = 0; i \u003C v.Count; i\u002B\u002B)\n    {\n        if (i \u003E 0 \u0026\u0026 v[i] == v[i - 1] \u002B 1)\n        {\n            count\u002B\u002B;\n        }\n        else\n        {\n            count = 1;\n        }\n        ans = Math.Max(ans, count);\n    }\n    return ans;\n}","task_id":863,"test_setup_code":"","test_list":["Debug.Assert(FindLongestConseqSubseq(new int[] { 1, 2, 2, 3 }, 4) == 3);","Debug.Assert(FindLongestConseqSubseq(new int[] { 1, 9, 3, 10, 4, 20, 2 }, 7) == 4);","Debug.Assert(FindLongestConseqSubseq(new int[] { 36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42 }, 11) == 5);"],"challenge_test_list":[]}
{"name":"find-palindromes","description":"Find palindromes in a list using a lambda function","text":"Write a function to find palindromes in a given list of strings using lambda function.","code":"public List\u003Cstring\u003E PalindromeLambda(List\u003Cstring\u003E texts)\n{\n    return texts.Where(x =\u003E x == new string(x.Reverse().ToArray())).ToList();\n}","task_id":864,"test_setup_code":"","test_list":["Debug.Assert(PalindromeLambda(new List\u003Cstring\u003E { \u0022php\u0022, \u0022res\u0022, \u0022Python\u0022, \u0022abcd\u0022, \u0022Java\u0022, \u0022aaa\u0022 }).SequenceEqual(new List\u003Cstring\u003E { \u0022php\u0022, \u0022aaa\u0022 }));\n\npublic List\u003Cstring\u003E PalindromeLambda(List\u003Cstring\u003E words) {\n    return words.Where(w =\u003E w.SequenceEqual(w.Reverse())).ToList();\n}","Debug.Assert(PalindromeLambda(new string[] { \u0022abcd\u0022, \u0022Python\u0022, \u0022abba\u0022, \u0022aba\u0022 }).SequenceEqual(new string[] { \u0022abba\u0022, \u0022aba\u0022 }));\n\nIEnumerable\u003Cstring\u003E PalindromeLambda(string[] inputs)\n{\n    return inputs.Where(s =\u003E s.SequenceEqual(s.Reverse()));\n}","Debug.Assert(PalindromeLambda(new string[] { \u0022abcd\u0022, \u0022abbccbba\u0022, \u0022abba\u0022, \u0022aba\u0022 }).SequenceEqual(new List\u003Cstring\u003E { \u0022abbccbba\u0022, \u0022abba\u0022, \u0022aba\u0022 }));"],"challenge_test_list":[]}
{"name":"print-n-times-map","description":"Print a list n times using the map function","text":"Write a function to print n-times a list using map function.","code":"public static List\u003Cint\u003E NtimesList(IEnumerable\u003Cint\u003E nums, int n)  \n{  \n    return nums.Select(x =\u003E n * x).ToList();  \n}","task_id":865,"test_setup_code":"","test_list":["Debug.Assert(NtimesList(new List\u003Cint\u003E { 1, 2, 3, 4, 5, 6, 7 }, 3).SequenceEqual(new List\u003Cint\u003E { 3, 6, 9, 12, 15, 18, 21 }));","Debug.Assert(NtimesList(new List\u003Cint\u003E { 1, 2, 3, 4, 5, 6, 7 }, 4).SequenceEqual(new List\u003Cint\u003E { 4, 8, 12, 16, 20, 24, 28 }));","Debug.Assert(ntimes_list(new List\u003Cint\u003E { 1, 2, 3, 4, 5, 6, 7 }, 10).SequenceEqual(new List\u003Cint\u003E { 10, 20, 30, 40, 50, 60, 70 }));"],"challenge_test_list":[]}
{"name":"check-31-days","description":"Check if month has 31 days based on name","text":"Write a function to check whether the given month name contains 31 days or not.","code":"public bool CheckMonthNumb(string monthname2)\n{\n    if (monthname2 == \u0022January\u0022 || monthname2 == \u0022March\u0022 || monthname2 == \u0022May\u0022 || monthname2 == \u0022July\u0022 || monthname2 == \u0022August\u0022 || monthname2 == \u0022October\u0022 || monthname2 == \u0022December\u0022)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}","task_id":866,"test_setup_code":"","test_list":["Debug.Assert(CheckMonthNumb(\u0022February\u0022) == false);","Debug.Assert(CheckMonthNumb(\u0022January\u0022) == true);","Debug.Assert(CheckMonthNumb(\u0022March\u0022) == true);"],"challenge_test_list":[]}
{"name":"add-min-to-even","description":"Add a number to make array sum even","text":"Write a C# function to add a minimum number such that the sum of array becomes even.","code":"public int MinNum(int[] arr, int n)  \n{  \n    int odd = 0;  \n    for (int i = 0; i \u003C n; i\u002B\u002B)  \n    {  \n        if (arr[i] % 2 != 0)  \n        {  \n            odd\u002B\u002B;  \n        }  \n    }  \n    if (odd % 2 != 0)  \n    {  \n        return 1;  \n    }  \n    return 2;  \n}","task_id":867,"test_setup_code":"","test_list":["Debug.Assert(MinNum(new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 }, 9) == 1);","Debug.Assert(MinNum(new int[] { 1, 2, 3, 4, 5, 6, 7, 8 }, 8) == 2);","Debug.Assert(MinNum(new int[] { 1, 2, 3 }, 3) == 2);"],"challenge_test_list":[]}
{"name":"last-word-length","description":"Find the length of the last word in a string","text":"Write a C# function to find the length of the last word in a given string.","code":"public int LengthOfLastWord(string a) \n{ \n    int l = 0; \n    string x = a.Trim(); \n    for (int i = 0; i \u003C x.Length; i\u002B\u002B) \n    { \n        if (x[i] == \u0027 \u0027) \n        { \n            l = 0; \n        } \n        else \n        { \n            l\u002B\u002B; \n        } \n    } \n    return l; \n}","task_id":868,"test_setup_code":"","test_list":["Debug.Assert(LengthOfLastWord(\u0022python language\u0022) == 8);","Debug.Assert(LengthOfLastWord(\u0022PHP\u0022) == 3);","Debug.Assert(LengthOfLastWord(\u0022\u0022) == 0);"],"challenge_test_list":[]}
{"name":"remove-sublists","description":"Remove sublists outside a specified range","text":"Write a function to remove sublists from a given list of lists, which are outside a given range.","code":"public List\u003CList\u003CT\u003E\u003E RemoveListRange\u003CT\u003E(List\u003CList\u003CT\u003E\u003E list1, double leftrange, double rigthrange) where T : IComparable\u003CT\u003E\n{\n    var result = list1.Where(i =\u003E i.Min().CompareTo(leftrange) \u003E= 0 \u0026\u0026 i.Max().CompareTo(rigthrange) \u003C= 0).ToList();\n    return result;\n}","task_id":869,"test_setup_code":"","test_list":["Debug.Assert(RemoveListRange(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 2 }, new List\u003Cint\u003E { 0 }, new List\u003Cint\u003E { 1, 2, 3 }, new List\u003Cint\u003E { 0, 1, 2, 3, 6, 7 }, new List\u003Cint\u003E { 9, 11 }, new List\u003Cint\u003E { 13, 14, 15, 17 } }, 13, 17).SequenceEqual(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 13, 14, 15, 17 } }));","Debug.Assert(RemoveListRange(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 2 }, new List\u003Cint\u003E { 0 }, new List\u003Cint\u003E { 1, 2, 3 }, new List\u003Cint\u003E { 0, 1, 2, 3, 6, 7 }, new List\u003Cint\u003E { 9, 11 }, new List\u003Cint\u003E { 13, 14, 15, 17 } }, 1, 3).SequenceEqual(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 2 }, new List\u003Cint\u003E { 1, 2, 3 } }));","Debug.Assert(RemoveListRange(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 2 }, new List\u003Cint\u003E { 0 }, new List\u003Cint\u003E { 1, 2, 3 }, new List\u003Cint\u003E { 0, 1, 2, 3, 6, 7 }, new List\u003Cint\u003E { 9, 11 }, new List\u003Cint\u003E { 13, 14, 15, 17 } }, 0, 7).SequenceEqual(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 2 }, new List\u003Cint\u003E { 0 }, new List\u003Cint\u003E { 1, 2, 3 }, new List\u003Cint\u003E { 0, 1, 2, 3, 6, 7 } }));"],"challenge_test_list":[]}
{"name":"sum-positive-numbers","description":"Sum positive numbers in a list using lambda","text":"Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.","code":"public static int SumPositiveNum(List\u003Cint\u003E nums) {\n    var sumPositiveNum = nums.Where(num =\u003E num \u003E 0).ToList();\n    return sumPositiveNum.Sum();\n}","task_id":870,"test_setup_code":"","test_list":["Debug.Assert(SumPositiveNum(new int[] { 2, 4, -6, -9, 11, -12, 14, -5, 17 }) == 48);","Debug.Assert(SumPositiveNum(new int[] { 10, 15, -14, 13, -18, 12, -20 }) == 50);","Debug.Assert(SumPositiveNum(new int[] { 19, -65, 57, 39, 152, -639, 121, 44, 90, -190 }) == 522);"],"challenge_test_list":[]}
{"name":"string-rotation","description":"Check if two strings are rotations of each other","text":"Write a C# function to check whether the given strings are rotations of each other or not.","code":"public bool AreRotations(string string1, string string2) \n{ \n    int size1 = string1.Length; \n    int size2 = string2.Length; \n    string temp = \u0022\u0022; \n    if (size1 != size2) \n    { \n        return false; \n    } \n    temp = string1 \u002B string1; \n    if (temp.Contains(string2)) \n    { \n        return true; \n    } \n    else \n    { \n        return false; \n    } \n}","task_id":871,"test_setup_code":"","test_list":["Debug.Assert(AreRotations(\u0022abc\u0022, \u0022cba\u0022) == false);","Debug.Assert(AreRotations(\u0022abcd\u0022, \u0022cdba\u0022) == false);","Debug.Assert(AreRotations(\u0022abacd\u0022, \u0022cdaba\u0022) == true);"],"challenge_test_list":[]}
{"name":"nested-list-check","description":"Check if a nested list is a subset of another","text":"Write a function to check if a nested list is a subset of another nested list.","code":"public bool CheckSubset(List\u003Cint\u003E list1, List\u003Cint\u003E list2) \n{ \n    return list2.All(item =\u003E list1.Contains(item)); \n}","task_id":872,"test_setup_code":"","test_list":["Debug.Assert(CheckSubset(new int[][] { new int[] { 1, 3 }, new int[] { 5, 7 }, new int[] { 9, 11 }, new int[] { 13, 15, 17 } }, new int[][] { new int[] { 1, 3 }, new int[] { 13, 15, 17 } }) == true);","Debug.Assert(CheckSubset(new int[][] { new int[] { 1, 2 }, new int[] { 2, 3 }, new int[] { 3, 4 }, new int[] { 5, 6 } }, new int[][] { new int[] { 3, 4 }, new int[] { 5, 6 } }) == true);","Debug.Assert(CheckSubset(new List\u003CList\u003CList\u003Cint\u003E\u003E\u003E { new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 1, 2 }, new List\u003Cint\u003E { 2, 3 } }, new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 3, 4 }, new List\u003Cint\u003E { 5, 7 } } }, new List\u003CList\u003CList\u003Cint\u003E\u003E\u003E { new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 3, 4 }, new List\u003Cint\u003E { 5, 6 } } }) == false);"],"challenge_test_list":[]}
{"name":"fibonacci-recurse","description":"Recursive function to calculate Fibonacci numbers","text":"Write a function to solve the fibonacci sequence using recursion.","code":"public int Fibonacci(int n)\n{\n    if (n == 1 || n == 2)\n        return 1;\n    else\n        return Fibonacci(n - 1) \u002B Fibonacci(n - 2);\n}","task_id":873,"test_setup_code":"","test_list":["Debug.Assert(Fibonacci(7) == 13);","Debug.Assert(Fibonacci(8) == 21);","Debug.Assert(Fibonacci(9) == 34);"],"challenge_test_list":[]}
{"name":"check-concat-str","description":"Check if a string is a concatenation of another string","text":"Write a C# function to check if the string is a concatenation of another string.","code":"public bool CheckConcat(string str1, string str2) {\n    int N = str1.Length;\n    int M = str2.Length;\n    if (N % M != 0) {\n        return false;\n    }\n    for (int i = 0; i \u003C N; i\u002B\u002B) {\n        if (str1[i] != str2[i % M]) {\n            return false;\n        }\n    }\n    return true;\n}","task_id":874,"test_setup_code":"","test_list":["Debug.Assert(CheckConcat(\u0022abcabcabc\u0022, \u0022abc\u0022) == true);","Debug.Assert(CheckConcat(\u0022abcab\u0022, \u0022abc\u0022) == false);","Debug.Assert(CheckConcat(\u0022aba\u0022, \u0022ab\u0022) == false);"],"challenge_test_list":[]}
{"name":"min-diff-tuple-pairs","description":"Find minimum difference between tuple pairs","text":"Write a function to find the minimum difference in the tuple pairs of given tuples.","code":"public static int MinDifference(List\u003CTuple\u003Cint, int\u003E\u003E testList) {\n    var temp = testList.Select(t =\u003E Math.Abs(t.Item2 - t.Item1)).ToList();\n    var res = temp.Min();\n    return res;\n}","task_id":875,"test_setup_code":"","test_list":["Debug.Assert(MinDifference(new List\u003CTuple\u003Cint, int\u003E\u003E { Tuple.Create(3, 5), Tuple.Create(1, 7), Tuple.Create(10, 3), Tuple.Create(1, 2) }) == 1);","Debug.Assert(MinDifference(new (int, int)[] { (4, 6), (12, 8), (11, 4), (2, 13) }) == 2);","Debug.Assert(MinDifference(new Tuple\u003Cint, int\u003E[] { Tuple.Create(5, 17), Tuple.Create(3, 9), Tuple.Create(12, 5), Tuple.Create(3, 24) }) == 6);"],"challenge_test_list":[]}
{"name":"lcm-of-two-numbers","description":"Find the lcm of two positive integers in Python","text":"Write a C# function to find lcm of two positive integers.","code":"public static int Lcm(int x, int y)\n{\n    int z = (x \u003E y) ? x : y;\n    while (true)\n    {\n        if ((z % x == 0) \u0026\u0026 (z % y == 0))\n        {\n            return z;\n        }\n        z\u002B\u002B;\n    }\n}","task_id":876,"test_setup_code":"","test_list":["Debug.Assert(Lcm(4, 6) == 12);","Debug.Assert(Lcm(15, 17) == 255);","Debug.Assert(Lcm(2, 6) == 6);"],"challenge_test_list":[]}
{"name":"string-sorter","description":"Sort the characters in the given string using Python","text":"Write a C# function to sort the given string.","code":"public string SortString(string str) \n{ \n    str = string.Concat(str.OrderBy(c =\u003E c)); \n    return str; \n}","task_id":877,"test_setup_code":"","test_list":["Debug.Assert(SortString(\u0022cba\u0022) == \u0022abc\u0022);","Debug.Assert(SortString(\u0022data\u0022) == \u0022aadt\u0022);","Debug.Assert(SortString(\u0022zxy\u0022) == \u0022xyz\u0022);"],"challenge_test_list":[]}
{"name":"check-tuple-k","description":"Check if the tuple has exactly k elements","text":"Write a function to check if the given tuple contains only k elements.","code":"public bool CheckTuples(Tuple\u003Cint, int\u003E testTuple, List\u003Cint\u003E K)\n{\n    bool res = testTuple.Item1 in K \u0026\u0026 testTuple.Item2 in K;\n    return res;\n}","task_id":878,"test_setup_code":"","test_list":["Debug.Assert(CheckTuples((3, 5, 6, 5, 3, 6), new List\u003Cint\u003E { 3, 6, 5 }) == true);","Debug.Assert(CheckTuples((4, 5, 6, 4, 6, 5), new List\u003Cint\u003E { 4, 5, 6 }) == true);","Debug.Assert(CheckTuples((9, 8, 7, 6, 8, 9), new List\u003Cint\u003E { 9, 8, 1 }) == false);"],"challenge_test_list":[]}
{"name":"a-to-b-matcher","description":"Match strings with \u0027a\u0027 and ending in \u0027b\u0027 using regex","text":"Write a function that matches a string that has an \u0027a\u0027 followed by anything, ending in \u0027b\u0027 by using regex.","code":"using System.Text.RegularExpressions;\n\npublic class Matcher\n{\n    public string TextMatch(string text)\n    {\n        string patterns = \u0022a.*?b$\u0022;\n        if (Regex.IsMatch(text, patterns))\n        {\n            return \u0022Found a match!\u0022;\n        }\n        else\n        {\n            return \u0022Not matched!\u0022;\n        }\n    }\n}","task_id":879,"test_setup_code":"","test_list":["Debug.Assert(TextMatch(\u0022aabbbbd\u0022) == \u0022Not matched!\u0022);","Debug.Assert(TextMatch(\u0022aabAbbbc\u0022) == \u0022Not matched!\u0022);","Debug.Assert(TextMatch(\u0022accddbbjjjb\u0022) == \u0022Found a match!\u0022);"],"challenge_test_list":[]}
{"name":"quadratic-solns","description":"Calculate solutions for quadratic equations in Python","text":"Write a C# function to find number of solutions in quadratic equation.","code":"public string CheckSolution(int a, int b, int c) \n{ \n    if ((b * b) - (4 * a * c) \u003E 0) \n    { \n        return \u00222 solutions\u0022; \n    } \n    else if ((b * b) - (4 * a * c) == 0) \n    { \n        return \u00221 solution\u0022; \n    } \n    else \n    { \n        return \u0022No solutions\u0022; \n    } \n}","task_id":880,"test_setup_code":"","test_list":["Debug.Assert(CheckSolution(2, 5, 2) == \u00222 solutions\u0022);","Debug.Assert(CheckSolution(1, 1, 1) == \u0022No solutions\u0022);","Debug.Assert(CheckSolution(1, 2, 1) == \u00221 solution\u0022);"],"challenge_test_list":[]}
{"name":"sum-even-odd-numbers","description":"Sum the first even and odd numbers in a list","text":"Write a function to find the sum of first even and odd number of a given list.","code":"public int SumEvenOdd(List\u003Cint\u003E list1) \n{\n    int firstEven = list1.FirstOrDefault(el =\u003E el % 2 == 0);\n    int firstOdd = list1.FirstOrDefault(el =\u003E el % 2 != 0);\n    return firstEven \u002B firstOdd;\n}","task_id":881,"test_setup_code":"","test_list":["Debug.Assert(SumEvenOdd(new List\u003Cint\u003E { 1, 3, 5, 7, 4, 1, 6, 8 }) == 5);","Debug.Assert(SumEvenOdd(new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }) == 3);","Debug.Assert(SumEvenOdd(new int[] { 1, 5, 7, 9, 10 }) == 11);"],"challenge_test_list":[]}
{"name":"perimeter-parallelogram","description":"Calculate the perimeter of a parallelogram","text":"Write a function to caluclate perimeter of a parallelogram.","code":"public int ParallelogramPerimeter(int b, int h)\n{\n    int perimeter = 2 * (b \u002B h);\n    return perimeter;\n}","task_id":882,"test_setup_code":"","test_list":["Debug.Assert(ParallelogramPerimeter(10, 20) == 400);","Debug.Assert(ParallelogramPerimeter(15, 20) == 600);","Debug.Assert(ParallelogramPerimeter(8, 9) == 144);"],"challenge_test_list":[]}
{"name":"divisible-by-mn","description":"Find numbers divisible by m and n using lambda","text":"Write a function to find numbers divisible by m and n from a list of numbers using lambda function.","code":"public List\u003Cint\u003E DivOfNums(List\u003Cint\u003E nums, int m, int n)  \n{  \n    return nums.Where(x =\u003E (x % m == 0 \u0026\u0026 x % n == 0)).ToList();  \n}","task_id":883,"test_setup_code":"","test_list":["Debug.Assert(DivOfNums(new int[] { 19, 65, 57, 39, 152, 639, 121, 44, 90, 190 }, 2, 4).SequenceEqual(new int[] { 152, 44 }));","Debug.Assert(DivOfNums(new List\u003Cint\u003E { 1, 2, 3, 5, 7, 8, 10 }, 2, 5).SequenceEqual(new List\u003Cint\u003E { 10 }));","Debug.Assert(DivOfNums(new int[] { 10, 15, 14, 13, 18, 12, 20 }, 10, 5).SequenceEqual(new int[] { 10, 20 }));"],"challenge_test_list":[]}
{"name":"check-bits-range","description":"Check if all bits are within a specified range","text":"Write a C# function to check whether all the bits are within a given range or not.","code":"public bool AllBitsSetInTheGivenRange(int n, int l, int r) \n{ \n    int num = ((1 \u003C\u003C r) - 1) ^ ((1 \u003C\u003C (l - 1)) - 1); \n    int newNum = n \u0026 num; \n    if (num == newNum) \n    { \n        return true; \n    } \n    return false; \n}","task_id":884,"test_setup_code":"","test_list":["Debug.Assert(AllBitsSetInTheGivenRange(10, 2, 1) == true);","Debug.Assert(AllBitsSetInTheGivenRange(5, 2, 4) == false);","Debug.Assert(AllBitsSetInTheGivenRange(22, 2, 3) == true);"],"challenge_test_list":[]}
{"name":"isomorphic-check.py","description":"Check if two strings are isomorphic in Python","text":"Write a C# function to check whether the two given strings are isomorphic to each other or not.","code":"public bool IsIsomorphic(string str1, string str2)         \n{\n    var dictStr1 = new Dictionary\u003Cchar, List\u003Cint\u003E\u003E();\n    var dictStr2 = new Dictionary\u003Cchar, List\u003Cint\u003E\u003E();\n    \n    for (int i = 0; i \u003C str1.Length; i\u002B\u002B)\n    {\n        if (!dictStr1.ContainsKey(str1[i]))\n        {\n            dictStr1[str1[i]] = new List\u003Cint\u003E();\n        }\n        dictStr1[str1[i]].Add(i);\n    }\n    \n    for (int j = 0; j \u003C str2.Length; j\u002B\u002B)\n    {\n        if (!dictStr2.ContainsKey(str2[j]))\n        {\n            dictStr2[str2[j]] = new List\u003Cint\u003E();\n        }\n        dictStr2[str2[j]].Add(j);\n    }\n    \n    return dictStr1.Values.OrderBy(x =\u003E x.Count).ToList().SequenceEqual(dictStr2.Values.OrderBy(x =\u003E x.Count).ToList());\n}","task_id":885,"test_setup_code":"","test_list":["Debug.Assert(IsIsomorphic(\u0022paper\u0022, \u0022title\u0022) == true);","Debug.Assert(IsIsomorphic(\u0022ab\u0022, \u0022ba\u0022) == true);","Debug.Assert(IsIsomorphic(\u0022ab\u0022, \u0022aa\u0022) == false);"],"challenge_test_list":[]}
{"name":"average-list.py","description":"Calculate average of numbers in a list","text":"Write a function to add all the numbers in a list and divide it with the length of the list.","code":"public double SumNum(IEnumerable\u003Cint\u003E numbers) {\n    double total = 0;\n    foreach (var x in numbers) {\n        total \u002B= x;\n    }\n    return total / numbers.Count();\n}","task_id":886,"test_setup_code":"","test_list":["Debug.Assert(SumNum(new int[] { 8, 2, 3, 0, 7 }) == 4.0);\n\npublic double SumNum(int[] numbers) {\n    // Implementation here\n}","Debug.Assert(SumNum(new int[] { -10, -20, -30 }) == -20.0);","Debug.Assert(SumNum(new int[] { 19, 15, 18 }) == 17.333333333333332);"],"challenge_test_list":[]}
{"name":"check-odd-number","description":"Check if a number is odd using bitwise operator","text":"Write a C# function to check whether the given number is odd or not using bitwise operator.","code":"public bool IsOdd(int n) \n{\n    if ((n ^ 1) == (n - 1))\n    {\n        return true; \n    }\n    else \n    {\n        return false; \n    }\n}","task_id":887,"test_setup_code":"","test_list":["Debug.Assert(IsOdd(5) == true);","Debug.Assert(IsOdd(6) == false);","Debug.Assert(IsOdd(7) == true);"],"challenge_test_list":[]}
{"name":"nested-tuple-sub","description":"Subtract elements of nested tuples in a function","text":"Write a function to substract the elements of the given nested tuples.","code":"public Tuple\u003CTuple\u003Cint, int\u003E[]\u003E SubstractElements(Tuple\u003Cint, int\u003E[] testTup1, Tuple\u003Cint, int\u003E[] testTup2)\n{\n    var res = testTup1.Zip(testTup2, (tup1, tup2) =\u003E \n        Tuple.Create(tup1.Item1 - tup2.Item1, tup1.Item2 - tup2.Item2)).ToArray();\n    return Tuple.Create(res);\n}","task_id":888,"test_setup_code":"","test_list":["Debug.Assert(SubstractElements(new int[,] { { 1, 3 }, { 4, 5 }, { 2, 9 }, { 1, 10 } }, new int[,] { { 6, 7 }, { 3, 9 }, { 1, 1 }, { 7, 3 } }) == new int[,] { { -5, -4 }, { 1, -4 }, { 1, 8 }, { -6, 7 } });","Debug.Assert(SubstractElements(new (int, int)[] { (13, 4), (14, 6), (13, 10), (12, 11) }, new (int, int)[] { (19, 8), (14, 10), (12, 2), (18, 4) }) == new (int, int)[] { (-6, -4), (0, -4), (1, 8), (-6, 7) });","Debug.Assert(SubstractElements(new (int, int)[] { (19, 5), (18, 7), (19, 11), (17, 12) }, new (int, int)[] { (12, 9), (17, 11), (13, 3), (19, 5) }).SequenceEqual(new (int, int)[] { (7, -4), (1, -4), (6, 8), (-2, 7) }));"],"challenge_test_list":[]}
{"name":"reverse-lists","description":"Reverse lists in a given list of lists","text":"Write a function to reverse each list in a given list of lists.","code":"public List\u003CList\u003Cint\u003E\u003E ReverseListLists(List\u003CList\u003Cint\u003E\u003E lists) \n{\n    foreach (var l in lists) \n    {\n        l.Sort((a, b) =\u003E b.CompareTo(a));\n    }\n    return lists;\n}","task_id":889,"test_setup_code":"","test_list":["Debug.Assert(ReverseListLists(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 1, 2, 3, 4 }, new List\u003Cint\u003E { 5, 6, 7, 8 }, new List\u003Cint\u003E { 9, 10, 11, 12 }, new List\u003Cint\u003E { 13, 14, 15, 16 } }) == new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 4, 3, 2, 1 }, new List\u003Cint\u003E { 8, 7, 6, 5 }, new List\u003Cint\u003E { 12, 11, 10, 9 }, new List\u003Cint\u003E { 16, 15, 14, 13 } });","Debug.Assert(ReverseListLists(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 1, 2 }, new List\u003Cint\u003E { 2, 3 }, new List\u003Cint\u003E { 3, 4 } }) == new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 2, 1 }, new List\u003Cint\u003E { 3, 2 }, new List\u003Cint\u003E { 4, 3 } });","Debug.Assert(ReverseListLists(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 10, 20 }, new List\u003Cint\u003E { 30, 40 } }).SequenceEqual(new List\u003CList\u003Cint\u003E\u003E { new List\u003Cint\u003E { 20, 10 }, new List\u003Cint\u003E { 40, 30 } }));"],"challenge_test_list":[]}
{"name":"extra-element-index","description":"Find index of an extra element in a sorted array","text":"Write a C# function to find the index of an extra element present in one sorted array.","code":"public int FindExtra(int[] arr1, int[] arr2, int n) \n{ \n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    { \n        if (arr1[i] != arr2[i]) \n        { \n            return i; \n        } \n    } \n    return n; \n}","task_id":890,"test_setup_code":"","test_list":["Debug.Assert(FindExtra(new int[] { 1, 2, 3, 4 }, new int[] { 1, 2, 3 }, 3) == 3);","Debug.Assert(FindExtra(new int[] { 2, 4, 6, 8, 10 }, new int[] { 2, 4, 6, 8 }, 4) == 4);","Debug.Assert(FindExtra(new int[] { 1, 3, 5, 7, 9, 11 }, new int[] { 1, 3, 5, 7, 9 }, 5) == 5);"],"challenge_test_list":[]}
{"name":"check-same-digits","description":"Check if two numbers have the same digit count","text":"Write a C# function to check whether the given two numbers have same number of digits or not.","code":"bool Same_Length(int A, int B) \n{ \n    while (A \u003E 0 \u0026\u0026 B \u003E 0) \n    { \n        A /= 10; \n        B /= 10; \n    } \n    return A == 0 \u0026\u0026 B == 0; \n}","task_id":891,"test_setup_code":"","test_list":["Debug.Assert(Same_Length(12, 1) == false);","Debug.Assert(Same_Length(2, 2) == true);","Debug.Assert(Same_Length(10, 20) == true);"],"challenge_test_list":[]}
{"name":"remove-multiple-spaces","description":"Remove extra spaces from a given string","text":"Write a function to remove multiple spaces in a string.","code":"public string RemoveSpaces(string text)  \n{  \n    return Regex.Replace(text, \u0022 \u002B\u0022, \u0022 \u0022);  \n}","task_id":892,"test_setup_code":"","test_list":["Debug.Assert(RemoveSpaces(\u0022python  program\u0022) == \u0022python program\u0022);","Debug.Assert(RemoveSpaces(\u0022python   programming    language\u0022) == \u0022python programming language\u0022);","Debug.Assert(RemoveSpaces(\u0022python                     program\u0022) == \u0022python program\u0022);"],"challenge_test_list":[]}
{"name":"last-elements-of-sublists","description":"Get last element from each sublist in Python","text":"Write a C# function to get the last element of each sublist.","code":"public List\u003Cobject\u003E Extract(List\u003CList\u003Cobject\u003E\u003E lst) \n{ \n    return lst.Select(item =\u003E item.Last()).ToList(); \n}","task_id":893,"test_setup_code":"","test_list":["Debug.Assert(Extract(new int[][] { new int[] { 1, 2, 3 }, new int[] { 4, 5 }, new int[] { 6, 7, 8, 9 } }) == new int[] { 3, 5, 9 });","Debug.Assert(Extract(new List\u003CList\u003Cstring\u003E\u003E { new List\u003Cstring\u003E { \u0022x\u0022, \u0022y\u0022, \u0022z\u0022 }, new List\u003Cstring\u003E { \u0022m\u0022 }, new List\u003Cstring\u003E { \u0022a\u0022, \u0022b\u0022 }, new List\u003Cstring\u003E { \u0022u\u0022, \u0022v\u0022 } }) == new List\u003Cstring\u003E { \u0022z\u0022, \u0022m\u0022, \u0022b\u0022, \u0022v\u0022 });","Debug.Assert(Extract(new int[][] { new int[] { 1, 2, 3 }, new int[] { 4, 5 } })[0] == 3 \u0026\u0026 Extract(new int[][] { new int[] { 1, 2, 3 }, new int[] { 4, 5 } })[1] == 5);"],"challenge_test_list":[]}
{"name":"float-to-tuple","description":"Convert a float string to a tuple format","text":"Write a function to convert the given string of float type into tuple.","code":"public Tuple\u003Cfloat, float\u003E FloatToTuple(string testStr) {\n    var res = testStr.Split(\u0022, \u0022).Select(float.Parse).ToArray();\n    return Tuple.Create(res[0], res[1]);\n}","task_id":894,"test_setup_code":"","test_list":["Debug.Assert(FloatToTuple(\u00221.2, 1.3, 2.3, 2.4, 6.5\u0022).Equals((1.2f, 1.3f, 2.3f, 2.4f, 6.5f)));","Debug.Assert(FloatToTuple(\u00222.3, 2.4, 5.6, 5.4, 8.9\u0022).Equals((2.3f, 2.4f, 5.6f, 5.4f, 8.9f)));","Debug.Assert(FloatToTuple(\u00220.3, 0.5, 7.8, 9.4\u0022).Equals((0.3f, 0.5f, 7.8f, 9.4f)));"],"challenge_test_list":[]}
{"name":"max-sum-subseq","description":"Find max subsequence sum without adjacent elements","text":"Write a function to find the maximum sum of subsequences of given array with no adjacent elements.","code":"public static int MaxSumSubseq(int[] A) {\n    int n = A.Length;\n    if (n == 1) {\n        return A[0];\n    }\n    int[] lookUp = new int[n];\n    lookUp[0] = A[0];\n    lookUp[1] = Math.Max(A[0], A[1]);\n    for (int i = 2; i \u003C n; i\u002B\u002B) {\n        lookUp[i] = Math.Max(lookUp[i - 1], lookUp[i - 2] \u002B A[i]);\n        lookUp[i] = Math.Max(lookUp[i], A[i]);\n    }\n    return lookUp[n - 1];\n}","task_id":895,"test_setup_code":"","test_list":["Debug.Assert(MaxSumSubseq(new int[] { 1, 2, 9, 4, 5, 0, 4, 11, 6 }) == 26);","Debug.Assert(MaxSumSubseq(new int[] { 1, 2, 9, 5, 6, 0, 5, 12, 7 }) == 28);","Debug.Assert(MaxSumSubseq(new int[] { 1, 3, 10, 5, 6, 0, 6, 14, 21 }) == 44);"],"challenge_test_list":[]}
{"name":"sort-by-last-el","description":"Sort tuples by their last element in ascending order","text":"Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.","code":"public static List\u003CTuple\u003E SortListLast(List\u003CTuple\u003E tuples)\n{\n    return tuples.OrderBy(Last).ToList();\n}\n\npublic static object Last(List\u003Cobject\u003E n)\n{\n    return n.Last();\n}","task_id":896,"test_setup_code":"","test_list":["Debug.Assert(SortListLast(new List\u003C(int, int)\u003E { (2, 5), (1, 2), (4, 4), (2, 3), (2, 1) }).SequenceEqual(new List\u003C(int, int)\u003E { (2, 1), (1, 2), (2, 3), (4, 4), (2, 5) }));","Debug.Assert(SortListLast(new List\u003C(int, int)\u003E { (9, 8), (4, 7), (3, 5), (7, 9), (1, 2) }).SequenceEqual(new List\u003C(int, int)\u003E { (1, 2), (3, 5), (4, 7), (9, 8), (7, 9) }));","Debug.Assert(SortListLast(new List\u003CTuple\u003Cint, int\u003E\u003E { Tuple.Create(20, 50), Tuple.Create(10, 20), Tuple.Create(40, 40) }).SequenceEqual(new List\u003CTuple\u003Cint, int\u003E\u003E { Tuple.Create(10, 20), Tuple.Create(40, 40), Tuple.Create(20, 50) }));"],"challenge_test_list":[]}
{"name":"check-word-in-sent","description":"Check if a word exists in a given sentence","text":"Write a C# function to check whether the word is present in a given sentence or not.","code":"public bool IsWordPresent(string sentence, string word) \n{\n    string[] s = sentence.Split(\u0022 \u0022);\n    foreach (string i in s) \n    {\n        if (i == word) \n        {\n            return true;\n        }\n    }\n    return false;\n}","task_id":897,"test_setup_code":"","test_list":["Debug.Assert(IsWordPresent(\u0022machine learning\u0022, \u0022machine\u0022) == true);","Debug.Assert(IsWordPresent(\u0022easy\u0022, \u0022fun\u0022) == false);","Debug.Assert(IsWordPresent(\u0022python language\u0022, \u0022code\u0022) == false);"],"challenge_test_list":[]}
{"name":"extract-consec-el","description":"Extract consecutive elements from a list","text":"Write a function to extract specified number of elements from a given list, which follow each other continuously.","code":"using System.Collections.Generic;\nusing System.Linq;\n\npublic class MyClass\n{\n    public List\u003Cint\u003E ExtractElements(List\u003Cint\u003E numbers, int n)\n    {\n        return numbers.GroupBy(i =\u003E i)\n                      .Where(g =\u003E g.Count() == n)\n                      .Select(g =\u003E g.Key)\n                      .ToList();\n    }\n}","task_id":898,"test_setup_code":"","test_list":["Debug.Assert(ExtractElements(new List\u003Cint\u003E { 1, 1, 3, 4, 4, 5, 6, 7 }, 2).SequenceEqual(new List\u003Cint\u003E { 1, 4 }));","Debug.Assert(ExtractElements(new int[] { 0, 1, 2, 3, 4, 4, 4, 4, 5, 7 }, 4).SequenceEqual(new int[] { 4 }));","Debug.Assert(ExtractElements(new int[] { 0, 0, 0, 0, 0 }, 5).SequenceEqual(new int[] { 0 }));"],"challenge_test_list":[]}
{"name":"corner-sort-check","description":"Check if an array can be sorted using corners","text":"Write a C# function to check whether an array can be sorted or not by picking only the corner elements.","code":"public bool Check(int[] arr, int n) \n{ \n    int g = 0; \n    for (int i = 1; i \u003C n; i\u002B\u002B) \n    { \n        if (arr[i] - arr[i - 1] \u003E 0 \u0026\u0026 g == 1) \n        { \n            return false; \n        } \n        if (arr[i] - arr[i - 1] \u003C 0) \n        { \n            g = 1; \n        } \n    } \n    return true; \n}","task_id":899,"test_setup_code":"","test_list":["Debug.Assert(Check(new int[] { 3, 2, 1, 2, 3, 4 }, 6) == true);","Debug.Assert(Check(new int[] { 2, 1, 4, 5, 1 }, 5) == true);","Debug.Assert(Check(new int[] { 1, 2, 2, 1, 2, 3 }, 6) == true);"],"challenge_test_list":[]}
{"name":"start-with-number","description":"Create a string that begins with a given number","text":"Write a function where a string will start with a specific number.","code":"using System.Text.RegularExpressions;\n\npublic bool MatchNum(string str)\n{\n    Regex regex = new Regex(\u0022^5\u0022);\n    return regex.IsMatch(str);\n}","task_id":900,"test_setup_code":"","test_list":["Debug.Assert(MatchNum(\u00225-2345861\u0022) == true);","Debug.Assert(MatchNum(\u00226-2345861\u0022) == false);","Debug.Assert(MatchNum(\u002278910\u0022) == false);"],"challenge_test_list":[]}
{"name":"smallest-multiples","description":"Find the smallest multiple of the first n numbers","text":"Write a function to find the smallest multiple of the first n numbers.","code":"public static int SmallestMultiple(int n)\n{\n    if (n \u003C= 2)\n        return n;\n\n    int i = n * 2;\n    List\u003Cint\u003E factors = new List\u003Cint\u003E();\n\n    for (int number = n; number \u003E 1; number--)\n    {\n        if (number * 2 \u003E n)\n            factors.Add(number);\n    }\n\n    while (true)\n    {\n        foreach (int a in factors)\n        {\n            if (i % a != 0)\n            {\n                i \u002B= n;\n                break;\n            }\n            if (a == factors[factors.Count - 1] \u0026\u0026 i % a == 0)\n                return i;\n        }\n    }\n}","task_id":901,"test_setup_code":"","test_list":["Debug.Assert(SmallestMultiple(13) == 360360);","Debug.Assert(SmallestMultiple(2) == 2);","Debug.Assert(SmallestMultiple(1) == 1);"],"challenge_test_list":[]}
{"name":"combine-dicts.py","description":"Combine two dictionaries summing values for common keys","text":"Write a function to combine two dictionaries by adding values for common keys.","code":"using System.Collections.Generic;\n\npublic static IDictionary\u003CTKey, int\u003E AddDict\u003CTKey\u003E(IDictionary\u003CTKey, int\u003E d1, IDictionary\u003CTKey, int\u003E d2)\n{\n    var addDict = new Dictionary\u003CTKey, int\u003E(d1);\n    \n    foreach (var kvp in d2)\n    {\n        if (addDict.ContainsKey(kvp.Key))\n        {\n            addDict[kvp.Key] \u002B= kvp.Value;\n        }\n        else\n        {\n            addDict[kvp.Key] = kvp.Value;\n        }\n    }\n\n    return addDict;\n}","task_id":902,"test_setup_code":"","test_list":["Debug.Assert(AddDict(new Dictionary\u003Cstring, int\u003E{{\u0022a\u0022, 100}, {\u0022b\u0022, 200}, {\u0022c\u0022, 300}}, new Dictionary\u003Cstring, int\u003E{{\u0022a\u0022, 300}, {\u0022b\u0022, 200}, {\u0022d\u0022, 400}}).SequenceEqual(new Dictionary\u003Cstring, int\u003E{{\u0022b\u0022, 400}, {\u0022d\u0022, 400}, {\u0022a\u0022, 400}, {\u0022c\u0022, 300}}));","Debug.Assert(AddDict(new Dictionary\u003Cstring, int\u003E { { \u0022a\u0022, 500 }, { \u0022b\u0022, 700 }, { \u0022c\u0022, 900 } }, new Dictionary\u003Cstring, int\u003E { { \u0022a\u0022, 500 }, { \u0022b\u0022, 600 }, { \u0022d\u0022, 900 } }).SequenceEqual(new Dictionary\u003Cstring, int\u003E { { \u0022b\u0022, 1300 }, { \u0022d\u0022, 900 }, { \u0022a\u0022, 1000 }, { \u0022c\u0022, 900 } }));","Debug.Assert(AddDict(new Dictionary\u003Cstring, int\u003E{{\u0022a\u0022, 900}, {\u0022b\u0022, 900}, {\u0022d\u0022, 900}}, new Dictionary\u003Cstring, int\u003E{{\u0022a\u0022, 900}, {\u0022b\u0022, 900}, {\u0022d\u0022, 900}}).SequenceEqual(new Dictionary\u003Cstring, int\u003E{{\u0022b\u0022, 1800}, {\u0022d\u0022, 1800}, {\u0022a\u0022, 1800}}));"],"challenge_test_list":[]}
{"name":"count-unset-bits","description":"Count unset bits from 1 to n in Python","text":"Write a C# function to count the total unset bits from 1 to n.","code":"public int CountUnsetBits(int n)  \n{  \n    int cnt = 0;  \n    for (int i = 1; i \u003C= n; i\u002B\u002B)  \n    {  \n        int temp = i;  \n        while (temp != 0)  \n        {  \n            if (temp % 2 == 0)  \n            {  \n                cnt\u002B\u002B;  \n            }  \n            temp /= 2;  \n        }  \n    }  \n    return cnt;  \n}","task_id":903,"test_setup_code":"","test_list":["Debug.Assert(CountUnsetBits(2) == 1);","Debug.Assert(CountUnsetBits(5) == 4);","Debug.Assert(CountUnsetBits(14) == 17);"],"challenge_test_list":[]}
{"name":"even-or-odd-check","description":"Determine if a number is even or odd","text":"Write a function to return true if the given number is even else return false.","code":"public bool EvenNum(int x)  \n{  \n    if (x % 2 == 0)  \n    {  \n        return true;  \n    }  \n    else  \n    {  \n        return false;  \n    }  \n}","task_id":904,"test_setup_code":"","test_list":["Debug.Assert(EvenNum(13.5) == false);","Debug.Assert(EvenNum(0) == true);","Debug.Assert(EvenNum(-9) == false);"],"challenge_test_list":[]}
{"name":"sum-of-squares-bc","description":"Sum of squares of binomial coefficients in Python","text":"Write a C# function to find the sum of squares of binomial co-efficients.","code":"public static int Factorial(int start, int end) \n{ \n    int res = 1; \n    for (int i = start; i \u003C= end; i\u002B\u002B) \n    { \n        res *= i; \n    } \n    return res; \n} \n\npublic static int SumOfSquare(int n) \n{ \n    return (int)(Factorial(n \u002B 1, 2 * n) / Factorial(1, n)); \n}","task_id":905,"test_setup_code":"","test_list":["Debug.Assert(SumOfSquare(4) == 70);","Debug.Assert(SumOfSquare(5) == 252);","Debug.Assert(SumOfSquare(2) == 6);"],"challenge_test_list":[]}
{"name":"extract-date-from-url","description":"Extract date components from a URL using regex","text":"Write a function to extract year, month and date from a url by using regex.","code":"public List\u003C(int, int, int)\u003E ExtractDate(string url) \n{\n    var regex = new Regex(@\u0022/(\\d{4})/(\\d{1,2})/(\\d{1,2})/\u0022);\n    var matches = regex.Matches(url);\n    var dates = new List\u003C(int, int, int)\u003E();\n\n    foreach (Match match in matches)\n    {\n        int year = int.Parse(match.Groups[1].Value);\n        int month = int.Parse(match.Groups[2].Value);\n        int day = int.Parse(match.Groups[3].Value);\n        dates.Add((year, month, day));\n    }\n\n    return dates;\n}","task_id":906,"test_setup_code":"","test_list":["Debug.Assert(ExtractDate(\u0022https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\u0022).SequenceEqual(new Tuple\u003Cstring, string, string\u003E[] { Tuple.Create(\u00222016\u0022, \u002209\u0022, \u002202\u0022) }));","Debug.Assert(ExtractDate(\u0022https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\u0022).SequenceEqual(new List\u003CTuple\u003Cstring, string, string\u003E\u003E { Tuple.Create(\u00222020\u0022, \u002211\u0022, \u002203\u0022) }));","Debug.Assert(ExtractDate(\u0022https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\u0022).SequenceEqual(new List\u003CTuple\u003Cstring, string, string\u003E\u003E { Tuple.Create(\u00222020\u0022, \u002212\u0022, \u002229\u0022) }));"],"challenge_test_list":[]}
{"name":"lucky-numbers-print","description":"Print the first n lucky numbers in a function","text":"Write a function to print the first n lucky numbers.","code":"public List\u003Cint\u003E LuckyNum(int n) {\n    List\u003Cint\u003E List = Enumerable.Range(-1, n * n \u002B 9).Where(x =\u003E x % 2 == 0).ToList();\n    int i = 2;\n    while (List.Skip(i).Any()) {\n        List = List.Distinct().Except(List.Skip(i).SelectMany(x =\u003E List.SkipWhile(y =\u003E y % x == 0))).ToList();\n        i\u002B\u002B;\n    }\n    return List.Skip(1).Take(n).ToList();\n}","task_id":907,"test_setup_code":"","test_list":["Debug.Assert(LuckyNum(10).SequenceEqual(new List\u003Cint\u003E { 1, 3, 7, 9, 13, 15, 21, 25, 31, 33 }));","Debug.Assert(LuckyNum(5).SequenceEqual(new List\u003Cint\u003E { 1, 3, 7, 9, 13 }));","Debug.Assert(LuckyNum(8).SequenceEqual(new List\u003Cint\u003E { 1, 3, 7, 9, 13, 15, 21, 25 }));"],"challenge_test_list":[]}
{"name":"fixed-point-finder","description":"Find the fixed point in a given array","text":"Write a function to find the fixed point in the given array.","code":"public int FindFixedPoint(int[] arr, int n) \n{ \n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    { \n        if (arr[i] == i) \n        { \n            return i; \n        } \n    } \n    return -1; \n}","task_id":908,"test_setup_code":"","test_list":["Debug.Assert(FindFixedPoint(new int[] { -10, -1, 0, 3, 10, 11, 30, 50, 100 }, 9) == 3);","Debug.Assert(FindFixedPoint(new[] { 1, 2, 3, 4, 5, 6, 7, 8 }, 8) == -1);","Debug.Assert(FindFixedPoint(new int[] { 0, 2, 5, 8, 17 }, 5) == 0);"],"challenge_test_list":[]}
{"name":"prev-palindrome","description":"Find the largest palindrome smaller than a number","text":"Write a function to find the previous palindrome of a specified number.","code":"public int PreviousPalindrome(int num) {\n    for (int x = num - 1; x \u003E 0; x--) {\n        if (x.ToString() == new string(x.ToString().Reverse().ToArray())) {\n            return x;\n        }\n    }\n    return 0; // In case no palindrome is found, though it shouldn\u0027t be needed based on problem constraints.\n}","task_id":909,"test_setup_code":"","test_list":["Debug.Assert(PreviousPalindrome(99) == 88);","Debug.Assert(PreviousPalindrome(1221) == 1111);","Debug.Assert(PreviousPalindrome(120) == 111);"],"challenge_test_list":[]}
{"name":"\u0060validate-gregorian\u0060","description":"Validate a Gregorian date with a function","text":"Write a function to validate a gregorian date.","code":"using System;\n\npublic class DateChecker\n{\n    public static bool CheckDate(int m, int d, int y)\n    {\n        try\n        {\n            DateTime date = new DateTime(y, m, d);\n            return true;\n        }\n        catch (ArgumentOutOfRangeException)\n        {\n            return false;\n        }\n    }\n}","task_id":910,"test_setup_code":"","test_list":["Debug.Assert(CheckDate(11, 11, 2002) == true);","Debug.Assert(CheckDate(13, 11, 2002) == false);","Debug.Assert(CheckDate(\u002211\u0022, \u002211\u0022, \u00222002\u0022) == true);"],"challenge_test_list":[]}
{"name":"max-prod-three-numbers","description":"Compute max product of three integers using heaps","text":"Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.","code":"public int MaximumProduct(int[] nums) {\n    var a = nums.OrderByDescending(x =\u003E x).Take(3).ToArray();\n    var b = nums.OrderBy(x =\u003E x).Take(2).ToArray();\n    return Math.Max(a[0] * a[1] * a[2], a[0] * b[0] * b[1]);\n}","task_id":911,"test_setup_code":"","test_list":["Debug.Assert(MaximumProduct(new int[] { 12, 74, 9, 50, 61, 41 }) == 225700);","Debug.Assert(MaximumProduct(new int[] { 25, 35, 22, 85, 14, 65, 75, 25, 58 }) == 414375);","Debug.Assert(MaximumProduct(new int[] { 18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1 }) == 2520);"],"challenge_test_list":[]}
{"name":"ln-m-lobb-number","description":"Find the m lobb number using a function","text":"Write a function to find ln, m lobb number.","code":"public static int BinomialCoeff(int n, int k) {\n    int[][] C = new int[n \u002B 1][];\n    for (int i = 0; i \u003C= n; i\u002B\u002B) {\n        C[i] = new int[k \u002B 1];\n    }\n    for (int i = 0; i \u003C= n; i\u002B\u002B) {\n        for (int j = 0; j \u003C= Math.Min(i, k); j\u002B\u002B) {\n            if (j == 0 || j == i) {\n                C[i][j] = 1;\n            } else {\n                C[i][j] = C[i - 1][j - 1] \u002B C[i - 1][j];\n            }\n        }\n    }\n    return C[n][k];\n}\n\npublic static double LobbNum(int n, int m) {\n    return ((2 * m \u002B 1) * BinomialCoeff(2 * n, m \u002B n)) / (double)(m \u002B n \u002B 1);\n}","task_id":912,"test_setup_code":"","test_list":["Debug.Assert(int(LobbNum(5, 3)) == 35);","Debug.Assert((int)LobbNum(3, 2) == 5);","Debug.Assert(Convert.ToInt32(LobbNum(4, 2)) == 20);"],"challenge_test_list":[]}
{"name":"check-num-at-end","description":"Check if a string ends with a number","text":"Write a function to check for a number at the end of a string.","code":"public static bool EndNum(string str) {\n    var text = new Regex(\u0022.*[0-9]$\u0022);\n    return text.IsMatch(str);\n}","task_id":913,"test_setup_code":"","test_list":["Debug.Assert(EndNum(\u0022abcdef\u0022) == false);","Debug.Assert(EndNum(\u0022abcdef7\u0022) == true);","Debug.Assert(EndNum(\u0022abc\u0022) == false);"],"challenge_test_list":[]}
{"name":"alt-char-check.py","description":"Check if a string contains two alternating characters","text":"Write a C# function to check whether the given string is made up of two alternating characters or not.","code":"public static bool IsTwoAlter(string s)  \n{  \n    for (int i = 0; i \u003C s.Length - 2; i\u002B\u002B)  \n    {  \n        if (s[i] != s[i \u002B 2])  \n        {  \n            return false;  \n        }  \n    }  \n    if (s[0] == s[1])  \n    {  \n        return false;  \n    }  \n    return true;  \n}","task_id":914,"test_setup_code":"","test_list":["Debug.Assert(IsTwoAlter(\u0022abab\u0022) == true);","Debug.Assert(IsTwoAlter(\u0022aaaa\u0022) == false);","Debug.Assert(IsTwoAlter(\u0022xyz\u0022) == false);"],"challenge_test_list":[]}
{"name":"rearrange-numbers","description":"Rearrange positives and negatives in an array","text":"Write a function to rearrange positive and negative numbers in a given array using lambda function.","code":"public List\u003Cint\u003E RearrangeNumbs(List\u003Cint\u003E arrayNums) \n{\n    var result = arrayNums.OrderBy(i =\u003E i == 0 ? 0 : -1.0 / i).ToList();\n    return result;\n}","task_id":915,"test_setup_code":"","test_list":["Debug.Assert(RearrangeNumbs(new List\u003Cint\u003E { -1, 2, -3, 5, 7, 8, 9, -10 }).SequenceEqual(new List\u003Cint\u003E { 2, 5, 7, 8, 9, -10, -3, -1 }));","Debug.Assert(RearrangeNumbs(new List\u003Cint\u003E { 10, 15, 14, 13, -18, 12, -20 }).SequenceEqual(new List\u003Cint\u003E { 10, 12, 13, 14, 15, -20, -18 }));","Debug.Assert(RearrangeNumbs(new int[] {-20, 20, -10, 10, -30, 30}).SequenceEqual(new int[] {10, 20, 30, -30, -20, -10}));"],"challenge_test_list":[]}
{"name":"find-triplet-sum","description":"Find a triplet in an array that sums to a value","text":"Write a function to find if there is a triplet in the array whose sum is equal to a given value.","code":"public (int, int, int)? FindTripletArray(int[] A, int arrSize, int sum) \n{\n    for (int i = 0; i \u003C arrSize - 2; i\u002B\u002B) \n    {\n        for (int j = i \u002B 1; j \u003C arrSize - 1; j\u002B\u002B) \n        {\n            for (int k = j \u002B 1; k \u003C arrSize; k\u002B\u002B) \n            {\n                if (A[i] \u002B A[j] \u002B A[k] == sum) \n                {\n                    return (A[i], A[j], A[k]);\n                }\n            }\n        }\n    }\n    return null;\n}","task_id":916,"test_setup_code":"","test_list":["Debug.Assert(FindTripletArray(new int[] { 1, 4, 45, 6, 10, 8 }, 6, 22).SequenceEqual(new int[] { 4, 10, 8 }));","Debug.Assert(FindTripletArray(new int[] { 12, 3, 5, 2, 6, 9 }, 6, 24).SequenceEqual(new int[] { 12, 3, 9 }));","Debug.Assert(FindTripletArray(new int[] { 1, 2, 3, 4, 5 }, 5, 9).SequenceEqual(new int[] { 1, 3, 5 }));"],"challenge_test_list":[]}
{"name":"upper-lower-seq","description":"Find uppercase followed by lowercase sequences","text":"Write a function to find the sequences of one upper case letter followed by lower case letters.","code":"using System.Text.RegularExpressions;\n\npublic class Converter\n{\n    public string TextUppercaseLowercase(string text)\n    {\n        string patterns = \u0022[A-Z]\u002B[a-z]\u002B$\u0022;\n        if (Regex.IsMatch(text, patterns))\n        {\n            return \u0022Found a match!\u0022;\n        }\n        else\n        {\n            return \u0022Not matched!\u0022;\n        }\n    }\n}","task_id":917,"test_setup_code":"","test_list":["Debug.Assert(TextUppercaseLowercase(\u0022AaBbGg\u0022) == \u0022Found a match!\u0022);","Debug.Assert(TextUppercaseLowercase(\u0022aA\u0022) == \u0022Not matched!\u0022);","Debug.Assert(TextUppercaseLowercase(\u0022PYTHON\u0022) == \u0022Not matched!\u0022);"],"challenge_test_list":[]}
{"name":"coin-change-count","description":"Count the number of ways to make coin change","text":"Write a function to count coin change.","code":"public int CoinChange(int[] S, int m, int n) \n{\n    int[,] table = new int[n \u002B 1, m];\n    for (int i = 0; i \u003C m; i\u002B\u002B) \n    {\n        table[0, i] = 1;\n    }\n    for (int i = 1; i \u003C= n; i\u002B\u002B) \n    {\n        for (int j = 0; j \u003C m; j\u002B\u002B) \n        {\n            int x = (i - S[j] \u003E= 0) ? table[i - S[j], j] : 0;\n            int y = (j \u003E= 1) ? table[i, j - 1] : 0;\n            table[i, j] = x \u002B y;\n        }\n    }\n    return table[n, m - 1];\n}","task_id":918,"test_setup_code":"","test_list":["Debug.Assert(CoinChange(new int[] { 1, 2, 3 }, 3, 4) == 4);","Debug.Assert(CoinChange(new int[] { 4, 5, 6, 7, 8, 9 }, 6, 9) == 2);","Debug.Assert(CoinChange(new int[] { 4, 5, 6, 7, 8, 9 }, 6, 4) == 1);"],"challenge_test_list":[]}
{"name":"multiply-list-items","description":"Multiply all elements in a list using Python","text":"Write a C# function to multiply all items in the list.","code":"public int MultiplyList(List\u003Cint\u003E items) {\n    int tot = 1;\n    foreach (int x in items) {\n        tot *= x;\n    }\n    return tot;\n}","task_id":919,"test_setup_code":"","test_list":["Debug.Assert(MultiplyList(new List\u003Cint\u003E { 1, -2, 3 }) == -6);","Debug.Assert(MultiplyList(new int[] { 1, 2, 3, 4 }) == 24);","Debug.Assert(MultiplyList(new List\u003Cint\u003E { 3, 1, 2, 3 }) == 18);"],"challenge_test_list":[]}
{"name":"remove-empty-tuples","description":"Remove tuples with all None values from list","text":"Write a function to remove all tuples with all none values in the given tuple list.","code":"public string RemoveTuple(List\u003CTuple\u003Cobject, object\u003E\u003E testList)\n{\n    var res = testList.Where(sub =\u003E !sub.All(ele =\u003E ele == null)).ToList();\n    return res.ToString();\n}","task_id":920,"test_setup_code":"","test_list":["Debug.Assert(RemoveTuple(new Tuple\u003Cobject, object\u003E[] { new Tuple\u003Cobject, object\u003E(null, 2), new Tuple\u003Cobject, object\u003E(null, null), new Tuple\u003Cobject, object\u003E(3, 4), new Tuple\u003Cobject, object\u003E(12, 3), new Tuple\u003Cobject, object\u003E(null, null) }).ToString() == \u0022[(null, 2), (3, 4), (12, 3)]\u0022);","Debug.Assert(RemoveTuple(new object[,] { { null, null }, { null, null }, { 3, 6 }, { 17, 3 }, { null, 1 } }) == \u0022[(3, 6), (17, 3), (None, 1)]\u0022);","Debug.Assert(RemoveTuple(new List\u003CTuple\u003Cint?, int?\u003E\u003E { Tuple.Create(1, 2), Tuple.Create(2, (int?)null), Tuple.Create(3, (int?)null), Tuple.Create(24, 3), Tuple.Create((int?)null, (int?)null) }) == \u0022[(1, 2), (2, None), (3, None), (24, 3)]\u0022);"],"challenge_test_list":[]}
{"name":"tuple-chunk-size-n","description":"Chunk tuples into smaller groups of size n","text":"Write a function to perform chunking of tuples each of size n.","code":"public List\u003CTuple\u003Cint, int\u003E\u003E ChunkTuples(List\u003CTuple\u003Cint, int\u003E\u003E testTup, int N) {\n    List\u003CList\u003CTuple\u003Cint, int\u003E\u003E\u003E res = new List\u003CList\u003CTuple\u003Cint, int\u003E\u003E\u003E();\n    for (int i = 0; i \u003C testTup.Count; i \u002B= N) {\n        res.Add(testTup.Skip(i).Take(N).ToList());\n    }\n    return res;\n}","task_id":921,"test_setup_code":"","test_list":["Debug.Assert(ChunkTuples(new int[] { 10, 4, 5, 6, 7, 6, 8, 3, 4 }, 3).SequenceEqual(new List\u003C(int, int, int)\u003E { (10, 4, 5), (6, 7, 6), (8, 3, 4) }));","Debug.Assert(ChunkTuples(new[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 }, 2).SequenceEqual(new[] { new[] { 1, 2 }, new[] { 3, 4 }, new[] { 5, 6 }, new[] { 7, 8 }, new[] { 9 } }));","Debug.Assert(ChunkTuples(new int[] { 11, 14, 16, 17, 19, 21, 22, 25 }, 4).SequenceEqual(new List\u003C(int, int, int, int)\u003E { (11, 14, 16, 17), (19, 21, 22, 25) }));"],"challenge_test_list":[]}
{"name":"highest-product-pair","description":"Find the pair with the highest product in an array","text":"Write a function to find a pair with the highest product from a given array of integers.","code":"public (int, int)? MaxProduct(int[] arr) \n{ \n    int arrLen = arr.Length; \n    if (arrLen \u003C 2) \n    { \n        return null; \n    } \n    int x = arr[0]; \n    int y = arr[1]; \n    for (int i = 0; i \u003C arrLen; i\u002B\u002B) \n    { \n        for (int j = i \u002B 1; j \u003C arrLen; j\u002B\u002B) \n        { \n            if (arr[i] * arr[j] \u003E x * y) \n            { \n                x = arr[i]; \n                y = arr[j]; \n            } \n        } \n    } \n    return (x, y); \n}","task_id":922,"test_setup_code":"","test_list":["Debug.Assert(MaxProduct(new int[] { 1, 2, 3, 4, 7, 0, 8, 4 }) == (7, 8));","Debug.Assert(MaxProduct(new int[] { 0, -1, -2, -4, 5, 0, -6 }).Equals((-4, -6)));\n\npublic static (int, int) MaxProduct(int[] nums)\n{\n    // Method implementation goes here\n}","Debug.Assert(MaxProduct(new int[] { 1, 3, 5, 6, 8, 9 }) == (8, 9));"],"challenge_test_list":[]}
{"name":"shortest-superseq","description":"Find shortest string containing two subsequences","text":"Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.","code":"int SuperSeq(string X, string Y, int m, int n) {\n    if (m == 0) {\n        return n;\n    }\n    if (n == 0) {\n        return m;\n    }\n    if (X[m - 1] == Y[n - 1]) {\n        return 1 \u002B SuperSeq(X, Y, m - 1, n - 1);\n    }\n    return 1 \u002B Math.Min(SuperSeq(X, Y, m - 1, n), SuperSeq(X, Y, m, n - 1));\n}","task_id":923,"test_setup_code":"","test_list":["Debug.Assert(SuperSeq(\u0022AGGTAB\u0022, \u0022GXTXAYB\u0022, 6, 7) == 9);","Debug.Assert(SuperSeq(\u0022feek\u0022, \u0022eke\u0022, 4, 3) == 5);","Debug.Assert(SuperSeq(\u0022PARRT\u0022, \u0022RTA\u0022, 5, 3) == 6);"],"challenge_test_list":[]}
{"name":"max-of-two-nums","description":"Find the maximum of two given numbers","text":"Write a function to find maximum of two numbers.","code":"public int MaxOfTwo(int x, int y) \n{\n    if (x \u003E y) \n    {\n        return x;\n    }\n    return y;\n}","task_id":924,"test_setup_code":"","test_list":["Debug.Assert(MaxOfTwo(10, 20) == 20);\n\npublic int MaxOfTwo(int a, int b) {\n    return a \u003E b ? a : b;\n}","Debug.Assert(MaxOfTwo(19, 15) == 19);\n\npublic int MaxOfTwo(int a, int b)\n{\n    return (a \u003E b) ? a : b;\n}","Debug.Assert(MaxOfTwo(-10, -20) == -10);"],"challenge_test_list":[]}
{"name":"product-of-tuple","description":"Calculate the product of numbers in a tuple","text":"Write a C# function to calculate the product of all the numbers of a given tuple.","code":"public int MultipleTuple(IEnumerable\u003Cint\u003E nums) {\n    var temp = nums.ToList();\n    int product = 1; \n    foreach (var x in temp) {\n        product *= x;\n    }\n    return product;\n}","task_id":925,"test_setup_code":"","test_list":["Debug.Assert(MultipleTuple(new Tuple\u003Cint, int, int, int, int, int\u003E(4, 3, 2, 2, -1, 18)) == -864);","Debug.Assert(MultipleTuple((1, 2, 3)) == 6);","Debug.Assert(MultipleTuple((-2, -4, -6)) == -48);"],"challenge_test_list":[]}
{"name":"nth-rencontres","description":"Find the n-th rencontres number efficiently","text":"Write a function to find n-th rencontres number.","code":"int BinomialCoeff(int n, int k) \n{\n    if (k == 0 || k == n) \n    {\n        return 1;\n    }\n    return BinomialCoeff(n - 1, k - 1) \u002B BinomialCoeff(n - 1, k);\n}\n\nint RencontresNumber(int n, int m) \n{\n    if (n == 0 \u0026\u0026 m == 0) \n    {\n        return 1;\n    }\n    if (n == 1 \u0026\u0026 m == 0) \n    {\n        return 0;\n    }\n    if (m == 0) \n    {\n        return (n - 1) * (RencontresNumber(n - 1, 0) \u002B RencontresNumber(n - 2, 0));\n    }\n    return BinomialCoeff(n, m) * RencontresNumber(n - m, 0);\n}","task_id":926,"test_setup_code":"","test_list":["Debug.Assert(RencontresNumber(7, 2) == 924);","Debug.Assert(RencontresNumber(3, 0) == 2);","Debug.Assert(RencontresNumber(3, 1) == 3);"],"challenge_test_list":[]}
{"name":"binary-tree-height","description":"Calculate the height of a binary tree structure","text":"Write a function to calculate the height of the given binary tree.","code":"class Node \n{ \n    public int Data; \n    public Node Left; \n    public Node Right; \n\n    public Node(int data) \n    { \n        Data = data; \n        Left = null; \n        Right = null; \n    } \n} \n\npublic static int MaxHeight(Node node) \n{ \n    if (node == null) \n    { \n        return 0; \n    } \n    else \n    { \n        int leftHeight = MaxHeight(node.Left); \n        int rightHeight = MaxHeight(node.Right); \n        return (leftHeight \u003E rightHeight) ? leftHeight \u002B 1 : rightHeight \u002B 1; \n    } \n}","task_id":927,"test_setup_code":"class Node \n{\n    public int Data { get; set; }\n    public Node Left { get; set; }\n    public Node Right { get; set; }\n\n    public Node(int data) \n    {\n        Data = data;\n        Left = null;\n        Right = null;\n    }\n}\n\npublic int MaxHeight(Node node) \n{\n    if (node == null) \n    {\n        return 0;\n    } \n    else \n    {\n        int leftHeight = MaxHeight(node.Left);\n        int rightHeight = MaxHeight(node.Right);\n        return (leftHeight \u003E rightHeight) ? leftHeight \u002B 1 : rightHeight \u002B 1;\n    }\n}","test_list":["Debug.Assert(MaxHeight(root) == 3);","Debug.Assert(MaxHeight(root1) == 5);","Debug.Assert(MaxHeight(root2) == 4);"],"challenge_test_list":[]}
{"name":"date-format-conv","description":"Convert date from yyyy-mm-dd to dd-mm-yyyy format","text":"Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.","code":"using System.Text.RegularExpressions;\n\npublic class DateFormatter\n{\n    public string ChangeDateFormat(string dt)\n    {\n        return Regex.Replace(dt, @\u0022(\\d{4})-(\\d{1,2})-(\\d{1,2})\u0022, \u0022$3-$2-$1\u0022);\n    }\n}","task_id":928,"test_setup_code":"","test_list":["Debug.Assert(ChangeDateFormat(\u00222026-01-02\u0022) == \u002202-01-2026\u0022);","Debug.Assert(ChangeDateFormat(\u00222021-01-04\u0022) == \u002204-01-2021\u0022);","Debug.Assert(ChangeDateFormat(\u00222030-06-06\u0022) == \u002206-06-2030\u0022);"],"challenge_test_list":[]}
{"name":"count-repeated-items","description":"Count repeated items in a tuple","text":"Write a function to count repeated items of a tuple.","code":"public int CountTuplex(Tuple\u003Cint, int\u003E[] tuplex, int value)  \n{  \n    int count = tuplex.Count(t =\u003E t.Item1 == value || t.Item2 == value);  \n    return count;  \n}","task_id":929,"test_setup_code":"","test_list":["Debug.Assert(CountTuplex(new Tuple\u003Cint, int, int, int, int, int, int, int, int\u003E(2, 4, 5, 6, 2, 3, 4, 4, 7), 4) == 3);","Debug.Assert(CountTuplex(new Tuple\u003Cint, int, int, int, int, int, int, int, int\u003E(2, 4, 5, 6, 2, 3, 4, 4, 7), 2) == 2);","Debug.Assert(CountTuplex(new Tuple\u003Cint, int, int, int, int, int, int, int, int\u003E(2, 4, 7, 7, 7, 3, 4, 4, 7), 7) == 4);"],"challenge_test_list":[]}
{"name":"a-bb-matching","description":"Match a string with an a followed by b\u0027s using regex","text":"Write a function that matches a string that has an a followed by zero or more b\u0027s by using regex.","code":"public string TextMatch(string text)  \n{  \n    string patterns = \u0022ab*?\u0022;  \n    if (Regex.IsMatch(text, patterns))  \n    {  \n        return \u0022Found a match!\u0022;  \n    }  \n    else  \n    {  \n        return \u0022Not matched!\u0022;  \n    }  \n}","task_id":930,"test_setup_code":"","test_list":["Debug.Assert(TextMatch(\u0022msb\u0022) == \u0022Not matched!\u0022);","Debug.Assert(TextMatch(\u0022a0c\u0022) == \u0022Found a match!\u0022);","Debug.Assert(TextMatch(\u0022abbc\u0022) == \u0022Found a match!\u0022);"],"challenge_test_list":[]}
{"name":"sum-of-cubes-n","description":"Calculate the sum of cubes from 1 to n","text":"Write a function to calculate the sum of series 1\u00B3\u002B2\u00B3\u002B3\u00B3\u002B\u2026.\u002Bn\u00B3.","code":"public double SumSeries(double number)\n{\n    double total = 0;\n    total = Math.Pow((number * (number \u002B 1)) / 2, 2);\n    return total;\n}","task_id":931,"test_setup_code":"","test_list":["Debug.Assert(SumSeries(7) == 784);","Debug.Assert(SumSeries(5) == 225);","Debug.Assert(SumSeries(15) == 14400);"],"challenge_test_list":[]}
{"name":"remove-dup-words","description":"Remove duplicates from a list of words","text":"Write a function to remove duplicate words from a given list of strings.","code":"public List\u003CT\u003E RemoveDuplicList\u003CT\u003E(List\u003CT\u003E l)\n{\n    List\u003CT\u003E temp = new List\u003CT\u003E();\n    foreach (T x in l)\n    {\n        if (!temp.Contains(x))\n        {\n            temp.Add(x);\n        }\n    }\n    return temp;\n}","task_id":932,"test_setup_code":"","test_list":["Debug.Assert(RemoveDuplicList(new List\u003Cstring\u003E { \u0022Python\u0022, \u0022Exercises\u0022, \u0022Practice\u0022, \u0022Solution\u0022, \u0022Exercises\u0022 }).SequenceEqual(new List\u003Cstring\u003E { \u0022Python\u0022, \u0022Exercises\u0022, \u0022Practice\u0022, \u0022Solution\u0022 }));","Debug.Assert(RemoveDuplicList(new List\u003Cstring\u003E { \u0022Python\u0022, \u0022Exercises\u0022, \u0022Practice\u0022, \u0022Solution\u0022, \u0022Exercises\u0022, \u0022Java\u0022 }).SequenceEqual(new List\u003Cstring\u003E { \u0022Python\u0022, \u0022Exercises\u0022, \u0022Practice\u0022, \u0022Solution\u0022, \u0022Java\u0022 }));","Debug.Assert(RemoveDuplicList(new List\u003Cstring\u003E { \u0022Python\u0022, \u0022Exercises\u0022, \u0022Practice\u0022, \u0022Solution\u0022, \u0022Exercises\u0022, \u0022C\u002B\u002B\u0022, \u0022C\u0022, \u0022C\u002B\u002B\u0022 }).SequenceEqual(new List\u003Cstring\u003E { \u0022Python\u0022, \u0022Exercises\u0022, \u0022Practice\u0022, \u0022Solution\u0022, \u0022C\u002B\u002B\u0022, \u0022C\u0022 }));"],"challenge_test_list":[]}
{"name":"camel-to-snake","description":"Convert camel case to snake case using regex","text":"Write a function to convert camel case string to snake case string by using regex.","code":"using System.Text.RegularExpressions;\n\npublic static string CamelToSnake(string text)\n{\n    string str1 = Regex.Replace(text, @\u0022(.)([A-Z][a-z]\u002B)\u0022, \u0022$1_$2\u0022);\n    return Regex.Replace(str1, @\u0022([a-z0-9])([A-Z])\u0022, \u0022$1_$2\u0022).ToLower();\n}","task_id":933,"test_setup_code":"","test_list":["Debug.Assert(CamelToSnake(\u0022GoogleAssistant\u0022) == \u0022google_assistant\u0022);","Debug.Assert(CamelToSnake(\u0022ChromeCast\u0022) == \u0022chrome_cast\u0022);","Debug.Assert(CamelToSnake(\u0022QuadCore\u0022) == \u0022quad_core\u0022);"],"challenge_test_list":[]}
{"name":"delannoy-nth-num","description":"Find the nth Delannoy number using a function","text":"Write a function to find the nth delannoy number.","code":"public int DealnnoyNum(int n, int m) \n{ \n    if (m == 0 || n == 0) \n    { \n        return 1; \n    } \n    return DealnnoyNum(m - 1, n) \u002B DealnnoyNum(m - 1, n - 1) \u002B DealnnoyNum(m, n - 1); \n}","task_id":934,"test_setup_code":"","test_list":["Debug.Assert(DealnnoyNum(3, 4) == 129);","Debug.Assert(DealnnoyNum(3, 3) == 63);","Debug.Assert(DealnnoyNum(4, 5) == 681);"],"challenge_test_list":[]}
{"name":"sum-of-squares","description":"Calculate the sum of squares up to n","text":"Write a function to calculate the sum of series 1\u00B2\u002B2\u00B2\u002B3\u00B2\u002B\u2026.\u002Bn\u00B2.","code":"public static double SeriesSum(int number)\n{\n    double total = 0;\n    total = (number * (number \u002B 1) * (2 * number \u002B 1)) / 6.0;\n    return total;\n}","task_id":935,"test_setup_code":"","test_list":["Debug.Assert(SeriesSum(6) == 91);","Debug.Assert(SeriesSum(7) == 140);","Debug.Assert(SeriesSum(12) == 650);"],"challenge_test_list":[]}
{"name":"rearrange-tuples","description":"Rearrange tuples based on an ordered list","text":"Write a function to re-arrange the given tuples based on the given ordered list.","code":"public List\u003CTuple\u003CTKey, TValue\u003E\u003E ReArrangeTuples\u003CTKey, TValue\u003E(List\u003CTuple\u003CTKey, TValue\u003E\u003E testList, List\u003CTKey\u003E ordList)\n{\n    var temp = testList.ToDictionary(item =\u003E item.Item1, item =\u003E item.Item2);\n    var res = ordList.Select(key =\u003E Tuple.Create(key, temp[key])).ToList();\n    return res;\n}","task_id":936,"test_setup_code":"","test_list":["Debug.Assert(ReArrangeTuples(new List\u003CTuple\u003Cint, int\u003E\u003E { Tuple.Create(4, 3), Tuple.Create(1, 9), Tuple.Create(2, 10), Tuple.Create(3, 2) }, new List\u003Cint\u003E { 1, 4, 2, 3 }).SequenceEqual(new List\u003CTuple\u003Cint, int\u003E\u003E { Tuple.Create(1, 9), Tuple.Create(4, 3), Tuple.Create(2, 10), Tuple.Create(3, 2) }));","Debug.Assert(ReArrangeTuples(new (int, int)[] { (5, 4), (2, 10), (3, 11), (4, 3) }, new int[] { 3, 4, 2, 3 }) == new (int, int)[] { (3, 11), (4, 3), (2, 10), (3, 11) });","Debug.Assert(ReArrangeTuples(new List\u003C(int, int)\u003E{(6, 3), (3, 8), (5, 7), (2, 4)}, new List\u003Cint\u003E{2, 5, 3, 6}) == new List\u003C(int, int)\u003E{(2, 4), (5, 7), (3, 8), (6, 3)});"],"challenge_test_list":[]}
{"name":"most-common-char","description":"Count the most frequent character in a string","text":"Write a function to count the most common character in a given string.","code":"using System.Collections.Generic;\nusing System.Linq;\n\npublic class CharacterCounter\n{\n    public char MaxChar(string str1)\n    {\n        var temp = str1.GroupBy(c =\u003E c)\n                       .ToDictionary(g =\u003E g.Key, g =\u003E g.Count());\n        return temp.OrderByDescending(pair =\u003E pair.Value)\n                   .First().Key;\n    }\n}","task_id":937,"test_setup_code":"","test_list":["Debug.Assert(MaxChar(\u0022hello world\u0022) == \u0027l\u0027);\n\nchar MaxChar(string input) {\n    return input.GroupBy(c =\u003E c)\n                .OrderByDescending(g =\u003E g.Count())\n                .First()\n                .Key;\n}","Debug.Assert(MaxChar(\u0022hello \u0022) == \u0027l\u0027);\n\nchar MaxChar(string input)\n{\n    // Implementation to find the maximum character\n}","Debug.Assert(MaxChar(\u0022python pr\u0022) == \u0027p\u0027);"],"challenge_test_list":[]}
{"name":"closest-three-elements","description":"Find three closest elements from three arrays","text":"Write a function to find three closest elements from three sorted arrays.","code":"public static (int, int, int) FindCloset(int[] A, int[] B, int[] C, int p, int q, int r) \n{\n    int diff = int.MaxValue;\n    int res_i = 0;\n    int res_j = 0;\n    int res_k = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n\n    while (i \u003C p \u0026\u0026 j \u003C q \u0026\u0026 k \u003C r) \n    {\n        int minimum = Math.Min(A[i], Math.Min(B[j], C[k]));\n        int maximum = Math.Max(A[i], Math.Max(B[j], C[k]));\n\n        if (maximum - minimum \u003C diff) \n        {\n            res_i = i;\n            res_j = j;\n            res_k = k;\n            diff = maximum - minimum;\n        }\n\n        if (diff == 0) \n        {\n            break;\n        }\n\n        if (A[i] == minimum) \n        {\n            i\u002B\u002B;\n        } \n        else if (B[j] == minimum) \n        {\n            j\u002B\u002B;\n        } \n        else \n        {\n            k\u002B\u002B;\n        }\n    }\n\n    return (A[res_i], B[res_j], C[res_k]);\n}","task_id":938,"test_setup_code":"","test_list":["Debug.Assert(FindCloset(new int[] { 1, 4, 10 }, new int[] { 2, 15, 20 }, new int[] { 10, 12 }, 3, 3, 2).Equals((10, 15, 10)));","Debug.Assert(FindCloset(new[] { 20, 24, 100 }, new[] { 2, 19, 22, 79, 800 }, new[] { 10, 12, 23, 24, 119 }, 3, 5, 5).Equals((24, 22, 23)));","Debug.Assert(FindCloset(new int[] { 2, 5, 11 }, new int[] { 3, 16, 21 }, new int[] { 11, 13 }, 3, 3, 2).Equals((11, 16, 11)));"],"challenge_test_list":[]}
{"name":"sort-dict-list","description":"Sort a list of dictionaries with a lambda function","text":"Write a function to sort a list of dictionaries using lambda function.","code":"public List\u003CDictionary\u003Cstring, object\u003E\u003E SortedModels(List\u003CDictionary\u003Cstring, object\u003E\u003E models) \n{\n    var sortedModels = models.OrderBy(x =\u003E x[\u0022color\u0022]).ToList();\n    return sortedModels;\n}","task_id":939,"test_setup_code":"","test_list":["Debug.Assert(SortedModels(new List\u003CDictionary\u003Cstring, object\u003E\u003E() {\n    new Dictionary\u003Cstring, object\u003E{{\u0022make\u0022, \u0022Nokia\u0022}, {\u0022model\u0022, 216}, {\u0022color\u0022, \u0022Black\u0022}},\n    new Dictionary\u003Cstring, object\u003E{{\u0022make\u0022, \u0022Mi Max\u0022}, {\u0022model\u0022, 2}, {\u0022color\u0022, \u0022Gold\u0022}},\n    new Dictionary\u003Cstring, object\u003E{{\u0022make\u0022, \u0022Samsung\u0022}, {\u0022model\u0022, 7}, {\u0022color\u0022, \u0022Blue\u0022}}\n}).SequenceEqual(new List\u003CDictionary\u003Cstring, object\u003E\u003E() {\n    new Dictionary\u003Cstring, object\u003E{{\u0022make\u0022, \u0022Nokia\u0022}, {\u0022model\u0022, 216}, {\u0022color\u0022, \u0022Black\u0022}},\n    new Dictionary\u003Cstring, object\u003E{{\u0022make\u0022, \u0022Samsung\u0022}, {\u0022model\u0022, 7}, {\u0022color\u0022, \u0022Blue\u0022}},\n    new Dictionary\u003Cstring, object\u003E{{\u0022make\u0022, \u0022Mi Max\u0022}, {\u0022model\u0022, 2}, {\u0022color\u0022, \u0022Gold\u0022}}\n}));","Debug.Assert(SortedModels(new List\u003CDictionary\u003Cstring, object\u003E\u003E() {\n    new Dictionary\u003Cstring, object\u003E() { {\u0022make\u0022, \u0022Vivo\u0022}, {\u0022model\u0022, 20}, {\u0022color\u0022, \u0022Blue\u0022} },\n    new Dictionary\u003Cstring, object\u003E() { {\u0022make\u0022, \u0022oppo\u0022}, {\u0022model\u0022, 17}, {\u0022color\u0022, \u0022Gold\u0022} },\n    new Dictionary\u003Cstring, object\u003E() { {\u0022make\u0022, \u0022Apple\u0022}, {\u0022model\u0022, 11}, {\u0022color\u0022, \u0022red\u0022} }\n}).SequenceEqual(new List\u003CDictionary\u003Cstring, object\u003E\u003E() {\n    new Dictionary\u003Cstring, object\u003E() { {\u0022make\u0022, \u0022Vivo\u0022}, {\u0022model\u0022, 20}, {\u0022color\u0022, \u0022Blue\u0022} },\n    new Dictionary\u003Cstring, object\u003E() { {\u0022make\u0022, \u0022oppo\u0022}, {\u0022model\u0022, 17}, {\u0022color\u0022, \u0022Gold\u0022} },\n    new Dictionary\u003Cstring, object\u003E() { {\u0022make\u0022, \u0022Apple\u0022}, {\u0022model\u0022, 11}, {\u0022color\u0022, \u0022red\u0022} }\n}));","Debug.Assert(SortedModels(new List\u003CDictionary\u003Cstring, object\u003E\u003E {\n    new Dictionary\u003Cstring, object\u003E{{\u0022make\u0022, \u0022micromax\u0022}, {\u0022model\u0022, 40}, {\u0022color\u0022, \u0022grey\u0022}},\n    new Dictionary\u003Cstring, object\u003E{{\u0022make\u0022, \u0022poco\u0022}, {\u0022model\u0022, 60}, {\u0022color\u0022, \u0022blue\u0022}}\n}).SequenceEqual(new List\u003CDictionary\u003Cstring, object\u003E\u003E {\n    new Dictionary\u003Cstring, object\u003E{{\u0022make\u0022, \u0022poco\u0022}, {\u0022model\u0022, 60}, {\u0022color\u0022, \u0022blue\u0022}},\n    new Dictionary\u003Cstring, object\u003E{{\u0022make\u0022, \u0022micromax\u0022}, {\u0022model\u0022, 40}, {\u0022color\u0022, \u0022grey\u0022}}\n}));"],"challenge_test_list":[]}
{"name":"heap-sort-array","description":"Sort an array using the heap sort algorithm","text":"Write a function to sort the given array by using heap sort.","code":"public int[] HeapSort(int[] arr) {\n    Heapify(arr);\n    int end = arr.Length - 1;\n    while (end \u003E 0) {\n        (arr[end], arr[0]) = (arr[0], arr[end]);\n        ShiftDown(arr, 0, end - 1);\n        end--;\n    }\n    return arr;\n}\n\nprivate void Heapify(int[] arr) {\n    int start = arr.Length / 2;\n    while (start \u003E= 0) {\n        ShiftDown(arr, start, arr.Length - 1);\n        start--;\n    }\n}\n\nprivate void ShiftDown(int[] arr, int start, int end) {\n    int root = start;\n    while (root * 2 \u002B 1 \u003C= end) {\n        int child = root * 2 \u002B 1;\n        if (child \u002B 1 \u003C= end \u0026\u0026 arr[child] \u003C arr[child \u002B 1]) {\n            child\u002B\u002B;\n        }\n        if (child \u003C= end \u0026\u0026 arr[root] \u003C arr[child]) {\n            (arr[root], arr[child]) = (arr[child], arr[root]);\n            root = child;\n        } else {\n            return;\n        }\n    }\n}","task_id":940,"test_setup_code":"","test_list":["Debug.Assert(HeapSort(new int[] { 12, 2, 4, 5, 2, 3 }).SequenceEqual(new int[] { 2, 2, 3, 4, 5, 12 }));","Debug.Assert(HeapSort(new int[] { 32, 14, 5, 6, 7, 19 }).SequenceEqual(new int[] { 5, 6, 7, 14, 19, 32 }));","Debug.Assert(HeapSort(new List\u003Cint\u003E { 21, 15, 29, 78, 65 }).SequenceEqual(new List\u003Cint\u003E { 15, 21, 29, 65, 78 }));"],"challenge_test_list":[]}
{"name":"count-until-tuple","description":"Count list elements until a tuple is found","text":"Write a function to count the elements in a list until an element is a tuple.","code":"public int CountElim(IEnumerable\u003Cobject\u003E num)\n{\n    int countElim = 0;\n    foreach (var n in num)\n    {\n        if (n is Tuple)\n        {\n            break;\n        }\n        countElim\u002B\u002B;\n    }\n    return countElim;\n}","task_id":941,"test_setup_code":"","test_list":["Debug.Assert(CountElim(new object[] { 10, 20, 30, Tuple.Create(10, 20), 40 }) == 3);","Debug.Assert(CountElim(new object[] { 10, new Tuple\u003Cint, int\u003E(20, 30), new Tuple\u003Cint, int\u003E(10, 20), 40 }) == 1);","Debug.Assert(CountElim(new List\u003CTuple\u003Cint, Tuple\u003Cint, int, Tuple\u003Cint, int\u003E, int\u003E\u003E\u003E { Tuple.Create(10, Tuple.Create(20, 30, Tuple.Create(10, 20), 40) ) }) == 0);"],"challenge_test_list":[]}
{"name":"check-list-elements","description":"Check if any element exists in the list","text":"Write a function to check if any list element is present in the given list.","code":"public bool CheckElement(Tuple\u003Cint, int\u003E testTup, List\u003Cint\u003E checkList)\n{\n    bool res = false;\n    foreach (var ele in checkList)\n    {\n        if (testTup.Item1 == ele || testTup.Item2 == ele)\n        {\n            res = true;\n            break;\n        }\n    }\n    return res;\n}","task_id":942,"test_setup_code":"","test_list":["Debug.Assert(CheckElement(new int[] { 4, 5, 7, 9, 3 }, new int[] { 6, 7, 10, 11 }) == true);","Debug.Assert(CheckElement(new int[] { 1, 2, 3, 4 }, new int[] { 4, 6, 7, 8, 9 }) == true);","Debug.Assert(CheckElement(new int[] { 3, 2, 1, 4, 5 }, new int[] { 9, 8, 7, 6 }) == false);"],"challenge_test_list":[]}
{"name":"combine-sorted-lists","description":"Combine two sorted lists using the heapq module","text":"Write a function to combine two given sorted lists using heapq module.","code":"using System.Collections.Generic;\nusing System.Linq;\n\npublic class ListCombiner\n{\n    public List\u003Cint\u003E CombineLists(List\u003Cint\u003E num1, List\u003Cint\u003E num2)\n    {\n        return num1.Concat(num2).OrderBy(x =\u003E x).ToList();\n    }\n}","task_id":943,"test_setup_code":"","test_list":["Debug.Assert(CombineLists(new List\u003Cint\u003E { 1, 3, 5, 7, 9, 11 }, new List\u003Cint\u003E { 0, 2, 4, 6, 8, 10 }).SequenceEqual(new List\u003Cint\u003E { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 }));","Debug.Assert(CombineLists(new List\u003Cint\u003E { 1, 3, 5, 6, 8, 9 }, new List\u003Cint\u003E { 2, 5, 7, 11 }).SequenceEqual(new List\u003Cint\u003E { 1, 2, 3, 5, 5, 6, 7, 8, 9, 11 }));","Debug.Assert(CombineLists(new List\u003Cint\u003E { 1, 3, 7 }, new List\u003Cint\u003E { 2, 4, 6 }).SequenceEqual(new List\u003Cint\u003E { 1, 2, 3, 4, 6, 7 }));"],"challenge_test_list":[]}
{"name":"separate-numbers","description":"Separate numbers from a string with their positions","text":"Write a function to separate and print the numbers and their position of a given string.","code":"public int NumPosition(string text) {\n    var match = Regex.Match(text, @\u0022\\d\u002B\u0022);\n    return match.Success ? match.Index : -1;\n}","task_id":944,"test_setup_code":"","test_list":["Debug.Assert(NumPosition(\u0022there are 70 flats in this apartment\u0022) == 10);","Debug.Assert(NumPosition(\u0022every adult have 32 teeth\u0022) == 17);","Debug.Assert(NumPosition(\u0022isha has 79 chocolates in her bag\u0022) == 9);"],"challenge_test_list":[]}
{"name":"tuple-to-set.conv","description":"Convert tuples to set with a defined function","text":"Write a function to convert the given tuples into set.","code":"public HashSet\u003CT\u003E TupleToSet\u003CT\u003E(Tuple\u003CT\u003E t)\n{\n    return new HashSet\u003CT\u003E(new[] { t.Item1, t.Item2 });\n}","task_id":945,"test_setup_code":"","test_list":["Debug.Assert(TupleToSet(new Tuple\u003Cstring, string, string\u003E(\u0022x\u0022, \u0022y\u0022, \u0022z\u0022)).SetEquals(new HashSet\u003Cstring\u003E { \u0022y\u0022, \u0022x\u0022, \u0022z\u0022 }));","Debug.Assert(TupleToSet(new Tuple\u003Cstring, string, string\u003E(\u0022a\u0022, \u0022b\u0022, \u0022c\u0022)).SetEquals(new HashSet\u003Cstring\u003E { \u0022c\u0022, \u0022a\u0022, \u0022b\u0022 }));","Debug.Assert(TupleToSet((\u0022z\u0022, \u0022d\u0022, \u0022e\u0022)).SetEquals(new HashSet\u003Cstring\u003E { \u0022d\u0022, \u0022e\u0022, \u0022z\u0022 }));"],"challenge_test_list":[]}
{"name":"most-common-elems","description":"Find the most common elements in text and counts","text":"Write a function to find the most common elements and their counts of a specified text.","code":"using System.Collections.Generic;\nusing System.Linq;\n\npublic class MyClass\n{\n    public List\u003CKeyValuePair\u003CT, int\u003E\u003E MostCommonElem\u003CT\u003E(IEnumerable\u003CT\u003E s, int a)\n    {\n        return s.GroupBy(x =\u003E x)\n                .Select(g =\u003E new KeyValuePair\u003CT, int\u003E(g.Key, g.Count()))\n                .OrderByDescending(x =\u003E x.Value)\n                .Take(a)\n                .ToList();\n    }\n}","task_id":946,"test_setup_code":"","test_list":["Debug.Assert(MostCommonElem(\u0022lkseropewdssafsdfafkpwe\u0022, 3).SequenceEqual(new[] { Tuple.Create(\u0027s\u0027, 4), Tuple.Create(\u0027e\u0027, 3), Tuple.Create(\u0027f\u0027, 3) }));","Debug.Assert(MostCommonElem(\u0022lkseropewdssafsdfafkpwe\u0022, 2).SequenceEqual(new List\u003C(char, int)\u003E { (\u0027s\u0027, 4), (\u0027e\u0027, 3) }));","Debug.Assert(MostCommonElem(\u0022lkseropewdssafsdfafkpwe\u0022, 7).SequenceEqual(new List\u003CTuple\u003Cchar, int\u003E\u003E { Tuple.Create(\u0027s\u0027, 4), Tuple.Create(\u0027e\u0027, 3), Tuple.Create(\u0027f\u0027, 3), Tuple.Create(\u0027k\u0027, 2), Tuple.Create(\u0027p\u0027, 2), Tuple.Create(\u0027w\u0027, 2), Tuple.Create(\u0027d\u0027, 2) }));"],"challenge_test_list":[]}
{"name":"shortest-word-length","description":"Find the length of the shortest word in text","text":"Write a C# function to find the length of the shortest word.","code":"public int LenLog(List\u003Cstring\u003E list1)\n{\n    int min = list1[0].Length;\n    foreach (var i in list1)\n    {\n        if (i.Length \u003C min)\n        {\n            min = i.Length;\n        }\n    }\n    return min;\n}","task_id":947,"test_setup_code":"","test_list":["Debug.Assert(LenLog(new string[] { \u0022win\u0022, \u0022lose\u0022, \u0022great\u0022 }) == 3);","Debug.Assert(LenLog(new string[] { \u0022a\u0022, \u0022ab\u0022, \u0022abc\u0022 }) == 1);","Debug.Assert(LenLog(new string[] { \u002212\u0022, \u002212\u0022, \u00221234\u0022 }) == 2);"],"challenge_test_list":[]}
{"name":"get-item-from-tuple","description":"Retrieve an item from a specified tuple","text":"Write a function to get an item of a tuple.","code":"public object GetItem(Tuple\u003Cobject, object\u003E tup1, int index) \n{\n    var item = tup1.Item1; // Adjust as necessary for tuple index\n    return item;\n}","task_id":948,"test_setup_code":"","test_list":["Debug.Assert(GetItem((\u0022w\u0022, 3, \u0022r\u0022, \u0022e\u0022, \u0022s\u0022, \u0022o\u0022, \u0022u\u0022, \u0022r\u0022, \u0022c\u0022, \u0022e\u0022), 3) == \u0027e\u0027);","Debug.Assert(GetItem((\u0022w\u0022, 3, \u0022r\u0022, \u0022e\u0022, \u0022s\u0022, \u0022o\u0022, \u0022u\u0022, \u0022r\u0022, \u0022c\u0022, \u0022e\u0022), -4).Equals(\u0027u\u0027));","Debug.Assert(GetItem((\u0022w\u0022, 3, \u0022r\u0022, \u0022e\u0022, \u0022s\u0022, \u0022o\u0022, \u0022u\u0022, \u0022r\u0022, \u0022c\u0022, \u0022e\u0022), -3) == (\u0027r\u0027));"],"challenge_test_list":[]}
{"name":"sort-tuple-digits","description":"Sort a list of tuples by total digit count","text":"Write a function to sort the given tuple list basis the total digits in tuple.","code":"public int CountDigs(Tuple\u003Cint\u003E[] tup) \n{\n    return tup.Sum(ele =\u003E ele.ToString().Length);\n}\n\npublic string SortList(List\u003Cint\u003E testList) \n{\n    testList.Sort((x, y) =\u003E CountDigs(new Tuple\u003Cint\u003E(x)).CompareTo(CountDigs(new Tuple\u003Cint\u003E(y))));\n    return testList.ToString();\n}","task_id":949,"test_setup_code":"","test_list":["Debug.Assert(SortList(new List\u003CValueTuple\u003Cint\u003E\u003E { (3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34) }) == \u0022[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]\u0022);","Debug.Assert(SortList(new List\u003CTuple\u003Cint\u003E\u003E { Tuple.Create(3, 4, 8), Tuple.Create(1, 2), Tuple.Create(1234335), Tuple.Create(1345, 234, 334) }) == \u0022[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]\u0022);","Debug.Assert(SortList(new List\u003CValueTuple\u003Cint, int, int, int\u003E\u003E { (34, 4, 61, 723), (1, 2), (145,), (134, 23) }) == \u0022[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]\u0022);"],"challenge_test_list":[]}
{"name":"zodiac-signs-yr","description":"Display Chinese zodiac sign for a given year","text":"Write a function to display sign of the chinese zodiac for given year.","code":"string ChineseZodiac(int year) \n{\n    string sign;\n    if ((year - 2000) % 12 == 0)\n    {\n        sign = \u0022Dragon\u0022;\n    }\n    else if ((year - 2000) % 12 == 1)\n    {\n        sign = \u0022Snake\u0022;\n    }\n    else if ((year - 2000) % 12 == 2)\n    {\n        sign = \u0022Horse\u0022;\n    }\n    else if ((year - 2000) % 12 == 3)\n    {\n        sign = \u0022sheep\u0022;\n    }\n    else if ((year - 2000) % 12 == 4)\n    {\n        sign = \u0022Monkey\u0022;\n    }\n    else if ((year - 2000) % 12 == 5)\n    {\n        sign = \u0022Rooster\u0022;\n    }\n    else if ((year - 2000) % 12 == 6)\n    {\n        sign = \u0022Dog\u0022;\n    }\n    else if ((year - 2000) % 12 == 7)\n    {\n        sign = \u0022Pig\u0022;\n    }\n    else if ((year - 2000) % 12 == 8)\n    {\n        sign = \u0022Rat\u0022;\n    }\n    else if ((year - 2000) % 12 == 9)\n    {\n        sign = \u0022Ox\u0022;\n    }\n    else if ((year - 2000) % 12 == 10)\n    {\n        sign = \u0022Tiger\u0022;\n    }\n    else\n    {\n        sign = \u0022Hare\u0022;\n    }\n    return sign;\n}","task_id":950,"test_setup_code":"","test_list":["Debug.Assert(ChineseZodiac(1997) == \u0022Ox\u0022);","Debug.Assert(ChineseZodiac(1998) == \u0022Tiger\u0022);","Debug.Assert(ChineseZodiac(1994) == \u0022Dog\u0022);"],"challenge_test_list":[]}
{"name":"max-sim-indices","description":"Find max similar indices in two tuple lists","text":"Write a function to find the maximum of similar indices in two lists of tuples.","code":"public List\u003C(int, int)\u003E MaxSimilarIndices(List\u003C(int, int)\u003E testList1, List\u003C(int, int)\u003E testList2) {\n    var res = testList1.Zip(testList2, (x, y) =\u003E (Math.Max(x.Item1, y.Item1), Math.Max(x.Item2, y.Item2))).ToList();\n    return res;\n}","task_id":951,"test_setup_code":"","test_list":["Debug.Assert(MaxSimilarIndices(new List\u003CTuple\u003Cint, int\u003E\u003E { Tuple.Create(2, 4), Tuple.Create(6, 7), Tuple.Create(5, 1) }, new List\u003CTuple\u003Cint, int\u003E\u003E { Tuple.Create(5, 4), Tuple.Create(8, 10), Tuple.Create(8, 14) }).SequenceEqual(new List\u003CTuple\u003Cint, int\u003E\u003E { Tuple.Create(5, 4), Tuple.Create(8, 10), Tuple.Create(8, 14) }));","Debug.Assert(MaxSimilarIndices(new List\u003C(int, int)\u003E { (3, 5), (7, 8), (6, 2) }, new List\u003C(int, int)\u003E { (6, 5), (9, 11), (9, 15) }).SequenceEqual(new List\u003C(int, int)\u003E { (6, 5), (9, 11), (9, 15) }));","Debug.Assert(MaxSimilarIndices(new List\u003CTuple\u003Cint, int\u003E\u003E { Tuple.Create(4, 6), Tuple.Create(8, 9), Tuple.Create(7, 3) }, new List\u003CTuple\u003Cint, int\u003E\u003E { Tuple.Create(7, 6), Tuple.Create(10, 12), Tuple.Create(10, 16) }).SequenceEqual(new List\u003CTuple\u003Cint, int\u003E\u003E { Tuple.Create(7, 6), Tuple.Create(10, 12), Tuple.Create(10, 16) }));"],"challenge_test_list":[]}
{"name":"ncr-mod-p-calculator","description":"Compute nCr modulo p using a function","text":"Write a function to compute the value of ncr mod p.","code":"public static int NCrModP(int n, int r, int p) \n{\n    if (r \u003E n - r) \n    {\n        r = n - r;\n    }\n\n    int[] C = new int[r \u002B 1];\n    C[0] = 1;\n\n    for (int i = 1; i \u003C= n; i\u002B\u002B) \n    {\n        for (int j = Math.Min(i, r); j \u003E 0; j--) \n        {\n            C[j] = (C[j] \u002B C[j - 1]) % p;\n        }\n    }\n    \n    return C[r];\n}","task_id":952,"test_setup_code":"","test_list":["Debug.Assert(NCrModP(10, 2, 13) == 6);","Debug.Assert(NCrModP(11, 3, 14) == 11);","Debug.Assert(NCrModP(18, 14, 19) == 1);"],"challenge_test_list":[]}
{"name":"min-subsets-dist","description":"Find minimum subsets with distinct elements in Python","text":"Write a C# function to find the minimun number of subsets with distinct elements.","code":"public int Subset(int[] ar, int n) \n{\n    int res = 0;\n    Array.Sort(ar);\n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    {\n        int count = 1;\n        for (int j = i \u002B 1; j \u003C n; j\u002B\u002B) \n        {\n            if (ar[i] == ar[j]) \n            {\n                count\u002B\u002B;\n            } \n            else \n            {\n                break;\n            }\n        }\n        res = Math.Max(res, count);\n    }\n    return res;\n}","task_id":953,"test_setup_code":"","test_list":["Debug.Assert(Subset(new List\u003Cint\u003E { 1, 2, 3, 4 }, 4) == 1);","Debug.Assert(Subset(new List\u003Cint\u003E { 5, 6, 9, 3, 4, 3, 4 }, 7) == 2);","Debug.Assert(Subset(new int[] { 1, 2, 3 }, 3) == 1);"],"challenge_test_list":[]}
{"name":"profit-calculator","description":"Calculate profit or return none if no profit","text":"Write a function that gives profit amount if the given amount has profit else return none.","code":"public static double? ProfitAmount(double actualCost, double saleAmount) \n{ \n    if (actualCost \u003E saleAmount) \n    { \n        double amount = actualCost - saleAmount; \n        return amount; \n    } \n    else \n    { \n        return null; \n    } \n}","task_id":954,"test_setup_code":"","test_list":["Debug.Assert(ProfitAmount(1500, 1200) == 300);","Debug.Assert(ProfitAmount(100, 200) == null);","Debug.Assert(ProfitAmount(2000, 5000) == null);"],"challenge_test_list":[]}
{"name":"abundant-number","description":"Determine if a number is abundant or not","text":"Write a function to find out, if the given number is abundant.","code":"public bool IsAbundant(int n) {\n    int fctrsum = 0;\n    for (int fctr = 1; fctr \u003C n; fctr\u002B\u002B) {\n        if (n % fctr == 0) {\n            fctrsum \u002B= fctr;\n        }\n    }\n    return fctrsum \u003E n;\n}","task_id":955,"test_setup_code":"","test_list":["Debug.Assert(IsAbundant(12) == true);","Debug.Assert(IsAbundant(13) == false);","Debug.Assert(IsAbundant(9) == false);"],"challenge_test_list":[]}
{"name":"split-at-uppercase","description":"Split strings at uppercase letters using regex","text":"Write a function to split the given string at uppercase letters by using regex.","code":"using System.Collections.Generic;\nusing System.Text.RegularExpressions;\n\npublic class Splitter\n{\n    public List\u003Cstring\u003E SplitList(string text)\n    {\n        return new List\u003Cstring\u003E(Regex.Matches(text, \u0022[A-Z][^A-Z]*\u0022).Select(m =\u003E m.Value));\n    }\n}","task_id":956,"test_setup_code":"","test_list":["Debug.Assert(SplitList(\u0022LearnToBuildAnythingWithGoogle\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022Learn\u0022, \u0022To\u0022, \u0022Build\u0022, \u0022Anything\u0022, \u0022With\u0022, \u0022Google\u0022 }));","Debug.Assert(SplitList(\u0022ApmlifyingTheBlack\u002BDeveloperCommunity\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022Apmlifying\u0022, \u0022The\u0022, \u0022Black\u002B\u0022, \u0022Developer\u0022, \u0022Community\u0022 }));","Debug.Assert(SplitList(\u0022UpdateInTheGoEcoSystem\u0022).SequenceEqual(new List\u003Cstring\u003E { \u0022Update\u0022, \u0022In\u0022, \u0022The\u0022, \u0022Go\u0022, \u0022Eco\u0022, \u0022System\u0022 }));"],"challenge_test_list":[]}
{"name":"rightmost-set-bit","description":"Find the position of the rightmost set bit","text":"Write a C# function to get the position of rightmost set bit.","code":"public static int GetFirstSetBitPos(int n)\n{\n    return (int)(Math.Log2(n \u0026 -n) \u002B 1);\n}","task_id":957,"test_setup_code":"","test_list":["Debug.Assert(GetFirstSetBitPos(12) == 3);","Debug.Assert(GetFirstSetBitPos(18) == 2);","Debug.Assert(GetFirstSetBitPos(16) == 5);"],"challenge_test_list":[]}
{"name":"int-to-roman","description":"Convert an integer to its Roman numeral equivalent","text":"Write a function to convert an integer into a roman numeral.","code":"public string IntToRoman(int num) {\n    int[] val = { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n    string[] syb = { \u0022M\u0022, \u0022CM\u0022, \u0022D\u0022, \u0022CD\u0022, \u0022C\u0022, \u0022XC\u0022, \u0022L\u0022, \u0022XL\u0022, \u0022X\u0022, \u0022IX\u0022, \u0022V\u0022, \u0022IV\u0022, \u0022I\u0022 };\n    string romanNum = string.Empty;\n    int i = 0;\n    while (num \u003E 0) {\n        for (int j = 0; j \u003C num / val[i]; j\u002B\u002B) {\n            romanNum \u002B= syb[i];\n            num -= val[i];\n        }\n        i\u002B\u002B;\n    }\n    return romanNum;\n}","task_id":958,"test_setup_code":"","test_list":["Debug.Assert(IntToRoman(1) == \u0022I\u0022);","Debug.Assert(IntToRoman(50) == \u0022L\u0022);","Debug.Assert(IntToRoman(4) == \u0022IV\u0022);"],"challenge_test_list":[]}
{"name":"average-of-list","description":"Calculate the average of numbers in a list","text":"Write a C# function to find the average of a list.","code":"public static double Average(List\u003Cdouble\u003E lst) \n{ \n    return lst.Sum() / lst.Count; \n}","task_id":959,"test_setup_code":"","test_list":["Debug.Assert(Average(new double[] { 15, 9, 55, 41, 35, 20, 62, 49 }) == 35.75);","Debug.Assert(Average(new double[] { 4, 5, 1, 2, 9, 7, 10, 8 }) == 5.75);","Debug.Assert(Average(new int[]{1, 2, 3}) == 2);"],"challenge_test_list":[]}
{"name":"tiling-solver","description":"Function to solve the tiling problem efficiently","text":"Write a function to solve tiling problem.","code":"public int GetNoOfWays(int n) \n{\n    if (n == 0) \n    {\n        return 0;\n    }\n    if (n == 1) \n    {\n        return 1;\n    }\n    return GetNoOfWays(n - 1) \u002B GetNoOfWays(n - 2);\n}","task_id":960,"test_setup_code":"","test_list":["Debug.Assert(GetNoOfWays(4) == 3);","Debug.Assert(GetNoOfWays(3) == 2);","Debug.Assert(GetNoOfWays(5) == 5);"],"challenge_test_list":[]}
{"name":"roman-to-integer","description":"Convert a roman numeral to its integer value","text":"Write a function to convert a roman numeral to an integer.","code":"public int RomanToInt(string s) {\n    var romVal = new Dictionary\u003Cchar, int\u003E {\n        { \u0027I\u0027, 1 }, { \u0027V\u0027, 5 }, { \u0027X\u0027, 10 }, { \u0027L\u0027, 50 },\n        { \u0027C\u0027, 100 }, { \u0027D\u0027, 500 }, { \u0027M\u0027, 1000 }\n    };\n    int intVal = 0;\n    for (int i = 0; i \u003C s.Length; i\u002B\u002B) {\n        if (i \u003E 0 \u0026\u0026 romVal[s[i]] \u003E romVal[s[i - 1]]) {\n            intVal \u002B= romVal[s[i]] - 2 * romVal[s[i - 1]];\n        } else {\n            intVal \u002B= romVal[s[i]];\n        }\n    }\n    return intVal;\n}","task_id":961,"test_setup_code":"","test_list":["Debug.Assert(RomanToInt(\u0022MMMCMLXXXVI\u0022) == 3986);","Debug.Assert(RomanToInt(\u0022MMMM\u0022) == 4000);","Debug.Assert(RomanToInt(\u0022C\u0022) == 100);"],"challenge_test_list":[]}
{"name":"even-sum-l-r","description":"Sum even natural numbers between two ranges","text":"Write a C# function to find the sum of all even natural numbers within the range l and r.","code":"public int SumNatural(int n) \n{ \n    int sum = (n * (n \u002B 1)); \n    return sum; \n} \n\npublic int SumEven(int l, int r) \n{ \n    return (SumNatural(r / 2) - SumNatural((l - 1) / 2)); \n}","task_id":962,"test_setup_code":"","test_list":["Debug.Assert(SumEven(2, 5) == 6);","Debug.Assert(SumEven(3, 8) == 18);","Debug.Assert(SumEven(4, 6) == 10);"],"challenge_test_list":[]}
{"name":"discriminant-calc","description":"Calculate the discriminant for quadratic equations","text":"Write a function to calculate the discriminant value.","code":"public (string, double) DiscriminantValue(double x, double y, double z) {\n    double discriminant = (y * y) - (4 * x * z);\n    if (discriminant \u003E 0) {\n        return (\u0022Two solutions\u0022, discriminant);\n    } else if (discriminant == 0) {\n        return (\u0022one solution\u0022, discriminant);\n    } else {\n        return (\u0022no real solution\u0022, discriminant);\n    }\n}","task_id":963,"test_setup_code":"","test_list":["Debug.Assert(DiscriminantValue(4, 8, 2) == (\u0022Two solutions\u0022, 32));","Debug.Assert(DiscriminantValue(5, 7, 9).Equals((\u0022no real solution\u0022, -131)));","Debug.Assert(DiscriminantValue(0, 0, 9).Item1 == \u0022one solution\u0022 \u0026\u0026 DiscriminantValue(0, 0, 9).Item2 == 0);"],"challenge_test_list":[]}
{"name":"check-word-length","description":"Check if the word length is even or odd","text":"Write a C# function to check whether the length of the word is even or not.","code":"public bool WordLen(string s) \n{ \n    var words = s.Split(\u0027 \u0027); \n    foreach (var word in words) \n    { \n        if (word.Length % 2 == 0) \n        { \n            return true; \n        } \n        else \n        { \n            return false; \n        } \n    } \n    return false; \n}","task_id":964,"test_setup_code":"","test_list":["Debug.Assert(WordLen(\u0022program\u0022) == false);","Debug.Assert(WordLen(\u0022solution\u0022) == true);","Debug.Assert(WordLen(\u0022data\u0022) == true);"],"challenge_test_list":[]}
{"name":"camel-to-snake","description":"Convert camel case to snake case string","text":"Write a function to convert camel case string to snake case string.","code":"public static string CamelToSnake(string text)\n{\n    var str1 = Regex.Replace(text, @\u0022(.)([A-Z][a-z]\u002B)\u0022, \u0022$1_$2\u0022);\n    return Regex.Replace(str1, \u0022([a-z0-9])([A-Z])\u0022, \u0022$1_$2\u0022).ToLower();\n}","task_id":965,"test_setup_code":"","test_list":["Debug.Assert(CamelToSnake(\u0022PythonProgram\u0022) == \u0022python_program\u0022);","Debug.Assert(CamelToSnake(\u0022pythonLanguage\u0022) == \u0022python_language\u0022);","Debug.Assert(CamelToSnake(\u0022ProgrammingLanguage\u0022) == \u0022programming_language\u0022);"],"challenge_test_list":[]}
{"name":"remove-empty-tuple","description":"Remove empty tuples from a list of tuples","text":"Write a function to remove an empty tuple from a list of tuples.","code":"public List\u003CTuple\u003Cstring\u003E\u003E RemoveEmpty(List\u003CTuple\u003Cstring\u003E\u003E tuple1) // L = new List\u003CTuple\u003Cstring\u003E\u003E { Tuple.Create(), Tuple.Create(), Tuple.Create(string.Empty), Tuple.Create(\u0022a\u0022, \u0022b\u0022), Tuple.Create(\u0022a\u0022, \u0022b\u0022, \u0022c\u0022), Tuple.Create(\u0022d\u0022) }\n{\n    tuple1 = tuple1.Where(t =\u003E t.Item1 != null \u0026\u0026 t.Item1.Count \u003E 0).ToList();\n    return tuple1;\n}","task_id":966,"test_setup_code":"","test_list":["Debug.Assert(RemoveEmpty(new object[][] { new object[] { }, new object[] { }, new object[] { \u0022\u0022 }, new object[] { \u0022a\u0022, \u0022b\u0022 }, new object[] { \u0022a\u0022, \u0022b\u0022, \u0022c\u0022 }, new object[] { \u0022d\u0022 } }).SequenceEqual(new object[][] { new object[] { \u0022\u0022 }, new object[] { \u0022a\u0022, \u0022b\u0022 }, new object[] { \u0022a\u0022, \u0022b\u0022, \u0022c\u0022 }, new object[] { \u0022d\u0022 } }));","Debug.Assert(RemoveEmpty(new object[] { new object[] { }, new object[] { }, new object[] { \u0022\u0022 }, \u0022python\u0022, \u0022program\u0022 }).SequenceEqual(new object[] { new object[] { \u0022\u0022 }, \u0022python\u0022, \u0022program\u0022 }));","Debug.Assert(RemoveEmpty(new object[] { new Tuple\u003Cobject\u003E[] { }, new Tuple\u003Cobject\u003E[] { }, new Tuple\u003Cobject\u003E[] { \u0022\u0022, }, \u0022java\u0022 }).SequenceEqual(new object[] { new Tuple\u003Cobject\u003E[] { \u0022\u0022, }, \u0022java\u0022 }));"],"challenge_test_list":[]}
{"name":"vowel-string-check","description":"Function to check strings for all vowels","text":"Write a C# function to accept the strings which contains all vowels.","code":"public string Check(string input) \n{ \n    if (input.ToCharArray().Distinct().Intersect(\u0022AEIOUaeiou\u0022).Count() \u003E= 5) \n    { \n        return \u0022accepted\u0022; \n    } \n    else \n    { \n        return \u0022not accepted\u0022; \n    } \n}","task_id":967,"test_setup_code":"","test_list":["Debug.Assert(Check(\u0022SEEquoiaL\u0022) == \u0022accepted\u0022);","Debug.Assert(Check(\u0022program\u0022) == \u0022not accepted\u0022);","Debug.Assert(Check(\u0022fine\u0022) == \u0022not accepted\u0022);"],"challenge_test_list":[]}
{"name":"max-periodic-val","description":"Find max value for a periodic function in Python","text":"Write a C# function to find maximum possible value for the given periodic function.","code":"public static int Floor_Max(int A, int B, int N) {\n    int x = Math.Min(B - 1, N);\n    return (A * x) / B;\n}","task_id":968,"test_setup_code":"","test_list":["Debug.Assert(Floor_Max(11, 10, 9) == 9);","Debug.Assert(Floor_Max(5, 7, 4) == 2);","Debug.Assert(Floor_Max(2, 2, 1) == 1);"],"challenge_test_list":[]}
{"name":"join-similar-tups","description":"Join tuples by matching their initial elements","text":"Write a function to join the tuples if they have similar initial elements.","code":"public List\u003CTuple\u003Cint, int\u003E\u003E JoinTuples(List\u003CTuple\u003Cint, int\u003E\u003E testList) {\n    List\u003CList\u003Cint\u003E\u003E res = new List\u003CList\u003Cint\u003E\u003E();\n    foreach (var sub in testList) {\n        if (res.Count \u003E 0 \u0026\u0026 res[res.Count - 1][0] == sub.Item1) {\n            res[res.Count - 1].AddRange(sub.ToList().GetRange(1, sub.Item2 - 1));\n        } else {\n            res.Add(new List\u003Cint\u003E(sub.ToList()));\n        }\n    }\n    return res.Select(x =\u003E Tuple.Create(x.ToArray())).ToList();\n}","task_id":969,"test_setup_code":"","test_list":["Debug.Assert(JoinTuples(new (int, int)[] { (5, 6), (5, 7), (6, 8), (6, 10), (7, 13) }).SequenceEqual(new (int, int, int)[] { (5, 6, 7), (6, 8, 10), (7, 13) }));","Debug.Assert(JoinTuples(new List\u003CTuple\u003Cint, int\u003E\u003E() { Tuple.Create(6, 7), Tuple.Create(6, 8), Tuple.Create(7, 9), Tuple.Create(7, 11), Tuple.Create(8, 14) }).SequenceEqual(new List\u003CTuple\u003Cint, int\u003E\u003E() { Tuple.Create(6, 7, 8), Tuple.Create(7, 9, 11), Tuple.Create(8, 14) }));","Debug.Assert(JoinTuples(new List\u003CTuple\u003Cint, int\u003E\u003E { Tuple.Create(7, 8), Tuple.Create(7, 9), Tuple.Create(8, 10), Tuple.Create(8, 12), Tuple.Create(9, 15) }).SequenceEqual(new List\u003CTuple\u003Cint, int\u003E\u003E { Tuple.Create(7, 8, 9), Tuple.Create(8, 10, 12), Tuple.Create(9, 15) }));"],"challenge_test_list":[]}
{"name":"min-of-two.py","description":"Function to determine the smaller of two numbers","text":"Write a function to find minimum of two numbers.","code":"public static int MinOfTwo(int x, int y)  \n{  \n    if (x \u003C y)  \n    {  \n        return x;  \n    }  \n    return y;  \n}","task_id":970,"test_setup_code":"","test_list":["Debug.Assert(MinOfTwo(10, 20) == 10);\n\nint MinOfTwo(int a, int b) \n{\n    return (a \u003C b) ? a : b;\n}","Debug.Assert(MinOfTwo(19, 15) == 15);","Debug.Assert(MinOfTwo(-10, -20) == -20);\n\npublic int MinOfTwo(int a, int b)\n{\n    return a \u003C b ? a : b;\n}"],"challenge_test_list":[]}
{"name":"max-segments-n","description":"Maximize segments from given lengths using n","text":"Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.","code":"public int MaximumSegments(int n, int a, int b, int c) \n{\n    int[] dp = new int[n \u002B 10];\n    for (int i = 0; i \u003C dp.Length; i\u002B\u002B) \n    {\n        dp[i] = -1;\n    }\n    dp[0] = 0;\n\n    for (int i = 0; i \u003C n; i\u002B\u002B) \n    {\n        if (dp[i] != -1) \n        {\n            if (i \u002B a \u003C= n) \n            {\n                dp[i \u002B a] = Math.Max(dp[i] \u002B 1, dp[i \u002B a]);\n            }\n            if (i \u002B b \u003C= n) \n            {\n                dp[i \u002B b] = Math.Max(dp[i] \u002B 1, dp[i \u002B b]);\n            }\n            if (i \u002B c \u003C= n) \n            {\n                dp[i \u002B c] = Math.Max(dp[i] \u002B 1, dp[i \u002B c]);\n            }\n        }\n    }\n    return dp[n];\n}","task_id":971,"test_setup_code":"","test_list":["Debug.Assert(MaximumSegments(7, 5, 2, 5) == 2);","Debug.Assert(MaximumSegments(17, 2, 1, 3) == 17);","Debug.Assert(MaximumSegments(18, 16, 3, 6) == 6);"],"challenge_test_list":[]}
{"name":"concat-tuples-nest","description":"Concatenate two tuples into a nested tuple structure","text":"Write a function to concatenate the given two tuples to a nested tuple.","code":"public Tuple\u003Cstring, string\u003E ConcatenateNested(Tuple\u003Cstring, string\u003E testTup1, Tuple\u003Cstring, string\u003E testTup2) \n{\n    var res = Tuple.Create(testTup1.Item1 \u002B testTup2.Item1, testTup1.Item2 \u002B testTup2.Item2);\n    return res;\n}","task_id":972,"test_setup_code":"","test_list":["Debug.Assert(ConcatenateNested((3, 4), (5, 6)).SequenceEqual(new Tuple\u003Cint, int, int, int\u003E(3, 4, 5, 6)));","Debug.Assert(ConcatenateNested(new Tuple\u003Cint, int\u003E(1, 2), new Tuple\u003Cint, int\u003E(3, 4)).SequenceEqual(new Tuple\u003Cint, int\u003E(1, 2, 3, 4)));","Debug.Assert(ConcatenateNested((4, 5), (6, 8)).SequenceEqual(new int[] { 4, 5, 6, 8 }));"],"challenge_test_list":[]}
{"name":"left-rotate-str","description":"Left rotate a string using a Python function","text":"Write a C# function to left rotate the string.","code":"string LeftRotate(string s, int d) {\n    string tmp = s.Substring(d) \u002B s.Substring(0, d);\n    return tmp;\n}","task_id":973,"test_setup_code":"","test_list":["Debug.Assert(LeftRotate(\u0022python\u0022, 2) == \u0022thonpy\u0022);","Debug.Assert(LeftRotate(\u0022bigdata\u0022, 3) == \u0022databig\u0022);","Debug.Assert(LeftRotate(\u0022hadoop\u0022, 1) == \u0022adooph\u0022);"],"challenge_test_list":[]}
{"name":"min-path-sum-triangle","description":"Find minimum path sum in a triangle structure","text":"Write a function to find the minimum total path sum in the given triangle.","code":"public int MinSumPath(int[][] A) \n{\n    int[] memo = new int[A.Length];\n    int n = A.Length - 1;\n    for (int i = 0; i \u003C A[n].Length; i\u002B\u002B) \n    {\n        memo[i] = A[n][i];\n    }\n    for (int i = A.Length - 2; i \u003E= 0; i--) \n    {\n        for (int j = 0; j \u003C A[i].Length; j\u002B\u002B) \n        {\n            memo[j] = A[i][j] \u002B Math.Min(memo[j], memo[j \u002B 1]);\n        }\n    }\n    return memo[0];\n}","task_id":974,"test_setup_code":"","test_list":["Debug.Assert(MinSumPath(new int[][] { new int[] { 2 }, new int[] { 3, 9 }, new int[] { 1, 6, 7 } }) == 6);","Debug.Assert(MinSumPath(new int[][] { new int[] { 2 }, new int[] { 3, 7 }, new int[] { 8, 5, 6 } }) == 10);","Debug.Assert(MinSumPath(new int[][] { new int[] { 3 }, new int[] { 6, 4 }, new int[] { 5, 2, 7 } }) == 9);"],"challenge_test_list":[]}
